text,is_bold,font_size,font_size_rank,centeredness,spacing_before,spacing_after,is_valid_length,page_no
Go Web Programming,1,12,0.45,0.36,0.0,0.0,1,1
ii,1,9,0.39,0.06,0.0,0.0,0,2
Go Web Programming,1,48,1.0,0.07,0.0,0.14,1,3
SAU SHEONG CHANG,0,12,0.54,0.61,0.14,0.27,1,3
M A N N I N G,0,12,0.4,0.71,0.27,0.01,1,3
S I,0,10,0.14,0.71,0.01,0.0,0,3
HELTER SLAND,0,8,0.19,0.72,0.0,0.0,1,3
iv,1,9,0.39,0.06,0.0,0.03,0,4
"For online information and ordering of this and other Manning books, please visit",0,9,0.21,0.06,0.03,0.0,0,4
www.manning.com . The publisher offers discounts on this book when ordered in quantity.,0,9,0.21,0.06,0.0,0.0,0,4
"For more information, please contact",0,9,0.3,0.06,0.0,0.01,1,4
Special Sales Department,0,9,0.3,0.1,0.01,0.0,1,4
Manning Publications Co.,0,9,0.3,0.1,0.0,0.0,1,4
20 Baldwin Road,0,9,0.3,0.1,0.0,0.0,1,4
PO Box 761,0,9,0.3,0.1,0.0,0.0,1,4
"Shelter Island, NY 11964",0,9,0.3,0.1,0.0,0.0,1,4
Email: orders@manning.com,0,9,0.3,0.1,0.0,0.04,1,4
©2016 by Manning Publications Co. All rights reserved.,0,9,0.3,0.06,0.04,0.04,1,4
"No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in",0,9,0.21,0.06,0.04,0.0,0,4
"any form or by means electronic, mechanical, photocopying, or otherwise, without prior written",0,9,0.21,0.06,0.0,0.0,0,4
permission of the publisher.,0,9,0.3,0.06,0.0,0.03,1,4
Many of the designations used by manufacturers and sellers to distinguish their products are,0,9,0.21,0.06,0.03,0.0,0,4
"claimed as trademarks. Where those designations appear in the book, and Manning",0,9,0.21,0.06,0.0,0.0,0,4
"Publications was aware of a trademark claim, the designations have been printed in initial caps",0,9,0.21,0.06,0.0,0.0,0,4
or all caps.,0,9,0.3,0.06,0.0,0.03,1,4
"Recognizing the importance of preserving what has been written, it is Manning’s policy to have",0,9,0.21,0.06,0.03,0.0,0,4
"the books we publish printed on acid-free paper, and we exert our best efforts to that end.",0,9,0.21,0.06,0.0,0.0,0,4
"Recognizing also our responsibility to conserve the resources of our planet, Manning books are",0,9,0.21,0.06,0.0,0.0,0,4
printed on paper that is at least 15 percent recycled and processed without elemental chlorine.,0,9,0.21,0.06,0.0,0.06,0,4
Manning Publications Co.,0,9,0.3,0.1,0.06,0.0,1,4
Development editor: Marina Michaels,0,9,0.21,0.47,0.0,0.0,1,4
20 Baldwin Road,0,9,0.3,0.1,0.0,0.0,1,4
Technical development editors: Glenn Burnside,0,9,0.21,0.39,0.0,0.0,1,4
PO Box 761,0,9,0.3,0.1,0.0,0.0,1,4
Michael Williams,0,9,0.21,0.63,0.0,0.0,1,4
"Shelter Island, NY 11964",0,9,0.3,0.1,0.0,0.0,1,4
Review editor: Ozren Harlovic,0,9,0.21,0.52,0.0,0.0,1,4
Project editor: Kevin Sullivan,0,9,0.21,0.52,0.0,0.0,1,4
Copyeditor: Liz Welch,0,9,0.21,0.54,0.0,0.0,1,4
Proofreader: Elizabeth Martin,0,9,0.21,0.53,0.0,0.0,1,4
Technical proofreader: Jimmy Frasché,0,9,0.21,0.45,0.0,0.0,1,4
Typesetter: Marija Tudor,0,9,0.21,0.54,0.0,0.0,1,4
Cover designer: Marija Tudor,0,9,0.21,0.51,0.0,0.05,1,4
ISBN: 9781617292569,0,9,0.3,0.06,0.05,0.0,1,4
Printed in the United States of America,0,9,0.3,0.06,0.0,0.0,1,4
1 2 3 4 5 6 7 8 9 10 – EBM – 21 20 19 18 17 16,0,9,0.3,0.06,0.0,0.0,1,4
brief contents,1,30,0.79,0.56,0.0,0.02,1,5
P 1 G,1,13,0.56,0.07,0.02,0.0,1,5
......................................... 1,1,13,0.47,0.49,0.0,0.0,1,5
ART O AND WEB,1,11,0.52,0.09,0.0,0.0,1,5
APPLICATIONS,1,11,0.43,0.33,0.0,0.01,1,5
1,1,9,0.3,0.24,0.01,0.0,0,5
Go and web applications,0,10,0.23,0.3,0.0,0.0,1,5
3,0,10,0.14,0.54,0.0,0.0,0,5
■,0,3,0.0,0.28,0.0,0.01,0,5
2,1,9,0.3,0.24,0.01,0.0,0,5
Go ChitChat 22,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.03,0,5
P 2 B,1,13,0.56,0.07,0.03,0.0,1,5
.......................................... 45,1,13,0.47,0.46,0.0,0.0,1,5
ART ASIC WEB,1,11,0.52,0.09,0.0,0.0,1,5
APPLICATIONS,1,11,0.43,0.3,0.0,0.01,1,5
3,1,9,0.3,0.24,0.01,0.0,0,5
Handling requests 47,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.01,0,5
4,1,9,0.3,0.24,0.01,0.0,0,5
Processing requests 69,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.01,0,5
5,1,9,0.3,0.24,0.01,0.0,0,5
Displaying content 96,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.01,0,5
6 ■,1,9,0.3,0.24,0.01,0.0,0,5
Storing data 125,0,10,0.23,0.3,0.0,0.02,1,5
P 3 B,1,13,0.56,0.07,0.02,0.0,1,5
............................................................ 153,1,13,0.47,0.31,0.0,0.0,1,5
ART EING REAL,1,11,0.52,0.09,0.0,0.01,1,5
7,1,9,0.3,0.24,0.01,0.0,0,5
Go web services 155,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.01,0,5
8,1,9,0.3,0.24,0.01,0.0,0,5
Testing your application,0,10,0.23,0.3,0.0,0.0,1,5
190,0,10,0.14,0.54,0.0,0.0,0,5
■,0,3,0.0,0.28,0.0,0.01,0,5
9,1,9,0.3,0.24,0.01,0.0,0,5
Leveraging Go concurrency,0,10,0.23,0.3,0.0,0.0,1,5
223,0,10,0.14,0.57,0.0,0.0,0,5
■,0,3,0.0,0.28,0.0,0.01,0,5
10,1,9,0.3,0.23,0.01,0.0,0,5
Deploying Go 256,0,10,0.23,0.3,0.0,0.0,1,5
■,0,3,0.0,0.28,0.0,0.0,0,5
vi,1,9,0.39,0.06,0.0,0.0,0,6
BRIEF CONTENTS,1,6,0.33,0.39,0.0,0.0,1,6
contents,1,30,0.79,0.67,0.0,0.02,1,7
preface xiii,1,9,0.39,0.23,0.02,0.0,1,7
acknowledgments xv,1,9,0.39,0.23,0.0,0.0,1,7
about this book xvii,1,9,0.39,0.23,0.0,0.0,1,7
about the cover illustration,1,9,0.39,0.23,0.0,0.0,1,7
xx,1,9,0.3,0.44,0.0,0.04,0,7
P ART 1 G O AND,1,15,0.6,0.07,0.04,0.0,1,7
............................. 1,1,15,0.5,0.56,0.0,0.0,1,7
WEB APPLICATIONS,1,12,0.45,0.32,0.0,0.02,1,7
1,1,27,0.74,0.17,0.02,0.0,0,7
Go and web applications,1,12,0.45,0.21,0.0,0.0,1,7
3,1,12,0.36,0.48,0.0,0.01,0,7
1.1 Using Go for web applications,0,10,0.23,0.23,0.01,0.0,1,7
4,0,10,0.14,0.58,0.0,0.01,0,7
Scalable web applications and Go,1,9,0.39,0.3,0.01,0.0,1,7
4 Modular web,1,9,0.39,0.56,0.0,0.0,1,7
■,0,3,0.0,0.58,0.0,0.01,0,7
applications and Go 5,1,9,0.39,0.3,0.01,0.0,1,7
Maintainable web applications and,1,9,0.39,0.5,0.0,0.0,1,7
■,0,3,0.0,0.49,0.0,0.01,0,7
Go 5 High performing web applications and Go,1,9,0.39,0.3,0.01,0.0,1,7
6,1,9,0.3,0.7,0.0,0.0,0,7
■,0,3,0.0,0.36,0.0,0.02,0,7
1.2 How web applications work,0,10,0.23,0.23,0.02,0.0,1,7
6,0,10,0.14,0.55,0.0,0.01,0,7
1.3 A quick introduction to HTTP,0,10,0.23,0.23,0.01,0.0,1,7
8,0,10,0.14,0.57,0.0,0.01,0,7
1.4 The coming of web applications,0,10,0.23,0.23,0.01,0.0,1,7
8,0,10,0.14,0.59,0.0,0.01,0,7
1.5 HTTP request 9,0,10,0.23,0.23,0.01,0.01,1,7
Request methods 10 Safe request methods,1,9,0.39,0.3,0.01,0.0,1,7
11 Idempotent,1,9,0.39,0.65,0.0,0.0,1,7
■,0,3,0.0,0.47,0.0,0.0,0,7
■,0,3,0.0,0.68,0.0,0.01,0,7
request methods 11 Browser support for request methods,1,9,0.39,0.3,0.01,0.0,1,7
11,1,9,0.3,0.75,0.0,0.0,0,7
■,0,3,0.0,0.46,0.0,0.01,0,7
Request headers 11,1,9,0.39,0.3,0.01,0.0,1,7
viii,1,9,0.48,0.06,0.0,0.0,1,8
CONTENTS,1,6,0.33,0.41,0.0,0.03,1,8
1.6 HTTP response,0,10,0.23,0.21,0.03,0.0,1,8
12,0,10,0.14,0.42,0.0,0.01,0,8
Response status code 13,1,9,0.39,0.28,0.01,0.0,1,8
Response headers 13,1,9,0.39,0.49,0.0,0.0,1,8
■,0,3,0.0,0.48,0.0,0.02,0,8
1.7 URI 14,0,10,0.23,0.21,0.02,0.01,1,8
1.8 Introducing HTTP/2,0,10,0.23,0.21,0.01,0.0,1,8
16,0,10,0.14,0.47,0.0,0.01,0,8
1.9 Parts of a web app,0,10,0.23,0.21,0.01,0.0,1,8
16,0,10,0.14,0.44,0.0,0.01,0,8
Handler 16 Template engine,1,9,0.39,0.28,0.01,0.0,1,8
17,1,9,0.3,0.55,0.0,0.0,0,8
■,0,3,0.0,0.39,0.0,0.02,0,8
1.10 Hello Go 18,0,10,0.32,0.2,0.02,0.01,1,8
1.11 Summary 21,0,10,0.32,0.2,0.01,0.02,1,8
2,1,27,0.74,0.15,0.02,0.0,0,8
Go ChitChat 22,1,12,0.54,0.19,0.0,0.01,1,8
2.1 Let’s ChitChat,0,10,0.23,0.21,0.01,0.0,1,8
23,0,10,0.14,0.41,0.0,0.01,0,8
2.2 Application design,0,10,0.23,0.21,0.01,0.0,1,8
24,0,10,0.14,0.45,0.0,0.01,0,8
2.3 Data model 26,0,10,0.23,0.21,0.01,0.01,1,8
2.4 Receiving and processing requests,0,10,0.23,0.21,0.01,0.0,1,8
27,0,10,0.14,0.59,0.0,0.01,0,8
The multiplexer 27 Serving static files,1,9,0.39,0.28,0.01,0.0,1,8
28 Creating the,1,9,0.39,0.61,0.0,0.0,1,8
■ ■,0,3,0.0,0.45,0.0,0.01,0,8
handler function 28 Access control using cookies,1,9,0.39,0.28,0.01,0.0,1,8
30,1,9,0.3,0.69,0.0,0.0,0,8
■,0,3,0.0,0.45,0.0,0.02,0,8
2.5 Generating HTML responses with templates,0,10,0.23,0.21,0.02,0.0,1,8
32,0,10,0.14,0.68,0.0,0.01,0,8
Tidying up 36,1,9,0.39,0.28,0.01,0.01,1,8
2.6 Installing PostgreSQL,0,10,0.23,0.21,0.01,0.0,1,8
37,0,10,0.14,0.48,0.0,0.01,0,8
Linux/FreeBSD 37 Mac OS X,1,9,0.39,0.28,0.01,0.0,1,8
38 Windows 38,1,9,0.39,0.56,0.0,0.0,1,8
■ ■,0,3,0.0,0.45,0.0,0.02,0,8
2.7 Interfacing with the database,0,10,0.23,0.21,0.02,0.0,1,8
38,0,10,0.14,0.54,0.0,0.01,0,8
2.8 Starting the server,0,10,0.23,0.21,0.01,0.0,1,8
43,0,10,0.14,0.45,0.0,0.01,0,8
2.9 Wrapping up 43,0,10,0.23,0.21,0.01,0.01,1,8
2.10 Summary 44,0,10,0.32,0.2,0.01,0.03,1,8
P 2 B,1,15,0.6,0.06,0.03,0.0,1,8
............................... 45,1,15,0.5,0.51,0.0,0.0,1,8
ART ASIC WEB,1,12,0.54,0.1,0.0,0.0,1,8
APPLICATIONS,1,12,0.45,0.34,0.0,0.02,1,8
3,1,27,0.74,0.15,0.02,0.0,0,8
Handling requests,1,12,0.54,0.19,0.0,0.0,1,8
47,1,12,0.36,0.39,0.0,0.01,0,8
3.1 The Go net/http library,0,10,0.23,0.21,0.01,0.0,1,8
48,0,10,0.14,0.5,0.0,0.01,0,8
3.2 Serving Go 50,0,10,0.23,0.21,0.01,0.01,1,8
The Go web server 50 Serving through HTTPS,1,9,0.39,0.28,0.01,0.0,1,8
51,1,9,0.3,0.68,0.0,0.0,0,8
■,0,3,0.0,0.46,0.0,0.02,0,8
3.3 Handlers and handler functions,0,10,0.23,0.21,0.02,0.0,1,8
55,0,10,0.14,0.57,0.0,0.01,0,8
Handling requests 55 More handlers,1,9,0.39,0.28,0.01,0.0,1,8
56 Handler,1,9,0.39,0.6,0.0,0.0,1,8
■ ■,0,3,0.0,0.47,0.0,0.01,0,8
functions 57 Chaining handlers and handler functions,1,9,0.39,0.28,0.01,0.0,1,8
59,1,9,0.3,0.74,0.0,0.0,0,8
■,0,3,0.0,0.4,0.0,0.01,0,8
63 Other multiplexers 64,1,9,0.39,0.54,0.01,0.0,1,8
ServeMux and DefaultServeMux,1,9,0.39,0.28,0.0,0.0,1,8
■,0,3,0.0,0.57,0.0,0.0,0,8
ix,1,9,0.3,0.83,0.0,0.0,0,9
CONTENTS,1,6,0.33,0.43,0.0,0.03,1,9
3.4 Using HTTP/2,0,10,0.23,0.23,0.03,0.0,1,9
66,0,10,0.14,0.44,0.0,0.01,0,9
3.5 Summary 68,0,10,0.23,0.23,0.01,0.02,1,9
4,1,27,0.74,0.17,0.02,0.0,0,9
Processing requests,1,12,0.45,0.21,0.0,0.0,1,9
69,1,12,0.36,0.42,0.0,0.01,0,9
4.1 Requests and responses,0,10,0.23,0.23,0.01,0.0,1,9
69,0,10,0.14,0.51,0.0,0.01,0,9
Request 70 Request URL,1,9,0.39,0.3,0.01,0.0,1,9
70 Request header 71,1,9,0.39,0.53,0.0,0.0,1,9
■ ■,0,3,0.0,0.4,0.0,0.01,0,9
Request body 73,1,9,0.39,0.3,0.01,0.01,1,9
4.2 HTML forms and Go,0,10,0.23,0.23,0.01,0.0,1,9
74,0,10,0.14,0.49,0.0,0.01,0,9
Form 75 PostForm 77,1,9,0.39,0.3,0.01,0.0,1,9
MultipartForm 78 Files,1,9,0.39,0.53,0.0,0.0,1,9
80,1,9,0.3,0.75,0.0,0.0,0,9
■ ■,0,3,0.0,0.39,0.0,0.0,0,9
■,0,3,0.0,0.69,0.0,0.01,0,9
Processing POST requests with JSON body,1,9,0.39,0.3,0.01,0.0,1,9
81,1,9,0.3,0.63,0.0,0.01,0,9
4.3 ResponseWriter,0,10,0.23,0.23,0.01,0.0,1,9
82,0,10,0.14,0.44,0.0,0.01,0,9
Writing to the ResponseWriter,1,9,0.39,0.3,0.01,0.0,1,9
83,1,9,0.3,0.54,0.0,0.01,0,9
4.4 Cookies 87,0,10,0.23,0.23,0.01,0.01,1,9
Cookies with Go 87 Sending cookies to the,1,9,0.39,0.3,0.01,0.0,1,9
■,0,3,0.0,0.46,0.0,0.01,0,9
browser 88 Getting cookies from the browser,1,9,0.39,0.3,0.01,0.0,1,9
90 Using,1,9,0.39,0.66,0.0,0.0,1,9
■,0,3,0.0,0.4,0.0,0.0,0,9
■,0,3,0.0,0.69,0.0,0.01,0,9
cookies for flash messages,1,9,0.39,0.3,0.01,0.0,1,9
92,1,9,0.3,0.5,0.0,0.01,0,9
4.5 Summary 95,0,10,0.23,0.23,0.01,0.02,1,9
5,1,27,0.74,0.17,0.02,0.0,0,9
Displaying content,1,12,0.45,0.21,0.0,0.0,1,9
96,1,12,0.36,0.41,0.0,0.01,0,9
5.1 Templates and template engines,0,10,0.23,0.23,0.01,0.0,1,9
97,0,10,0.14,0.59,0.0,0.01,0,9
5.2 The Go template engine,0,10,0.23,0.23,0.01,0.0,1,9
98,0,10,0.14,0.52,0.0,0.01,0,9
Parsing templates 100,1,9,0.39,0.3,0.01,0.0,1,9
Executing templates 101,1,9,0.39,0.5,0.0,0.0,1,9
■,0,3,0.0,0.49,0.0,0.02,0,9
5.3 Actions 102,0,10,0.23,0.23,0.02,0.01,1,9
Conditional actions 102,1,9,0.39,0.3,0.01,0.0,1,9
Iterator actions 104,1,9,0.39,0.52,0.0,0.0,1,9
■,0,3,0.0,0.5,0.0,0.01,0,9
Set actions 105 Include actions,1,9,0.39,0.3,0.01,0.0,1,9
107,1,9,0.3,0.58,0.0,0.0,0,9
■,0,3,0.0,0.44,0.0,0.02,0,9
"5.4 Arguments, variables, and pipelines",0,10,0.23,0.23,0.02,0.0,1,9
110,0,10,0.14,0.62,0.0,0.01,0,9
5.5 Functions 111,0,10,0.23,0.23,0.01,0.01,1,9
5.6 Context awareness,0,10,0.23,0.23,0.01,0.0,1,9
113,0,10,0.14,0.47,0.0,0.01,0,9
Defending against XSS attacks,1,9,0.39,0.3,0.01,0.0,1,9
116 Unescaping,1,9,0.39,0.54,0.0,0.0,1,9
■,0,3,0.0,0.58,0.0,0.01,0,9
HTML 118,1,9,0.39,0.3,0.01,0.01,1,9
5.7 Nesting templates,0,10,0.23,0.23,0.01,0.0,1,9
119,0,10,0.14,0.46,0.0,0.01,0,9
5.8 Using the block action to define default templates,0,10,0.23,0.23,0.01,0.0,1,9
123,0,10,0.14,0.75,0.0,0.01,0,9
5.9 Summary 124,0,10,0.23,0.23,0.01,0.02,1,9
6,1,27,0.74,0.17,0.02,0.0,0,9
Storing data 125,1,12,0.45,0.21,0.0,0.01,1,9
6.1 In-memory storage,0,10,0.23,0.23,0.01,0.0,1,9
126,0,10,0.14,0.47,0.0,0.0,0,9
x,1,9,0.39,0.06,0.0,0.0,0,10
CONTENTS,1,6,0.33,0.41,0.0,0.03,1,10
6.2 File storage 128,0,10,0.23,0.21,0.03,0.01,1,10
Reading and writing CSV files,1,9,0.39,0.28,0.01,0.0,1,10
130 The gob package 132,1,9,0.39,0.53,0.0,0.0,1,10
■,0,3,0.0,0.56,0.0,0.02,0,10
6.3 Go and SQL 134,0,10,0.23,0.21,0.02,0.01,1,10
Setting up the database 134,1,9,0.39,0.28,0.01,0.0,1,10
Connecting to the,1,9,0.39,0.52,0.0,0.0,1,10
■,0,3,0.0,0.51,0.0,0.01,0,10
database 137 Creating a post,1,9,0.39,0.28,0.01,0.0,1,10
138 Retrieving a,1,9,0.39,0.55,0.0,0.0,1,10
■ ■,0,3,0.0,0.4,0.0,0.01,0,10
post 140 Updating a post,1,9,0.39,0.28,0.01,0.0,1,10
141 Deleting a post 141,1,9,0.39,0.52,0.0,0.0,1,10
■ ■,0,3,0.0,0.37,0.0,0.01,0,10
Getting all posts 142,1,9,0.39,0.28,0.01,0.01,1,10
6.4 Go and SQL relationships,0,10,0.23,0.21,0.01,0.0,1,10
143,0,10,0.14,0.52,0.0,0.01,0,10
Setting up the databases 143,1,9,0.39,0.28,0.01,0.0,1,10
One-to-many relationship,1,9,0.39,0.53,0.0,0.0,1,10
145,1,9,0.3,0.73,0.0,0.0,0,10
■,0,3,0.0,0.51,0.0,0.02,0,10
6.5 Go relational mappers,0,10,0.23,0.21,0.02,0.0,1,10
147,0,10,0.14,0.48,0.0,0.01,0,10
Sqlx 148 Gorm 149,1,9,0.39,0.28,0.01,0.0,1,10
■,0,3,0.0,0.37,0.0,0.02,0,10
6.6 Summary 152,0,10,0.23,0.21,0.02,0.03,1,10
P 3 B,1,15,0.6,0.06,0.03,0.0,1,10
................................................. 153,1,15,0.5,0.34,0.0,0.0,1,10
ART EING REAL,1,12,0.54,0.1,0.0,0.02,1,10
7,1,27,0.74,0.15,0.02,0.0,0,10
Go web services 155,1,12,0.54,0.19,0.0,0.01,1,10
7.1 Introducing web services,0,10,0.23,0.21,0.01,0.0,1,10
155 7.2,0,10,0.23,0.5,0.0,0.01,1,10
Introducing SOAP-based web services,0,10,0.23,0.26,0.01,0.0,1,10
157,0,10,0.14,0.62,0.0,0.01,0,10
7.3 Introducing REST-based web services,0,10,0.23,0.21,0.01,0.0,1,10
160,0,10,0.14,0.62,0.0,0.01,0,10
Convert action to a resource,1,9,0.39,0.28,0.01,0.0,1,10
162 Make the action a property,1,9,0.39,0.5,0.0,0.0,1,10
■,0,3,0.0,0.54,0.0,0.01,0,10
of the resource 163,1,9,0.39,0.28,0.01,0.01,1,10
7.4 Parsing and creating XML with Go,0,10,0.23,0.21,0.01,0.0,1,10
163,0,10,0.14,0.59,0.0,0.01,0,10
Parsing XML 163 Creating XML,1,9,0.39,0.28,0.01,0.0,1,10
171,1,9,0.3,0.58,0.0,0.0,0,10
■,0,3,0.0,0.44,0.0,0.02,0,10
7.5 Parsing and creating JSON with Go,0,10,0.23,0.21,0.02,0.0,1,10
174,0,10,0.14,0.6,0.0,0.01,0,10
Parsing JSON 175 Creating JSON,1,9,0.39,0.28,0.01,0.0,1,10
178,1,9,0.3,0.59,0.0,0.0,0,10
■,0,3,0.0,0.44,0.0,0.02,0,10
7.6 Creating Go web services,0,10,0.23,0.21,0.02,0.0,1,10
181,0,10,0.14,0.51,0.0,0.01,0,10
7.7 Summary 188,0,10,0.23,0.21,0.01,0.02,1,10
8,1,27,0.74,0.15,0.02,0.0,0,10
Testing your application,1,12,0.54,0.19,0.0,0.0,1,10
190,1,12,0.36,0.46,0.0,0.01,0,10
8.1 Go and testing,0,10,0.23,0.21,0.01,0.0,1,10
191,0,10,0.14,0.41,0.0,0.01,0,10
8.2 Unit testing with Go,0,10,0.23,0.21,0.01,0.0,1,10
191,0,10,0.14,0.46,0.0,0.01,0,10
Skipping test cases 195,1,9,0.39,0.28,0.01,0.0,1,10
Running tests in parallel,1,9,0.39,0.49,0.0,0.0,1,10
196,1,9,0.3,0.69,0.0,0.0,0,10
■,0,3,0.0,0.47,0.0,0.01,0,10
Benchmarking 197,1,9,0.39,0.28,0.01,0.01,1,10
8.3 HTTP testing with Go,0,10,0.23,0.21,0.01,0.0,1,10
200,0,10,0.14,0.48,0.0,0.01,0,10
8.4 Test doubles and dependency injection,0,10,0.23,0.21,0.01,0.0,1,10
204,0,10,0.14,0.64,0.0,0.01,0,10
Dependency injection with Go,1,9,0.39,0.28,0.01,0.0,1,10
205,1,9,0.3,0.52,0.0,0.0,0,10
xi,1,9,0.3,0.83,0.0,0.0,0,11
CONTENTS,1,6,0.33,0.43,0.0,0.03,1,11
8.5 Third-party Go testing libraries,0,10,0.23,0.23,0.03,0.0,1,11
210,0,10,0.14,0.58,0.0,0.01,0,11
Introducing the gocheck testing package,1,9,0.39,0.3,0.01,0.0,1,11
211 Introducing the,1,9,0.39,0.6,0.0,0.0,1,11
■,0,3,0.0,0.64,0.0,0.01,0,11
Ginkgo testing framework,1,9,0.39,0.3,0.01,0.0,1,11
216,1,9,0.3,0.51,0.0,0.01,0,11
8.6 Summary 221,0,10,0.23,0.23,0.01,0.02,1,11
9,1,27,0.74,0.17,0.02,0.0,0,11
Leveraging Go concurrency,1,12,0.45,0.21,0.0,0.0,1,11
223,1,12,0.36,0.5,0.0,0.01,0,11
9.1 Concurrency isn’t parallelism,0,10,0.23,0.23,0.01,0.0,1,11
223,0,10,0.14,0.56,0.0,0.01,0,11
9.2 Goroutines 225,0,10,0.23,0.23,0.01,0.01,1,11
Using goroutines 225 Goroutines and performance,1,9,0.39,0.3,0.01,0.0,1,11
228,1,9,0.3,0.72,0.0,0.0,0,11
■,0,3,0.0,0.48,0.0,0.01,0,11
Waiting for goroutines 231,1,9,0.39,0.3,0.01,0.01,1,11
9.3 Channels 232,0,10,0.23,0.23,0.01,0.01,1,11
Synchronization with channels,1,9,0.39,0.3,0.01,0.0,1,11
233 Message passing with,1,9,0.39,0.54,0.0,0.0,1,11
■,0,3,0.0,0.58,0.0,0.01,0,11
channels 234 Buffered channels,1,9,0.39,0.3,0.01,0.0,1,11
235 Selecting,1,9,0.39,0.59,0.0,0.0,1,11
■,0,3,0.0,0.42,0.0,0.0,0,11
■,0,3,0.0,0.62,0.0,0.01,0,11
channels 237,1,9,0.39,0.3,0.01,0.01,1,11
9.4 Concurrency for web applications,0,10,0.23,0.23,0.01,0.0,1,11
240,0,10,0.14,0.6,0.0,0.01,0,11
Creating the photo mosaic,1,9,0.39,0.3,0.01,0.0,1,11
240 The photo mosaic web,1,9,0.39,0.51,0.0,0.0,1,11
■,0,3,0.0,0.55,0.0,0.01,0,11
application 243 Concurrent photo mosaic web,1,9,0.39,0.3,0.01,0.0,1,11
■,0,3,0.0,0.44,0.0,0.01,0,11
application 247,1,9,0.39,0.3,0.01,0.01,1,11
9.5 Summary 254,0,10,0.23,0.23,0.01,0.02,1,11
10,1,27,0.74,0.14,0.02,0.0,0,11
Deploying Go 256,1,12,0.45,0.21,0.0,0.01,1,11
10.1 Deploying to servers,0,10,0.23,0.22,0.01,0.0,1,11
257,0,10,0.14,0.48,0.0,0.01,0,11
10.2 Deploying to Heroku,0,10,0.23,0.22,0.01,0.0,1,11
263,0,10,0.14,0.49,0.0,0.01,0,11
10.3 Deploying to Google App Engine,0,10,0.23,0.22,0.01,0.0,1,11
266,0,10,0.14,0.6,0.0,0.01,0,11
10.4 Deploying to Docker,0,10,0.23,0.22,0.01,0.0,1,11
271,0,10,0.14,0.49,0.0,0.01,0,11
What is Docker? 271 Installing Docker,1,9,0.39,0.3,0.01,0.0,1,11
272 Docker,1,9,0.39,0.63,0.0,0.0,1,11
■ ■,0,3,0.0,0.48,0.0,0.01,0,11
concepts and components,1,9,0.39,0.3,0.01,0.0,1,11
273 Dockerizing a Go web,1,9,0.39,0.5,0.0,0.0,1,11
■,0,3,0.0,0.54,0.0,0.01,0,11
application 274 Pushing your Docker container to the,1,9,0.39,0.3,0.01,0.0,1,11
■,0,3,0.0,0.44,0.0,0.01,0,11
internet 276,1,9,0.39,0.3,0.01,0.01,1,11
10.5 Comparison of deployment methods,0,10,0.23,0.22,0.01,0.0,1,11
279,0,10,0.14,0.63,0.0,0.01,0,11
10.6 Summary 280,0,10,0.23,0.22,0.01,0.02,1,11
appendix Installing and setting up Go,1,10,0.5,0.18,0.02,0.0,1,11
281,1,10,0.32,0.53,0.0,0.02,0,11
index 285,1,10,0.41,0.28,0.02,0.0,1,11
xii,1,9,0.39,0.06,0.0,0.0,0,12
CONTENTS,1,6,0.33,0.41,0.0,0.0,1,12
preface,1,30,0.79,0.69,0.0,0.02,1,13
Web applications have been around in one form or another since the beginning of,0,9,0.21,0.14,0.02,0.0,0,13
the World Wide Web in the mid-1990s. They started by only delivering static web pages,0,9,0.21,0.14,0.0,0.0,0,13
but soon escalated and evolved into a dizzying variety of dynamic systems delivering,0,9,0.21,0.14,0.0,0.0,0,13
data and functions. My own journey in developing applications for the web started,0,9,0.21,0.14,0.0,0.0,0,13
"around the same time, in the mid-1990s, and I eventually spent the larger part of my",0,9,0.21,0.14,0.0,0.0,0,13
"professional career designing, developing, and managing teams in developing large-",0,9,0.21,0.14,0.0,0.0,0,13
"scale web applications. Over the same period of time, I have written web applications",0,9,0.21,0.14,0.0,0.0,0,13
"in numerous programming languages and using various frameworks including Java,",0,9,0.21,0.14,0.0,0.0,0,13
"Ruby, Node.js, PHP , Perl, Elixir, and even Smalltalk.",0,9,0.3,0.14,0.0,0.0,1,13
"I stumbled on Go a few years ago, and what worked very well for me is the simplicity",0,9,0.21,0.17,0.0,0.0,0,13
and refreshing directness of the language. I was even more impressed when I realized,0,9,0.21,0.14,0.0,0.0,0,13
that I could quickly write complete web applications (and services) that are fast and,0,9,0.21,0.14,0.0,0.0,0,13
"scalable with only the Go standard libraries. The code is direct, easy to understand, and",0,9,0.21,0.14,0.0,0.0,0,13
can be quickly and easily compiled into a single deployable binary file. I no longer,0,9,0.21,0.14,0.0,0.0,0,13
need to throw in application servers to scale or to make my web application produc-,0,9,0.21,0.14,0.0,0.0,0,13
"tion-capable. Needless to say, all of these elements made Go my new favorite language",0,9,0.21,0.14,0.0,0.0,0,13
for writing web applications.,0,9,0.3,0.14,0.0,0.0,1,13
"Writing web applications has changed dramatically over the years, from static con-",0,9,0.21,0.17,0.0,0.0,0,13
tent to dynamic data over,0,9,0.3,0.14,0.0,0.0,1,13
"HTTP , from HTML content delivered from the server to",0,9,0.21,0.37,0.0,0.0,1,13
client-side single-page applications consuming,0,9,0.3,0.14,0.0,0.0,1,13
JSON data over HTTP . Almost as soon,0,9,0.21,0.53,0.0,0.0,1,13
"as the first web applications were written, web application frameworks appeared, mak-",0,9,0.21,0.14,0.0,0.0,0,13
"ing it easier for programmers to write them. Twenty years on, most programming lan-",0,9,0.21,0.14,0.0,0.0,0,13
guages have at least one web application framework—and many have dozens—and,0,9,0.21,0.14,0.0,0.0,0,13
most applications written today are web applications.,0,9,0.3,0.14,0.0,0.0,1,13
xiv,1,9,0.39,0.06,0.0,0.0,0,14
PREFACE,1,6,0.33,0.42,0.0,0.03,1,14
While the popular web application frameworks made it easier to write web applica-,0,9,0.21,0.15,0.03,0.0,0,14
"tions, they also concealed a lot of the underlying plumbing. It became increasingly",0,9,0.21,0.13,0.0,0.0,0,14
common to find programmers who don’t even understand how the World Wide Web,0,9,0.21,0.13,0.0,0.0,0,14
works writing web applications. With Go I found a great tool to teach the basics of web,0,9,0.21,0.13,0.0,0.0,0,14
"application programming, properly. Writing web applications is direct and simple",0,9,0.21,0.13,0.0,0.0,0,14
again. Everything’s just there—no external libraries and dependencies. It’s all about,0,9,0.21,0.13,0.0,0.0,0,14
HTTP again and how to deliver content and data through it.,0,9,0.3,0.13,0.0,0.0,1,14
"So with that in mind, I approached Manning with an idea for a Go programming",0,9,0.21,0.15,0.0,0.0,0,14
language book that focuses on teaching someone how to write web applications from,0,9,0.21,0.13,0.0,0.0,0,14
"the ground up, using nothing except the standard libraries. Manning quickly sup-",0,9,0.21,0.13,0.0,0.0,0,14
ported my idea and green-lighted the project. The book has taken a while to come,0,9,0.21,0.13,0.0,0.0,0,14
"together, but the feedback from the early access program",0,9,0.3,0.13,0.0,0.0,1,14
(MEAP) was encouraging. I,0,9,0.21,0.6,0.0,0.0,1,14
hope you will gain much and enjoy reading this book as much as I enjoyed writing it.,0,9,0.21,0.13,0.0,0.0,0,14
acknowledgments,1,30,0.79,0.46,0.0,0.02,1,15
"This book started with an idea to teach the basics of web programming with Go, using",0,9,0.21,0.14,0.02,0.0,0,15
"nothing more than the standard libraries. I wasn’t sure if that would work, but the",0,9,0.21,0.14,0.0,0.0,0,15
readers who paid hard-earned money to buy my,0,9,0.3,0.14,0.0,0.0,1,15
MEAP along the way gave me encour-,0,9,0.21,0.54,0.0,0.0,1,15
"agement and motivation to push the idea through. To my readers, thank you!",0,9,0.21,0.14,0.0,0.0,0,15
"Writing books is a team effort, and though my name appears on the front cover of",0,9,0.21,0.17,0.0,0.0,0,15
"this one, it only exists because of the efforts of a large number of people:",0,9,0.21,0.14,0.0,0.01,0,15
"Marina Michaels, my hardworking and efficient editor from the other side of",0,9,0.21,0.19,0.01,0.0,0,15
■,0,3,0.09,0.17,0.0,0.01,0,15
"the world, worked tirelessly alongside me, ever ready to accommodate her",0,9,0.21,0.19,0.01,0.0,0,15
schedule to our dramatically different time zones,0,9,0.3,0.19,0.0,0.01,1,15
"The Manning extended team: Liz Welch, copyeditor, and Elizabeth Martin,",0,9,0.21,0.19,0.01,0.0,0,15
■,0,3,0.09,0.17,0.0,0.01,0,15
"proofreader, who with their eagle eyes helped spot my mistakes; Candace Gill-",0,9,0.21,0.19,0.01,0.0,0,15
"hoolley and Ana Romac, who helped me market and promote this book; and",0,9,0.3,0.19,0.0,0.0,1,15
"Kevin Sullivan and Janet Vail, who worked to take my raw manuscript and make",0,9,0.21,0.19,0.0,0.0,0,15
it into a real book,0,9,0.3,0.19,0.0,0.01,1,15
"Jimmy Frasché, who gave the manuscript a full technical proofread, and my",0,9,0.21,0.19,0.01,0.0,0,15
■,0,3,0.09,0.17,0.0,0.01,0,15
"reviewers, who gave valuable feedback at four stages of manuscript develop-",0,9,0.21,0.19,0.01,0.0,0,15
"ment: Alex Jacinto, Alexander Schwartz, Benoit Benedetti, Brian Cooksey,",0,9,0.21,0.19,0.0,0.0,0,15
"Doug Sparling, Ferdinando Santacroce, Gualtiero Testa, Harry Shaun Lippy,",0,9,0.21,0.19,0.0,0.0,0,15
"James Tyo, Jeff Lim, Lee Brandt, Mike Bright, Quintin Smith, Rebecca Jones,",0,9,0.21,0.19,0.0,0.0,0,15
"Ryan Pulling, Sam Zaydel, and Wes Shaddix",0,9,0.3,0.19,0.0,0.01,1,15
My friends from the Singapore Go community who helped me spread the word,0,9,0.21,0.19,0.01,0.0,0,15
■,0,3,0.09,0.17,0.0,0.01,0,15
on my new book as soon as the,0,9,0.3,0.19,0.01,0.0,1,15
"MEAP came out, especially Kai Hendry, who",0,9,0.21,0.47,0.0,0.0,1,15
made a long video from his comments on my book,0,9,0.3,0.19,0.0,0.0,1,15
xvi,1,9,0.39,0.06,0.0,0.0,0,16
ACKNOWLEDGMENTS,1,6,0.33,0.38,0.0,0.03,1,16
"I’d also like to thank the creators of Go—Robert Griesemer, Rob Pike, and Ken",0,9,0.21,0.13,0.03,0.0,0,16
"Thompson—as well as contributors to the net/http, html/template, and other web",0,9,0.21,0.13,0.0,0.0,0,16
"standard libraries, especially Brad Fitzpatrick, without whom I probably wouldn’t have",0,9,0.21,0.13,0.0,0.0,0,16
anything to write about!,0,9,0.3,0.13,0.0,0.0,1,16
"Last but certainly not least, I’d like to thank my family—the love of my life, Wooi",0,9,0.21,0.15,0.0,0.0,0,16
"Ying, and my taller-than-me-now son, Kai Wen. I hope that in writing this book, I will",0,9,0.21,0.13,0.0,0.0,0,16
be an inspiration to him and he will soon pick up my book proudly and learn from it.,0,9,0.21,0.13,0.0,0.0,0,16
about this book,1,30,0.79,0.52,0.0,0.02,1,17
This book introduces the basic concepts of writing a web application using the Go,0,9,0.21,0.14,0.02,0.0,0,17
"programming language, from the ground up, using nothing other than the standard",0,9,0.21,0.14,0.0,0.0,0,17
"libraries. While there are sections that discuss other libraries and other topics, includ-",0,9,0.21,0.14,0.0,0.0,0,17
"ing testing and deploying web applications, the main goal of the book is to teach web",0,9,0.21,0.14,0.0,0.0,0,17
programming using Go standard libraries only.,0,9,0.3,0.14,0.0,0.0,1,17
The reader is assumed to have basic Go programming skills and to know Go syn-,0,9,0.21,0.17,0.0,0.0,0,17
"tax. If you don’t know Go programming at all, I would advise you to check out",0,9,0.21,0.14,0.0,0.0,0,17
Go in,1,9,0.39,0.8,0.0,0.0,1,17
"Action by William Kennedy with Brian Ketelsen and Erik St. Martin, also published by",1,9,0.39,0.14,0.0,0.0,0,17
Manning ( www.manning.com/books/go-in-action,0,9,0.3,0.14,0.0,0.0,1,17
). Another good book to read is,0,9,0.21,0.55,0.0,0.0,1,17
The,1,9,0.3,0.82,0.0,0.0,0,17
"(Addison-Wesley 2015) , by Alan Donovan and Brian Ker-",1,9,0.39,0.36,0.0,0.0,1,17
Go Programming Language,1,9,0.48,0.14,0.0,0.0,1,17
"nighan. Alternatively, there are plenty of free tutorials on Go, including the A Tour of",0,9,0.21,0.14,0.0,0.0,0,17
Go from the Go website (,0,9,0.3,0.14,0.0,0.0,1,17
tour.golang.org ).,0,9,0.21,0.35,0.0,0.02,1,17
Roadmap,1,12,0.54,0.14,0.02,0.01,1,17
The book includes ten chapters and an appendix.,0,9,0.3,0.14,0.01,0.0,1,17
"Chapter 1 introduces using Go for web applications, and discusses why it is a good",0,9,0.21,0.17,0.0,0.0,0,17
choice for writing web applications. You’ll also learn about key concepts of what web,0,9,0.21,0.14,0.0,0.0,0,17
"applications are, including a brief introduction to",0,9,0.3,0.14,0.0,0.0,1,17
HTTP .,0,9,0.21,0.55,0.0,0.0,1,17
"Chapter 2 shows you how to build a typical web application with Go, taking you",0,9,0.21,0.17,0.0,0.0,0,17
step by step through the creation of a simple internet forum web.,0,9,0.3,0.14,0.0,0.0,1,17
net/http pack-,0,9,0.21,0.72,0.0,0.0,1,17
Chapter 3 gets into the details of handling,0,9,0.3,0.17,0.0,0.0,1,17
HTTP requests using the,0,9,0.21,0.52,0.0,0.0,1,17
age. You’ll learn how to write a Go web server to listen to,0,9,0.3,0.14,0.0,0.0,1,17
HTTP requests and how to,0,9,0.21,0.62,0.0,0.0,1,17
incorporate handlers and handler functions that process those requests.,0,9,0.21,0.14,0.0,0.0,0,17
xviii,1,9,0.48,0.06,0.0,0.0,1,18
ABOUT THIS BOOK,1,6,0.33,0.39,0.0,0.03,1,18
Chapter 4 continues with the details of handling,0,9,0.3,0.15,0.03,0.0,1,18
"HTTP requests—specifically, how",0,9,0.21,0.56,0.0,0.0,1,18
Go allows you to process the requests and respond accordingly. You’ll also learn how,0,9,0.21,0.13,0.0,0.0,0,18
to get data from HTML forms and how to use cookies.,0,9,0.3,0.13,0.0,0.0,1,18
text/template and,0,9,0.21,0.66,0.0,0.0,1,18
Chapter 5 delves into the Go template engine provided in the,0,9,0.3,0.15,0.0,0.0,1,18
html/template packages. You’ll learn about the various mechanisms provided by Go,0,9,0.21,0.13,0.0,0.0,0,18
and about using layouts in Go.,0,9,0.3,0.13,0.0,0.0,1,18
Chapter 6 discusses storage strategies using Go. You’ll learn about storing data in,0,9,0.21,0.15,0.0,0.0,0,18
"memory using structs, in the filesystem using",0,9,0.3,0.13,0.0,0.0,1,18
CSV and the gob binary format as well as,0,9,0.21,0.5,0.0,0.0,1,18
using SQL and SQL mappers to access relational databases.,0,9,0.3,0.13,0.0,0.0,1,18
Chapter 7 shows you how to create web services using Go. You’ll learn how to cre-,0,9,0.21,0.15,0.0,0.0,0,18
ate and parse XML as well as,0,9,0.3,0.13,0.0,0.0,1,18
"JSON with Go, and how a simple web service can be writ-",0,9,0.21,0.36,0.0,0.0,1,18
ten using Go.,0,9,0.3,0.13,0.0,0.0,1,18
Chapter 8 gives insight into the ways you can test your Go web application at vari-,0,9,0.21,0.15,0.0,0.0,0,18
"ous levels, including unit testing, benchmark testing, and",0,9,0.3,0.13,0.0,0.0,1,18
HTTP testing. This chapter,0,9,0.21,0.6,0.0,0.0,1,18
also briefly discusses third-party testing libraries.,0,9,0.3,0.13,0.0,0.0,1,18
Chapter 9 talks about how you can leverage Go concurrency in your web applica-,0,9,0.21,0.15,0.0,0.0,0,18
tion. You’ll learn about Go concurrency and how you can improve the performance of,0,9,0.21,0.13,0.0,0.0,0,18
a photo-mosaic web application using Go concurrency.,0,9,0.3,0.13,0.0,0.0,1,18
Chapter 10 wraps up the book by showing how you can deploy your web applica-,0,9,0.21,0.15,0.0,0.0,0,18
tion. You’ll learn how to deploy to standalone servers and to the cloud (Heroku and,0,9,0.21,0.13,0.0,0.0,0,18
"Google App Engine), as well as in Docker containers.",0,9,0.3,0.13,0.0,0.0,1,18
The appendix provides instructions for installing and setting up Go on different,0,9,0.21,0.15,0.0,0.0,0,18
platforms.,0,9,0.3,0.13,0.0,0.02,1,18
Code conventions and downloads,1,12,0.54,0.13,0.02,0.01,1,18
This book contains many examples of source code both in numbered listings and,0,9,0.21,0.13,0.01,0.0,0,18
fixed-width,0,9,0.21,0.72,0.0,0.0,1,18
"inline with normal text. In both cases, source code is formatted in a",0,9,0.3,0.13,0.0,0.0,1,18
font like this to separate it from ordinary text. Sometimes code is in bold to high-,0,9,0.21,0.13,0.0,0.0,0,18
light code that has changed from previous steps in the chapter or code that is,0,9,0.21,0.13,0.0,0.0,0,18
discussed in surrounding text.,0,9,0.3,0.13,0.0,0.0,1,18
"Also, colors are used to highlight code commands and code output:",0,9,0.3,0.15,0.0,0.01,1,18
curl -i 127.0.0.1:8080/write,0,7,0.26,0.13,0.01,0.0,1,18
HTTP/1.1 200 OK,0,7,0.26,0.13,0.0,0.0,1,18
"Date: Tue, 13 Jan 2015 16:16:13 GMT",0,7,0.26,0.13,0.0,0.0,1,18
Content-Length: 95,0,7,0.26,0.13,0.0,0.0,1,18
Content-Type: text/html; charset=utf-8,0,7,0.26,0.13,0.0,0.02,1,18
<html>,0,7,0.26,0.13,0.02,0.0,1,18
<head><title>Go Web Programming</title></head>,0,7,0.26,0.13,0.0,0.0,1,18
<body><h1>Hello World</h1></body>,0,7,0.26,0.13,0.0,0.0,1,18
</html>,0,7,0.26,0.13,0.0,0.0,1,18
xix,1,9,0.3,0.82,0.0,0.0,0,19
ABOUT THIS BOOK,1,6,0.33,0.41,0.0,0.03,1,19
Print book readers who want to see this color code highlighting (and all figures in,0,9,0.21,0.14,0.03,0.0,0,19
color) can go to www.manning.com/books/go-web-programming,0,9,0.3,0.14,0.0,0.0,1,19
to register and get,0,9,0.21,0.69,0.0,0.0,1,19
"their free eBook in PDF , ePub, and Kindle formats.",0,9,0.3,0.14,0.0,0.0,1,19
Code samples used throughout the book are also available at,0,9,0.3,0.17,0.0,0.0,1,19
www.manning.com/,0,9,0.21,0.68,0.0,0.0,1,19
books/go-web-programming,0,9,0.3,0.14,0.0,0.0,1,19
and at github.com/sausheong/gwp,0,9,0.21,0.38,0.0,0.0,1,19
.,0,9,0.12,0.67,0.0,0.02,0,19
About the author,1,12,0.54,0.14,0.02,0.01,1,19
S AU S HEONG C HANG is now the Managing Director of Digital,0,9,0.21,0.31,0.01,0.0,1,19
"Technology at Singapore Power. Before that, he was a Director of",0,9,0.21,0.31,0.0,0.0,1,19
Consumer Engineering at PayPal. He is active in the Ruby and,0,9,0.21,0.31,0.0,0.0,1,19
"Go developer communities, and has written books, contributed",0,9,0.21,0.31,0.0,0.0,1,19
"to open source projects, and spoken at meetups and conferences.",0,9,0.21,0.31,0.0,0.06,1,19
Author Online,1,12,0.54,0.14,0.06,0.01,1,19
Purchase of Go Web Programming,1,9,0.48,0.14,0.01,0.0,1,19
includes free access to a private web forum run by,0,9,0.21,0.42,0.0,0.0,1,19
"Manning Publications; you can make comments about the book, ask technical ques-",0,9,0.21,0.14,0.0,0.0,0,19
"tions, and receive help from the author and from other users. To access the forum",0,9,0.21,0.14,0.0,0.0,0,19
"and subscribe to it, point your web browser to",0,9,0.3,0.14,0.0,0.0,1,19
www.manning.com/books/go-web-,0,9,0.21,0.56,0.0,0.0,1,19
programming . This page provides information on how to get on the forum after you’re,0,9,0.21,0.14,0.0,0.0,0,19
"registered, what kind of help is available, and the rules of conduct on the forum.",0,9,0.21,0.14,0.0,0.0,0,19
Manning’s commitment to our readers is to provide a venue where a meaningful,0,9,0.21,0.17,0.0,0.0,0,19
dialogue between individual readers and between readers and the author can take,0,9,0.21,0.14,0.0,0.0,0,19
place. It’s not a commitment to any specific amount of participation on the part of the,0,9,0.21,0.14,0.0,0.0,0,19
"author, whose contribution to the forum remains voluntary (and unpaid). We suggest",0,9,0.21,0.14,0.0,0.0,0,19
you try asking the author some challenging questions lest his interest stray!,0,9,0.21,0.14,0.0,0.0,0,19
The Author Online forum and the archives of previous discussions will be accessi-,0,9,0.21,0.17,0.0,0.0,0,19
ble from the publisher’s website as long as the book is in print.,0,9,0.3,0.14,0.0,0.0,1,19
about the cover illustration,1,30,0.79,0.23,0.0,0.02,1,20
The figure on the cover of,0,9,0.3,0.12,0.02,0.0,1,20
Go Web Programming is captioned “Man in Medieval Dress.”,1,9,0.39,0.34,0.0,0.0,1,20
"The illustration by Paolo Mercuri (1804–1884) is taken from “Costumes Historiques,”",0,9,0.21,0.12,0.0,0.0,0,20
"a multivolume compendium of historical costumes from the twelfth, thirteenth, four-",0,9,0.21,0.12,0.0,0.0,0,20
"teenth, and fifteenth centuries assembled and edited by Camille Bonnard and pub-",0,9,0.21,0.12,0.0,0.0,0,20
lished in Paris in the 1850s or 1860s. The nineteenth century saw an increased interest,0,9,0.21,0.12,0.0,0.0,0,20
"in exotic locales and in times gone by, and people were drawn to collections such as",0,9,0.21,0.12,0.0,0.0,0,20
this one to explore the world they lived in—as well as the world of the distant past.,0,9,0.21,0.12,0.0,0.0,0,20
The colorful variety of Mercuri’s illustrations in this historical collection reminds,0,9,0.21,0.14,0.0,0.0,0,20
us vividly of how culturally apart the world’s towns and regions were a few hundred,0,9,0.21,0.12,0.0,0.0,0,20
years ago. In the streets or in the countryside people were easy to place—sometimes,0,9,0.21,0.12,0.0,0.0,0,20
"with an error of no more than a dozen miles—just by their dress. Their station in life,",0,9,0.21,0.12,0.0,0.0,0,20
"as well as their trade or profession, could be easily identified. Dress codes have",0,9,0.21,0.12,0.0,0.0,0,20
"changed over the centuries, and the diversity by region, so rich at one time, has faded",0,9,0.21,0.12,0.0,0.0,0,20
"away. Today, it is hard to tell apart the inhabitants of one continent from another, let",0,9,0.21,0.12,0.0,0.0,0,20
"alone the towns or countries they come from, or their social status or profession. Per-",0,9,0.21,0.12,0.0,0.0,0,20
haps we have traded cultural diversity for a more varied personal life—certainly a,0,9,0.21,0.12,0.0,0.0,0,20
more varied and faster-paced technological life.,0,9,0.3,0.12,0.0,0.0,1,20
"At a time when it is hard to tell one computer book from another, Manning cele-",0,9,0.21,0.14,0.0,0.0,0,20
brates the inventiveness and initiative of the computer business with book covers,0,9,0.21,0.12,0.0,0.0,0,20
"based on the rich diversity of regional life of many centuries ago, brought back to life",0,9,0.21,0.12,0.0,0.0,0,20
by Mercuri’s pictures.,0,9,0.3,0.12,0.0,0.0,1,20
Part 1,1,30,0.79,0.68,0.0,0.05,1,21
Go and web applications,1,30,0.79,0.3,0.05,0.07,1,21
W,0,48,0.96,0.19,0.07,0.0,0,21
eb applications are probably the most widely used type of software appli-,0,9,0.12,0.25,0.0,0.0,0,21
"cation today and if you’re connected to the internet, you would hardly pass a day",0,9,0.21,0.19,0.0,0.0,0,21
"without using one. Even if you’re mostly on a mobile device, you still are using",0,9,0.21,0.19,0.0,0.0,0,21
web applications. Many mobile applications that look like native applications are,0,9,0.21,0.19,0.0,0.0,0,21
hybrids that have portions that built on web technologies.,0,9,0.3,0.19,0.0,0.0,1,21
"Knowing HTTP is the foundation to learning how to write web applications,",0,9,0.12,0.21,0.0,0.0,0,21
so these first two chapters will introduce,0,9,0.3,0.19,0.0,0.0,1,21
HTTP . I will also explain why using Go,0,9,0.21,0.53,0.0,0.0,1,21
for writing web applications is a good idea. I will jump straight into showing you,0,9,0.21,0.19,0.0,0.0,0,21
how to write a simple internet forum using Go and show you a bird’s-eye view of,0,9,0.21,0.19,0.0,0.0,0,21
writing a web application.,0,9,0.3,0.19,0.0,0.0,1,21
2,1,9,0.39,0.06,0.0,0.0,0,22
C,1,7,0.26,0.4,0.0,0.0,0,22
HAPTER,1,6,0.33,0.41,0.0,0.0,1,22
Go and web applications,1,30,0.93,0.3,0.0,0.17,1,23
This chapter covers,1,12,0.67,0.13,0.17,0.01,1,23
Defining web applications,0,9,0.3,0.15,0.01,0.0,1,23
■,0,4,0.11,0.13,0.0,0.01,0,23
Using Go to write web applications: the advantages,0,9,0.3,0.15,0.01,0.0,1,23
■,0,4,0.11,0.13,0.0,0.01,0,23
Understanding the basics of web application,0,9,0.3,0.15,0.01,0.0,1,23
■,0,4,0.11,0.13,0.0,0.01,0,23
programming,0,9,0.3,0.15,0.01,0.01,1,23
Writing the simplest possible web application in Go,0,9,0.3,0.15,0.01,0.0,1,23
■,0,4,0.11,0.13,0.0,0.08,0,23
"Web applications are ubiquitous. Take any application you use on a daily basis, and",0,9,0.21,0.17,0.08,0.0,0,23
likely it’s a web application or has a web application variant (this includes mobile,0,9,0.21,0.17,0.0,0.0,0,23
apps). Any language that supports software development that interfaces with,0,9,0.21,0.17,0.0,0.0,0,23
human beings will inevitably support web application development. One of the first,0,9,0.21,0.17,0.0,0.0,0,23
things developers of a new language do is build libraries and frameworks to interact,0,9,0.21,0.17,0.0,0.0,0,23
with the internet and the World Wide Web. There are myriad web development,0,9,0.21,0.17,0.0,0.0,0,23
tools for the more established languages.,0,9,0.3,0.17,0.0,0.0,1,23
Go is no different. Go is a relatively new programming language created to be,0,9,0.21,0.19,0.0,0.0,0,23
simple and efficient for writing back end systems. It has an advanced set of features,0,9,0.21,0.17,0.0,0.0,0,23
"and focuses on programmer effectiveness and speed. Since its release, Go has",0,9,0.21,0.17,0.0,0.0,0,23
gained tremendous popularity as a programming language for writing web applica-,0,9,0.21,0.17,0.0,0.0,0,23
tions and *-as-a-Service systems.,0,9,0.3,0.17,0.0,0.0,1,23
"In this chapter, you’ll learn why you should use Go for writing web applications",0,9,0.21,0.19,0.0,0.0,0,23
and you’ll learn all about web applications.,0,9,0.3,0.17,0.0,0.0,1,23
4,1,9,0.39,0.06,0.0,0.0,0,24
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,24
C 1,1,7,0.26,0.32,0.0,0.0,0,24
HAPTER,1,6,0.33,0.33,0.0,0.03,1,24
1.1 Using Go for web applications,1,12,0.54,0.06,0.03,0.01,1,24
"So why should you use Go for writing web applications? My guess is, having bought",0,9,0.21,0.13,0.01,0.0,0,24
"this book, you have an inclination to find out the answer. Of course, as the author of a",0,9,0.21,0.13,0.0,0.0,0,24
"book that teaches Go web programming, I believe there are strong and compelling",0,9,0.21,0.13,0.0,0.0,0,24
"reasons to do so. As you continue reading this book, you’ll get a sense of Go’s",0,9,0.21,0.13,0.0,0.0,0,24
"strengths in web application development and, I hope, agree with me about the use-",0,9,0.21,0.13,0.0,0.0,0,24
fulness of Go.,0,9,0.3,0.13,0.0,0.0,1,24
"Go is a relatively new programming language, with a thriving and growing commu-",0,9,0.21,0.15,0.0,0.0,0,24
nity. It is well suited for writing server-side programs that are fast. It’s simple and famil-,0,9,0.21,0.13,0.0,0.0,0,24
"iar to most programmers who are used to procedural programming, but it also",0,9,0.21,0.13,0.0,0.0,0,24
"provides features of functional programming. It supports concurrency by default, has",0,9,0.21,0.13,0.0,0.0,0,24
"a modern packaging system, does garbage collection, and has an extensive and power-",0,9,0.21,0.13,0.0,0.0,0,24
ful set of built-in standard libraries.,0,9,0.3,0.13,0.0,0.0,1,24
Plenty of good-quality open source libraries are available that can supplement what,0,9,0.21,0.15,0.0,0.0,0,24
"the standard libraries don’t have, but the standard libraries that come with Go are",0,9,0.21,0.13,0.0,0.0,0,24
quite comprehensive and wide-ranging. This book sticks to the standard libraries as,0,9,0.21,0.13,0.0,0.0,0,24
"much as possible but will occasionally use third-party, open source libraries to show",0,9,0.21,0.13,0.0,0.0,0,24
alternative and creative ways the open source community has come up with.,0,9,0.21,0.13,0.0,0.0,0,24
"Go is rapidly gaining popularity as a web development language. Many companies,",0,9,0.21,0.15,0.0,0.0,0,24
"including infrastructure companies like Dropbox and SendGrid, technology-oriented",0,9,0.21,0.13,0.0,0.0,0,24
"companies such as Square and Hailo, as well as more traditional companies such as",0,9,0.21,0.13,0.0,0.0,0,24
"BBC and The New York Times,",1,9,0.48,0.13,0.0,0.0,1,24
have already started using Go.,0,9,0.21,0.36,0.0,0.0,1,24
Go provides a viable alternative to existing languages and platforms for developing,0,9,0.21,0.15,0.0,0.0,0,24
large-scale web applications. Large-scale web applications typically need to be,0,9,0.21,0.13,0.0,0.01,0,24
Scalable,0,9,0.3,0.18,0.01,0.0,1,24
■,0,4,0.11,0.15,0.0,0.01,0,24
Modular,0,9,0.3,0.18,0.01,0.0,1,24
■,0,4,0.11,0.15,0.0,0.01,0,24
Maintainable,0,9,0.3,0.18,0.01,0.0,1,24
■,0,4,0.11,0.15,0.0,0.01,0,24
High-performance,0,9,0.3,0.18,0.01,0.0,1,24
■,0,4,0.11,0.15,0.0,0.02,0,24
Let’s take a look at these attributes in detail.,0,9,0.3,0.13,0.02,0.02,1,24
1.1.1 Scalable web applications and Go,1,10,0.5,0.06,0.02,0.01,1,24
Large-scale web applications should be,0,9,0.3,0.13,0.01,0.0,1,24
scalable . This means you should be able to,1,9,0.39,0.46,0.0,0.0,1,24
quickly and easily increase the capacity of the application to take on a bigger volume,0,9,0.21,0.13,0.0,0.0,0,24
"of requests. The application should scale also linearly, meaning you should be able to",0,9,0.21,0.13,0.0,0.0,0,24
add more hardware and process a corresponding number of requests.,0,9,0.3,0.13,0.0,0.0,1,24
We can look at scaling in two ways:,0,9,0.3,0.15,0.0,0.01,1,24
"Vertical scaling , or increasing the amount of",1,9,0.48,0.18,0.01,0.0,1,24
CPU s or capacity in a single machine,0,9,0.21,0.53,0.0,0.0,1,24
■,0,4,0.11,0.15,0.0,0.01,0,24
"Horizontal scaling , or increasing the number of machines to expand capacity",1,9,0.39,0.18,0.01,0.0,0,24
■,0,4,0.11,0.15,0.0,0.02,0,24
Go scales well vertically with its excellent support for concurrent programming. A sin-,0,9,0.21,0.13,0.02,0.0,0,24
gle Go web application with a single OS thread can be scheduled to run hundreds of,0,9,0.21,0.13,0.0,0.0,0,24
thousands of goroutines with efficiency and performance.,1,9,0.48,0.13,0.0,0.0,1,24
5,1,9,0.3,0.83,0.0,0.0,0,25
Using Go for web applications,1,9,0.39,0.35,0.0,0.03,1,25
"Just like any other web applications, Go can scale well horizontally as well as by lay-",0,9,0.21,0.17,0.03,0.0,0,25
ering a proxy above a number of instances of a Go web app. Go web applications are,0,9,0.21,0.14,0.0,0.0,0,25
"compiled as static binaries, without any dynamic dependencies, and can be distributed",0,9,0.21,0.14,0.0,0.0,0,25
to systems that don’t have Go built in. This allows you to deploy Go web applications eas-,0,9,0.21,0.14,0.0,0.0,0,25
ily and consistently.,0,9,0.3,0.14,0.0,0.02,1,25
1.1.2 Modular web applications and Go,1,10,0.5,0.07,0.02,0.01,1,25
Large-scale web applications should be built with components that work interchange-,0,9,0.21,0.14,0.01,0.0,0,25
"ably. This approach allows you to add, remove, or modify features easily and gives you",0,9,0.21,0.14,0.0,0.0,0,25
the flexibility to meet the changing needs of the application. It also allows you to,0,9,0.21,0.14,0.0,0.0,0,25
lower software development costs by reusing modular components.,0,9,0.3,0.14,0.0,0.0,1,25
"Although Go is statically typed, it has an interface mechanism that describes behav-",0,9,0.21,0.17,0.0,0.0,0,25
"ior and allows dynamic typing. Functions can take interfaces, which means you can",0,9,0.21,0.14,0.0,0.0,0,25
introduce new code into the system and still be able to use existing functions by imple-,0,9,0.21,0.14,0.0,0.0,0,25
"menting methods required by that interface. Also, with a function that takes an empty",0,9,0.21,0.14,0.0,0.0,0,25
"interface, you can put any value as the parameter because all types implement the",0,9,0.21,0.14,0.0,0.0,0,25
empty interface. Go implements a number of features usually associated with func-,0,9,0.21,0.14,0.0,0.0,0,25
"tional programming, including function types, functions as values, and closures.",0,9,0.21,0.14,0.0,0.0,0,25
These features allow you to build more modular code by providing the capability of,0,9,0.21,0.14,0.0,0.0,0,25
building functions out of other functions.,0,9,0.3,0.14,0.0,0.0,1,25
Go is also often used to create,0,9,0.3,0.17,0.0,0.0,1,25
microservices . In microservice architecture large-scale,1,9,0.39,0.42,0.0,0.0,1,25
applications can be created by composing smaller independent services. These services,0,9,0.21,0.14,0.0,0.0,0,25
"are interchangeable and organized around capabilities (for example, a systems-level",0,9,0.21,0.14,0.0,0.0,0,25
service like logging or an application-level service such as billing or risk analysis). By,0,9,0.21,0.14,0.0,0.0,0,25
"creating multiple small Go services and composing them into a single web application,",0,9,0.21,0.14,0.0,0.0,0,25
you enable these capabilities to be swappable and therefore more modular.,0,9,0.21,0.14,0.0,0.02,0,25
1.1.3 Maintainable web applications and Go,1,10,0.5,0.07,0.02,0.01,1,25
"Like any large and complex applications, having an easily maintainable codebase is",0,9,0.21,0.14,0.01,0.0,0,25
important for large-scale web applications. It’s important because large-scale applica-,0,9,0.21,0.14,0.0,0.0,0,25
tions often need to grow and evolve and therefore you need to revisit and change the,0,9,0.21,0.14,0.0,0.0,0,25
"code regularly. Complex, unwieldy code takes a long time to change and is fraught",0,9,0.21,0.14,0.0,0.0,0,25
"with risk of something breaking, so it makes sense to keep the source code well orga-",0,9,0.21,0.14,0.0,0.0,0,25
nized and maintainable.,0,9,0.3,0.14,0.0,0.0,1,25
Go was designed to encourage good software engineering practices. It has a clean,0,9,0.21,0.17,0.0,0.0,0,25
and simple syntax that’s very readable. Go’s package system is flexible and unambigu-,0,9,0.21,0.14,0.0,0.0,0,25
"ous, and there’s a good set of tools to enhance the development experience and help",0,9,0.21,0.14,0.0,0.0,0,25
programmers to write more readable code. An example is the Go source code format-,0,9,0.21,0.14,0.0,0.0,0,25
ter ( gofmt ) which standardizes the formatting of Go code.,1,9,0.48,0.14,0.0,0.0,1,25
Go expects documentation to evolve along with the code. The Go documentation,0,9,0.21,0.17,0.0,0.0,0,25
"tool ( godoc ) parses Go source code, including comments, and creates documentation",1,9,0.39,0.14,0.0,0.0,0,25
in a variety of formats such as,0,9,0.3,0.14,0.0,0.0,1,25
HTML and plain text. It’s very easy to use—just write the,0,9,0.21,0.39,0.0,0.0,1,25
documentation above the source code itself and,0,9,0.3,0.14,0.0,0.0,1,25
godoc will extract it along with the,1,9,0.39,0.56,0.0,0.0,1,25
code to generate the documentation.,0,9,0.3,0.14,0.0,0.0,1,25
6,1,9,0.39,0.06,0.0,0.0,0,26
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,26
C 1,1,7,0.26,0.32,0.0,0.0,0,26
HAPTER,1,6,0.33,0.33,0.0,0.03,1,26
Testing is built into Go.,0,9,0.3,0.15,0.03,0.0,1,26
gotest discovers test cases built into the same package and,1,9,0.39,0.35,0.0,0.0,1,26
runs functional and performance testing. Go also provides web application testing,0,9,0.21,0.13,0.0,0.0,0,26
tools by emulating a web client and recording responses generated by the server.,0,9,0.21,0.13,0.0,0.02,0,26
1.1.4 High performing web applications and Go,1,10,0.5,0.06,0.02,0.01,1,26
High performance means being able to process a large volume of requests within a,0,9,0.21,0.13,0.01,0.0,0,26
short period of time. It also means being able to respond to the client quickly and,0,9,0.21,0.13,0.0,0.0,0,26
making operations faster for end users.,0,9,0.3,0.13,0.0,0.0,1,26
"One of Go’s design goals is to approach the performance of C, and although it",0,9,0.21,0.15,0.0,0.0,0,26
"hasn’t reached this goal, the current results are quite competitive. Go compiles to",0,9,0.21,0.13,0.0,0.0,0,26
"native code, which generally means it’s faster than other interpreted languages and",0,9,0.21,0.13,0.0,0.0,0,26
"frameworks. As described earlier, Go also has great concurrency support with gorou-",0,9,0.21,0.13,0.0,0.0,0,26
"tines, which allows multiple requests to be processed at the same time.",0,9,0.21,0.13,0.0,0.0,0,26
I hope I’ve convinced you that Go is at least worth looking into as a useful lan-,0,9,0.21,0.15,0.0,0.0,0,26
guage and platform for developing web applications. But before we jump into any Go,0,9,0.21,0.13,0.0,0.0,0,26
"code, let’s get in sync on what web applications are and how they work. This will be",0,9,0.21,0.13,0.0,0.0,0,26
important as you read through the next few chapters.,0,9,0.3,0.13,0.0,0.02,1,26
1.2 How web applications work,1,12,0.54,0.06,0.02,0.01,1,26
Ask a room full of programmers what a web application is and you’ll likely get a wide,0,9,0.21,0.13,0.01,0.0,0,26
range of answers (plus looks of scorn and amazement for asking such a basic question).,0,9,0.21,0.13,0.0,0.0,0,26
"But as you get your answers from the assembled technologists, you might realize that",0,9,0.21,0.13,0.0,0.0,0,26
the common understanding of what a web application is might not be as straightfor-,0,9,0.21,0.13,0.0,0.0,0,26
"ward. For example, is a web service also a web application? Many would consider them",0,9,0.21,0.13,0.0,0.0,0,26
"different, primarily because web services are consumed by other software whereas web",0,9,0.21,0.13,0.0,0.0,0,26
applications are used by humans. But if a web application produces data that’s read-,0,9,0.21,0.13,0.0,0.0,0,26
able by humans but is only consumed by other software (as with an,0,9,0.3,0.13,0.0,0.0,1,26
"RSS feed), is it a web",0,9,0.21,0.66,0.0,0.0,1,26
service or still a web application?,0,9,0.3,0.13,0.0,0.0,1,26
If an application returns only an,0,9,0.3,0.15,0.0,0.0,1,26
"page without any processing, is it a web appli-",0,9,0.21,0.46,0.0,0.0,1,26
HTML,0,9,0.21,0.41,0.0,0.0,1,26
cation? Is a Adobe Flash program running on a web browser a web application? How,0,9,0.21,0.13,0.0,0.0,0,26
about an application only written in,0,9,0.3,0.13,0.0,0.0,1,26
"HTML 5, running on your browser but that resides",0,9,0.21,0.42,0.0,0.0,1,26
on your laptop? If the application doesn’t use,0,9,0.3,0.13,0.0,0.0,1,26
"HTTP to send requests to a server, is it still",0,9,0.21,0.49,0.0,0.0,1,26
"a web application? At a higher level, most programmers understand what a web appli-",0,9,0.21,0.13,0.0,0.0,0,26
"cation is. Down at a lower, implementation level, though, things get fuzzy and gray.",0,9,0.21,0.13,0.0,0.0,0,26
"In a purist and narrow sense, a web application is a computer program that",0,9,0.21,0.15,0.0,0.0,0,26
responds to an HTTP request by a client and sends,0,9,0.3,0.13,0.0,0.0,1,26
HTML back to the client in an,0,9,0.21,0.53,0.0,0.0,1,26
HTTP,0,9,0.21,0.78,0.0,0.0,1,26
response. But isn’t this what a web server,0,9,0.3,0.13,0.0,0.0,1,26
"is? From this definition, there",0,9,0.3,0.13,0.0,0.0,1,26
is no dif-,1,9,0.39,0.38,0.0,0.0,1,26
Request,0,7,0.17,0.61,0.0,0.0,1,26
ference between a web server and a web,0,9,0.3,0.13,0.0,0.0,1,26
Client,0,7,0.17,0.53,0.0,0.0,1,26
Server,0,7,0.17,0.74,0.0,0.0,1,26
application. The web server is the,0,9,0.3,0.13,0.0,0.0,1,26
Response,0,7,0.17,0.61,0.0,0.0,1,26
web application (see figure 1.1).,0,9,0.3,0.13,0.0,0.0,1,26
The only consideration is probably,0,9,0.3,0.15,0.0,0.0,1,26
Figure 1.1 The basic request response,1,7,0.35,0.5,0.0,0.0,1,26
that a web server like httpd,1,9,0.48,0.13,0.0,0.0,1,26
or Apache,0,9,0.21,0.36,0.0,0.0,1,26
structure of a web application,1,7,0.35,0.5,0.0,0.0,1,26
7,1,9,0.3,0.83,0.0,0.0,0,27
How web applications work,1,9,0.39,0.36,0.0,0.03,1,27
looks at a particular directory (in Apache this is the,0,9,0.3,0.14,0.03,0.0,1,27
docroot ) and returns files in that,1,9,0.39,0.58,0.0,0.0,1,27
"directory when requested. In comparison, a web application doesn’t simply return",0,9,0.21,0.14,0.0,0.0,0,27
files; it processes the request and performs operations that are programmed into the,0,9,0.21,0.14,0.0,0.0,0,27
application (see figure 1.2).,0,9,0.3,0.14,0.0,0.04,1,27
"Web app processes request, performs",1,9,0.39,0.27,0.04,0.0,1,27
"programmed operations, returns files.",1,9,0.39,0.27,0.0,0.06,1,27
Request,0,7,0.17,0.26,0.06,0.01,1,27
Client,0,7,0.26,0.17,0.01,0.0,1,27
Server,0,7,0.17,0.38,0.0,0.0,1,27
File,0,7,0.17,0.59,0.0,0.01,1,27
Response,0,7,0.17,0.25,0.01,0.02,1,27
Figure 1.2 How a web application works,1,7,0.44,0.14,0.02,0.05,1,27
"From this point of view, you can probably consider a web server to be a specialized type",0,9,0.21,0.14,0.05,0.0,0,27
"of web application that returns only files that are being requested. In a broader sense,",0,9,0.21,0.14,0.0,0.0,0,27
many users would consider any application that uses a browser as the client to be a web,0,9,0.21,0.14,0.0,0.0,0,27
"app. This includes Adobe Flash applications, single-page web applications, and even",0,9,0.21,0.14,0.0,0.0,0,27
applications that aren’t served over,0,9,0.3,0.14,0.0,0.0,1,27
HTTP but that reside on your desktop or laptop.,0,9,0.21,0.43,0.0,0.0,1,27
"In the context of this book, we need to draw the line somewhere. Let’s consider",0,9,0.21,0.17,0.0,0.0,0,27
first what an application is.,1,9,0.48,0.14,0.0,0.0,1,27
An application is a software program that interacts with a user and helps the user to,1,9,0.39,0.17,0.0,0.0,0,27
"perform an activity. This includes accounting systems, human resource systems, desk-",0,9,0.21,0.14,0.0,0.0,0,27
"top publication software, and so on. A",0,9,0.3,0.14,0.0,0.0,1,27
web application is then an application that’s,1,9,0.39,0.48,0.0,0.0,1,27
deployed and used through the web.,0,9,0.3,0.14,0.0,0.0,1,27
"In other words, a program needs to fulfill only two criteria to be considered a",0,9,0.21,0.17,0.0,0.0,0,27
web app:,0,9,0.3,0.14,0.0,0.01,1,27
The program must return,0,9,0.3,0.19,0.01,0.0,1,27
HTML to a calling client that renders,0,9,0.21,0.41,0.0,0.0,1,27
HTML and dis-,0,9,0.21,0.72,0.0,0.0,1,27
■,0,4,0.11,0.17,0.0,0.01,0,27
plays to a user.,0,9,0.3,0.19,0.01,0.01,1,27
The data must be transported to the client through,0,9,0.3,0.19,0.01,0.0,1,27
HTTP .,0,9,0.21,0.62,0.0,0.0,1,27
■,0,4,0.11,0.17,0.0,0.02,0,27
"As an extension of this definition, if a program doesn’t render",0,9,0.3,0.14,0.02,0.0,1,27
HTML to a user but,0,9,0.21,0.68,0.0,0.0,1,27
"instead returns data in any other format to another program, it is a",0,9,0.3,0.14,0.0,0.0,1,27
"web service (that is,",1,9,0.39,0.7,0.0,0.0,1,27
it provides a service to other programs). We’ll get into web services in chapter 7.,0,9,0.21,0.14,0.0,0.0,0,27
Although this is probably a narrower definition than what most programmers,0,9,0.21,0.17,0.0,0.0,0,27
"would likely define as a web application, it’s a useful one for our discussion in this",0,9,0.21,0.14,0.0,0.0,0,27
book. It cuts through all the fuzziness and makes web applications much easier to,0,9,0.21,0.14,0.0,0.0,0,27
"understand. As we progress, things will start to make a lot more sense. But first, let’s",0,9,0.21,0.14,0.0,0.0,0,27
understand how HTTP came to be the way it is today.,0,9,0.3,0.14,0.0,0.0,1,27
8,1,9,0.39,0.06,0.0,0.0,0,28
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,28
C 1,1,7,0.26,0.32,0.0,0.0,0,28
HAPTER,1,6,0.33,0.33,0.0,0.03,1,28
1.3 A quick introduction to HTTP,1,12,0.54,0.06,0.03,0.01,1,28
HTTP is the application-level communications protocol that powers the World Wide,0,9,0.21,0.13,0.01,0.0,0,28
Web. Everything that you see on a web page is transported through this seemingly sim-,0,9,0.21,0.13,0.0,0.0,0,28
ple text-based protocol. HTTP,0,9,0.3,0.13,0.0,0.0,1,28
is simple but surprisingly powerful—since its definition,0,9,0.21,0.37,0.0,0.0,1,28
"in 1990, it has gone through only three iterative changes.",0,9,0.3,0.13,0.0,0.0,1,28
HTTP 1.1 is the latest ver-,0,9,0.21,0.61,0.0,0.0,1,28
"sion, and HTTP 2.0 is in draft form.",0,9,0.3,0.13,0.0,0.0,1,28
The first version of HTTP,0,9,0.3,0.15,0.0,0.0,1,28
"(HTTP 0.9) , created by Tim Berners-Lee, was a simple",0,9,0.21,0.38,0.0,0.0,1,28
protocol created to help adoption of the World Wide Web. It allows a client to open a,0,9,0.21,0.13,0.0,0.0,0,28
"connection to a server, issue an",0,9,0.3,0.13,0.0,0.0,1,28
"ASCII character string request, and terminate with a",0,9,0.21,0.39,0.0,0.0,1,28
carriage return (CRLF) . The server then responds with only the,0,9,0.3,0.13,0.0,0.0,1,28
HTML (no other,0,9,0.21,0.68,0.0,0.0,1,28
metadata).,0,9,0.3,0.13,0.0,0.0,1,28
The explosion of features came with different implementations of,0,9,0.3,0.15,0.0,0.0,1,28
HTTP . Eventu-,0,9,0.21,0.71,0.0,0.0,1,28
ally the multitude of features consolidated as,0,9,0.3,0.13,0.0,0.0,1,28
"HTTP 1.0 in 1996, followed by",0,9,0.21,0.5,0.0,0.0,1,28
HTTP 1.1,0,9,0.21,0.75,0.0,0.0,1,28
"in 1999, which is the most common version in use today.",0,9,0.3,0.13,0.0,0.0,1,28
HTTP 2.0 (or HTTP/2 ) is in,0,9,0.21,0.6,0.0,0.0,1,28
"draft, so in this book we’ll concentrate on",0,9,0.3,0.13,0.0,0.0,1,28
HTTP 1.1 only.,0,9,0.21,0.47,0.0,0.0,1,28
Let’s start defining what,0,9,0.3,0.15,0.0,0.0,1,28
HTTP is first (this is my simplified definition):,0,9,0.21,0.35,0.0,0.02,1,28
"HTTP is a stateless, text-based, request-response protocol that uses the",0,9,0.21,0.2,0.02,0.0,0,28
HTTP,1,8,0.46,0.15,0.0,0.0,1,28
client-server computing model.,0,9,0.3,0.15,0.0,0.02,1,28
Request-response is a basic way two computers talk to each other. The first computer,1,9,0.39,0.13,0.02,0.0,0,28
sends a request to the second computer and the second computer,1,9,0.48,0.13,0.0,0.0,1,28
responds to that,1,9,0.39,0.7,0.0,0.0,1,28
request. A client-server computing model is one where the requester (the,1,9,0.39,0.13,0.0,0.0,0,28
client ) always,1,9,0.39,0.72,0.0,0.0,1,28
initiates the conversation with the responder (the,0,9,0.3,0.13,0.0,0.0,1,28
"server ). As the name suggests, the",1,9,0.39,0.55,0.0,0.0,1,28
server provides a service to the client. In,1,9,0.48,0.13,0.0,0.0,1,28
"HTTP , the client is also known as the",0,9,0.21,0.45,0.0,0.0,1,28
user-agent,1,9,0.39,0.75,0.0,0.0,1,28
and is often a web browser. The server is often called the,0,9,0.3,0.13,0.0,0.0,1,28
web server .,1,9,0.39,0.59,0.0,0.0,1,28
HTTP is a stateless protocol. Each request from the client to the server returns a,0,9,0.21,0.15,0.0,0.0,0,28
"response from the server to the client, and that’s all the protocol remembers. Subse-",0,9,0.21,0.13,0.0,0.0,0,28
quent requests to the same server have absolutely no idea what happened before. In,0,9,0.21,0.13,0.0,0.0,0,28
"comparison, connection-oriented protocols like",0,9,0.3,0.13,0.0,0.0,1,28
FTP or Telnet (also request-response,0,9,0.21,0.52,0.0,0.0,1,28
and client-server) create a persistent channel between the client and the server. Hav-,0,9,0.21,0.13,0.0,0.0,0,28
"ing said that, HTTP 1.1 does persist connections to improve performance.",0,9,0.21,0.13,0.0,0.0,0,28
HTTP sends and receives protocol-related data in plain text (as opposed to sending,0,9,0.21,0.15,0.0,0.0,0,28
"and receiving in binary), like many other internet-related protocols. The rationale",0,9,0.21,0.13,0.0,0.0,0,28
behind this is to allow you to see what goes on with the communications without a spe-,0,9,0.21,0.13,0.0,0.0,0,28
"cialized protocol analyzer, making troubleshooting a lot easier.",0,9,0.3,0.13,0.0,0.0,1,28
HTTP was originally designed to deliver,0,9,0.3,0.16,0.0,0.0,1,28
HTML only and HTTP 0.9,0,9,0.21,0.49,0.0,0.0,1,28
had only one,0,9,0.21,0.71,0.0,0.0,1,28
method: GET . Later versions expanded it to be a generic protocol for distributed col-,0,9,0.21,0.13,0.0,0.0,0,28
"laborative systems, including web applications, which we’ll get into next.",0,9,0.21,0.13,0.0,0.02,0,28
1.4 The coming of web applications,1,12,0.54,0.06,0.02,0.01,1,28
"Not long after the World Wide Web was introduced to the world at large, people",0,9,0.21,0.13,0.01,0.0,0,28
started to realize that just serving files is great but it’d be even better if the content,0,9,0.21,0.13,0.0,0.0,0,28
9,1,9,0.3,0.83,0.0,0.0,0,29
HTTP request,1,9,0.39,0.41,0.0,0.03,1,29
served was dynamically created. One of the early attempts to do this was the,0,9,0.21,0.14,0.03,0.0,0,29
Common,1,9,0.39,0.78,0.0,0.0,1,29
Gateway Interface (CGI) .,1,9,0.48,0.14,0.0,0.0,1,29
"In 1993, the National Center for Supercomputing Applications",0,9,0.3,0.17,0.0,0.0,1,29
(NCSA) wrote a,0,9,0.21,0.71,0.0,0.0,1,29
specification for calling command-line executable programs called the,0,9,0.3,0.14,0.0,0.0,1,29
CGI . The NCSA,0,9,0.21,0.72,0.0,0.0,1,29
included it in its popular,0,9,0.3,0.14,0.0,0.0,1,29
"NCSA httpd . Despite its name, it never became an internet",1,9,0.39,0.36,0.0,0.0,1,29
standard.,0,9,0.3,0.14,0.0,0.0,1,29
CGI is a simple interface that allows a web server to interface with a program that’s,0,9,0.21,0.17,0.0,0.0,0,29
"running separately and externally to the web server process. This program, usually",0,9,0.21,0.14,0.0,0.0,0,29
"called a CGI program, can be written in any language (hence,",0,9,0.3,0.14,0.0,0.0,1,29
"common ), and in the ear-",1,9,0.39,0.65,0.0,0.0,1,29
lier years that was mostly Perl. Input to the,0,9,0.3,0.14,0.0,0.0,1,29
CGI program is done through environment,0,9,0.21,0.49,0.0,0.0,1,29
"variables, and anything the",0,9,0.3,0.14,0.0,0.0,1,29
CGI program produces into standard output is returned to,0,9,0.21,0.37,0.0,0.0,1,29
the client through the server.,0,9,0.3,0.14,0.0,0.0,1,29
Another technology from the same period is,0,9,0.3,0.17,0.0,0.0,1,29
"server-side includes (SSI) , which are direc-",1,9,0.39,0.53,0.0,0.0,1,29
tives you can include in an,0,9,0.3,0.14,0.0,0.0,1,29
HTML file. These directives are executed when the,0,9,0.21,0.36,0.0,0.0,1,29
HTML file,0,9,0.21,0.76,0.0,0.0,1,29
is requested and the contents from the execution of these directives are included in the,0,9,0.21,0.14,0.0,0.0,0,29
"spot where the directive was, before the final content is delivered to the client. One of",0,9,0.21,0.14,0.0,0.0,0,29
the most popular uses of,0,9,0.3,0.14,0.0,0.0,1,29
"SSI is to include a frequently used file in another, or to embed",0,9,0.21,0.35,0.0,0.0,1,29
header and footer snippets that are common throughout the site.,0,9,0.3,0.14,0.0,0.0,1,29
"As an example, the following code includes the contents of the navbar.shtml file in",0,9,0.21,0.17,0.0,0.0,0,29
the location you placed the directive:,0,9,0.3,0.14,0.0,0.01,1,29
<html>,0,7,0.26,0.14,0.01,0.0,1,29
<head><title>Example SSI</title></head>,0,7,0.26,0.14,0.0,0.0,1,29
<body>,0,7,0.26,0.14,0.0,0.0,1,29
"<!--#include file=""navbar.shtml"" -->",0,7,0.26,0.14,0.0,0.0,1,29
</body>,0,7,0.26,0.14,0.0,0.0,1,29
</html>,0,7,0.26,0.14,0.0,0.02,1,29
The eventual evolution of,0,9,0.3,0.14,0.02,0.0,1,29
SSI was to include more complex code in the,0,9,0.21,0.36,0.0,0.0,1,29
HTML and use,0,9,0.21,0.73,0.0,0.0,1,29
more powerful interpreters. This pattern grew into highly successful engines for,0,9,0.21,0.14,0.0,0.0,0,29
building sophisticated web applications such as,0,9,0.3,0.14,0.0,0.0,1,29
"PHP , ASP , JSP , and ColdFusion. This",0,9,0.21,0.55,0.0,0.0,1,29
"also became the basis for web template engines like Mustache,",0,9,0.3,0.14,0.0,0.0,1,29
"ERB , Velocity, and",0,9,0.21,0.69,0.0,0.0,1,29
many others.,0,9,0.3,0.14,0.0,0.0,1,29
"As you can see, web applications originated as delivery of customized, dynamic",0,9,0.21,0.17,0.0,0.0,0,29
content to the user through,0,9,0.3,0.14,0.0,0.0,1,29
". To figure out how web applications operate, you",0,9,0.21,0.43,0.0,0.0,1,29
HTTP,0,9,0.21,0.38,0.0,0.0,1,29
need to know how HTTP,0,9,0.3,0.14,0.0,0.0,1,29
works and understand HTTP,0,9,0.21,0.34,0.0,0.0,1,29
requests and responses.,0,9,0.21,0.58,0.0,0.02,1,29
1.5 HTTP request,1,12,0.54,0.07,0.02,0.01,1,29
"HTTP is a request-response protocol, so everything starts with a request. The",0,9,0.21,0.14,0.01,0.0,0,29
HTTP,0,9,0.21,0.8,0.0,0.01,1,29
"request, like any message, consists of a few lines of text in the following order:",0,9,0.21,0.14,0.01,0.0,0,29
HTTP,0,9,0.21,0.28,0.0,0.01,1,29
Request-line,0,9,0.3,0.19,0.01,0.0,1,29
1,1,6,0.33,0.17,0.0,0.01,0,29
Zero or more request headers,0,9,0.3,0.19,0.01,0.0,1,29
2,1,6,0.33,0.17,0.0,0.01,0,29
An empty line,0,9,0.3,0.19,0.01,0.0,1,29
3,1,6,0.33,0.17,0.0,0.01,0,29
The message body (optional),0,9,0.3,0.19,0.01,0.0,1,29
4,1,6,0.33,0.17,0.0,0.0,0,29
10,1,9,0.39,0.06,0.0,0.0,0,30
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,30
C 1,1,7,0.26,0.32,0.0,0.0,0,30
HAPTER,1,6,0.33,0.33,0.0,0.03,1,30
This is how a typical HTTP,0,9,0.3,0.13,0.03,0.0,1,30
request looks:,0,9,0.21,0.34,0.0,0.01,1,30
GET /Protocols/rfc2616/rfc2616.html HTTP/1.1,0,7,0.26,0.13,0.01,0.0,1,30
Host: www.w3.org,0,7,0.26,0.13,0.0,0.0,1,30
User-Agent: Mozilla/5.0,0,7,0.26,0.13,0.0,0.0,1,30
(empty line),0,7,0.26,0.13,0.0,0.02,1,30
"In this request, the first line is the",0,9,0.3,0.13,0.02,0.0,1,30
request-line :,1,9,0.39,0.41,0.0,0.01,1,30
GET /Protocols/rfc2616/rfc2616.html HTTP/1.1,0,7,0.26,0.13,0.01,0.01,1,30
The first word in the request-line is the,0,9,0.3,0.13,0.01,0.0,1,30
"request method , followed by the",1,9,0.39,0.45,0.0,0.0,1,30
Uniform Resource,1,9,0.39,0.7,0.0,0.0,1,30
Identifier (URI) and the version of,1,9,0.48,0.13,0.0,0.0,1,30
HTTP to be used. The next two lines are the request,0,9,0.21,0.4,0.0,0.0,1,30
"headers . Notice the last line is an empty line, which must exist even though there’s no",1,9,0.39,0.13,0.0,0.0,0,30
message body. Whether the message body exists depends on the request method.,0,9,0.21,0.13,0.0,0.02,0,30
1.5.1 Request methods,1,10,0.5,0.06,0.02,0.01,1,30
The request method is the first word on the request-line and indicates the action to be,0,9,0.21,0.13,0.01,0.0,0,30
done on the resource. HTTP,0,9,0.3,0.13,0.0,0.0,1,30
0.9 had only one method:,0,9,0.21,0.36,0.0,0.0,1,30
GET . HTTP 1.0 added POST,0,9,0.21,0.57,0.0,0.0,1,30
and,0,9,0.12,0.79,0.0,0.0,0,30
HEAD . HTTP 1.1 added another five—,0,9,0.3,0.13,0.0,0.0,1,30
"PUT , DELETE , OPTIONS",0,9,0.21,0.46,0.0,0.0,1,30
", TRACE , and CON-",0,9,0.21,0.66,0.0,0.0,1,30
NECT —and opened the possibility for adding more methods (and many promptly did).,0,9,0.21,0.13,0.0,0.0,0,30
"Interestingly, HTTP 1.1 specifies that",0,9,0.3,0.15,0.0,0.0,1,30
GET and HEAD must always be implemented,0,9,0.21,0.46,0.0,0.0,1,30
while all other methods are optional (this means even,0,9,0.3,0.13,0.0,0.0,1,30
POST is optional).,0,9,0.21,0.57,0.0,0.01,1,30
GET —Tells the server to return the specified resource.,1,9,0.48,0.18,0.01,0.0,1,30
■,0,4,0.11,0.15,0.0,0.01,0,30
HEAD —The same as GET,1,9,0.48,0.18,0.01,0.0,1,30
except that the server must not return a message,0,9,0.21,0.39,0.0,0.0,1,30
■,0,4,0.11,0.15,0.0,0.01,0,30
body. This method is often used to get the response headers without carrying,0,9,0.21,0.18,0.01,0.0,0,30
the weight of the rest of the message body over the network.,0,9,0.3,0.18,0.0,0.01,1,30
POST —Tells the server that the data in the message body should be passed to,1,9,0.39,0.18,0.01,0.0,0,30
■,0,4,0.11,0.15,0.0,0.01,0,30
the resource identified by the,0,9,0.3,0.18,0.01,0.0,1,30
URI . What the server does with the message body,0,9,0.21,0.43,0.0,0.0,1,30
is up to the server.,0,9,0.3,0.18,0.0,0.01,1,30
PUT —Tells the server that the data in the message body should be the resource,1,9,0.39,0.18,0.01,0.0,0,30
■,0,4,0.11,0.15,0.0,0.01,0,30
at the given URI . If data already exists at the resource identified by the,0,9,0.21,0.18,0.01,0.0,0,30
"URI , that",0,9,0.21,0.75,0.0,0.0,1,30
"data is replaced. Otherwise, a new resource is created at the place where the",0,9,0.21,0.18,0.0,0.0,0,30
URI is.,0,9,0.3,0.18,0.0,0.01,1,30
DELETE —Tells the server to remove the resource identified by the,1,9,0.48,0.18,0.01,0.0,1,30
URI .,0,9,0.21,0.72,0.0,0.0,1,30
■,0,4,0.11,0.15,0.0,0.01,0,30
"TRACE —Tells the server to return the request. This way, the client can see what",1,9,0.39,0.18,0.01,0.0,0,30
■,0,4,0.11,0.15,0.0,0.01,0,30
the intermediate servers did to the request.,0,9,0.3,0.18,0.01,0.01,1,30
OPTIONS —Tells the server to return a list of,1,9,0.48,0.18,0.01,0.0,1,30
HTTP methods that the server sup-,0,9,0.21,0.54,0.0,0.0,1,30
■,0,4,0.11,0.15,0.0,0.01,0,30
ports.,0,9,0.3,0.18,0.01,0.01,1,30
CONNECT —Tells the server to set up a network connection with the client. This,1,9,0.39,0.18,0.01,0.0,0,30
■,0,4,0.11,0.15,0.0,0.01,0,30
method is used mostly for setting up,0,9,0.3,0.18,0.01,0.0,1,30
SSL tunneling (to enable,0,9,0.21,0.48,0.0,0.0,1,30
HTTPS ).,0,9,0.21,0.69,0.0,0.01,1,30
PATCH —Tells the server that the data in the message body modifies the,1,9,0.48,0.18,0.01,0.0,1,30
■,0,4,0.11,0.15,0.0,0.01,0,30
resource identified by the,0,9,0.3,0.18,0.01,0.0,1,30
URI .,0,9,0.21,0.39,0.0,0.0,1,30
11,1,9,0.3,0.83,0.0,0.0,0,31
HTTP request,1,9,0.39,0.41,0.0,0.03,1,31
1.5.2 Safe request methods,1,10,0.5,0.07,0.03,0.01,1,31
A method is considered,0,9,0.3,0.14,0.01,0.0,1,31
"safe if it doesn’t change the state of the server—that is, the",1,9,0.39,0.35,0.0,0.0,1,31
server provides only information and nothing else.,0,9,0.3,0.14,0.0,0.0,1,31
"GET , HEAD , OPTIONS , and",0,9,0.21,0.56,0.0,0.0,1,31
TRACE,0,9,0.21,0.79,0.0,0.01,1,31
are safe methods because they aren’t supposed to change anything on the server. In,0,9,0.21,0.14,0.01,0.0,0,31
"comparison, POST , PUT , and",0,9,0.3,0.14,0.0,0.0,1,31
DELETE methods do change the state of the server; for,0,9,0.21,0.38,0.0,0.0,1,31
"example, after a POST request is sent, data at the server is supposed to be changed.",0,9,0.21,0.14,0.0,0.02,0,31
1.5.3 Idempotent request methods,1,10,0.5,0.07,0.02,0.01,1,31
A method is considered idempotent,1,9,0.48,0.14,0.01,0.0,1,31
if the state of the server doesn’t change the second,0,9,0.21,0.42,0.0,0.0,1,31
time the method is called with the same data. Safe methods by definition are consid-,0,9,0.21,0.14,0.0,0.0,0,31
ered idempotent as well (though obviously not the other way around).,0,9,0.3,0.14,0.0,0.0,1,31
PUT and DELETE are idempotent but not safe. This is because,0,9,0.3,0.17,0.0,0.0,1,31
PUT and DELETE,0,9,0.21,0.7,0.0,0.0,1,31
don’t change the state of the server the second time they’re called.,0,9,0.3,0.14,0.0,0.0,1,31
PUT with the same,0,9,0.21,0.69,0.0,0.0,1,31
"resource will result in the same actions being taken by the server, because after the",0,9,0.21,0.14,0.0,0.0,0,31
first request the resource at the,0,9,0.3,0.14,0.0,0.0,1,31
URI is either already updated or created.,0,9,0.21,0.4,0.0,0.0,1,31
DELETE with,0,9,0.21,0.74,0.0,0.0,1,31
"the same resource might result in an error by the server, but the state doesn’t change.",0,9,0.21,0.14,0.0,0.0,0,31
POST is neither a safe nor an idempotent method because subsequent,0,9,0.3,0.17,0.0,0.0,1,31
POST,0,9,0.21,0.8,0.0,0.01,1,31
"requests to the server might (or might not) result in a state change, depending on the",0,9,0.21,0.14,0.01,0.0,0,31
server. Idempotency is an important idea that we’ll revisit when we talk about web ser-,0,9,0.21,0.14,0.0,0.0,0,31
vices in chapter 7.,0,9,0.3,0.14,0.0,0.02,1,31
1.5.4 Browser support for request methods,1,10,0.5,0.07,0.02,0.01,1,31
GET is the most fundamental,0,9,0.3,0.14,0.01,0.0,1,31
"HTTP method, and it’s supported with all browsers",0,9,0.21,0.4,0.0,0.0,1,31
because it’s how you actually get content from the server.,0,9,0.3,0.14,0.0,0.0,1,31
POST support started with,0,9,0.21,0.63,0.0,0.0,1,31
"form tag has an attribute,",0,9,0.21,0.63,0.0,0.0,1,31
HTML 2.0 with the addition of,0,9,0.3,0.14,0.0,0.0,1,31
HTML forms. The HTML,0,9,0.21,0.41,0.0,0.0,1,31
"method , that accepts either the value",0,9,0.3,0.14,0.0,0.0,1,31
get or post that indicates which,0,9,0.21,0.45,0.0,0.0,1,31
HTTP method,0,9,0.21,0.73,0.0,0.0,1,31
you want to use.,0,9,0.3,0.14,0.0,0.0,1,31
HTML doesn’t support any other,0,9,0.3,0.17,0.0,0.0,1,31
HTTP methods besides GET,0,9,0.21,0.45,0.0,0.0,1,31
and POST . In early,0,9,0.21,0.68,0.0,0.0,1,31
"drafts of HTML 5, PUT and",0,9,0.3,0.14,0.0,0.0,1,31
DELETE support were added as values in the,0,9,0.21,0.37,0.0,0.0,1,31
HTML form,0,9,0.21,0.75,0.0,0.0,1,31
"method attribute, but it was taken out again.",0,9,0.3,0.14,0.0,0.0,1,31
Modern browsers do more than just,0,9,0.3,0.17,0.0,0.0,1,31
", though. To support",0,9,0.21,0.52,0.0,0.0,1,31
"and ,",0,9,0.21,0.73,0.0,0.0,1,31
HTML,0,9,0.21,0.47,0.0,0.0,1,31
PUT DELETE,0,9,0.21,0.7,0.0,0.01,1,31
you can use XMLH ttp R equest,0,9,0.3,0.14,0.01,0.0,1,31
(XHR) . XHR is a set of browser,0,9,0.21,0.39,0.0,0.0,1,31
"API s (actually, it’s mostly",0,9,0.21,0.64,0.0,0.0,1,31
just a browser object called,0,9,0.3,0.14,0.0,0.0,1,31
XMLH ttp R equest) with JavaScript code usually wrapped,0,9,0.21,0.38,0.0,0.0,1,31
around it . XHR allows programmers to send,0,9,0.3,0.14,0.0,0.0,1,31
"HTTP requests to the server and, despite",0,9,0.21,0.51,0.0,0.0,1,31
"its name, isn’t limited to using",0,9,0.3,0.14,0.0,0.0,1,31
XML only. Requests and responses can be sent in any,0,9,0.21,0.4,0.0,0.0,1,31
"format, including and text files.",0,9,0.3,0.14,0.0,0.0,1,31
JSON,0,9,0.21,0.29,0.0,0.02,1,31
1.5.5 Request headers,1,10,0.5,0.07,0.02,0.01,1,31
"Although the HTTP request method defines the action requested by the calling client,",0,9,0.21,0.14,0.01,0.0,0,31
other information on the request or the client is often placed in,0,9,0.3,0.14,0.0,0.0,1,31
HTTP request head-,0,9,0.21,0.68,0.0,0.0,1,31
"ers. Request headers are colon-separated name-value pairs in plain text, terminated by",0,9,0.21,0.14,0.0,0.0,0,31
a carriage return (CR) and line feed,0,9,0.3,0.14,0.0,0.0,1,31
(LF) .,0,9,0.21,0.44,0.0,0.0,1,31
12,1,9,0.39,0.06,0.0,0.0,0,32
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,32
C 1,1,7,0.26,0.32,0.0,0.0,0,32
HAPTER,1,6,0.33,0.33,0.0,0.03,1,32
A core set of HTTP request fields is standardized in,0,9,0.3,0.15,0.03,0.0,1,32
RFC 7231 (which is a part of the,0,9,0.21,0.57,0.0,0.0,1,32
"set of HTTP 1.1 RFC s). In the past, nonstandard",0,9,0.3,0.13,0.0,0.0,1,32
HTTP request fields conventionally,0,9,0.21,0.53,0.0,0.0,1,32
"started with X- , but this practice has been discontinued.",0,9,0.3,0.13,0.0,0.0,1,32
HTTP request headers are mostly optional. The only mandatory header in,0,9,0.3,0.15,0.0,0.0,1,32
HTTP,0,9,0.21,0.78,0.0,0.01,1,32
"1.1 is the Host header field. But if the message has a message body (which is optional,",0,9,0.21,0.13,0.01,0.0,0,32
"depending on the method), you’ll need to have either the Content-Length or the",0,9,0.21,0.13,0.0,0.0,0,32
Transfer-Encoding header fields. Some common request headers you’ll see appear in,0,9,0.21,0.13,0.0,0.0,0,32
table 1.1.,0,9,0.3,0.13,0.0,0.02,1,32
Table 1.1 Common HTTP request headers,1,7,0.44,0.13,0.02,0.02,1,32
Header field,1,7,0.44,0.16,0.02,0.0,1,32
Description,1,7,0.35,0.52,0.0,0.02,1,32
Accept Content types that are acceptable by the client as part of the HTTP response.,0,7,0.17,0.14,0.02,0.0,0,32
"For example, Accept: text/html",0,7,0.17,0.3,0.0,0.0,1,32
signals to the server that the client wants,0,7,0.17,0.54,0.0,0.0,1,32
the response body’s content type to be in HTML.,0,7,0.17,0.3,0.0,0.01,1,32
Accept-Charset:,0,7,0.17,0.68,0.01,0.0,1,32
"Accept-Charset The character sets required from the server. For example,",0,7,0.17,0.14,0.0,0.0,0,32
utf-8 tells the server that the client wants the response body to be in UTF-8.,0,7,0.08,0.3,0.0,0.01,0,32
Authorization This is used to send Basic Authentication credentials to the server.,0,7,0.17,0.14,0.01,0.01,0,32
Cookie The client should send back cookies that were set by the calling server. If the,0,7,0.17,0.14,0.01,0.0,0,32
"server had set three cookies at the browser previously, the Cookie header field",0,7,0.08,0.3,0.0,0.0,0,32
will contain all three cookies in a semicolon-delimited name-value pair string.,0,7,0.08,0.3,0.0,0.0,0,32
For example:,0,7,0.17,0.3,0.0,0.0,1,32
Cookie: my_first_cookie=hello; my_second_cookie=world,0,7,0.17,0.3,0.0,0.01,1,32
Content-Length The length of the request body in octets.,0,7,0.26,0.14,0.01,0.01,1,32
Content-Type The content type of the request body (when there’s a request body). When a,0,7,0.17,0.14,0.01,0.0,0,32
x-www-form-urlen-,0,7,0.17,0.65,0.0,0.0,1,32
"POST or a PUT is sent, the content type is by default",0,7,0.17,0.3,0.0,0.0,1,32
coded . But when uploading a file (using the HTML input tag with the type attri-,0,7,0.08,0.3,0.0,0.0,0,32
"bute set to file , or otherwise) the content type should be",0,7,0.17,0.3,0.0,0.0,1,32
multipart/,0,7,0.17,0.69,0.0,0.0,1,32
form-data .,0,7,0.17,0.3,0.0,0.01,1,32
"Host The name of the server, along with the port number. If the port number is omit-",0,7,0.17,0.14,0.01,0.0,0,32
"ted, it will be resolved as port 80.",0,7,0.17,0.3,0.0,0.01,1,32
Referrer The address of the previous page that linked to the requested page.,0,7,0.17,0.14,0.01,0.01,0,32
User-Agent Describes the calling client.,0,7,0.26,0.14,0.01,0.04,1,32
1.6 HTTP response,1,12,0.54,0.06,0.04,0.01,1,32
An HTTP response message is sent every time there’s a request. Like the,0,9,0.21,0.13,0.01,0.0,0,32
HTTP,0,9,0.21,0.78,0.0,0.01,1,32
"request, the HTTP response consists of a few lines of plain text:",0,9,0.3,0.13,0.01,0.01,1,32
A status line,0,9,0.3,0.18,0.01,0.0,1,32
■,0,4,0.11,0.15,0.0,0.01,0,32
Zero or more response headers,0,9,0.3,0.18,0.01,0.0,1,32
■,0,4,0.11,0.15,0.0,0.01,0,32
An empty line,0,9,0.3,0.18,0.01,0.0,1,32
■,0,4,0.11,0.15,0.0,0.01,0,32
The message body (optional),0,9,0.3,0.18,0.01,0.0,1,32
■,0,4,0.11,0.15,0.0,0.0,0,32
13,1,9,0.3,0.83,0.0,0.0,0,33
HTTP response,1,9,0.39,0.41,0.0,0.03,1,33
You probably realized that an,0,9,0.3,0.14,0.03,0.0,1,33
HTTP response is structured the same way as an,0,9,0.21,0.39,0.0,0.0,1,33
HTTP,0,9,0.21,0.8,0.0,0.01,1,33
request. This is how a typical,0,9,0.3,0.14,0.01,0.0,1,33
HTTP response looks like (shortened in the interest of,0,9,0.21,0.39,0.0,0.0,1,33
saving trees):,0,9,0.3,0.14,0.0,0.01,1,33
200 OK,0,7,0.26,0.14,0.01,0.0,1,33
"Date: Sat, 22 Nov 2014 12:58:58 GMT",0,7,0.26,0.14,0.0,0.0,1,33
Server: Apache/2,0,7,0.26,0.14,0.0,0.0,1,33
"Last-Modified: Thu, 28 Aug 2014 21:01:33 GMT",0,7,0.26,0.17,0.0,0.0,1,33
Content-Length: 33115,0,7,0.26,0.14,0.0,0.0,1,33
Content-Type: text/html; charset=iso-8859-1,0,7,0.26,0.14,0.0,0.02,1,33
"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/",0,7,0.17,0.14,0.02,0.0,0,33
"TR/xhtml1/DTD/xhtml1-strict.dtd""> <html xmlns='http://www.w3.org/1999/",0,7,0.26,0.19,0.0,0.0,1,33
xhtml'> <head><title>Hypertext Transfer Protocol -- HTTP/1.1</title></,0,7,0.26,0.19,0.0,0.0,1,33
head><body>…</body></html>,0,7,0.26,0.19,0.0,0.02,1,33
The first line of the HTTP,0,9,0.3,0.14,0.02,0.0,1,33
response is the status line,1,9,0.39,0.36,0.0,0.0,1,33
", which consists of the status code",1,9,0.39,0.57,0.0,0.0,1,33
and a corresponding reason phrase,1,9,0.48,0.14,0.0,0.0,1,33
", which is a short description of the code. In this",0,9,0.21,0.43,0.0,0.0,1,33
"case, the HTTP response has a message body, which is in",0,9,0.3,0.14,0.0,0.0,1,33
HTML .,0,9,0.21,0.6,0.0,0.02,1,33
1.6.1 Response status code,1,10,0.5,0.07,0.02,0.01,1,33
"As mentioned earlier, the status code in an",0,9,0.3,0.14,0.01,0.0,1,33
response indicates what type of,0,9,0.21,0.57,0.0,0.0,1,33
HTTP,0,9,0.21,0.52,0.0,0.0,1,33
response it is. There are five classes of,0,9,0.3,0.14,0.0,0.0,1,33
"HTTP response status codes, depending on the",0,9,0.21,0.46,0.0,0.0,1,33
first digit of the code (see table 1.2).,0,9,0.3,0.14,0.0,0.03,1,33
Table 1.2 HTTP response status codes,1,7,0.44,0.14,0.03,0.02,1,33
Status code class,1,7,0.44,0.15,0.02,0.0,1,33
Description,1,7,0.35,0.53,0.0,0.02,1,33
1XX Informational. This tells the client that the server has already received the request,0,7,0.17,0.15,0.02,0.0,0,33
and is processing it.,0,7,0.17,0.3,0.0,0.01,1,33
2XX Success. This is what clients want; the server has received the request and has,0,7,0.17,0.15,0.01,0.0,0,33
processed it successfully. The standard response in this class is 200 OK.,0,7,0.08,0.3,0.0,0.01,0,33
3XX Redirection. This tells the client that the request is received and processed but,0,7,0.17,0.15,0.01,0.0,0,33
the client needs to do more to complete the action. Most of the status codes in,0,7,0.08,0.3,0.0,0.0,0,33
this class are for URL redirection.,0,7,0.17,0.3,0.0,0.01,1,33
4XX Client Error. This tells the client that there’s something wrong with the request.,0,7,0.17,0.15,0.01,0.0,0,33
"The most widely known status in this class is 404 Not Found, where the server",0,7,0.08,0.3,0.0,0.0,0,33
tells the client that the resource it’s trying to get isn’t found at that URL.,0,7,0.08,0.3,0.0,0.01,0,33
5XX Server Error. This tells the client that there’s something wrong with the request,0,7,0.17,0.15,0.01,0.0,0,33
but it’s the server’s fault. The generic status code in this class is 500 Internal,0,7,0.08,0.3,0.0,0.0,0,33
Server Error.,0,7,0.17,0.3,0.0,0.03,1,33
1.6.2 Response headers,1,10,0.5,0.07,0.03,0.01,1,33
Response headers are similar to that of request headers. They are both colon-,0,9,0.21,0.14,0.01,0.0,0,33
"separated name-value pairs in plain text, terminated by a CR and LF. Just as request",0,9,0.21,0.14,0.0,0.0,0,33
14,1,9,0.39,0.06,0.0,0.0,0,34
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,34
C 1,1,7,0.26,0.32,0.0,0.0,0,34
HAPTER,1,6,0.33,0.33,0.0,0.03,1,34
"headers tell the server more about the request and what the client wants, the response",0,9,0.21,0.13,0.03,0.0,0,34
headers are the means for the server to tell the client more about the response and,0,9,0.21,0.13,0.0,0.0,0,34
what the server wants (from the client). Some commonly used response headers are,0,9,0.21,0.13,0.0,0.0,0,34
shown in table 1.3.,0,9,0.3,0.13,0.0,0.02,1,34
Table 1.3 Common response headers,1,7,0.44,0.13,0.02,0.02,1,34
Header field,1,7,0.44,0.16,0.02,0.0,1,34
Description,1,7,0.35,0.51,0.0,0.02,1,34
Allow Tells the client which request methods are supported by the server.,0,7,0.17,0.14,0.02,0.01,0,34
Content-Length The length of the response body in octets (8-bit bytes).,0,7,0.17,0.14,0.01,0.01,0,34
Content-Type The content type of the response body (when there is a response body).,0,7,0.17,0.14,0.01,0.01,0,34
Date Tells the current time (formatted in GMT).,0,7,0.26,0.14,0.01,0.01,1,34
"Location This header is used with redirection, to tell the client where to request the next",0,7,0.17,0.14,0.01,0.0,0,34
URL.,0,7,0.17,0.29,0.0,0.01,1,34
Server Domain name of the server that’s returning the response.,0,7,0.26,0.14,0.01,0.01,1,34
Set-Cookie Sets a cookie at the client. Multiple Set-Cookie headers can be added to the,0,7,0.17,0.14,0.01,0.0,0,34
same response.,0,7,0.17,0.29,0.0,0.01,1,34
WWW-Authenticate Tells header the client what type of authorization clients should supply in their,0,7,0.17,0.14,0.01,0.0,0,34
401,0,7,0.08,0.76,0.0,0.0,0,34
Authorization request header. The server usually sends this along with a,0,7,0.08,0.29,0.0,0.0,0,34
Unauthorized status line. This header also provides the challenge information,0,7,0.08,0.29,0.0,0.0,0,34
"to the authentication schemes that are accepted by the server (for example, the",0,7,0.08,0.29,0.0,0.0,0,34
basic and digest access authentication schemes described in RFC 2617).,0,7,0.17,0.29,0.0,0.03,1,34
1.7 URI,1,12,0.54,0.06,0.03,0.01,1,34
"When Tim Berners-Lee introduced the World Wide Web to the world, he also intro-",0,9,0.21,0.13,0.01,0.0,0,34
duced the idea of a location string representing a resource on the internet. In June,0,9,0.21,0.13,0.0,0.0,0,34
"1994, Berners-Lee published",0,9,0.3,0.13,0.0,0.0,1,34
"RFC 1630 , which defined the",0,9,0.21,0.37,0.0,0.0,1,34
URI . In it he described the,0,9,0.21,0.61,0.0,0.0,1,34
concepts of a string that represents the name of the resource (,0,9,0.3,0.13,0.0,0.0,1,34
"uniform resource name , or",1,9,0.39,0.63,0.0,0.0,1,34
URN ) and a string that represents the location of the resource (,0,9,0.3,0.13,0.0,0.0,1,34
"uniform resource locator ,",1,9,0.39,0.65,0.0,0.0,1,34
or URL ). The URI is an umbrella term that includes both the,0,9,0.3,0.13,0.0,0.0,1,34
"URN and the URI , and",0,9,0.21,0.64,0.0,0.0,1,34
they have similar syntax and format. This book uses only,0,9,0.3,0.13,0.0,0.0,1,34
"URL s, so for all purposes,",0,9,0.21,0.61,0.0,0.0,1,34
both the URI and URL can be used interchangeably.,0,9,0.3,0.13,0.0,0.0,1,34
This is the general form of a,0,9,0.3,0.15,0.0,0.0,1,34
URI : <scheme name> : <hierarchical part> [ ? <query> ],0,9,0.21,0.38,0.0,0.0,1,34
[ # <fragment> ],0,9,0.3,0.13,0.0,0.0,1,34
The scheme name is the name of the,1,9,0.48,0.15,0.0,0.0,1,34
URI scheme that defines the rest of the,0,9,0.21,0.46,0.0,0.0,1,34
URI,0,9,0.12,0.8,0.0,0.01,0,34
structure. A large number of,0,9,0.3,0.13,0.01,0.0,1,34
"URI schemes are in use, because",0,9,0.21,0.37,0.0,0.0,1,34
URI is a popular way of,0,9,0.21,0.64,0.0,0.0,1,34
identifying resources. But the one we’ll be using mostly in this book is the,0,9,0.21,0.13,0.0,0.0,0,34
HTTP,0,9,0.21,0.78,0.0,0.0,1,34
scheme.,0,9,0.3,0.13,0.0,0.0,1,34
The hierarchical part contains the identification information and should be hierar-,1,9,0.39,0.15,0.0,0.0,0,34
"chical in structure. If the hierarchical part starts with a double slash (//), then it’ll",0,9,0.21,0.13,0.0,0.0,0,34
15,1,9,0.3,0.83,0.0,0.0,0,35
URI,1,9,0.3,0.44,0.0,0.03,0,35
"@ , followed by the hierarchical",0,9,0.21,0.59,0.03,0.0,1,35
contain optional user information that ends with an,0,9,0.3,0.14,0.0,0.0,1,35
"path. Otherwise, it’s just the path. The path is a sequence of segments, separated by a",0,9,0.21,0.14,0.0,0.0,0,35
forward slash (/).,0,9,0.3,0.14,0.0,0.0,1,35
Only the scheme name and the hierarchical parts are mandatory. The,0,9,0.3,0.17,0.0,0.0,1,35
"query , which",1,9,0.39,0.75,0.0,0.0,1,35
"starts with a question mark (?), is optional and contains other information that’s not",0,9,0.21,0.14,0.0,0.0,0,35
"hierarchical in nature. The query is often organized as a sequence of key-value pairs,",0,9,0.21,0.14,0.0,0.0,0,35
separated by an ampersand (&).,0,9,0.3,0.14,0.0,0.0,1,35
Another optional part is the,0,9,0.3,0.17,0.0,0.0,1,35
"fragment , which is an identifier to a secondary resource",1,9,0.39,0.4,0.0,0.0,1,35
that’s part of the URI that’s defined. The fragment starts after the hash (#). If a,0,9,0.21,0.14,0.0,0.0,0,35
URI,0,9,0.12,0.81,0.0,0.01,0,35
"has a query, the fragment will follow the query. The fragment is meant to be processed",0,9,0.21,0.14,0.01,0.0,0,35
"by the client, so web browsers normally strip the fragment out before sending the",0,9,0.21,0.14,0.0,0.0,0,35
URI,0,9,0.12,0.81,0.0,0.0,0,35
to the server. But it doesn’t mean that as a programmer you won’t get the fragment;,0,9,0.21,0.14,0.0,0.0,0,35
you can always include it in a,0,9,0.3,0.14,0.0,0.0,1,35
GET request through JavaScript or some,0,9,0.21,0.4,0.0,0.0,1,35
HTTP client,0,9,0.21,0.74,0.0,0.0,1,35
libraries.,0,9,0.3,0.14,0.0,0.0,1,35
Let’s look at an example of an,0,9,0.3,0.17,0.0,0.0,1,35
HTTP scheme URI : http://sausheong:password,0,9,0.21,0.45,0.0,0.0,1,35
@www.example.com/docs/file?name=sausheong&location=singapore#summary,0,9,0.3,0.14,0.0,0.0,1,35
"The scheme is http , followed by the colon. The segment",0,9,0.3,0.17,0.0,0.0,1,35
sausheong:password fol-,1,9,0.39,0.66,0.0,0.0,1,35
lowed by the at sign ( @ ) is the user and password information. This is followed by the,1,9,0.39,0.14,0.0,0.0,0,35
"rest of the hierarchical part,",0,9,0.3,0.14,0.0,0.0,1,35
. The top level of the hierarchi-,0,9,0.21,0.58,0.0,0.0,1,35
www.example.com/docs/file,1,9,0.39,0.38,0.0,0.0,1,35
"cal part is the domain name of the server,",0,9,0.3,0.14,0.0,0.0,1,35
"www.example.com , followed on by",1,9,0.39,0.5,0.0,0.0,1,35
docs and,1,9,0.39,0.77,0.0,0.0,1,35
"then file , each separated by a forward slash. Next is the query, which begins after the",1,9,0.39,0.14,0.0,0.0,0,35
question mark ( ? ). The query consists of two name-value pairs:,1,9,0.48,0.14,0.0,0.0,1,35
name=sausheong and,1,9,0.39,0.68,0.0,0.0,1,35
"location=singapore , joined by a single ampersand (",1,9,0.48,0.14,0.0,0.0,1,35
"& ). Finally, the fragment follows",1,9,0.39,0.56,0.0,0.0,1,35
"after the query, starting after the hash (",0,9,0.3,0.14,0.0,0.0,1,35
# ).,1,9,0.39,0.46,0.0,0.0,1,35
"The URL is a single string, so spaces within the",0,9,0.3,0.17,0.0,0.0,1,35
"URL aren’t permitted. Also, certain",0,9,0.21,0.56,0.0,0.0,1,35
characters like the question mark (?) and the hash (#) have special meaning within,0,9,0.21,0.14,0.0,0.0,0,35
"the URL and so can’t be permitted for other purposes. To get over this limitation, we",0,9,0.21,0.14,0.0,0.0,0,35
use encoding (also called percent encoding) to convert those special characters,1,9,0.39,0.14,0.0,0.0,0,35
URL,1,9,0.39,0.18,0.0,0.0,0,35
into something else.,0,9,0.3,0.14,0.0,0.0,1,35
RFC 3986 defines a set of characters that are reserved or not reserved. Everything,0,9,0.21,0.17,0.0,0.0,0,35
in the reserved list needs to be,0,9,0.3,0.14,0.0,0.0,1,35
URL encoded. URL encoding encodes a character by,0,9,0.21,0.41,0.0,0.0,1,35
"converting the character to its corresponding byte value in ASCII, then representing",0,9,0.21,0.14,0.0,0.0,0,35
that as a pair of hexadecimal digits and prepending it with a percent sign (%).,0,9,0.21,0.14,0.0,0.0,0,35
"For example, a blank space’s byte value in ASCII is 32, which is 20 in hexadecimal.",0,9,0.21,0.17,0.0,0.0,0,35
"%20 , and this is used in a",0,9,0.21,0.5,0.0,0.0,1,35
"Therefore, the URL encoding of a space is",0,9,0.3,0.14,0.0,0.0,1,35
URL instead of a,0,9,0.21,0.71,0.0,0.0,1,35
space. This example shows the,0,9,0.3,0.14,0.0,0.0,1,35
URL if I’d used my name with the space between sau,0,9,0.21,0.4,0.0,0.0,1,35
and sheong: http://www.example.com/docs/file?name=sau%20sheong&location=,0,9,0.21,0.14,0.0,0.0,0,35
singapore .,0,9,0.3,0.14,0.0,0.0,1,35
16,1,9,0.39,0.06,0.0,0.0,0,36
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,36
C 1,1,7,0.26,0.32,0.0,0.0,0,36
HAPTER,1,6,0.33,0.33,0.0,0.03,1,36
1.8 Introducing HTTP/2,1,12,0.54,0.06,0.03,0.01,1,36
"HTTP/2 , the new version of",0,9,0.3,0.13,0.01,0.0,1,36
"HTTP , focuses on performance.",0,9,0.21,0.38,0.0,0.0,1,36
HTTP/2 is based on,0,9,0.21,0.65,0.0,0.0,1,36
"SPDY/2 , an open networking protocol developed primarily at Google for transporting",0,9,0.21,0.13,0.0,0.0,0,36
"web content, though over time there have been a number of changes.",0,9,0.3,0.13,0.0,0.0,1,36
"HTTP/2 is a binary protocol, unlike",0,9,0.3,0.16,0.0,0.0,1,36
"HTTP/1 .x, which is text-based. This makes",0,9,0.21,0.47,0.0,0.0,1,36
"HTTP/2 more efficient to parse, and it is more compact and less prone for errors. But",0,9,0.21,0.13,0.0,0.0,0,36
that means you can no longer send,0,9,0.3,0.13,0.0,0.0,1,36
"HTTP/2 messages directly through the network,",0,9,0.21,0.43,0.0,0.0,1,36
"through applications such as telnet, and so it is harder to debug if you’re used to",0,9,0.21,0.13,0.0,0.0,0,36
HTTP/1 .x.,0,9,0.3,0.13,0.0,0.0,1,36
"Unlike HTTP /1.x, which only allows a single request on a connection at a time,",0,9,0.21,0.15,0.0,0.0,0,36
HTTP /2 is fully multiplexed. This means multiple requests and responses can be using,0,9,0.21,0.13,0.0,0.0,0,36
the same connection at the same time.,0,9,0.3,0.13,0.0,0.0,1,36
HTTP/2 also compresses the header to reduce,0,9,0.21,0.45,0.0,0.0,1,36
"overhead and allows the server to push responses to the client, generally improving",0,9,0.21,0.13,0.0,0.0,0,36
performance.,0,9,0.3,0.13,0.0,0.0,1,36
"As you can see, HTTP/2",0,9,0.3,0.15,0.0,0.0,1,36
generally improves the communications performance of,0,9,0.21,0.35,0.0,0.0,1,36
"the protocol. What is not changed, are the",0,9,0.3,0.13,0.0,0.0,1,36
"HTTP semantics; for example, the",0,9,0.21,0.49,0.0,0.0,1,36
HTTP,0,9,0.21,0.78,0.0,0.0,1,36
"methods, status codes, and so on. This is because",0,9,0.3,0.13,0.0,0.0,1,36
"HTTP is so widely used, and any",0,9,0.21,0.55,0.0,0.0,1,36
change to the semantics would break the existing web.,0,9,0.3,0.13,0.0,0.0,1,36
"In Go 1.6, if you’re using",0,9,0.3,0.15,0.0,0.0,1,36
"HTTPS , you’ll be automatically using",0,9,0.21,0.36,0.0,0.0,1,36
HTTP/2 . For earlier,0,9,0.21,0.66,0.0,0.0,1,36
"versions of Go, the golang.org/x/net/http2",0,9,0.3,0.13,0.0,0.0,1,36
package implements the,0,9,0.21,0.5,0.0,0.0,1,36
HTTP/2 proto-,0,9,0.21,0.71,0.0,0.0,1,36
col. You will see how it can be used in chapter 3.,0,9,0.3,0.13,0.0,0.02,1,36
1.9 Parts of a web app,1,12,0.54,0.06,0.02,0.01,1,36
From the previous sections you’ve seen that a web application is a piece of program,0,9,0.21,0.13,0.01,0.0,0,36
that does the following:,0,9,0.3,0.13,0.0,0.01,1,36
Takes input through HTTP,0,9,0.3,0.18,0.01,0.0,1,36
from the client in the form of an,0,9,0.21,0.41,0.0,0.0,1,36
HTTP request,0,9,0.21,0.71,0.0,0.0,1,36
1,1,6,0.33,0.15,0.0,0.01,0,36
message,0,9,0.3,0.18,0.01,0.01,1,36
Processes the HTTP request message and performs necessary work,0,9,0.3,0.18,0.01,0.0,1,36
2,1,6,0.33,0.15,0.0,0.01,0,36
Generates HTML and returns it in an,0,9,0.3,0.18,0.01,0.0,1,36
HTTP response message,0,9,0.21,0.48,0.0,0.0,1,36
3,1,6,0.33,0.15,0.0,0.01,0,36
"As a result, there are two distinct parts of a web app: the",0,9,0.3,0.13,0.01,0.0,1,36
handlers and the template,1,9,0.39,0.62,0.0,0.0,1,36
engine .,1,9,0.48,0.13,0.0,0.02,1,36
1.9.1 Handler,1,10,0.5,0.06,0.02,0.01,1,36
A handler receives and processes the,1,9,0.48,0.13,0.01,0.0,1,36
HTTP request sent from the client. It also calls the,0,9,0.21,0.42,0.0,0.0,1,36
template engine to generate the,0,9,0.3,0.13,0.0,0.0,1,36
HTML and finally bundles data into the,0,9,0.21,0.42,0.0,0.0,1,36
HTTP,0,9,0.21,0.78,0.0,0.01,1,36
response to be sent back to the client.,0,9,0.3,0.13,0.01,0.0,1,36
"In the MVC pattern the handler is the controller, but also the model. In an ideal",0,9,0.21,0.15,0.0,0.0,0,36
"MVC pattern implementation, the controller would be thin, with only routing and",0,9,0.21,0.13,0.0,0.0,0,36
"HTTP message unpacking and packing logic. The models are fat, containing the appli-",0,9,0.21,0.13,0.0,0.0,0,36
cation logic and data.,0,9,0.3,0.13,0.0,0.0,1,36
17,1,9,0.3,0.83,0.0,0.0,0,37
Parts of a web app,1,9,0.39,0.4,0.0,0.04,1,37
Model-View-Controller pattern,1,10,0.5,0.17,0.04,0.01,1,37
The Model-View-Controller (MVC) pattern is a popular pattern for writing web applica-,0,9,0.21,0.17,0.01,0.0,0,37
tions—so popular that it’s sometimes mistaken as the web application development,0,9,0.21,0.17,0.0,0.0,0,37
model itself.,0,9,0.3,0.17,0.0,0.01,1,37
MVC was introduced in Smalltalk in the late 1970s (more than 10 years before the,0,9,0.21,0.17,0.01,0.0,0,37
World Wide Web and HTTP) at Xerox PARC. The MVC pattern divides a program into,0,9,0.21,0.17,0.0,0.0,0,37
"three parts: model, view, and controller. The model is a representation of the under-",0,9,0.21,0.17,0.0,0.0,0,37
"lying data, the view is a visualization of the model for the user, and the controller uses",0,9,0.21,0.17,0.0,0.0,0,37
"input from the user to modify the model. When the model changes, the view updates",0,9,0.21,0.17,0.0,0.0,0,37
automatically to show the latest visualization.,0,9,0.3,0.17,0.0,0.01,1,37
"Although originally developed for the desktop, it became popular for writing web ap-",0,9,0.21,0.17,0.01,0.0,0,37
"plications, and many web application frameworks—including Ruby on Rails, CodeIg-",0,9,0.21,0.17,0.0,0.0,0,37
"niter, Play, and Spring MVC—use it as their foundation pattern. The model is often",0,9,0.21,0.17,0.0,0.0,0,37
"mapped to a database using structures or objects, the views are the returned HTML,",0,9,0.21,0.17,0.0,0.0,0,37
and the controllers route the requests and manage access to the models.,0,9,0.21,0.17,0.0,0.01,0,37
Many novice programmers who build their web applications with MVC-based web ap-,0,9,0.21,0.17,0.01,0.0,0,37
plication frameworks often mistake the MVC pattern as the only way to develop web,0,9,0.21,0.17,0.0,0.0,0,37
"applications. In fact, web applications are simply applications that interact with users",0,9,0.21,0.17,0.0,0.0,0,37
"over the HTTP protocol, and any pattern (or no pattern) that allows such applications",0,9,0.21,0.17,0.0,0.0,0,37
to be written can be used.,0,9,0.3,0.17,0.0,0.04,1,37
Sometimes service objects or,1,9,0.48,0.14,0.04,0.0,1,37
"functions are used to manipulate the models, freeing the",1,9,0.39,0.37,0.0,0.0,1,37
"model from being too bloated and enabling reuse of code. In this case, service objects",0,9,0.21,0.14,0.0,0.0,0,37
can be reused on different models and the same logic can be placed in single service,0,9,0.21,0.14,0.0,0.0,0,37
"object instead of being copied in different models. Service objects, though, are not",0,9,0.21,0.14,0.0,0.0,0,37
strictly speaking part of the,0,9,0.3,0.14,0.0,0.0,1,37
MVC pattern.,0,9,0.21,0.37,0.0,0.0,1,37
"As you may realize by now, web applications don’t necessarily need to follow the",0,9,0.21,0.17,0.0,0.0,0,37
MVC pattern. It’s perfectly fine to have the handler perform all the processing and,0,9,0.21,0.14,0.0,0.0,0,37
simply return a response to the client. It’s not necessary to split the work into control-,0,9,0.21,0.14,0.0,0.0,0,37
lers and models.,0,9,0.3,0.14,0.0,0.02,1,37
1.9.2 Template engine,1,10,0.5,0.07,0.02,0.01,1,37
A template is code that can be converted into,1,9,0.48,0.14,0.01,0.0,1,37
HTML that’s sent back to the client in an,0,9,0.21,0.51,0.0,0.0,1,37
HTTP response message. Templates can be partly in,0,9,0.3,0.14,0.0,0.0,1,37
HTML or not at all. A template,1,9,0.39,0.59,0.0,0.0,1,37
engine generates the final,1,9,0.48,0.14,0.0,0.0,1,37
"HTML using templates and data. As you may recall, template",0,9,0.21,0.35,0.0,0.0,1,37
"engines evolved from an earlier technology,",0,9,0.3,0.14,0.0,0.0,1,37
SSI .,0,9,0.21,0.5,0.0,0.0,1,37
There are two types of templates with different design philosophies:,0,9,0.3,0.17,0.0,0.01,1,37
Static templates or logic-less templates,1,9,0.48,0.19,0.01,0.0,1,37
are HTML interspersed with placeholder,0,9,0.21,0.49,0.0,0.0,1,37
■,0,4,0.11,0.17,0.0,0.01,0,37
tokens. A static template engine will generate the,0,9,0.3,0.19,0.01,0.0,1,37
HTML by replacing these,0,9,0.21,0.63,0.0,0.0,1,37
tokens with the correct data. There’s little to no logic in the template itself. As,0,9,0.21,0.19,0.0,0.0,0,37
"you can see, this is similar to the concepts from",0,9,0.3,0.19,0.0,0.0,1,37
SSI . Examples of static template,0,9,0.21,0.59,0.0,0.0,1,37
engines are CTemplate and Mustache.,0,9,0.3,0.19,0.0,0.0,1,37
18,1,9,0.39,0.06,0.0,0.0,0,38
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,38
C 1,1,7,0.26,0.32,0.0,0.0,0,38
HAPTER,1,6,0.33,0.33,0.0,0.03,1,38
Active templates often contain,1,9,0.48,0.18,0.03,0.0,1,38
"HTML too, but in addition to placeholder tokens,",0,9,0.21,0.42,0.0,0.0,1,38
■,0,4,0.11,0.15,0.0,0.01,0,38
"they contain other programming language constructs like conditionals, itera-",0,9,0.21,0.18,0.01,0.0,0,38
"tors, and variables. Examples of active template engines are Java ServerPages",0,9,0.21,0.18,0.0,0.0,0,38
"(JSP) , Active Server Pages",0,9,0.3,0.18,0.0,0.0,1,38
"(ASP) , and Embedded Ruby",0,9,0.21,0.39,0.0,0.0,1,38
(ERB) . PHP started off as,0,9,0.21,0.62,0.0,0.0,1,38
a kind of active template engine and has evolved into its own programming,0,9,0.21,0.18,0.0,0.0,0,38
language.,0,9,0.3,0.18,0.0,0.01,1,38
We’ve covered a lot of the fundamentals and the theories behind web applications so,0,9,0.21,0.13,0.01,0.0,0,38
"far in this chapter. If it appears an excessive overload of technical minutiae to you,",0,9,0.21,0.13,0.0,0.0,0,38
"please hang in there! As we get to the chapters ahead, you’ll start to realize why it’s",0,9,0.21,0.13,0.0,0.0,0,38
"necessary to understand the fundamentals covered in this chapter. In the meantime,",0,9,0.21,0.13,0.0,0.0,0,38
"let’s switch gears, hold our breath, and jump into the cold waters of Go program-",0,9,0.21,0.13,0.0,0.0,0,38
"ming—it’s time to get some hands-on experience. In the next few sections, I’ll start",0,9,0.21,0.13,0.0,0.0,0,38
you on the road of developing web applications with Go.,0,9,0.3,0.13,0.0,0.02,1,38
1.10 Hello Go,1,12,0.54,0.06,0.02,0.01,1,38
"Let’s write our first Go web app. If you haven’t installed Go, read appendix A and fol-",0,9,0.21,0.13,0.01,0.0,0,38
net/http package,0,9,0.21,0.68,0.0,0.0,1,38
low the installation instructions. Don’t worry if you don’t know the,0,9,0.3,0.13,0.0,0.0,1,38
"that is being used—you will learn it in the next few chapters. For now, just type out the",0,9,0.21,0.13,0.0,0.0,0,38
"code (listing 1.1), compile it, and then see how it works. If you’re accustomed to a",0,9,0.21,0.13,0.0,0.0,0,38
"case-insensitive programming language, remember, Go code is case sensitive.",0,9,0.21,0.13,0.0,0.0,0,38
All source code in this book is in GitHub at,0,9,0.3,0.15,0.0,0.0,1,38
https://github.com/sausheong/gwp,0,9,0.21,0.51,0.0,0.0,1,38
.,0,9,0.12,0.81,0.0,0.03,0,38
Listing 1.1 A Hello World Go web app,1,9,0.48,0.15,0.03,0.02,1,38
package main,0,7,0.26,0.13,0.02,0.02,1,38
import (,0,7,0.26,0.13,0.02,0.0,1,38
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,38
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,38
),0,7,0.17,0.13,0.0,0.02,0,38
"func handler(writer http.ResponseWriter, request *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,38
"fmt.Fprintf(writer, ""Hello World, %s!"", request.URL.Path[1:])",0,7,0.26,0.13,0.0,0.0,1,38
},0,7,0.17,0.13,0.0,0.02,0,38
func main() {,0,7,0.26,0.13,0.02,0.0,1,38
"http.HandleFunc(""/"", handler)",0,7,0.26,0.13,0.0,0.0,1,38
"http.ListenAndServe("":8080"", nil)",0,7,0.26,0.13,0.0,0.0,1,38
},0,7,0.17,0.13,0.0,0.02,0,38
Create a subdirectory in your workspace src directory and name it first_webapp. Now,0,9,0.21,0.13,0.02,0.0,0,38
go to that subdirectory and create a file named server.go. This will be your source file.,0,9,0.21,0.13,0.0,0.0,0,38
"Then from a console (or command-line interface or command prompt), execute this",0,9,0.21,0.13,0.0,0.0,0,38
command:,0,9,0.3,0.13,0.0,0.01,1,38
$ go install first_webapp,0,7,0.26,0.13,0.01,0.0,1,38
19,1,9,0.3,0.83,0.0,0.0,0,39
Hello Go,1,9,0.39,0.43,0.0,0.03,1,39
"GOPATH is set up properly, this will create a",0,9,0.21,0.49,0.03,0.0,1,39
You can do this in any directory. If your,0,9,0.3,0.14,0.0,0.0,1,39
binary executable file in your,0,9,0.3,0.14,0.0,0.0,1,39
$GOPATH/ bin directory named first_webapp. Run the,0,9,0.21,0.39,0.0,0.0,1,39
executable file from the console. Because you have the,0,9,0.3,0.14,0.0,0.0,1,39
$GOPATH /bin directory in,0,9,0.21,0.62,0.0,0.0,1,39
your PATH you should be able to just run it from anywhere. This will start up your Go,0,9,0.21,0.14,0.0,0.0,0,39
web application at port 8080. That’s it!,0,9,0.3,0.14,0.0,0.0,1,39
Now fire up your browser and go to http://localhost:8080. Figure 1.3 shows what,0,9,0.21,0.17,0.0,0.0,0,39
you should see.,0,9,0.43,0.14,0.0,0.26,1,39
Figure 1.3 First web,1,7,0.49,0.62,0.26,0.0,1,39
application screenshot,1,7,0.35,0.62,0.0,0.04,1,39
Take a closer look at the code. The first line declares what kind of program you’re,0,9,0.21,0.14,0.04,0.0,0,39
writing. The package keyword is followed by the name of the package. An executable,0,9,0.21,0.14,0.0,0.0,0,39
"main , and this is the same for a web app. If",0,9,0.21,0.5,0.0,0.0,1,39
program must always be in a package called,0,9,0.3,0.14,0.0,0.0,1,39
you have any experience with web application programming in some other languages,0,9,0.21,0.14,0.0,0.0,0,39
"(such as Ruby, Python, or Java) you might notice the difference right away. In those",0,9,0.21,0.14,0.0,0.0,0,39
languages you often need to deploy the web application to an application server that,0,9,0.21,0.14,0.0,0.0,0,39
"provides an environment for your web applications to run. In Go, this environment is",0,9,0.21,0.14,0.0,0.0,0,39
provided by the net/http,0,9,0.3,0.14,0.0,0.0,1,39
package and is compiled together with the rest of your code,0,9,0.21,0.36,0.0,0.0,1,39
to create a readily deployable standalone web app.,0,9,0.3,0.14,0.0,0.0,1,39
The next line imports the necessary libraries. You import standard Go libraries,0,9,0.21,0.17,0.0,0.0,0,39
(packages) very much the same way you import other third-party libraries. Here,0,9,0.21,0.14,0.0,0.0,0,39
"fmt , which allows formatted",0,9,0.21,0.41,0.0,0.0,1,39
you’re importing two packages:,0,9,0.3,0.14,0.0,0.0,1,39
I/O (allowing you to do,0,9,0.21,0.65,0.0,0.0,1,39
stuff like Fprintf ) and http,0,9,0.3,0.14,0.0,0.0,1,39
", which is the main package for interacting with",0,9,0.21,0.37,0.0,0.0,1,39
HTTP :,0,9,0.21,0.77,0.0,0.01,1,39
import (,0,7,0.26,0.14,0.01,0.0,1,39
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,39
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,39
),0,7,0.17,0.14,0.0,0.02,0,39
handler . The,0,9,0.21,0.73,0.02,0.0,1,39
This is followed by a function definition. You define a function named,0,9,0.3,0.14,0.0,0.0,1,39
"term handler is often used for callback functions triggered by an event, and that’s what",1,9,0.39,0.14,0.0,0.0,0,39
20,1,9,0.39,0.06,0.0,0.0,0,40
Go and web applications,1,9,0.39,0.4,0.0,0.0,1,40
C 1,1,7,0.26,0.32,0.0,0.0,0,40
HAPTER,1,6,0.33,0.33,0.0,0.03,1,40
"it’s used for here (though technically, at least in Go, this isn’t a handler but a handler",0,9,0.21,0.13,0.03,0.0,0,40
function—we’ll explore this in chapter 3).,0,9,0.3,0.13,0.0,0.01,1,40
"func handler(writer http.ResponseWriter, request *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,40
"fmt.Fprintf(writer, ""Hello World, %s!"", request.URL.Path[1:])",0,7,0.26,0.13,0.0,0.0,1,40
},0,7,0.17,0.13,0.0,0.02,0,40
ResponseWriter interface and a,0,9,0.21,0.56,0.02,0.0,1,40
The handler function has two input parameters—a,0,9,0.3,0.13,0.0,0.0,1,40
pointer to a Request struct. It takes information from the,0,9,0.3,0.13,0.0,0.0,1,40
Request to create an HTTP,0,9,0.21,0.6,0.0,0.0,1,40
ResponseWriter . The Fprintf,0,9,0.21,0.47,0.0,0.0,1,40
"response, which is sent out through the",0,9,0.3,0.13,0.0,0.0,1,40
function is,0,9,0.21,0.74,0.0,0.0,1,40
called with the ResponseWriter,0,9,0.3,0.13,0.0,0.0,1,40
", a format string with a single string",0,9,0.21,0.39,0.0,0.0,1,40
format specifier,1,9,0.39,0.71,0.0,0.0,1,40
"( %s ), followed by the path information extracted from the",0,9,0.3,0.13,0.0,0.0,1,40
Request . Because you went,0,9,0.21,0.6,0.0,0.0,1,40
"to the address http://localhost:8080, there’s no path information and so nothing is",0,9,0.21,0.13,0.0,0.0,0,40
"printed out. If you’d gone to the address http://localhost:8080/sausheong/was/here,",0,9,0.21,0.13,0.0,0.0,0,40
figure 1.4 shows how it would’ve looked in the browser.,0,9,0.43,0.13,0.0,0.26,1,40
Figure 1.4 Web application,1,7,0.49,0.6,0.26,0.0,1,40
screenshot with path,1,7,0.35,0.6,0.0,0.04,1,40
Every program that compiles into a binary executable file must have one function,0,9,0.21,0.13,0.04,0.0,0,40
"named main , where the execution of the program starts:",0,9,0.3,0.13,0.0,0.01,1,40
func main() {,0,7,0.26,0.13,0.01,0.0,1,40
"http.HandleFunc(""/"", handler)",0,7,0.26,0.13,0.0,0.0,1,40
"http.ListenAndServe("":8080"", nil)",0,7,0.26,0.13,0.0,0.0,1,40
},0,7,0.17,0.13,0.0,0.02,0,40
"The main function in this program is straightforward. First, you set up the handler you",0,9,0.21,0.13,0.02,0.0,0,40
defined earlier to trigger when the root,0,9,0.3,0.13,0.0,0.0,1,40
URL (/) is called. Then you start the server to,0,9,0.21,0.45,0.0,0.0,1,40
"listen to port 8080. To stop the server, simply press Ctrl-C.",0,9,0.3,0.13,0.0,0.0,1,40
"And there you have it: a working hello world web app, written in Go!",0,9,0.3,0.15,0.0,0.0,1,40
We started off with an explanation of concepts at the beginning of this chapter and,0,9,0.21,0.15,0.0,0.0,0,40
ended up in a code rush where we wrote a simple (and useless) web application in Go.,0,9,0.21,0.13,0.0,0.0,0,40
21,1,9,0.3,0.83,0.0,0.0,0,41
Summary,1,9,0.39,0.43,0.0,0.03,1,41
"In the next chapter, we’ll jump into more code and show how a more realistic (though",0,9,0.21,0.14,0.03,0.0,0,41
still not production-ready) web application can be written with Go and its standard,0,9,0.21,0.14,0.0,0.0,0,41
"libraries. Although chapter 2 might still be a bit of a code rush, you’ll see how a typical",0,9,0.21,0.14,0.0,0.0,0,41
Go web application can be structured.,0,9,0.3,0.14,0.0,0.02,1,41
1.11 Summary,1,12,0.54,0.07,0.02,0.01,1,41
Go is a programming language that is well suited for web programming because,0,9,0.21,0.19,0.01,0.0,0,41
■,0,4,0.11,0.17,0.0,0.01,0,41
"it allows web applications that are scalable, modular, maintainable, and highly",0,9,0.21,0.19,0.01,0.0,0,41
performant to be written relatively easily.,0,9,0.3,0.19,0.0,0.01,1,41
Web applications are programs that return,0,9,0.3,0.19,0.01,0.0,1,41
HTML to the calling client through,0,9,0.21,0.55,0.0,0.0,1,41
■,0,4,0.11,0.17,0.0,0.01,0,41
"HTTP , so understanding HTTP",0,9,0.3,0.19,0.01,0.0,1,41
well is very important when learning how to write,0,9,0.21,0.44,0.0,0.0,1,41
web applications.,0,9,0.3,0.19,0.0,0.01,1,41
"HTTP is a simple, stateless, text-based client-server protocol used in exchanging",0,9,0.21,0.19,0.01,0.0,0,41
■,0,4,0.11,0.17,0.0,0.01,0,41
data between a client and a server.,0,9,0.3,0.19,0.01,0.01,1,41
HTTP requests and responses are structured with similar formats—they start,0,9,0.21,0.19,0.01,0.0,0,41
■,0,4,0.11,0.17,0.0,0.01,0,41
"with a request (or response status) line, followed by one or more headers and",0,9,0.21,0.19,0.01,0.0,0,41
an option body.,0,9,0.3,0.19,0.0,0.01,1,41
Every HTTP request has a request line that contains an,0,9,0.3,0.19,0.01,0.0,1,41
HTTP method that indi-,0,9,0.21,0.65,0.0,0.0,1,41
■,0,4,0.11,0.17,0.0,0.01,0,41
"cates the action asked of the server, the two most popular being",0,9,0.3,0.19,0.01,0.0,1,41
GET and POST .,0,9,0.21,0.72,0.0,0.01,1,41
Every HTTP response has a response status line that tells the calling client the,0,9,0.21,0.19,0.01,0.0,0,41
■,0,4,0.11,0.17,0.0,0.01,0,41
status of the request.,0,9,0.3,0.19,0.01,0.01,1,41
There are two major parts of any web application that correspond to requests,0,9,0.21,0.19,0.01,0.0,0,41
■,0,4,0.11,0.17,0.0,0.01,0,41
and responses—handlers and the template engine.,0,9,0.3,0.19,0.01,0.01,1,41
Handlers receive HTTP requests and process them.,0,9,0.3,0.19,0.01,0.0,1,41
■,0,4,0.11,0.17,0.0,0.01,0,41
The template engine generates,0,9,0.3,0.19,0.01,0.0,1,41
HTML that is sent back as part of the,0,9,0.21,0.47,0.0,0.0,1,41
HTTP,0,9,0.21,0.8,0.0,0.0,1,41
■,0,4,0.11,0.17,0.0,0.01,0,41
response.,0,9,0.3,0.19,0.01,0.0,1,41
Go ChitChat,1,30,0.93,0.54,0.0,0.21,1,42
This chapter covers,1,12,0.67,0.11,0.21,0.01,1,42
Introducing Go web programming,0,9,0.3,0.13,0.01,0.0,1,42
■,0,4,0.11,0.11,0.0,0.01,0,42
Designing a typical Go web application,0,9,0.3,0.13,0.01,0.0,1,42
■,0,4,0.11,0.11,0.0,0.01,0,42
Writing a complete Go web application,0,9,0.3,0.13,0.01,0.0,1,42
■,0,4,0.11,0.11,0.0,0.01,0,42
Understanding the parts of a Go web application,0,9,0.3,0.13,0.01,0.0,1,42
■,0,4,0.11,0.11,0.0,0.08,0,42
"Toward the end of chapter 1, we went through the simplest possible Go web appli-",0,9,0.21,0.14,0.08,0.0,0,42
"cation. That simple web application, I admit, is pretty useless and is nothing more",0,9,0.21,0.14,0.0,0.0,0,42
"than the equivalent of a Hello World application. In this chapter, we’ll explore",0,9,0.21,0.14,0.0,0.0,0,42
another basic but more useful web application. We’ll be building a simple internet,0,9,0.21,0.14,0.0,0.0,0,42
forum web application—one that allows users to log in and create conversations,0,9,0.21,0.14,0.0,0.0,0,42
and respond to conversation topics.,0,9,0.3,0.14,0.0,0.0,1,42
"By the end of the chapter, you might not have the skills to write a full-fledged",0,9,0.21,0.17,0.0,0.0,0,42
web application but you’ll be able to appreciate how one can be structured and,0,9,0.21,0.14,0.0,0.0,0,42
developed. Throughout this chapter you’ll see the bigger picture of how web appli-,0,9,0.21,0.14,0.0,0.0,0,42
cations can be written in Go.,0,9,0.3,0.14,0.0,0.0,1,42
If you find this chapter a bit too intimidating—especially with the rush of Go,0,9,0.21,0.17,0.0,0.0,0,42
code—don’t be too alarmed. Work through the next few chapters and then revisit,0,9,0.21,0.14,0.0,0.0,0,42
this one and you’ll find that things become a lot clearer!,0,9,0.3,0.14,0.0,0.0,1,42
23,1,9,0.3,0.83,0.0,0.0,0,43
Let’s ChitChat,1,9,0.39,0.41,0.0,0.02,1,43
2.1 Let’s ChitChat,1,12,0.54,0.07,0.02,0.01,1,43
"Internet forums are everywhere. They’re one of the most popular uses of the internet,",0,9,0.21,0.14,0.01,0.0,0,43
related to the older bulletin board systems,0,9,0.3,0.14,0.0,0.0,1,43
"(BBS) , Usenet, and electronic mailing lists.",0,9,0.21,0.49,0.0,0.0,1,43
"Yahoo! and Google Groups are very popular (see figure 2.1), with Yahoo! reporting 10",0,9,0.21,0.14,0.0,0.0,0,43
million groups (each group is a forum on its own) and 115 million group members.,0,9,0.21,0.14,0.0,0.0,0,43
"One of the biggest internet forums around, Gaia Online, has 23 million registered",0,9,0.21,0.14,0.0,0.0,0,43
"users and a million posts made every day, with close to 2 billion posts and counting.",0,9,0.21,0.14,0.0,0.0,0,43
"Despite the introduction of social networks like Facebook, internet forums remain",0,9,0.21,0.14,0.0,0.0,0,43
one of the most widely used means of communications on the internet.,0,9,0.43,0.14,0.0,0.4,1,43
"Figure 2.1 Google Groups Go programming language forum, an example of an internet forum",1,7,0.49,0.15,0.4,0.03,0,43
"Essentially, internet forums are the equivalent of a giant bulletin board where anyone",0,9,0.21,0.14,0.03,0.0,0,43
(either registered or anonymous users) can hold conversations by posting messages,0,9,0.21,0.14,0.0,0.0,0,43
"on the forum. These conversations, called",0,9,0.3,0.14,0.0,0.0,1,43
"threads , usually start off as a topic that a user",1,9,0.39,0.49,0.0,0.0,1,43
"wants to talk about, and other users add to the conversation by posting their replies to",0,9,0.21,0.14,0.0,0.0,0,43
"the original topic. More sophisticated forums are hierarchical, with forums having",0,9,0.21,0.14,0.0,0.0,0,43
subforums with specific categories of topics that are being discussed. Most forums are,0,9,0.21,0.14,0.0,0.0,0,43
"moderated by one or more users, called",0,9,0.3,0.14,0.0,0.0,1,43
"moderators , who have special permissions.",1,9,0.39,0.47,0.0,0.0,1,43
"In this chapter, we’ll develop a simple internet forum called ChitChat. Because this",0,9,0.21,0.17,0.0,0.0,0,43
"is a simple example, we’ll be implementing only the key features of an internet forum.",0,9,0.21,0.14,0.0,0.0,0,43
Users will only be able to sign up for an account and log in to create a thread or post a,0,9,0.21,0.14,0.0,0.0,0,43
24,1,9,0.39,0.06,0.0,0.0,0,44
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,44
C 2,1,7,0.26,0.36,0.0,0.0,0,44
HAPTER,1,6,0.33,0.37,0.0,0.03,1,44
reply to an existing thread. A nonregistered user will be able to read the threads but not,0,9,0.21,0.13,0.03,0.0,0,44
add new threads or post to existing ones. Let’s start off with the application design.,0,9,0.21,0.13,0.0,0.03,0,44
Code for this chapter,1,10,0.5,0.15,0.03,0.01,1,44
"Unlike with the other chapters in this book, you won’t see all the code that’s written",0,9,0.21,0.15,0.01,0.0,0,44
for ChitChat here (that would be too much!). But you can check out the entire appli-,0,9,0.21,0.15,0.0,0.0,0,44
cation on GitHub at https://github.com/sausheong/gwp,0,9,0.3,0.15,0.0,0.0,1,44
. If you’re planning to run,0,9,0.21,0.6,0.0,0.0,1,44
"through the exercises while you read this chapter, you’ll have an easier time if you",0,9,0.21,0.15,0.0,0.0,0,44
get the code from the repository first.,0,9,0.3,0.15,0.0,0.04,1,44
2.2 Application design,1,12,0.54,0.06,0.04,0.01,1,44
ChitChat’s application design is typical of any web application. As mentioned in chap-,0,9,0.21,0.13,0.01,0.0,0,44
"ter 1, web applications have the general flow of the client sending a request to a",0,9,0.21,0.13,0.0,0.0,0,44
"server, and a server responding to that request (figure 2.2).",0,9,0.3,0.13,0.0,0.04,1,44
1 . Sends HTTP request,1,9,0.48,0.18,0.04,0.0,1,44
2. Processes HTTP request,1,9,0.39,0.46,0.0,0.03,1,44
Request,0,7,0.17,0.33,0.03,0.0,1,44
Figure 2.2 How a web,1,7,0.35,0.65,0.0,0.0,1,44
Client,0,7,0.26,0.15,0.0,0.0,1,44
Server,0,7,0.17,0.55,0.0,0.0,1,44
application generally,1,7,0.35,0.65,0.0,0.0,1,44
"works, with a client",1,7,0.35,0.65,0.0,0.0,1,44
Response,0,7,0.17,0.33,0.0,0.0,1,44
sending a request to the,1,7,0.35,0.65,0.0,0.0,1,44
server and waiting to,1,7,0.35,0.65,0.0,0.0,1,44
3. Returns HTTP response,1,9,0.39,0.35,0.0,0.0,1,44
receive a response,1,7,0.35,0.65,0.0,0.04,1,44
ChitChat’s application logic is coded in the server. While the client triggers the,0,9,0.21,0.13,0.04,0.0,0,44
"requests and provides the data to the server, the format and the data requested are",0,9,0.21,0.13,0.0,0.0,0,44
"suggested by the server, provided in hyperlinks on the",0,9,0.3,0.13,0.0,0.0,1,44
HTML pages that the server,0,9,0.21,0.59,0.0,0.0,1,44
serves to the client (figure 2.3).,0,9,0.3,0.13,0.0,0.04,1,44
"Format of request is suggested by the web app,",1,9,0.48,0.17,0.04,0.0,1,44
in hyperlinks on HTML pages provided to client by server.,1,9,0.48,0.17,0.0,0.04,1,44
http://<servername>/<handlername>?<parameters>,0,7,0.17,0.21,0.04,0.07,1,44
Request,0,7,0.17,0.33,0.07,0.01,1,44
Client,0,7,0.26,0.15,0.01,0.0,1,44
Server,0,7,0.17,0.55,0.0,0.0,1,44
Figure 2.3 The URL,1,7,0.35,0.65,0.0,0.0,1,44
format of an HTTP request,1,7,0.35,0.65,0.0,0.0,1,44
Response,0,7,0.17,0.33,0.0,0.0,1,44
25,1,9,0.3,0.83,0.0,0.0,0,45
Application design,1,9,0.39,0.4,0.0,0.03,1,45
The format for the request is normally the prerogative of the application itself. For,0,9,0.21,0.14,0.03,0.0,0,45
"ChitChat, we’ll be using the following format: http://<servername>/<handler-",0,9,0.21,0.14,0.0,0.0,0,45
name>?<parameters>,0,9,0.3,0.14,0.0,0.0,1,45
The server name is the name of the ChitChat server; the,1,9,0.48,0.17,0.0,0.0,1,45
handler name is the name of,1,9,0.39,0.62,0.0,0.0,1,45
the handler that’s being called. The handler name is hierarchical: the root of the han-,0,9,0.21,0.14,0.0,0.0,0,45
"dler name is the module that’s being called, the second part the submodule, and so",0,9,0.21,0.14,0.0,0.0,0,45
"on, until it hits the leaf, which is the handler of the request within that submodule. If",0,9,0.21,0.14,0.0,0.0,0,45
"thread and we need to have a handler to read the thread, the",0,9,0.21,0.34,0.0,0.0,1,45
we have a module called,0,9,0.3,0.14,0.0,0.0,1,45
handler name is /thread/read,0,9,0.3,0.14,0.0,0.0,1,45
.,0,9,0.12,0.4,0.0,0.0,0,45
"The parameters of the application, which are",1,9,0.48,0.17,0.0,0.0,1,45
"URL queries, are whatever we need to",0,9,0.21,0.53,0.0,0.0,1,45
"pass to the handler to process the request. In this example, we need to provide the",0,9,0.21,0.14,0.0,0.0,0,45
"id=123 ,",0,9,0.21,0.78,0.0,0.0,1,45
"unique identifier (ID) of the thread to the handler, so the parameters will be",0,9,0.21,0.14,0.0,0.0,0,45
where 123 is the unique,0,9,0.3,0.14,0.0,0.0,1,45
ID .,0,9,0.21,0.34,0.0,0.0,1,45
Let’s recap the request; this is how the,0,9,0.3,0.17,0.0,0.0,1,45
URL being sent into the ChitChat server will,0,9,0.21,0.48,0.0,0.0,1,45
look (assuming chitchat,0,9,0.3,0.14,0.0,0.0,1,45
is the server name): http://chitchat/thread/read?id=123,0,9,0.21,0.35,0.0,0.0,1,45
.,0,9,0.12,0.82,0.0,0.0,0,45
"When the request reaches the server, a",0,9,0.3,0.17,0.0,0.0,1,45
multiplexer will inspect the,1,9,0.39,0.52,0.0,0.0,1,45
URL being,0,9,0.21,0.75,0.0,0.0,1,45
requested and redirect the request to the correct handler. Once the request reaches,0,9,0.21,0.14,0.0,0.0,0,45
"a handler, the handler will retrieve information from the request and process it",0,9,0.21,0.14,0.0,0.0,0,45
"accordingly (figure 2.4). When the processing is complete, the handler passes the",0,9,0.21,0.14,0.0,0.0,0,45
"data to the template engine, which will use templates to generate",0,9,0.3,0.14,0.0,0.0,1,45
HTML to be,0,9,0.21,0.74,0.0,0.0,1,45
returned to the client.,0,9,0.3,0.14,0.0,0.07,1,45
Multiplexer inspects,1,9,0.39,0.3,0.07,0.0,1,45
"URL request, redirects to correct handler",1,9,0.39,0.3,0.0,0.04,1,45
Server,0,7,0.17,0.43,0.04,0.02,1,45
Request,0,7,0.17,0.24,0.02,0.01,1,45
Client Multiplexer,0,7,0.26,0.17,0.01,0.0,1,45
Handler,0,7,0.17,0.5,0.0,0.01,1,45
Response,0,7,0.17,0.24,0.01,0.01,1,45
Handler provides,1,9,0.39,0.64,0.01,0.0,1,45
data to template,1,9,0.39,0.64,0.0,0.0,1,45
engine,1,9,0.39,0.64,0.0,0.0,1,45
Template engine Handler,0,7,0.17,0.34,0.0,0.06,1,45
Templates Handler,0,7,0.17,0.36,0.06,0.05,1,45
Figure 2.4 How the server works in a typical web application,1,7,0.44,0.14,0.05,0.0,1,45
26,1,9,0.39,0.06,0.0,0.0,0,46
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,46
C 2,1,7,0.26,0.36,0.0,0.0,0,46
HAPTER,1,6,0.33,0.37,0.0,0.03,1,46
2.3 Data model,1,12,0.54,0.06,0.03,0.01,1,46
"Most applications need to work on data, in one form or another. In ChitChat, we store",0,9,0.21,0.13,0.01,0.0,0,46
the data in a relational database (we use,0,9,0.3,0.13,0.0,0.0,1,46
P ostgre SQL in this book) and use,0,9,0.21,0.48,0.0,0.0,1,46
SQL to,0,9,0.21,0.77,0.0,0.0,1,46
interact with the database.,0,9,0.3,0.13,0.0,0.0,1,46
"ChitChat’s data model is simple and consists of only four data structures, which in",0,9,0.21,0.15,0.0,0.0,0,46
turn map to a relational database. The four data structures are,0,9,0.3,0.13,0.0,0.01,1,46
User —Representing the forum user’s information,1,9,0.48,0.18,0.01,0.0,1,46
■,0,4,0.11,0.15,0.0,0.01,0,46
Session —Representing a user’s current login session,1,9,0.48,0.18,0.01,0.0,1,46
■,0,4,0.11,0.15,0.0,0.01,0,46
Thread —Representing a forum thread (a conversation among forum users),1,9,0.48,0.18,0.01,0.0,1,46
■,0,4,0.11,0.15,0.0,0.01,0,46
Post —Representing a post (a message added by a forum user) within a thread,1,9,0.39,0.18,0.01,0.0,0,46
■,0,4,0.11,0.15,0.0,0.02,0,46
We’ll have users who can log into the system to create and post to threads. Anonymous,0,9,0.21,0.13,0.02,0.0,0,46
"users can read but won’t be able to create threads or posts. To simplify the application,",0,9,0.21,0.13,0.0,0.0,0,46
we’ll have only one type of user—there are no moderators to approve new threads or,0,9,0.21,0.13,0.0,0.0,0,46
posts (figure 2.5).,0,9,0.3,0.13,0.0,0.06,1,46
Server,0,7,0.17,0.3,0.06,0.04,1,46
Model: User,0,7,0.17,0.39,0.04,0.02,1,46
Model: Session,0,7,0.17,0.38,0.02,0.0,1,46
Template engine Handler,0,7,0.26,0.16,0.0,0.0,1,46
Database,0,7,0.17,0.56,0.0,0.0,1,46
Model: Thread,0,7,0.17,0.39,0.0,0.02,1,46
Model: Post,0,7,0.17,0.39,0.02,0.02,1,46
Templates,0,7,0.26,0.18,0.02,0.05,1,46
Figure 2.5 How a web application can access the data store,1,7,0.44,0.13,0.05,0.05,1,46
"With our application design firmly in mind, let’s move on to code. A bit of caution",0,9,0.21,0.13,0.05,0.0,0,46
before we begin: there will be code in this chapter that might seem puzzling. If you’re,0,9,0.21,0.13,0.0,0.0,0,46
"a new Go programmer, it might be worth your while to refresh your memory going",0,9,0.21,0.13,0.0,0.0,0,46
through an introductory Go programming book like,0,9,0.3,0.13,0.0,0.0,1,46
Go in Action by William Kennedy,1,9,0.39,0.56,0.0,0.0,1,46
"with Brian Ketelsen and Erik St. Martin (Manning, 2015).",0,9,0.3,0.13,0.0,0.0,1,46
"Otherwise, please hang on; this chapter provides an overall picture of how a Go",0,9,0.21,0.15,0.0,0.0,0,46
web application will look but is thin on details. The details will come in the later chap-,0,9,0.21,0.13,0.0,0.0,0,46
"ters. Where possible, I’ll mention which chapters explore those details as we move",0,9,0.21,0.13,0.0,0.0,0,46
along.,0,9,0.3,0.13,0.0,0.0,1,46
27,1,9,0.3,0.83,0.0,0.0,0,47
Receiving and processing requests,1,9,0.39,0.35,0.0,0.02,1,47
2.4 Receiving and processing requests,1,12,0.54,0.07,0.02,0.01,1,47
Receiving and processing requests is the heart of any web application. Let’s recap,0,9,0.21,0.14,0.01,0.0,0,47
what you’ve learned so far:,0,9,0.3,0.14,0.0,0.01,1,47
A client sends a request to a,0,9,0.3,0.19,0.01,0.0,1,47
URL at the server.,0,9,0.21,0.43,0.0,0.0,1,47
1,1,6,0.33,0.17,0.0,0.01,0,47
"The server has a multiplexer, which redirects the request to the correct handler",0,9,0.21,0.19,0.01,0.0,0,47
2,1,6,0.33,0.17,0.0,0.01,0,47
to process the request.,0,9,0.3,0.19,0.01,0.01,1,47
The handler processes the request and performs the necessary work.,0,9,0.3,0.19,0.01,0.0,1,47
3,1,6,0.33,0.17,0.0,0.01,0,47
The handler calls the template engine to generate the correct,0,9,0.3,0.19,0.01,0.0,1,47
HTML to send,0,9,0.21,0.72,0.0,0.0,1,47
4,1,6,0.33,0.17,0.0,0.01,0,47
back to the client.,0,9,0.3,0.19,0.01,0.01,1,47
URL ( / ). When you type http://,0,9,0.21,0.56,0.01,0.0,1,47
"Let’s begin at the beginning, which is the root",0,9,0.3,0.14,0.0,0.0,1,47
"localhost, this is where the application will take you. In the next few subsections, we’ll",0,9,0.21,0.14,0.0,0.0,0,47
discuss how to handle a request to this,0,9,0.3,0.14,0.0,0.0,1,47
URL and respond with dynamically generated,0,9,0.21,0.47,0.0,0.0,1,47
HTML .,0,9,0.3,0.14,0.0,0.02,1,47
2.4.1 The multiplexer,1,10,0.5,0.07,0.02,0.01,1,47
"We start all Go applications with a main source code file, which is the file that contains",0,9,0.21,0.14,0.01,0.0,0,47
the main function and is the starting point where the compiled binary executes. In,0,9,0.21,0.14,0.0,0.0,0,47
ChitChat we call this file main.go.,0,9,0.3,0.14,0.0,0.03,1,47
Listing 2.1 A simple main,1,9,0.48,0.17,0.03,0.0,1,47
function in main.go,1,9,0.39,0.38,0.0,0.02,1,47
package main,0,7,0.26,0.14,0.02,0.02,1,47
import (,0,7,0.26,0.14,0.02,0.0,1,47
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,47
),0,7,0.17,0.14,0.0,0.02,0,47
func main() {,0,7,0.26,0.14,0.02,0.03,1,47
mux := http.NewServeMux(),0,7,0.26,0.14,0.03,0.0,1,47
"files := http.FileServer(http.Dir(""/public""))",0,7,0.26,0.14,0.0,0.0,1,47
"mux.Handle(""/static/"", http.StripPrefix(""/static/"", files))",0,7,0.26,0.14,0.0,0.02,1,47
"mux.HandleFunc(""/"", index)",0,7,0.26,0.14,0.02,0.02,1,47
server := &http.Server{,0,7,0.26,0.14,0.02,0.0,1,47
"Addr:     ""0.0.0.0:8080"",",0,7,0.26,0.14,0.0,0.0,1,47
"Handler:  mux,",0,7,0.26,0.14,0.0,0.0,1,47
},0,7,0.17,0.14,0.0,0.0,0,47
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,47
},0,7,0.17,0.14,0.0,0.02,0,47
"In main.go, you first create a",0,9,0.3,0.14,0.02,0.0,1,47
"multiplexer , the piece of code that redirects a request to a",1,9,0.39,0.38,0.0,0.0,1,47
handler. The net/http standard library provides a default multiplexer that can be cre-,0,9,0.21,0.14,0.0,0.0,0,47
ated by calling the NewServeMux,0,9,0.3,0.14,0.0,0.0,1,47
function:,0,9,0.21,0.41,0.0,0.02,1,47
mux := http.NewServeMux(),0,7,0.26,0.14,0.02,0.0,1,47
28,1,9,0.39,0.06,0.0,0.0,0,48
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,48
C 2,1,7,0.26,0.36,0.0,0.0,0,48
HAPTER,1,6,0.33,0.37,0.0,0.03,1,48
HandleFunc function:,0,9,0.21,0.61,0.03,0.0,1,48
To redirect the root URL,0,9,0.3,0.13,0.0,0.0,1,48
"to a handler function, you use the",0,9,0.21,0.33,0.0,0.02,1,48
"mux.HandleFunc(""/"", index)",0,7,0.26,0.13,0.02,0.02,1,48
HandleFunc takes the URL,0,9,0.3,0.13,0.02,0.0,1,48
"as the first parameter, and the name of the handler func-",0,9,0.21,0.34,0.0,0.0,1,48
"URL ( / ), it’s redi-",0,9,0.21,0.68,0.0,0.0,1,48
"tion as the second parameter, so when a request comes for the root",0,9,0.3,0.13,0.0,0.0,1,48
index . You don’t need to provide the parameters,0,9,0.21,0.42,0.0,0.0,1,48
rected to a handler function named,0,9,0.3,0.13,0.0,0.0,1,48
ResponseWriter as the first,0,9,0.21,0.6,0.0,0.0,1,48
to the handler function because all handler functions take,0,9,0.3,0.13,0.0,0.0,1,48
Request as the second parameter.,0,9,0.21,0.35,0.0,0.0,1,48
parameter and a pointer to,0,9,0.3,0.13,0.0,0.0,1,48
Notice that I’ve done some sleight-of-hand when talking about handlers. I started,0,9,0.21,0.15,0.0,0.0,0,48
off talking about handlers and then switched to talking about handler functions. This,0,9,0.21,0.13,0.0,0.0,0,48
is intentional; handlers and handler functions are,0,9,0.3,0.13,0.0,0.0,1,48
"not the same, though they provide",1,9,0.39,0.54,0.0,0.0,1,48
"the same results in the end. We’ll talk more about them in chapter 3, but for now let’s",0,9,0.21,0.13,0.0,0.0,0,48
move on.,0,9,0.3,0.13,0.0,0.02,1,48
2.4.2 Serving static files,1,10,0.5,0.06,0.02,0.01,1,48
"Besides redirecting to the appropriate handler, you can use the multiplexer to serve",0,9,0.21,0.13,0.01,0.0,0,48
FileServer function to create a handler that will,0,9,0.21,0.42,0.0,0.0,1,48
"static files. To do this, you use the",0,9,0.3,0.13,0.0,0.0,1,48
Handle function of,0,9,0.21,0.67,0.0,0.0,1,48
serve files from a given directory. Then you pass the handler to the,0,9,0.3,0.13,0.0,0.0,1,48
StripPrefix function to remove the given prefix from,0,9,0.21,0.37,0.0,0.0,1,48
the multiplexer. You use the,0,9,0.3,0.13,0.0,0.0,1,48
the request URL ’s path.,0,9,0.3,0.13,0.0,0.01,1,48
"files := http.FileServer(http.Dir(""/public""))",0,7,0.26,0.13,0.01,0.0,1,48
"mux.Handle(""/static/"", http.StripPrefix(""/static/"", files))",0,7,0.26,0.13,0.0,0.02,1,48
"In this code, you’re telling the server that for all request",0,9,0.3,0.13,0.02,0.0,1,48
"URL s starting with /static/,",0,9,0.21,0.6,0.0,0.0,1,48
strip off the string /static/,0,9,0.3,0.13,0.0,0.0,1,48
"from the URL , and then look for a file with the name",0,9,0.21,0.37,0.0,0.0,1,48
"starting at the public directory. For example, if there’s a request for the file http://",0,9,0.21,0.13,0.0,0.0,0,48
localhost/static/css/bootstrap.min.css the server will look for the file,0,9,0.21,0.13,0.0,0.02,0,48
<application root>/css/bootstrap.min.css,0,7,0.26,0.13,0.02,0.02,1,48
"When it’s found, the server will serve it as it is, without processing it first.",0,9,0.21,0.13,0.02,0.02,0,48
2.4.3 Creating the handler function,1,10,0.5,0.06,0.02,0.01,1,48
HandleFunc to redirect the request to a handler func-,0,9,0.21,0.38,0.01,0.0,1,48
In a previous section you used,0,9,0.3,0.13,0.0,0.0,1,48
Response-,0,9,0.21,0.74,0.0,0.0,1,48
tion. Handler functions are nothing more than Go functions that take a,0,9,0.3,0.13,0.0,0.0,1,48
Writer as the first parameter and a pointer to a,0,9,0.3,0.13,0.0,0.0,1,48
"Request as the second, shown next.",0,9,0.21,0.52,0.0,0.03,1,48
Listing 2.2 The index handler function in main.go,1,9,0.48,0.15,0.03,0.02,1,48
"func index(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,48
"files := []string{""templates/layout.html"",",0,7,0.26,0.13,0.0,0.0,1,48
"""templates/navbar.html"",",0,7,0.26,0.13,0.0,0.0,1,48
"""templates/index.html"",}",0,7,0.26,0.13,0.0,0.0,1,48
templates := template.Must(template.ParseFiles(files...)),0,7,0.26,0.13,0.0,0.0,1,48
"threads, err := data.Threads(); if err == nil {",0,7,0.26,0.13,0.0,0.0,1,48
29,1,9,0.3,0.83,0.0,0.0,0,49
Receiving and processing requests,1,9,0.39,0.35,0.0,0.03,1,49
"templates.ExecuteTemplate(w, ""layout"", threads)",0,7,0.26,0.14,0.03,0.0,1,49
},0,7,0.17,0.14,0.0,0.0,0,49
},0,7,0.17,0.14,0.0,0.02,0,49
Template struct from the html/template standard library,0,9,0.21,0.38,0.02,0.0,1,49
Notice that you’re using the,0,9,0.3,0.14,0.0,0.0,1,49
index handler function,0,9,0.21,0.65,0.0,0.0,1,49
so you need to add that in the list of imported libraries. The,0,9,0.3,0.14,0.0,0.0,1,49
ResponseWriter .,0,9,0.21,0.7,0.0,0.0,1,49
doesn’t do anything except generate the,0,9,0.3,0.14,0.0,0.0,1,49
HTML and write it to the,0,9,0.21,0.49,0.0,0.0,1,49
We’ll cover generating HTML,0,9,0.3,0.14,0.0,0.0,1,49
in the upcoming section.,0,9,0.21,0.38,0.0,0.0,1,49
"URL ( / ),",0,9,0.21,0.77,0.0,0.0,1,49
We’ve talked about handler functions that handle requests for the root,0,9,0.3,0.17,0.0,0.0,1,49
but there are a number of other handler functions. Let’s look at the rest of them in,0,9,0.21,0.14,0.0,0.0,0,49
"the following listing, also in the main.go file.",0,9,0.3,0.14,0.0,0.03,1,49
Listing 2.3 ChitChat main.go source file,1,9,0.48,0.17,0.03,0.02,1,49
package main,0,7,0.26,0.14,0.02,0.02,1,49
import (,0,7,0.26,0.14,0.02,0.0,1,49
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,49
),0,7,0.17,0.14,0.0,0.02,0,49
func main() {,0,7,0.26,0.14,0.02,0.02,1,49
mux := http.NewServeMux(),0,7,0.26,0.14,0.02,0.0,1,49
files := http.FileServer(http.Dir(config.Static)),0,7,0.26,0.14,0.0,0.0,1,49
"mux.Handle(""/static/"", http.StripPrefix(""/static/"", files))",0,7,0.26,0.14,0.0,0.02,1,49
"mux.HandleFunc(""/"", index)",0,7,0.26,0.14,0.02,0.0,1,49
"mux.HandleFunc(""/err"", err)",0,7,0.26,0.14,0.0,0.02,1,49
"mux.HandleFunc(""/login"", login)",0,7,0.26,0.14,0.02,0.0,1,49
"mux.HandleFunc(""/logout"", logout)",0,7,0.26,0.14,0.0,0.0,1,49
"mux.HandleFunc(""/signup"", signup)",0,7,0.26,0.14,0.0,0.0,1,49
"mux.HandleFunc(""/signup_account"", signupAccount)",0,7,0.26,0.14,0.0,0.0,1,49
"mux.HandleFunc(""/authenticate"", authenticate)",0,7,0.26,0.14,0.0,0.02,1,49
"mux.HandleFunc(""/thread/new"", newThread)",0,7,0.26,0.14,0.02,0.0,1,49
"mux.HandleFunc(""/thread/create"", createThread)",0,7,0.26,0.14,0.0,0.0,1,49
"mux.HandleFunc(""/thread/post"", postThread)",0,7,0.26,0.14,0.0,0.0,1,49
"mux.HandleFunc(""/thread/read"", readThread)",0,7,0.26,0.14,0.0,0.02,1,49
server := &http.Server{,0,7,0.26,0.14,0.02,0.0,1,49
"Addr:           ""0.0.0.0:8080"",",0,7,0.26,0.14,0.0,0.0,1,49
"Handler:        mux,",0,7,0.26,0.14,0.0,0.0,1,49
},0,7,0.17,0.14,0.0,0.0,0,49
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,49
},0,7,0.17,0.14,0.0,0.02,0,49
You might notice that the various handler functions aren’t defined in the same,0,9,0.21,0.14,0.02,0.0,0,49
"main.go file. Instead, I split the definition of the handler functions in other files",0,9,0.21,0.14,0.0,0.0,0,49
(please refer to the code in the GitHub repository). So how do you link these files? Do,0,9,0.21,0.14,0.0,0.0,0,49
you write code to include the other files like in,0,9,0.3,0.14,0.0,0.0,1,49
"PHP , Ruby, or Python? Or do you run a",0,9,0.21,0.53,0.0,0.0,1,49
special command to link them during compile time?,0,9,0.3,0.14,0.0,0.0,1,49
30,1,9,0.39,0.06,0.0,0.0,0,50
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,50
C 2,1,7,0.26,0.36,0.0,0.0,0,50
HAPTER,1,6,0.33,0.37,0.0,0.03,1,50
main package and,0,9,0.21,0.68,0.03,0.0,1,50
"In Go, you simply make every file in the same directory part of the",0,9,0.3,0.15,0.0,0.0,1,50
"they’ll be included. Alternatively, you can place them in a separate package and import",0,9,0.21,0.13,0.0,0.0,0,50
"them. We’ll use this strategy when connecting with the database, as you’ll see later.",0,9,0.21,0.13,0.0,0.02,0,50
2.4.4 Access control using cookies,1,10,0.5,0.06,0.02,0.01,1,50
"As in many web applications, ChitChat has public pages that are available to anyone",0,9,0.21,0.13,0.01,0.0,0,50
"browsing to those pages, as well as private pages that require users to log into their",0,9,0.21,0.13,0.0,0.0,0,50
account first.,0,9,0.3,0.13,0.0,0.0,1,50
"Once the user logs in, you need to indicate in subsequent requests that the user",0,9,0.21,0.15,0.0,0.0,0,50
"has already logged in. To do this, you write a cookie to the response header, which",0,9,0.21,0.13,0.0,0.0,0,50
authenticate han-,0,9,0.21,0.67,0.0,0.0,1,50
goes back to the client and is saved at the browser. Let’s look at the,0,9,0.3,0.13,0.0,0.0,1,50
"dler function, which authenticates the user and returns a cookie to the client. The",0,9,0.21,0.13,0.0,0.0,0,50
"authenticate handler function is in the route_auth.go file, shown next.",0,9,0.21,0.13,0.0,0.03,0,50
Listing 2.4 The authenticate,1,9,0.48,0.15,0.03,0.0,1,50
handler function in route_auth.go,1,9,0.39,0.41,0.0,0.02,1,50
"func authenticate(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,50
r.ParseForm(),0,7,0.26,0.13,0.0,0.0,1,50
"user, _ := data.UserByEmail(r.PostFormValue(""email""))",0,7,0.26,0.13,0.0,0.0,1,50
"if user.Password == data.Encrypt(r.PostFormValue(""password"")) {",0,7,0.26,0.13,0.0,0.0,1,50
session := user.CreateSession(),0,7,0.26,0.13,0.0,0.0,1,50
cookie := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,50
"Name:      ""_cookie"",",0,7,0.26,0.13,0.0,0.0,1,50
"Value:     session.Uuid,",0,7,0.26,0.13,0.0,0.0,1,50
"HttpOnly:  true,",0,7,0.26,0.13,0.0,0.0,1,50
},0,7,0.17,0.13,0.0,0.0,0,50
"http.SetCookie(w, &cookie)",0,7,0.26,0.13,0.0,0.0,1,50
"http.Redirect(w, r, ""/"", 302)",0,7,0.26,0.13,0.0,0.0,1,50
} else {,0,7,0.26,0.13,0.0,0.0,1,50
"http.Redirect(w, r, ""/login"", 302)",0,7,0.26,0.13,0.0,0.0,1,50
},0,7,0.17,0.13,0.0,0.0,0,50
},0,7,0.17,0.13,0.0,0.02,0,50
Note that in the source code in the previous listing that we haven’t yet discussed,0,9,0.21,0.13,0.02,0.0,0,50
data.Encrypt and data.UserbyEmail,0,9,0.3,0.13,0.0,0.0,1,50
". In order to keep with the flow, I won’t explain",0,9,0.21,0.44,0.0,0.0,1,50
"these functions in detail; their names make them self-explanatory. For example,",0,9,0.21,0.13,0.0,0.0,0,50
data.UserByEmail retrieves a,0,9,0.3,0.13,0.0,0.0,1,50
User struct given the email;,0,9,0.21,0.38,0.0,0.0,1,50
data.Encrypt encrypts a,0,9,0.21,0.62,0.0,0.0,1,50
data package later in this chapter. For now let’s return,0,9,0.21,0.38,0.0,0.0,1,50
given string. We’ll get into the,0,9,0.3,0.13,0.0,0.0,1,50
to the authentication handler flow.,0,9,0.3,0.13,0.0,0.0,1,50
"First, you need to authenticate the user. You must make sure the user exists and the",0,9,0.21,0.15,0.0,0.0,0,50
user’s encrypted password in the database is the same as the encrypted password,0,9,0.21,0.13,0.0,0.0,0,50
Session struct,0,9,0.21,0.71,0.0,0.0,1,50
"posted to the handler. Once the user is authenticated, you create a",0,9,0.3,0.13,0.0,0.0,1,50
using user.CreateSession,0,9,0.3,0.13,0.0,0.0,1,50
", a method on the User struct.",0,9,0.21,0.35,0.0,0.0,1,50
Session looks like this:,0,9,0.21,0.6,0.0,0.01,1,50
type Session struct {,0,7,0.26,0.13,0.01,0.0,1,50
Id        int,0,7,0.26,0.13,0.0,0.0,1,50
Uuid      string,0,7,0.26,0.13,0.0,0.0,1,50
Email     string,0,7,0.26,0.13,0.0,0.0,1,50
31,1,9,0.3,0.83,0.0,0.0,0,51
Receiving and processing requests,1,9,0.39,0.35,0.0,0.03,1,51
UserId    int,0,7,0.26,0.14,0.03,0.0,1,51
CreatedAt time.Time,0,7,0.26,0.14,0.0,0.0,1,51
},0,7,0.17,0.14,0.0,0.02,0,51
The Email named field stores the email of the user who is logged in; the,0,9,0.21,0.14,0.02,0.0,0,51
UserId,0,9,0.21,0.78,0.0,0.01,1,51
named field contains the,0,9,0.3,0.14,0.01,0.0,1,51
ID of the user table row with the user information. The most,0,9,0.21,0.35,0.0,0.0,1,51
"Uuid , which is a randomly generated unique",0,9,0.21,0.39,0.0,0.0,1,51
ID . Uuid is,0,9,0.21,0.76,0.0,0.0,1,51
important information is the,0,9,0.3,0.14,0.0,0.0,1,51
the value you want to store at the browser. The session record itself is stored in the,0,9,0.21,0.14,0.0,0.0,0,51
database.,0,9,0.3,0.14,0.0,0.0,1,51
Cookie struct:,0,9,0.21,0.64,0.0,0.0,1,51
"Once you have the session record created, you create the",0,9,0.3,0.17,0.0,0.01,1,51
cookie := http.Cookie{,0,7,0.26,0.14,0.01,0.0,1,51
"Name:      ""_cookie"",",0,7,0.26,0.14,0.0,0.0,1,51
"Value:     session.Uuid,",0,7,0.26,0.14,0.0,0.0,1,51
"HttpOnly:  true,",0,7,0.26,0.14,0.0,0.0,1,51
},0,7,0.17,0.14,0.0,0.02,0,51
The name is arbitrary and the value is the unique data that’s stored at the browser. You,0,9,0.21,0.14,0.02,0.0,0,51
don’t set the expiry date so that the cookie becomes a session cookie and it’s automat-,0,9,0.21,0.14,0.0,0.0,0,51
HttpOnly to only allow HTTP,0,9,0.21,0.58,0.0,0.0,1,51
ically removed when the browser shuts down. You set,0,9,0.3,0.14,0.0,0.0,1,51
or,0,9,0.12,0.82,0.0,0.0,0,51
HTTPS to access the cookie (and not other non-,0,9,0.3,0.14,0.0,0.0,1,51
HTTP API s like JavaScript).,0,9,0.21,0.53,0.0,0.0,1,51
"To add the cookie to the response header, use this code:",0,9,0.3,0.17,0.0,0.02,1,51
"http.SetCookie(writer, &cookie)",0,7,0.26,0.14,0.02,0.02,1,51
"Now that we have the cookie in the browser, you want to be able to check in the han-",0,9,0.21,0.14,0.02,0.0,0,51
dler function whether or not the user is logged in. You create a utility function called,0,9,0.21,0.14,0.0,0.0,0,51
session that you’ll be able to reuse in other handler functions. The,0,9,0.3,0.14,0.0,0.0,1,51
session func-,0,9,0.21,0.73,0.0,0.0,1,51
"tion, shown in the next listing, and all other utility functions are written to the util.go",0,9,0.21,0.14,0.0,0.0,0,51
"file. Note that even though you placed the function in a separate file, it’s still part of",0,9,0.21,0.14,0.0,0.0,0,51
"the main package, so you can use it directly without mentioning the package name,",0,9,0.21,0.14,0.0,0.0,0,51
unlike in data.Encrypt .,0,9,0.3,0.14,0.0,0.03,1,51
Listing 2.5 session utility function in util.go,1,9,0.48,0.17,0.03,0.02,1,51
"func session(w http.ResponseWriter, r *http.Request)(sess data.Session, err",0,7,0.17,0.14,0.02,0.0,0,51
error){,0,7,0.26,0.17,0.0,0.0,1,51
"cookie, err := r.Cookie(""_cookie"")",0,7,0.26,0.14,0.0,0.0,1,51
if err == nil {,0,7,0.26,0.14,0.0,0.0,1,51
sess = data.Session{Uuid: cookie.Value},0,7,0.26,0.14,0.0,0.0,1,51
"if ok, _ := sess.Check(); !ok {",0,7,0.26,0.14,0.0,0.0,1,51
"err = errors.New(""Invalid session"")",0,7,0.26,0.14,0.0,0.0,1,51
},0,7,0.17,0.14,0.0,0.0,0,51
},0,7,0.17,0.14,0.0,0.0,0,51
return,0,7,0.26,0.14,0.0,0.0,1,51
},0,7,0.17,0.14,0.0,0.02,0,51
The session function retrieves the cookie from the request:,0,9,0.3,0.14,0.02,0.02,1,51
"cookie, err := r.Cookie(""_cookie"")",0,7,0.26,0.14,0.02,0.0,1,51
32,1,9,0.39,0.06,0.0,0.0,0,52
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,52
C 2,1,7,0.26,0.36,0.0,0.0,0,52
HAPTER,1,6,0.33,0.37,0.0,0.03,1,52
"If the cookie doesn’t exist, then obviously the user hasn’t logged in yet. If it exists, the",0,9,0.21,0.13,0.03,0.0,0,52
session function performs a second check and checks the database to see if the ses-,0,9,0.21,0.13,0.0,0.0,0,52
data.Session function (that you’ll cre-,0,9,0.21,0.51,0.0,0.0,1,52
sion’s unique ID exists. It does this by using the,0,9,0.3,0.13,0.0,0.0,1,52
Check method on that session:,0,9,0.21,0.58,0.0,0.0,1,52
ate in a bit) to retrieve the session and then calling the,0,9,0.3,0.13,0.0,0.01,1,52
sess = data.Session{Uuid: cookie.Value},0,7,0.26,0.13,0.01,0.0,1,52
"if ok, _ := sess.Check(); !ok {",0,7,0.26,0.13,0.0,0.0,1,52
"err = errors.New(""Invalid session"")",0,7,0.26,0.13,0.0,0.0,1,52
},0,7,0.17,0.13,0.0,0.02,0,52
Now that you’re able to check and differentiate between a user who has logged in and,0,9,0.21,0.13,0.02,0.0,0,52
"index handler function, shown in the following list-",0,9,0.21,0.4,0.0,0.0,1,52
"a user who hasn’t, let’s revisit our",0,9,0.3,0.13,0.0,0.0,1,52
session function (code shown in bold).,0,9,0.21,0.4,0.0,0.0,1,52
"ing, and see how you can use this",0,9,0.3,0.13,0.0,0.03,1,52
Listing 2.6 The index handler function,1,9,0.48,0.15,0.03,0.02,1,52
"func index(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,52
"threads, err := data.Threads(); if err == nil {",0,7,0.26,0.13,0.0,0.0,1,52
"_, err := session(w, r)",1,7,0.44,0.13,0.0,0.0,1,52
"public_tmpl_files := []string{""templates/layout.html"",",0,7,0.26,0.13,0.0,0.0,1,52
"""templates/public.navbar.html"",",0,7,0.26,0.13,0.0,0.0,1,52
"""templates/index.html""}",0,7,0.26,0.13,0.0,0.0,1,52
"private_tmpl_files := []string{""templates/layout.html"",",0,7,0.26,0.13,0.0,0.0,1,52
"""templates/private.navbar.html"",",0,7,0.26,0.13,0.0,0.0,1,52
"""templates/index.html""}",0,7,0.26,0.13,0.0,0.0,1,52
var templates *template.Template,0,7,0.26,0.13,0.0,0.0,1,52
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,52
templates = template.Must(template.Parse-,0,7,0.26,0.13,0.0,0.0,1,52
Files(private_tmpl_files...)),0,7,0.26,0.15,0.0,0.0,1,52
} else {,0,7,0.26,0.13,0.0,0.0,1,52
templates = template.Must(template.ParseFiles(public_tmpl_files...)),0,7,0.26,0.13,0.0,0.0,1,52
},0,7,0.17,0.13,0.0,0.0,0,52
"templates.ExecuteTemplate(w, ""layout"", threads)",0,7,0.26,0.13,0.0,0.0,1,52
},0,7,0.17,0.13,0.0,0.0,0,52
},0,7,0.17,0.13,0.0,0.02,0,52
The session function returns a,0,9,0.3,0.13,0.02,0.0,1,52
"Session struct, which you can use to extract user",0,9,0.21,0.4,0.0,0.0,1,52
"information, but we aren’t interested in that right now, so assign it to the",0,9,0.21,0.13,0.0,0.0,0,52
blank identi-,1,9,0.39,0.73,0.0,0.0,1,52
fier ( _ ). What we are interested in is,1,9,0.48,0.13,0.0,0.0,1,52
"err , which you can use to determine whether the",0,9,0.21,0.42,0.0,0.0,1,52
public navigation bar or the,0,9,0.21,0.43,0.0,0.0,1,52
private navigation,0,9,0.21,0.67,0.0,0.0,1,52
user is logged in and specify that the,0,9,0.3,0.13,0.0,0.0,1,52
bar should be shown.,0,9,0.3,0.13,0.0,0.0,1,52
That’s all there is to it. We’re done with the quick overview of processing requests;,0,9,0.21,0.15,0.0,0.0,0,52
we’ll get on with generating,0,9,0.3,0.13,0.0,0.0,1,52
"HTML for the client next, and continue where we left off",0,9,0.21,0.36,0.0,0.0,1,52
earlier.,0,9,0.3,0.13,0.0,0.02,1,52
2.5 Generating HTML responses with templates,1,12,0.54,0.06,0.02,0.01,1,52
The logic in the index handler function was mainly about generating,0,9,0.3,0.13,0.01,0.0,1,52
HTML for the,0,9,0.21,0.71,0.0,0.0,1,52
client. Let’s start by defining a list of template files that you’ll be using in a Go slice,0,9,0.21,0.13,0.0,0.0,0,52
(I’ll show private_tmpl_files here; public_tmpl_files is exactly the same).,0,9,0.21,0.13,0.0,0.0,0,52
33,1,9,0.3,0.83,0.0,0.0,0,53
Generating HTML responses with templates,1,9,0.39,0.31,0.0,0.03,1,53
"private_tmpl_files := []string{""templates/layout.html"",",0,7,0.26,0.14,0.03,0.0,1,53
"""templates/private.navbar.html"",",0,7,0.26,0.14,0.0,0.0,1,53
"""templates/index.html""}",0,7,0.26,0.14,0.0,0.02,1,53
The three files are,0,9,0.3,0.14,0.02,0.0,1,53
"files with certain embedded commands, called",0,9,0.21,0.35,0.0,0.0,1,53
"actions , very",1,9,0.39,0.75,0.0,0.0,1,53
HTML,0,9,0.21,0.3,0.0,0.01,1,53
similar to other template engines like Mustache or,0,9,0.3,0.14,0.01,0.0,1,53
CT emplate. Actions are annota-,0,9,0.21,0.58,0.0,0.0,1,53
between {{ and }} .,0,9,0.21,0.35,0.0,0.0,1,53
tions added to the HTML,0,9,0.3,0.14,0.0,0.0,1,53
ParseFiles,0,9,0.21,0.75,0.0,0.0,1,53
You parse these template files and create a set of templates using the,0,9,0.3,0.17,0.0,0.0,1,53
Must function around the results. This is to catch,0,9,0.21,0.45,0.0,0.0,1,53
"function. After parsing, you wrap the",0,9,0.3,0.14,0.0,0.0,1,53
errors (the Must function panics when a,0,9,0.3,0.14,0.0,0.0,1,53
ParseFiles returns an error).,0,9,0.21,0.47,0.0,0.02,1,53
templates := template.Must(template.ParseFiles(private_tmpl_files...)),0,7,0.26,0.14,0.02,0.02,1,53
We’ve talked a lot about these template files; let’s look at them now.,0,9,0.3,0.14,0.02,0.0,1,53
Each template file defines a template (templates are described in detail in chapter,0,9,0.21,0.17,0.0,0.0,0,53
5). This is not mandatory—you don’t need to define templates for every file—but,0,9,0.21,0.14,0.0,0.0,0,53
"doing so is useful, as you’ll see later. In the layout.html template file, you begin with",0,9,0.21,0.14,0.0,0.0,0,53
"the define action, which indicates that the chunk of text starting with",0,9,0.21,0.14,0.0,0.0,0,53
{{ define,0,9,0.21,0.75,0.0,0.01,1,53
"""layout"" }} and ending with",0,9,0.3,0.14,0.01,0.0,1,53
"{{ end }} is part of the layout template, as shown next.",0,9,0.21,0.39,0.0,0.03,1,53
Listing 2.7 layout.html template file,1,9,0.48,0.17,0.03,0.02,1,53
"{{ define ""layout"" }}",0,7,0.26,0.14,0.02,0.02,1,53
<!DOCTYPE html>,0,7,0.26,0.14,0.02,0.0,1,53
"<html lang=""en"">",0,7,0.26,0.14,0.0,0.0,1,53
<head>,0,7,0.26,0.14,0.0,0.0,1,53
"<meta charset=""utf-8"">",0,7,0.26,0.14,0.0,0.0,1,53
"<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">",0,7,0.26,0.14,0.0,0.0,1,53
"<meta name=""viewport"" content=""width=device-width, initial-scale=1"">",0,7,0.26,0.14,0.0,0.0,1,53
<title>ChitChat</title>,0,7,0.26,0.14,0.0,0.0,1,53
"<link href=""/static/css/bootstrap.min.css"" rel=""stylesheet"">",0,7,0.26,0.14,0.0,0.0,1,53
"<link href=""/static/css/font-awesome.min.css"" rel=""stylesheet"">",0,7,0.26,0.14,0.0,0.0,1,53
</head>,0,7,0.26,0.14,0.0,0.0,1,53
<body>,0,7,0.26,0.14,0.0,0.0,1,53
"{{ template ""navbar"" . }}",0,7,0.26,0.14,0.0,0.01,1,53
"<div class=""container"">",0,7,0.26,0.14,0.01,0.02,1,53
"{{ template ""content"" . }}",0,7,0.26,0.14,0.02,0.02,1,53
</div> <!-- /container -->,0,7,0.26,0.14,0.02,0.02,1,53
"<script src=""/static/js/jquery-2.1.1.min.js""></script>",0,7,0.26,0.14,0.02,0.0,1,53
"<script src=""/static/js/bootstrap.min.js""></script>",0,7,0.26,0.14,0.0,0.0,1,53
</body>,0,7,0.26,0.14,0.0,0.0,1,53
</html>,0,7,0.26,0.14,0.0,0.01,1,53
{{ end }},0,7,0.26,0.14,0.01,0.02,1,53
"Within the layout template, we have two other actions, both of which indicate posi-",0,9,0.21,0.14,0.02,0.0,0,53
tions where another template can be included. The dot (.) that follows the name of,0,9,0.21,0.14,0.0,0.0,0,53
34,1,9,0.39,0.06,0.0,0.0,0,54
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,54
C 2,1,7,0.26,0.36,0.0,0.0,0,54
HAPTER,1,6,0.33,0.37,0.0,0.03,1,54
"the template to be included is the data passed into the template. For example, listing",0,9,0.21,0.13,0.03,0.0,0,54
"2.7 has {{ template ""navbar"" . }}",0,9,0.3,0.13,0.0,0.0,1,54
", which indicates that the template named",0,9,0.21,0.43,0.0,0.0,1,54
navbar,1,9,0.39,0.77,0.0,0.0,1,54
"should be included at that position, and the data passed into the layout template",0,9,0.21,0.13,0.0,0.0,0,54
should be passed on to the navbar template too.,0,9,0.3,0.13,0.0,0.0,1,54
The navbar template in the public.navbar.html template file is shown next. The,0,9,0.21,0.15,0.0,0.0,0,54
navbar template doesn’t have any actions other than defining the template itself,0,9,0.21,0.13,0.0,0.0,0,54
(actions aren’t strictly necessary in template files).,0,9,0.3,0.13,0.0,0.03,1,54
Listing 2.8 navbar.html template file,1,9,0.48,0.15,0.03,0.02,1,54
"{{ define ""navbar"" }}",0,7,0.26,0.13,0.02,0.02,1,54
"<div class=""navbar navbar-default navbar-static-top"" role=""navigation"">",0,7,0.17,0.13,0.02,0.0,0,54
"<div class=""container"">",0,7,0.26,0.13,0.0,0.0,1,54
"<div class=""navbar-header"">",0,7,0.26,0.13,0.0,0.0,1,54
"<button type=""button"" class=""navbar-toggle collapsed""",0,7,0.26,0.13,0.0,0.0,1,54
➥,0,10,0.23,0.18,0.0,0.0,0,54
"data-toggle=""collapse"" data-target="".navbar-collapse"">",0,7,0.17,0.21,0.0,0.0,1,54
"<span class=""sr-only"">Toggle navigation</span>",0,7,0.26,0.13,0.0,0.0,1,54
"<span class=""icon-bar""></span>",0,7,0.26,0.13,0.0,0.0,1,54
"<span class=""icon-bar""></span>",0,7,0.26,0.13,0.0,0.0,1,54
"<span class=""icon-bar""></span>",0,7,0.26,0.13,0.0,0.0,1,54
</button>,0,7,0.26,0.13,0.0,0.0,1,54
"<a class=""navbar-brand"" href=""/"">",0,7,0.26,0.13,0.0,0.0,1,54
"<i class=""fa fa-comments-o""></i>",0,7,0.26,0.13,0.0,0.0,1,54
ChitChat,0,7,0.26,0.13,0.0,0.0,1,54
</a>,0,7,0.26,0.13,0.0,0.0,1,54
</div>,0,7,0.26,0.13,0.0,0.0,1,54
"<div class=""navbar-collapse collapse"">",0,7,0.26,0.13,0.0,0.0,1,54
"<ul class=""nav navbar-nav"">",0,7,0.26,0.13,0.0,0.0,1,54
"<li><a href=""/"">Home</a></li>",0,7,0.26,0.13,0.0,0.0,1,54
</ul>,0,7,0.26,0.13,0.0,0.0,1,54
"<ul class=""nav navbar-nav navbar-right"">",0,7,0.26,0.13,0.0,0.0,1,54
"<li><a href=""/login"">Login</a></li>",0,7,0.26,0.13,0.0,0.0,1,54
</ul>,0,7,0.26,0.13,0.0,0.0,1,54
</div>,0,7,0.26,0.13,0.0,0.0,1,54
</div>,0,7,0.26,0.13,0.0,0.0,1,54
</div>,0,7,0.26,0.13,0.0,0.02,1,54
{{ end }},0,7,0.26,0.13,0.02,0.02,1,54
"Let’s look at the content template in last template file, index.html, in the following",0,9,0.21,0.13,0.02,0.0,0,54
listing. Notice that the name of the template doesn’t necessary need to match the,0,9,0.21,0.13,0.0,0.0,0,54
"name of the template file, even though that has been the case for the past two files.",0,9,0.21,0.13,0.0,0.03,0,54
Listing 2.9 index.html template,1,9,0.48,0.15,0.03,0.02,1,54
"{{ define ""content"" }}",0,7,0.26,0.13,0.02,0.02,1,54
"<p class=""lead"">",0,7,0.26,0.13,0.02,0.0,1,54
"<a href=""/thread/new"">Start a thread</a> or join one below!",0,7,0.26,0.13,0.0,0.0,1,54
</p>,0,7,0.26,0.13,0.0,0.0,1,54
35,1,9,0.3,0.83,0.0,0.0,0,55
Generating HTML responses with templates,1,9,0.39,0.31,0.0,0.03,1,55
{{ range . }},0,7,0.26,0.14,0.03,0.0,1,55
"<div class=""panel panel-default"">",0,7,0.26,0.14,0.0,0.0,1,55
"<div class=""panel-heading"">",0,7,0.26,0.14,0.0,0.0,1,55
"<span class=""lead""> <i class=""fa fa-comment-o""></i> {{ .Topic }}</span>",0,7,0.17,0.14,0.0,0.0,0,55
</div>,0,7,0.26,0.14,0.0,0.0,1,55
"<div class=""panel-body"">",0,7,0.26,0.14,0.0,0.0,1,55
Started by {{ .User.Name }} - {{ .CreatedAtDate }} - {{ .NumReplies }},0,7,0.26,0.14,0.0,0.0,1,55
posts.,0,7,0.26,0.17,0.0,0.0,1,55
"<div class=""pull-right"">",0,7,0.26,0.14,0.0,0.0,1,55
"<a href=""/thread/read?id={{.Uuid }}"">Read more</a>",0,7,0.26,0.14,0.0,0.0,1,55
</div>,0,7,0.26,0.14,0.0,0.0,1,55
</div>,0,7,0.26,0.14,0.0,0.0,1,55
</div>,0,7,0.26,0.14,0.0,0.0,1,55
{{ end }},0,7,0.26,0.14,0.0,0.02,1,55
{{ end }},0,7,0.26,0.14,0.02,0.02,1,55
The code in index.html is interesting. You’ll notice a number of actions within the,0,9,0.21,0.14,0.02,0.0,0,55
". ), such as {{ .User.Name }}",0,9,0.21,0.49,0.0,0.0,1,55
and {{,0,9,0.21,0.78,0.0,0.0,1,55
content template that start with a dot (,0,9,0.3,0.14,0.0,0.0,1,55
".CreatedAtDate }} . To understand where this comes from, we need to go back to the",0,9,0.21,0.14,0.0,0.0,0,55
index handler function.,0,9,0.3,0.14,0.0,0.01,1,55
"threads, err := data.Threads(); if err == nil {",0,7,0.26,0.14,0.01,0.0,1,55
"templates.ExecuteTemplate(writer, ""layout"", threads)",0,7,0.26,0.14,0.0,0.0,1,55
},0,7,0.17,0.14,0.0,0.02,0,55
Let’s start off with this:,0,9,0.3,0.14,0.02,0.02,1,55
"templates.ExecuteTemplate(writer, ""layout"", threads)",0,7,0.26,0.14,0.02,0.02,1,55
"We take the set of templates we parsed earlier, and execute the layout template using",0,9,0.21,0.14,0.02,0.0,0,55
ExecuteTemplate . Executing the template means we take the content from the tem-,0,9,0.21,0.14,0.0,0.0,0,55
"plate files, combine it with data from another source, and generate the final",0,9,0.21,0.14,0.0,0.0,0,55
HTML,0,9,0.21,0.79,0.0,0.01,1,55
"content, shown in figure 2.6.",0,9,0.3,0.14,0.01,0.0,1,55
Why the layout template and not the other two templates? This should be obvious:,0,9,0.21,0.17,0.0,0.0,0,55
"the layout template includes the other two templates, so if we execute the layout tem-",0,9,0.21,0.14,0.0,0.0,0,55
"plate, the other two templates will also be executed and the intended",0,9,0.3,0.14,0.0,0.0,1,55
HTML will be,0,9,0.21,0.73,0.0,0.04,1,55
Template engine,0,7,0.17,0.31,0.04,0.0,1,55
HMTL,0,7,0.26,0.18,0.0,0.0,1,55
Data,0,7,0.17,0.57,0.0,0.09,1,55
Templates,0,7,0.17,0.32,0.09,0.05,1,55
Figure 2.6 The template engine combines the data and template to produce HTML.,1,7,0.35,0.14,0.05,0.0,0,55
36,1,9,0.39,0.06,0.0,0.0,0,56
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,56
C 2,1,7,0.26,0.36,0.0,0.0,0,56
HAPTER,1,6,0.33,0.37,0.0,0.03,1,56
"generated. If we executed either one of the other two templates, we would only get",0,9,0.21,0.13,0.03,0.0,0,56
part of the HTML we want.,0,9,0.3,0.13,0.0,0.0,1,56
"As you might realize by now, the dot (.) represents the data that’s passed into the",0,9,0.21,0.15,0.0,0.0,0,56
"template (and a bit more, which is explained in the next section). Figure 2.7 shows",0,9,0.21,0.13,0.0,0.0,0,56
what we end up with.,0,9,0.43,0.13,0.0,0.31,1,56
Figure 2.7 The index page of the example ChitChat web application,1,7,0.58,0.13,0.31,0.03,1,56
2.5.1 Tidying up,1,10,0.5,0.06,0.03,0.01,1,56
"HTML generation will be used over and over again, so let’s do some tidying up and",0,9,0.21,0.13,0.01,0.0,0,56
"generateHTML , shown next.",0,9,0.21,0.45,0.0,0.0,1,56
move those steps into a function called,0,9,0.3,0.13,0.0,0.03,1,56
Listing 2.10 The generateHTML,1,9,0.48,0.15,0.03,0.0,1,56
function,1,9,0.39,0.42,0.0,0.02,1,56
"func generateHTML(w http.ResponseWriter, data interface{}, fn ...string) {",0,7,0.17,0.13,0.02,0.0,0,56
var files []string,0,7,0.26,0.13,0.0,0.0,1,56
"for _, file := range fn {",0,7,0.26,0.13,0.0,0.0,1,56
"files = append(files, fmt.Sprintf(""templates/%s.html"", file))",0,7,0.26,0.13,0.0,0.0,1,56
},0,7,0.17,0.13,0.0,0.0,0,56
templates := template.Must(template.ParseFiles(files...)),0,7,0.26,0.13,0.0,0.0,1,56
"templates.ExecuteTemplate(writer, ""layout"", data)",0,7,0.26,0.13,0.0,0.0,1,56
},0,7,0.17,0.13,0.0,0.02,0,56
generateHTML takes a ResponseWriter,0,9,0.3,0.13,0.02,0.0,1,56
", some data, and a list of template files to be",0,9,0.21,0.45,0.0,0.0,1,56
"parsed. The data parameter is the empty interface type, which means it can take in any",0,9,0.21,0.13,0.0,0.0,0,56
type. This might come as a surprise if you’re a new Go programmer; isn’t Go a statically,0,9,0.21,0.13,0.0,0.0,0,56
typed programming language? What’s this about accepting any types in as a parameter?,0,9,0.21,0.13,0.0,0.0,0,56
"As it turns out, Go has an interesting way of getting around being a statically typed",0,9,0.21,0.15,0.0,0.0,0,56
"programming language and it provides the flexibility of accepting different types,",0,9,0.21,0.13,0.0,0.0,0,56
using interfaces. Interfaces in Go are constructs that are sets of methods and are also,0,9,0.21,0.13,0.0,0.0,0,56
37,1,9,0.3,0.83,0.0,0.0,0,57
Installing PostgreSQL,1,9,0.39,0.39,0.0,0.03,1,57
"types. An empty interface is then an empty set, meaning any type can be an empty",0,9,0.21,0.14,0.03,0.0,0,57
interface; you can pass any type into this function as the data.,0,9,0.3,0.14,0.0,0.0,1,57
The last parameter in the function starts with … (three dots). This indicates that,0,9,0.21,0.17,0.0,0.0,0,57
the generateHTML function is a,0,9,0.3,0.14,0.0,0.0,1,57
"variadic function, meaning it can take zero or more",1,9,0.39,0.41,0.0,0.0,1,57
parameters in that last variadic parameter. This allows you to pass any number of tem-,0,9,0.21,0.14,0.0,0.0,0,57
plate files to the function. Variadic parameters need to be the last parameter for the,0,9,0.21,0.14,0.0,0.0,0,57
variadic function.,0,9,0.3,0.14,0.0,0.0,1,57
"generateHTML function, let’s go back and clean up the",0,9,0.21,0.38,0.0,0.0,1,57
Now that we have the,0,9,0.3,0.17,0.0,0.0,1,57
index handler function. The new,0,9,0.3,0.14,0.0,0.0,1,57
"index handler function, shown here, now looks a",0,9,0.21,0.43,0.0,0.0,1,57
lot neater.,0,9,0.3,0.14,0.0,0.03,1,57
Listing 2.11 The final index,1,9,0.48,0.17,0.03,0.0,1,57
handler function,1,9,0.39,0.4,0.0,0.02,1,57
"func index(writer http.ResponseWriter, request *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,57
"threads, err := data.Threads(); if err == nil {",0,7,0.26,0.14,0.0,0.0,1,57
"_, err := session(writer, request)",0,7,0.26,0.14,0.0,0.0,1,57
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,57
"generateHTML(writer, threads, ""layout"", ""public.navbar"", ""index"")",0,7,0.26,0.14,0.0,0.0,1,57
} else {,0,7,0.26,0.14,0.0,0.0,1,57
"generateHTML(writer, threads, ""layout"", ""private.navbar"", ""index"")",0,7,0.26,0.14,0.0,0.0,1,57
},0,7,0.17,0.14,0.0,0.0,0,57
},0,7,0.17,0.14,0.0,0.0,0,57
},0,7,0.17,0.14,0.0,0.01,0,57
We sort of glossed over the data source and what we used to combine with the tem-,0,9,0.21,0.14,0.01,0.0,0,57
plates to get the final HTML,0,9,0.3,0.14,0.0,0.0,1,57
. Let’s get to that now.,0,9,0.21,0.37,0.0,0.02,1,57
2.6 Installing PostgreSQL,1,12,0.54,0.07,0.02,0.01,1,57
In this chapter as well as for any remaining chapters in the book that require access to,0,9,0.21,0.14,0.01,0.0,0,57
"a relational database, we’ll be using",0,9,0.3,0.14,0.0,0.0,1,57
"P ostgre SQL . Before we start any code, I’ll run",0,9,0.21,0.45,0.0,0.0,1,57
through how to install and start up,0,9,0.3,0.14,0.0,0.0,1,57
"P ostgre SQL , and also create the database that we",0,9,0.21,0.44,0.0,0.0,1,57
need for this chapter.,0,9,0.3,0.14,0.0,0.02,1,57
2.6.1 Linux/FreeBSD,1,10,0.5,0.07,0.02,0.01,1,57
Prebuilt binaries are available for many variants of Linux and,0,9,0.3,0.14,0.01,0.0,1,57
F ree BSD from,0,9,0.21,0.72,0.0,0.0,1,57
www.postgresql.org/download,0,9,0.3,0.14,0.0,0.0,1,57
. Download any one of them from the site and follow,0,9,0.21,0.39,0.0,0.0,1,57
"the instructions. For example, you can install Postgres on Ubuntu by executing this",0,9,0.21,0.14,0.0,0.0,0,57
command on the console:,0,9,0.3,0.14,0.0,0.01,1,57
sudo apt-get install postgresql postgresql-contrib,0,7,0.26,0.14,0.01,0.01,1,57
"postgres package and an additional package of utilities, and",0,9,0.21,0.34,0.01,0.0,1,57
This will install both the,0,9,0.3,0.14,0.0,0.0,1,57
also start it up.,0,9,0.3,0.14,0.0,0.0,1,57
postgres user and that’s the only user who can con-,0,9,0.21,0.41,0.0,0.0,1,57
By default Postgres creates a,0,9,0.3,0.17,0.0,0.0,1,57
nect to the server. For convenience you can create another Postgres account with your,0,9,0.21,0.14,0.0,0.0,0,57
"username. First, you need to log in to the Postgres account:",0,9,0.3,0.14,0.0,0.01,1,57
sudo su postgres,0,7,0.26,0.14,0.01,0.0,1,57
38,1,9,0.39,0.06,0.0,0.0,0,58
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,58
C 2,1,7,0.26,0.36,0.0,0.0,0,58
HAPTER,1,6,0.33,0.37,0.0,0.03,1,58
"Next, use createuser to create your postgre",0,9,0.3,0.13,0.03,0.0,1,58
SQL account:,0,9,0.21,0.49,0.0,0.01,1,58
createuser –interactive,0,7,0.26,0.13,0.01,0.01,1,58
"Finally, use createdb to create your database:",0,9,0.3,0.13,0.01,0.01,1,58
createdb  <YOUR ACCOUNT NAME>,0,7,0.26,0.13,0.01,0.02,1,58
2.6.2 Mac OS X,1,10,0.5,0.06,0.02,0.01,1,58
One of the easiest ways to install,0,9,0.3,0.13,0.01,0.0,1,58
P ostgre SQL on M ac OS X,0,9,0.21,0.4,0.0,0.0,1,58
is to use the Postgres appli-,0,9,0.21,0.6,0.0,0.0,1,58
cation. Download the zip file and unpack it. Then drag and drop the Postgres.app file,0,9,0.21,0.13,0.0,0.0,0,58
into your Applications folder and you’re done. You can start the application just like you,0,9,0.21,0.13,0.0,0.0,0,58
"start any M ac OS X application. The first time you start the application, Postgres will ini-",0,9,0.21,0.13,0.0,0.0,0,58
tialize a new database cluster and create a database for you. The command-line tool psql,0,9,0.21,0.13,0.0,0.0,0,58
"is part of the package, so you’ll be able to access the database using psql once you set",0,9,0.21,0.13,0.0,0.0,0,58
the correct path. Open up Terminal and add this line your ~/.profile or ~/.bashrc file:,0,9,0.21,0.13,0.0,0.02,0,58
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin,0,7,0.26,0.13,0.02,0.02,1,58
2.6.3 Windows,1,10,0.5,0.06,0.02,0.01,1,58
Installing P ostgre SQL on Windows is fairly straightforward too. There are a number of,0,9,0.21,0.13,0.01,0.0,0,58
graphical installers on Windows that do all the heavy lifting for you; you simply need,0,9,0.21,0.13,0.0,0.0,0,58
to provide the settings accordingly. A popular installer is one from Enterprise,0,9,0.21,0.13,0.0,0.0,0,58
DB at,0,9,0.21,0.78,0.0,0.0,1,58
www.enterprisedb.com/products-services-training/pgdownload,0,9,0.3,0.13,0.0,0.0,1,58
.,0,9,0.12,0.64,0.0,0.0,0,58
"A number of tools, including pgAdmin III, are installed along with the package,",0,9,0.21,0.15,0.0,0.0,0,58
which allows you to set up the rest of the configuration.,0,9,0.3,0.13,0.0,0.02,1,58
2.7 Interfacing with the database,1,12,0.54,0.06,0.02,0.01,1,58
"In the design section earlier in this chapter, we talked about the four data structures",0,9,0.21,0.13,0.01,0.0,0,58
"used in ChitChat. Although you can place the data structures in the same main file,",0,9,0.21,0.13,0.0,0.0,0,58
data .,0,9,0.21,0.75,0.0,0.0,1,58
"it’s neater if you store all data-related code in another package, aptly named",0,9,0.21,0.13,0.0,0.0,0,58
"To create a package, create a subdirectory called data and create a file named",0,9,0.21,0.15,0.0,0.0,0,58
thread.go to store all thread-related code (you’ll create a user.go file to store all user-,0,9,0.21,0.13,0.0,0.0,0,58
"data package (for example, in the",0,9,0.21,0.55,0.0,0.0,1,58
"related code). Then, whenever you need to use the",0,9,0.3,0.13,0.0,0.0,1,58
"handlers that need to access the database), you import the package:",0,9,0.3,0.13,0.0,0.01,1,58
import (,0,7,0.26,0.13,0.01,0.0,1,58
"""github.com/sausheong/gwp/Chapter_2_Go_ChitChat/chitchat/data""",0,7,0.26,0.13,0.0,0.0,1,58
),0,7,0.17,0.13,0.0,0.02,0,58
"Thread struct, shown in the following listing, to",0,9,0.21,0.42,0.02,0.0,1,58
"Within the thread.go file, define a",0,9,0.3,0.13,0.0,0.0,1,58
contain the data.,0,9,0.3,0.13,0.0,0.03,1,58
Thread,1,9,0.39,0.29,0.03,0.0,1,58
Listing 2.12 The,1,9,0.48,0.15,0.0,0.0,1,58
struct,1,9,0.39,0.35,0.0,0.02,1,58
package data,1,7,0.44,0.13,0.02,0.01,1,58
import(,0,7,0.26,0.13,0.01,0.0,1,58
39,1,9,0.3,0.83,0.0,0.0,0,59
Interfacing with the database,1,9,0.39,0.36,0.0,0.03,1,59
type Thread struct {,0,7,0.26,0.14,0.03,0.0,1,59
Id        int,0,7,0.26,0.14,0.0,0.0,1,59
Uuid      string,0,7,0.26,0.14,0.0,0.0,1,59
Topic     string,0,7,0.26,0.14,0.0,0.0,1,59
UserId    int,0,7,0.26,0.14,0.0,0.0,1,59
CreatedAt time.Time,0,7,0.26,0.14,0.0,0.0,1,59
},0,7,0.17,0.14,0.0,0.02,0,59
main but data (in bold). When you use,0,9,0.21,0.51,0.02,0.0,1,59
Notice that the package name is no longer,0,9,0.3,0.14,0.0,0.0,1,59
"anything in this package later (functions or structs or anything else), you need to pro-",0,9,0.21,0.14,0.0,0.0,0,59
Thread struct you must use,0,9,0.21,0.62,0.0,0.0,1,59
vide the package name along with it. If you want to use the,0,9,0.3,0.14,0.0,0.0,1,59
data.Thread instead of just,0,9,0.3,0.14,0.0,0.0,1,59
Thread alone. This is the,0,9,0.21,0.37,0.0,0.0,1,59
data package you used earlier in,0,9,0.21,0.58,0.0,0.0,1,59
"the chapter. Besides containing the structs and code that interact with the database,",0,9,0.21,0.14,0.0,0.0,0,59
the package contains other functions that are closely associated.,0,9,0.3,0.14,0.0,0.0,1,59
The Thread struct should correspond to the,0,9,0.3,0.17,0.0,0.0,1,59
"DDL (Data Definition Language, the",0,9,0.21,0.54,0.0,0.0,1,59
threads . You,0,9,0.21,0.73,0.0,0.0,1,59
subset of SQL ) that’s used to create the relational database table called,0,9,0.21,0.14,0.0,0.0,0,59
"don’t have these tables yet so let’s create them first. Of course, before you create the",0,9,0.21,0.14,0.0,0.0,0,59
"database tables, you should create the database itself. Let’s create a database called",0,9,0.21,0.14,0.0,0.0,0,59
chitchat . Execute this command at the console:,0,9,0.3,0.14,0.0,0.02,1,59
createdb chitchat,0,7,0.26,0.14,0.02,0.02,1,59
"Once you have the database, you can use setup.sql to create the database tables for",0,9,0.21,0.14,0.02,0.0,0,59
"ChitChat, shown next.",0,9,0.3,0.14,0.0,0.03,1,59
Listing 2.13 setup.sql used to create database tables in PostgreSQL,1,9,0.48,0.17,0.03,0.02,1,59
create table users (,0,7,0.26,0.14,0.02,0.0,1,59
"id         serial primary key,",0,7,0.26,0.14,0.0,0.0,1,59
"uuid       varchar(64) not null unique,",0,7,0.26,0.14,0.0,0.0,1,59
"name       varchar(255),",0,7,0.26,0.14,0.0,0.0,1,59
"email      varchar(255) not null unique,",0,7,0.26,0.14,0.0,0.0,1,59
"password   varchar(255) not null,",0,7,0.26,0.14,0.0,0.0,1,59
created_at timestamp not null,0,7,0.26,0.14,0.0,0.0,1,59
);,0,7,0.17,0.14,0.0,0.01,0,59
create table sessions (,0,7,0.26,0.14,0.01,0.0,1,59
"id         serial primary key,",0,7,0.26,0.14,0.0,0.0,1,59
"uuid       varchar(64) not null unique,",0,7,0.26,0.14,0.0,0.0,1,59
"email      varchar(255),",0,7,0.26,0.14,0.0,0.0,1,59
"user_id    integer references users(id),",0,7,0.26,0.14,0.0,0.0,1,59
created_at timestamp not null,0,7,0.26,0.14,0.0,0.0,1,59
);,0,7,0.17,0.14,0.0,0.02,0,59
create table threads (,0,7,0.26,0.14,0.02,0.0,1,59
"id         serial primary key,",0,7,0.26,0.14,0.0,0.0,1,59
"uuid       varchar(64) not null unique,",0,7,0.26,0.14,0.0,0.0,1,59
"topic      text,",0,7,0.26,0.14,0.0,0.0,1,59
"user_id    integer references users(id),",0,7,0.26,0.14,0.0,0.0,1,59
created_at timestamp not null,0,7,0.26,0.14,0.0,0.0,1,59
);,0,7,0.17,0.14,0.0,0.02,0,59
create table posts (,0,7,0.26,0.14,0.02,0.0,1,59
40,1,9,0.39,0.06,0.0,0.0,0,60
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,60
C 2,1,7,0.26,0.36,0.0,0.0,0,60
HAPTER,1,6,0.33,0.37,0.0,0.03,1,60
"uuid       varchar(64) not null unique,",0,7,0.26,0.13,0.03,0.0,1,60
"body       text,",0,7,0.26,0.13,0.0,0.0,1,60
"user_id    integer references users(id),",0,7,0.26,0.13,0.0,0.0,1,60
"thread_id  integer references threads(id),",0,7,0.26,0.13,0.0,0.0,1,60
created_at timestamp not null,0,7,0.26,0.13,0.0,0.0,1,60
);,0,7,0.17,0.13,0.0,0.02,0,60
"To run the script, use the psql tool that’s usually installed as part of your",0,9,0.21,0.13,0.02,0.0,0,60
P ostgre SQL,0,9,0.21,0.73,0.0,0.0,1,60
installation (see the previous section). Go to the console and run this command:,0,9,0.21,0.13,0.0,0.02,0,60
psql –f setup.sql –d chitchat,0,7,0.26,0.13,0.02,0.02,1,60
This command should create the necessary database tables in your database. Once,0,9,0.21,0.13,0.02,0.0,0,60
"you have your database tables, you must be able to connect to the database and do",0,9,0.21,0.13,0.0,0.0,0,60
"Db , which is a pointer to",0,9,0.21,0.61,0.0,0.0,1,60
"stuff with the tables. So you’ll create a global variable,",0,9,0.3,0.13,0.0,0.0,1,60
"sql.DB , a representation of a pool of database connections. You’ll define",0,9,0.21,0.13,0.0,0.0,0,60
Db in the,0,9,0.21,0.75,0.0,0.0,1,60
"data.go file, as shown in the following listing. Note that this listing also contains a",0,9,0.21,0.13,0.0,0.0,0,60
function named init that initializes,0,9,0.3,0.13,0.0,0.0,1,60
Db upon startup of your web application. You’ll,0,9,0.21,0.43,0.0,0.0,1,60
use Db to execute your queries.,0,9,0.3,0.13,0.0,0.03,1,60
Listing 2.14 The Db global variable and the,1,9,0.48,0.15,0.03,0.0,1,60
init function in data.go,1,9,0.39,0.49,0.0,0.02,1,60
Var Db *sql.DB,0,7,0.26,0.13,0.02,0.02,1,60
func init() {,0,7,0.26,0.13,0.02,0.0,1,60
var err error,0,7,0.26,0.13,0.0,0.0,1,60
"Db, err = sql.Open(""postgres"", ""dbname=chitchat sslmode=disable"")",0,7,0.26,0.13,0.0,0.0,1,60
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,60
log.Fatal(err),0,7,0.26,0.13,0.0,0.0,1,60
},0,7,0.17,0.13,0.0,0.0,0,60
return,0,7,0.26,0.13,0.0,0.0,1,60
},0,7,0.17,0.13,0.0,0.02,0,60
"Now that you have the struct, the tables, and a database connection pool, how do you",0,9,0.21,0.13,0.02,0.0,0,60
connect the Thread struct with the,0,9,0.3,0.13,0.0,0.0,1,60
threads table? There’s no particular magic to it. As,0,9,0.21,0.41,0.0,0.0,1,60
"with everything else in ChitChat, you simply create a function every time you want inter-",0,9,0.21,0.13,0.0,0.0,0,60
action between the struct and the database. To extract all threads in the database for the,0,9,0.21,0.13,0.0,0.0,0,60
"index handler function, create a",0,9,0.3,0.13,0.0,0.0,1,60
"Threads function in thread.go, as shown next.",0,9,0.21,0.4,0.0,0.02,1,60
Listing 2.15 The Threads,1,9,0.48,0.15,0.02,0.0,1,60
function in thread.go,1,9,0.39,0.36,0.0,0.02,1,60
"func Threads() (threads []Thread, err error){",0,7,0.26,0.13,0.02,0.0,1,60
"rows, err := Db.Query(""SELECT id, uuid, topic, user_id, created_at FROM",0,7,0.17,0.13,0.0,0.0,0,60
"threads ORDER BY created_at DESC"")",0,7,0.26,0.15,0.0,0.0,1,60
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,60
return,0,7,0.26,0.13,0.0,0.0,1,60
},0,7,0.17,0.13,0.0,0.0,0,60
for rows.Next() {,0,7,0.26,0.13,0.0,0.0,1,60
th := Thread{},0,7,0.26,0.13,0.0,0.0,1,60
"if err = rows.Scan(&th.Id, &th.Uuid, &th.Topic, &th.UserId,",0,7,0.26,0.13,0.0,0.0,1,60
➥,0,10,0.23,0.16,0.0,0.0,0,60
&th.CreatedAt); err != nil {,0,7,0.26,0.19,0.0,0.0,1,60
41,1,9,0.3,0.83,0.0,0.0,0,61
Interfacing with the database,1,9,0.39,0.36,0.0,0.02,1,61
return,0,7,0.26,0.14,0.02,0.0,1,61
},0,7,0.17,0.14,0.0,0.0,0,61
"threads = append(threads, th)",0,7,0.26,0.14,0.0,0.0,1,61
},0,7,0.17,0.14,0.0,0.0,0,61
rows.Close(),0,7,0.26,0.14,0.0,0.0,1,61
return,0,7,0.26,0.14,0.0,0.0,1,61
},0,7,0.17,0.14,0.0,0.02,0,61
"Without getting into the details (which will be covered in chapter 6), these are the",0,9,0.21,0.14,0.02,0.0,0,61
general steps:,0,9,0.3,0.14,0.0,0.01,1,61
Connect to the database using the database connection pool.,0,9,0.3,0.19,0.01,0.0,1,61
1,1,6,0.33,0.17,0.0,0.01,0,61
"Send an SQL query to the database, which will return one or more rows.",0,9,0.3,0.19,0.01,0.0,1,61
2,1,6,0.33,0.17,0.0,0.01,0,61
Create a struct.,0,9,0.3,0.19,0.01,0.0,1,61
3,1,6,0.33,0.17,0.0,0.01,0,61
Iterate through the rows and scan them into the struct.,0,9,0.3,0.19,0.01,0.0,1,61
4,1,6,0.33,0.17,0.0,0.01,0,61
"In the Threads function, you return a slice of the",0,9,0.3,0.14,0.01,0.0,1,61
"Thread struct, so you need to create",0,9,0.21,0.55,0.0,0.0,1,61
the slice and then continually append to it until you’re done with all the rows.,0,9,0.21,0.14,0.0,0.0,0,61
"Now that you can get the data from the database into the struct, how do you get",0,9,0.21,0.17,0.0,0.0,0,61
the data in the struct to the templates? Let’s return to the index.html template file,0,9,0.21,0.14,0.0,0.0,0,61
"(listing 2.9), where you find this code:",0,9,0.3,0.14,0.0,0.01,1,61
{{ range . }},0,7,0.26,0.14,0.01,0.0,1,61
"<div class=""panel panel-default"">",0,7,0.26,0.14,0.0,0.0,1,61
"<div class=""panel-heading"">",0,7,0.26,0.14,0.0,0.0,1,61
"<span class=""lead""> <i class=""fa fa-comment-o""></i> {{ .Topic }}</span>",0,7,0.17,0.14,0.0,0.0,0,61
</div>,0,7,0.26,0.14,0.0,0.0,1,61
"<div class=""panel-body"">",0,7,0.26,0.14,0.0,0.0,1,61
Started by {{ .User.Name }} - {{ .CreatedAtDate }} - {{ .NumReplies }},0,7,0.26,0.14,0.0,0.0,1,61
posts.,0,7,0.26,0.17,0.0,0.0,1,61
"<div class=""pull-right"">",0,7,0.26,0.14,0.0,0.0,1,61
"<a href=""/thread/read?id={{.Uuid }}"">Read more</a>",0,7,0.26,0.14,0.0,0.0,1,61
</div>,0,7,0.26,0.14,0.0,0.0,1,61
</div>,0,7,0.26,0.14,0.0,0.0,1,61
</div>,0,7,0.26,0.14,0.0,0.0,1,61
{{ end }},0,7,0.26,0.14,0.0,0.02,1,61
"As you’ll recall, a dot (.) in an action represents the data that’s passed into the",0,9,0.21,0.14,0.02,0.0,0,61
"template to be combined to generate the final output. The dot here, as part of",0,9,0.21,0.14,0.0,0.0,0,61
"{{ range . }} , is the threads",0,9,0.3,0.14,0.0,0.0,1,61
"Threads function,",0,9,0.21,0.7,0.0,0.0,1,61
variable extracted earlier using the,0,9,0.21,0.4,0.0,0.0,1,61
which is a slice of Thread,0,9,0.3,0.14,0.0,0.0,1,61
structs.,0,9,0.21,0.35,0.0,0.0,1,61
The range action assumes that the data passed in is either a slice or an array of,0,9,0.21,0.17,0.0,0.0,0,61
structs. The range action allows you to iterate through and access the structs using,0,9,0.21,0.14,0.0,0.0,0,61
{{ .Topic }} allows you to access the,0,9,0.21,0.42,0.0,0.0,1,61
Topic field of,0,9,0.21,0.73,0.0,0.0,1,61
"their named fields. For example,",0,9,0.3,0.14,0.0,0.0,1,61
the Thread struct. Note that the field must start with a dot and the name of the field is,0,9,0.21,0.14,0.0,0.0,0,61
capitalized.,0,9,0.3,0.14,0.0,0.0,1,61
What about {{ .User.Name }},0,9,0.3,0.17,0.0,0.0,1,61
and {{ .CreatedAtDate }},0,9,0.21,0.43,0.0,0.0,1,61
and {{ .NumReplies,0,9,0.21,0.67,0.0,0.0,1,61
"}} ? The Thread struct doesn’t have these as named fields, so where do they come",0,9,0.21,0.14,0.0,0.0,0,61
from? Let’s look at {{ .NumReplies }},0,9,0.3,0.14,0.0,0.0,1,61
. While using the name of a field after the dot,0,9,0.21,0.47,0.0,0.0,1,61
"accesses the data in the struct, you can do the same with a special type of function",0,9,0.21,0.14,0.0,0.0,0,61
called methods .,1,9,0.48,0.14,0.0,0.0,1,61
42,1,9,0.39,0.06,0.0,0.0,0,62
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,62
C 2,1,7,0.26,0.36,0.0,0.0,0,62
HAPTER,1,6,0.33,0.37,0.0,0.03,1,62
Methods are functions that are attached to any named types (except a pointer or,0,9,0.21,0.15,0.03,0.0,0,62
Thread,0,9,0.21,0.77,0.0,0.0,1,62
"an interface), including structs. By attaching a function to a pointer to a",0,9,0.21,0.13,0.0,0.0,0,62
"Thread struct, also called the",0,9,0.21,0.59,0.0,0.0,1,62
"struct, you allow the function to access the thread. The",0,9,0.3,0.13,0.0,0.0,1,62
"receiver , is normally changed after calling the method.",1,9,0.48,0.13,0.0,0.0,1,62
The NumReplies method is shown here.,0,9,0.3,0.15,0.0,0.03,1,62
Listing 2.16 NumReplies,1,9,0.48,0.15,0.03,0.0,1,62
method in thread.go,1,9,0.39,0.36,0.0,0.02,1,62
func (thread *Thread) NumReplies() (count int) {,0,7,0.26,0.13,0.02,0.0,1,62
"rows, err := Db.Query(""SELECT count(*) FROM posts where thread_id = $1"",",0,7,0.17,0.13,0.0,0.0,0,62
thread.Id),0,7,0.26,0.15,0.0,0.0,1,62
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,62
return,0,7,0.26,0.13,0.0,0.0,1,62
},0,7,0.17,0.13,0.0,0.0,0,62
for rows.Next() {,0,7,0.26,0.13,0.0,0.0,1,62
if err = rows.Scan(&count); err != nil {,0,7,0.26,0.13,0.0,0.0,1,62
return,0,7,0.26,0.13,0.0,0.0,1,62
},0,7,0.17,0.13,0.0,0.0,0,62
},0,7,0.17,0.13,0.0,0.0,0,62
rows.Close(),0,7,0.26,0.13,0.0,0.0,1,62
return,0,7,0.26,0.13,0.0,0.0,1,62
},0,7,0.17,0.13,0.0,0.02,0,62
"The NumReplies method opens a connection to the database, gets the count of",0,9,0.21,0.13,0.02,0.0,0,62
count parameter passed into the,0,9,0.21,0.55,0.0,0.0,1,62
"threads using an SQL query, and scans it into the",0,9,0.3,0.13,0.0,0.0,1,62
method. The NumReplies,0,9,0.3,0.13,0.0,0.0,1,62
"method returns this count, which is then used to replace",0,9,0.21,0.34,0.0,0.0,1,62
.NumReplies in the HTML,0,9,0.3,0.13,0.0,0.0,1,62
", by the template engine, shown in figure 2.8.",0,9,0.21,0.34,0.0,0.0,1,62
"User ,",0,9,0.21,0.78,0.0,0.0,1,62
By providing a combination of functions and methods on the data structs (,0,9,0.21,0.15,0.0,0.0,0,62
"Session , Thread , and Post",0,9,0.3,0.13,0.0,0.0,1,62
"), you create a data layer that shields you from directly",0,9,0.21,0.35,0.0,0.0,1,62
accessing the database in the handler functions. Although there are plenty of libraries,0,9,0.21,0.13,0.0,0.0,0,62
"that provide this functionality, it’s good to understand that the underlying basis of",0,9,0.21,0.13,0.0,0.0,0,62
"accessing the database is quite easy, with no magic involved. Just simple, straight-",0,9,0.21,0.13,0.0,0.0,0,62
forward code.,0,9,0.3,0.13,0.0,0.05,1,62
Server,0,7,0.17,0.26,0.05,0.03,1,62
Model,0,7,0.17,0.34,0.03,0.02,1,62
Method,0,7,0.17,0.3,0.02,0.02,1,62
Field,0,7,0.17,0.31,0.02,0.01,1,62
Handler,0,7,0.26,0.17,0.01,0.0,1,62
Database,0,7,0.17,0.48,0.0,0.01,1,62
Method,0,7,0.17,0.3,0.01,0.02,1,62
Field,0,7,0.17,0.31,0.02,0.0,1,62
Figure 2.8 Connecting the struct,1,7,0.35,0.58,0.0,0.0,1,62
model with the database and the,1,7,0.35,0.58,0.0,0.0,1,62
43,1,9,0.3,0.83,0.0,0.0,0,63
Wrapping up,1,9,0.39,0.41,0.0,0.02,1,63
2.8 Starting the server,1,12,0.54,0.07,0.02,0.01,1,63
Let’s round out this chapter by showing code that starts up the server and attaches the,0,9,0.21,0.14,0.01,0.0,0,63
"main function, so it will be in main.go.",0,9,0.21,0.5,0.0,0.0,1,63
multiplexer to the server. This is part of the,0,9,0.3,0.14,0.0,0.01,1,63
server := &http.Server{,0,7,0.26,0.14,0.01,0.0,1,63
"Addr:     ""0.0.0.0:8080"",",0,7,0.26,0.14,0.0,0.0,1,63
"Handler:  mux,",0,7,0.26,0.14,0.0,0.0,1,63
},0,7,0.17,0.14,0.0,0.0,0,63
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.02,1,63
Server struct and call the,0,9,0.21,0.41,0.02,0.0,1,63
ListenAndServe function,0,9,0.21,0.63,0.0,0.0,1,63
The code is simple; you create a,0,9,0.3,0.14,0.0,0.0,1,63
on it and you get your server.,0,9,0.3,0.14,0.0,0.0,1,63
Now let’s get it up and running. Compile this from the console:,0,9,0.3,0.17,0.0,0.02,1,63
go build,0,7,0.26,0.14,0.02,0.02,1,63
This command will create a binary executable file named chitchat in the same direc-,0,9,0.21,0.14,0.02,0.0,0,63
tory (and also in in your,0,9,0.3,0.14,0.0,0.0,1,63
$GOPATH /bin directory). This is our ChitChat server. Let’s,0,9,0.21,0.35,0.0,0.0,1,63
start the server:,0,9,0.3,0.14,0.0,0.02,1,63
./chitchat,0,7,0.26,0.14,0.02,0.02,1,63
This command will start the server. Assuming that you’ve created the necessary data-,0,9,0.21,0.14,0.02,0.0,0,63
"base tables, go to http://localhost:8080 and registered for an account; then log in and",0,9,0.21,0.14,0.0,0.0,0,63
start creating your own forum threads.,0,9,0.3,0.14,0.0,0.02,1,63
2.9 Wrapping up,1,12,0.54,0.07,0.02,0.01,1,63
"We went through a 20,000-foot overview of the various building blocks of a Go web",0,9,0.21,0.14,0.01,0.0,0,63
"application. Figure 2.9 shows a final recap of the entire flow. As illustrated,",0,9,0.21,0.14,0.0,0.01,0,63
The client sends a request to the server.,0,9,0.3,0.19,0.01,0.0,1,63
1,1,6,0.33,0.17,0.0,0.01,0,63
"This is received by the multiplexer, which redirects it to the correct handler.",0,9,0.21,0.19,0.01,0.0,0,63
2,1,6,0.33,0.17,0.0,0.03,0,63
Server,0,7,0.17,0.49,0.03,0.02,1,63
Request,0,7,0.17,0.24,0.02,0.01,1,63
Client Multiplexer,0,7,0.26,0.17,0.01,0.0,1,63
Handler,0,7,0.17,0.51,0.0,0.01,1,63
Response,0,7,0.17,0.24,0.01,0.0,1,63
Model,0,7,0.17,0.64,0.0,0.02,1,63
Model,0,7,0.17,0.64,0.02,0.0,1,63
Template engine Handler,0,7,0.17,0.34,0.0,0.0,1,63
Database,0,7,0.17,0.75,0.0,0.0,1,63
Model,0,7,0.17,0.64,0.0,0.02,1,63
Model,0,7,0.17,0.64,0.02,0.02,1,63
Templates Handler,0,7,0.17,0.36,0.02,0.05,1,63
Figure 2.9 The web application big picture,1,7,0.44,0.14,0.05,0.0,1,63
44,1,9,0.39,0.06,0.0,0.0,0,64
Go ChitChat,1,9,0.39,0.44,0.0,0.0,1,64
C 2,1,7,0.26,0.36,0.0,0.0,0,64
HAPTER,1,6,0.33,0.37,0.0,0.03,1,64
The handler processes the request.,0,9,0.3,0.18,0.03,0.0,1,64
3,1,6,0.33,0.15,0.0,0.01,0,64
"When data is needed, it will use one or more data structs that model the data in",0,9,0.21,0.18,0.01,0.0,0,64
4,1,6,0.33,0.15,0.0,0.01,0,64
the database.,0,9,0.3,0.18,0.01,0.01,1,64
"The model connects with the database, triggered by functions or methods on",0,9,0.21,0.18,0.01,0.0,0,64
5,1,6,0.33,0.15,0.0,0.01,0,64
the data struct.,0,9,0.3,0.18,0.01,0.01,1,64
"When processing is complete, the handler triggers the template engine, some-",0,9,0.21,0.18,0.01,0.0,0,64
6,1,6,0.33,0.15,0.0,0.01,0,64
times sending in data from the model.,0,9,0.3,0.18,0.01,0.01,1,64
"The template engine parses template files to create templates, which in turn are",0,9,0.21,0.18,0.01,0.0,0,64
7,1,6,0.33,0.15,0.0,0.01,0,64
combined with data to produce,0,9,0.3,0.18,0.01,0.0,1,64
HTML .,0,9,0.21,0.44,0.0,0.01,1,64
The generated HTML is sent back to the client as part of the response.,0,9,0.3,0.18,0.01,0.0,1,64
8,1,6,0.33,0.15,0.0,0.01,0,64
"And we’re done! In the next few chapters, we will dive in deeper into this flow and get",0,9,0.21,0.13,0.01,0.0,0,64
into the details of each component.,0,9,0.3,0.13,0.0,0.02,1,64
2.10 Summary,1,12,0.54,0.06,0.02,0.01,1,64
Receiving and processing requests are the heart of any web application.,0,9,0.21,0.18,0.01,0.0,0,64
■,0,4,0.11,0.15,0.0,0.01,0,64
The multiplexer redirects,0,9,0.3,0.18,0.01,0.0,1,64
"HTTP requests to the correct handler for processing,",0,9,0.21,0.39,0.0,0.0,1,64
■,0,4,0.11,0.15,0.0,0.01,0,64
including static files.,0,9,0.3,0.18,0.01,0.01,1,64
Response-,0,9,0.21,0.74,0.01,0.0,1,64
Handler functions are nothing more than Go functions that take a,0,9,0.3,0.18,0.0,0.0,1,64
■,0,4,0.11,0.15,0.0,0.01,0,64
Writer as the first parameter and a pointer to a,0,9,0.3,0.18,0.01,0.0,1,64
Request as the second.,0,9,0.21,0.57,0.0,0.01,1,64
Cookies can be used as a mechanism for access control.,0,9,0.3,0.18,0.01,0.0,1,64
■,0,4,0.11,0.15,0.0,0.01,0,64
HTML responses can be generated by parsing template files together with data,0,9,0.21,0.18,0.01,0.0,0,64
■,0,4,0.11,0.15,0.0,0.01,0,64
to provide the final HTML,0,9,0.3,0.18,0.01,0.0,1,64
data that is returned to the calling browser.,0,9,0.21,0.39,0.0,0.01,1,64
Persisting data to a relational database can be done through direct,0,9,0.3,0.18,0.01,0.0,1,64
SQL using,0,9,0.21,0.74,0.0,0.0,1,64
■,0,4,0.11,0.15,0.0,0.01,0,64
the sql package.,0,9,0.3,0.18,0.01,0.0,1,64
Part 2,1,30,0.79,0.68,0.0,0.05,1,65
Basic web applications,1,30,0.79,0.35,0.05,0.07,1,65
W,0,48,0.96,0.19,0.07,0.0,0,65
eb applications follow a simple request-response model of program-,0,9,0.21,0.25,0.0,0.0,1,65
ming. Every request from the client gets a response from the server.  Every web,0,9,0.21,0.19,0.0,0.0,0,65
application has a few basic components—the router that routes requests to dif-,0,9,0.21,0.19,0.0,0.0,0,65
"ferent handlers, the handlers that process the requests, and the template engine",0,9,0.21,0.19,0.0,0.0,0,65
that translates combines static content with dynamic data to produce the data,0,9,0.21,0.19,0.0,0.0,0,65
that is sent back to the client.,0,9,0.3,0.19,0.0,0.0,1,65
"In chapters 3-6, you will learn how to use Go to accept",0,9,0.21,0.21,0.0,0.0,1,65
HTTP requests using a,0,9,0.21,0.66,0.0,0.0,1,65
"router, process them using handlers, and return responses with the template",0,9,0.21,0.19,0.0,0.0,0,65
"engine. In addition, most web applications store data in one way or another, so",0,9,0.21,0.19,0.0,0.0,0,65
you will also learn how you can use Go to persist data.,0,9,0.3,0.19,0.0,0.0,1,65
46,1,9,0.39,0.06,0.0,0.0,0,66
C,1,7,0.26,0.4,0.0,0.0,0,66
HAPTER,1,6,0.33,0.41,0.0,0.0,1,66
Handling requests,1,30,0.93,0.44,0.0,0.22,1,67
This chapter covers,1,12,0.67,0.13,0.22,0.01,1,67
Using the Go net/http library,0,9,0.3,0.15,0.01,0.0,1,67
■,0,4,0.11,0.13,0.0,0.01,0,67
Serving out HTTP using the Go net/http,0,9,0.3,0.15,0.01,0.0,1,67
■,0,4,0.11,0.13,0.0,0.01,0,67
library,0,9,0.3,0.15,0.01,0.01,1,67
Understanding handlers and handler,0,9,0.3,0.15,0.01,0.0,1,67
■,0,4,0.11,0.13,0.0,0.01,0,67
functions,0,9,0.3,0.15,0.01,0.01,1,67
Working with multiplexers,0,9,0.3,0.15,0.01,0.0,1,67
■,0,4,0.11,0.13,0.0,0.08,0,67
Chapter 2 showed the steps for creating a simple internet forum web application.,0,9,0.21,0.17,0.08,0.0,0,67
"The chapter mapped out the various parts of a Go web application, and you saw the",0,9,0.21,0.17,0.0,0.0,0,67
big picture of how a Go web application is structured. But there’s little depth in,0,9,0.21,0.17,0.0,0.0,0,67
"each of those parts. In the next few chapters, we’ll delve into the details of each of",0,9,0.21,0.17,0.0,0.0,0,67
these parts and explore in depth how they can be put together.,0,9,0.3,0.17,0.0,0.0,1,67
"In this and the next chapter, we’ll focus on the brains of the web application:",0,9,0.21,0.19,0.0,0.0,0,67
"the handlers that receive and process requests from the client. In this chapter,",0,9,0.21,0.17,0.0,0.0,0,67
"you’ll learn how to create a web server with Go, and then we’ll move on to handling",0,9,0.21,0.17,0.0,0.0,0,67
requests from the client.,0,9,0.3,0.17,0.0,0.0,1,67
48,1,9,0.39,0.06,0.0,0.0,0,68
Handling requests,1,9,0.39,0.42,0.0,0.0,1,68
C 3,1,7,0.26,0.34,0.0,0.0,0,68
HAPTER,1,6,0.33,0.35,0.0,0.03,1,68
3.1 The Go net/http library,1,12,0.54,0.06,0.03,0.01,1,68
Although using a mature and sophisticated web application framework to write web,0,9,0.21,0.13,0.01,0.0,0,68
"applications is usually easy and fast, the same frameworks often impose their own",0,9,0.21,0.13,0.0,0.0,0,68
conventions and patterns. Many assume that these conventions and patterns are best,0,9,0.21,0.13,0.0,0.0,0,68
"practices, but best practices have a way of growing into",0,9,0.3,0.13,0.0,0.0,1,68
cargo cult programming when,1,9,0.39,0.6,0.0,0.0,1,68
they aren’t understood properly. Programmers following these conventions without,0,9,0.21,0.13,0.0,0.0,0,68
understanding why they’re used often follow them blindly and reuse them when it’s,0,9,0.21,0.13,0.0,0.0,0,68
unnecessary or even harmful.,0,9,0.3,0.13,0.0,0.04,1,68
Cargo cult programming,1,10,0.5,0.15,0.04,0.01,1,68
"During World War II, the Allied forces set up air bases on islands in the Pacific to help",0,9,0.21,0.15,0.01,0.0,0,68
with the war efforts. Large amounts of supplies and military equipment were air-,0,9,0.21,0.15,0.0,0.0,0,68
"dropped to troops and islanders supporting the troops, drastically changing their lives.",0,9,0.21,0.15,0.0,0.0,0,68
"For the first time, the islanders saw manufactured clothes, canned food, and other",0,9,0.21,0.15,0.0,0.0,0,68
"goods. When the war ended, the bases were abandoned and the cargo stopped arriv-",0,9,0.21,0.15,0.0,0.0,0,68
ing. So the islanders did a very natural thing—they dressed themselves up as air traffic,0,9,0.21,0.15,0.0,0.0,0,68
"controllers, soldiers, and sailors, waved landing signals using sticks on the airfields,",0,9,0.21,0.15,0.0,0.0,0,68
and performed parade ground drills in an attempt to get cargo to continue falling by,0,9,0.21,0.15,0.0,0.0,0,68
parachute from planes.,0,9,0.3,0.15,0.0,0.01,1,68
These cargo cultists gave their names to the practice of cargo cult programming. While,0,9,0.21,0.15,0.01,0.0,0,68
"not exactly waving landing signals, cargo cult programmers copy and paste code they",0,9,0.21,0.15,0.0,0.0,0,68
"either inherit or find on the internet (often, StackOverflow) without understanding why",0,9,0.21,0.15,0.0,0.0,0,68
"it works, only that it works. As a result, they’re often unable to extend or make changes",0,9,0.21,0.15,0.0,0.0,0,68
"to code. Similarly, cargo cult programmers often use web frameworks without under-",0,9,0.21,0.15,0.0,0.0,0,68
"standing why the framework uses certain patterns or conventions, as well as the trade-",0,9,0.21,0.15,0.0,0.0,0,68
offs that are being made.,0,9,0.3,0.15,0.0,0.04,1,68
The reason data is persisted as cookies in the client and sessions in the server is,0,9,0.21,0.13,0.04,0.0,0,68
"because HTTP is a connection-less protocol, and each call to the server has no stored",0,9,0.21,0.13,0.0,0.0,0,68
"knowledge of the previous call. Without this understanding, using cookies and ses-",0,9,0.21,0.13,0.0,0.0,0,68
sions seems a convoluted way of persisting information between connections. Using a,0,9,0.21,0.13,0.0,0.0,0,68
framework to get around this complexity is smart because a framework normally hides,0,9,0.21,0.13,0.0,0.0,0,68
the complexity and presents a uniform interface for persistence between connections.,0,9,0.21,0.13,0.0,0.0,0,68
"As a result, a new programmer would simply assume all it takes to persist data between",0,9,0.21,0.13,0.0,0.0,0,68
connections is to use this interface. This uniform interface is based on the conven-,0,9,0.21,0.13,0.0,0.0,0,68
"tions of a specific framework, though, and such practices might or might not be con-",0,9,0.21,0.13,0.0,0.0,0,68
"sistent across all frameworks. What’s worse, the same interface name might be used in",0,9,0.21,0.13,0.0,0.0,0,68
"different frameworks, with different implementations and different names, adding to",0,9,0.21,0.13,0.0,0.0,0,68
the confusion. This means that the web application that’s developed is now tied to the,0,9,0.21,0.13,0.0,0.0,0,68
49,1,9,0.3,0.83,0.0,0.0,0,69
The Go net/http library,1,9,0.39,0.38,0.0,0.03,1,69
framework; moving it to another framework or even extending the application or add-,0,9,0.21,0.14,0.03,0.0,0,69
ing new features requires deep knowledge of the framework (or customized versions,0,9,0.21,0.14,0.0,0.0,0,69
of the framework).,0,9,0.3,0.14,0.0,0.0,1,69
This book isn’t about rejecting frameworks or conventions or patterns. A good web,0,9,0.21,0.17,0.0,0.0,0,69
application framework is often the best way to build scalable and robust web applica-,0,9,0.21,0.14,0.0,0.0,0,69
tions quickly. But it’s important to understand the underlying concepts infrastructure,0,9,0.21,0.14,0.0,0.0,0,69
"that these frameworks are built on. In the case of the Go programming language,",0,9,0.21,0.14,0.0,0.0,0,69
using the standard libraries typically means using the net/http and html/template,0,9,0.21,0.14,0.0,0.0,0,69
"libraries. With proper understanding, it becomes easier to see why certain conven-",0,9,0.21,0.14,0.0,0.0,0,69
"tions and patterns are what they are. This helps us to avoid pitfalls, gives clarity, and",0,9,0.21,0.14,0.0,0.0,0,69
stops us from following patterns blindly.,0,9,0.3,0.14,0.0,0.0,1,69
"In this and the next chapter, we’ll be focusing on net/http; chapter 5 covers html/",0,9,0.21,0.17,0.0,0.0,0,69
template.,0,9,0.3,0.14,0.0,0.0,1,69
"The net/http library is divided into two parts, with various structs and functions",0,9,0.21,0.17,0.0,0.0,0,69
supporting either one or both (see figure 3.1):,0,9,0.3,0.14,0.0,0.01,1,69
"Client —Client, Response, Header, Request, Cookie",1,9,0.48,0.19,0.01,0.0,1,69
■,0,4,0.11,0.17,0.0,0.01,0,69
"Server —Server, ServeMux, Handler/HandleFunc, ResponseWriter, Header,",1,9,0.48,0.19,0.01,0.0,1,69
■,0,4,0.11,0.17,0.0,0.01,0,69
"Request, Cookie",0,9,0.3,0.19,0.01,0.06,1,69
Server,0,7,0.17,0.59,0.06,0.0,1,69
Client,0,7,0.17,0.28,0.0,0.03,1,69
ResponseWriter,0,7,0.17,0.61,0.03,0.01,1,69
Header,0,7,0.17,0.43,0.01,0.01,1,69
Client,0,7,0.17,0.23,0.01,0.0,1,69
Handler/HandlerFunc,0,7,0.17,0.6,0.0,0.01,1,69
Request,0,7,0.17,0.43,0.01,0.01,1,69
Response,0,7,0.17,0.22,0.01,0.0,1,69
Server,0,7,0.17,0.64,0.0,0.01,1,69
Cookie,0,7,0.17,0.43,0.01,0.01,1,69
ServeMux,0,7,0.17,0.63,0.01,0.04,1,69
Figure 3.1 Chaining handlers,1,7,0.44,0.14,0.04,0.05,1,69
"We’ll start by using the net/http library as the server, and in this chapter we’ll talk",0,9,0.21,0.14,0.05,0.0,0,69
"about how Go handles requests from the client. In the next chapter, we’ll continue",0,9,0.21,0.14,0.0,0.0,0,69
with the net/http library but focus on using it to process the request.,0,9,0.21,0.14,0.0,0.0,0,69
"In this book, we’ll focus on using the net/http library’s server capabilities and not",0,9,0.21,0.17,0.0,0.0,0,69
its client capabilities.,0,9,0.3,0.14,0.0,0.0,1,69
50,1,9,0.39,0.06,0.0,0.0,0,70
Handling requests,1,9,0.39,0.42,0.0,0.0,1,70
C 3,1,7,0.26,0.34,0.0,0.0,0,70
HAPTER,1,6,0.33,0.35,0.0,0.03,1,70
3.2 Serving Go,1,12,0.54,0.06,0.03,0.01,1,70
The net/http library provides capabilities for starting up an,0,9,0.3,0.13,0.01,0.0,1,70
HTTP server that handles,0,9,0.21,0.62,0.0,0.0,1,70
requests and sends responses to those requests (see figure 3.2). It also provides an,0,9,0.21,0.13,0.0,0.0,0,70
interface for a multiplexer and a default multiplexer.,0,9,0.3,0.13,0.0,0.06,1,70
Server,0,7,0.17,0.48,0.06,0.02,1,70
Request,0,7,0.17,0.23,0.02,0.01,1,70
Client Multiplexer,0,7,0.26,0.15,0.01,0.0,1,70
Handler,0,7,0.17,0.49,0.0,0.01,1,70
Response,0,7,0.17,0.22,0.01,0.0,1,70
Model,0,7,0.17,0.62,0.0,0.02,1,70
Model,0,7,0.17,0.62,0.02,0.0,1,70
Template engine Handler,0,7,0.17,0.32,0.0,0.0,1,70
Database,0,7,0.17,0.73,0.0,0.0,1,70
Model,0,7,0.17,0.62,0.0,0.02,1,70
Model,0,7,0.17,0.62,0.02,0.02,1,70
Templates Handler,0,7,0.17,0.34,0.02,0.05,1,70
Figure 3.2 Handling requests with the Go server,1,7,0.44,0.12,0.05,0.05,1,70
3.2.1 The Go web server,1,10,0.5,0.06,0.05,0.01,1,70
"Unlike most standard libraries in other programming languages, Go provides a set of",0,9,0.21,0.13,0.01,0.0,0,70
libraries to create a web server. Creating a server is trivial and can be done with a call to,0,9,0.21,0.13,0.0,0.0,0,70
"ListenAndServe , with the network address as the first parameter and the handler that",0,9,0.21,0.13,0.0,0.0,0,70
"takes care of the requests the second parameter, as shown in the following listing. If the",0,9,0.21,0.13,0.0,0.0,0,70
"network address is an empty string, the default is all network interfaces at port 80. If",0,9,0.21,0.13,0.0,0.0,0,70
"nil , the default multiplexer,",0,9,0.21,0.33,0.0,0.0,1,70
"DefaultServeMux , is used.",0,9,0.21,0.57,0.0,0.0,1,70
the handler parameter is,0,9,0.3,0.13,0.0,0.03,1,70
Listing 3.1 The simplest web server,1,9,0.48,0.15,0.03,0.02,1,70
package main,0,7,0.26,0.13,0.02,0.02,1,70
import (,0,7,0.26,0.13,0.02,0.0,1,70
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,70
),0,7,0.17,0.13,0.0,0.02,0,70
func main() {,0,7,0.26,0.13,0.02,0.0,1,70
"http.ListenAndServe("""", nil)",0,7,0.26,0.13,0.0,0.0,1,70
},0,7,0.17,0.13,0.0,0.0,0,70
51,1,9,0.3,0.83,0.0,0.0,0,71
Serving Go,1,9,0.39,0.42,0.0,0.03,1,71
Server,0,9,0.21,0.79,0.03,0.0,1,71
"This simple server doesn’t allow much configuration, but Go also provides a",0,9,0.21,0.14,0.0,0.0,0,71
struct that’s essentially a server configuration.,0,9,0.3,0.14,0.0,0.03,1,71
Listing 3.2 Web server with additional configuration,1,9,0.48,0.17,0.03,0.02,1,71
package main,0,7,0.26,0.14,0.02,0.02,1,71
import (,0,7,0.26,0.14,0.02,0.0,1,71
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,71
),0,7,0.17,0.14,0.0,0.02,0,71
func main() {,0,7,0.26,0.14,0.02,0.0,1,71
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,71
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,71
"Handler: nil,",0,7,0.26,0.14,0.0,0.0,1,71
},0,7,0.17,0.14,0.0,0.0,0,71
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,71
},0,7,0.17,0.14,0.0,0.02,0,71
The following listing does almost the same thing as the previous code but now allows,0,9,0.21,0.14,0.02,0.0,0,71
more configurations. Configurations include setting the timeout for reading the,0,9,0.21,0.14,0.0,0.0,0,71
Server struct.,0,9,0.21,0.7,0.0,0.0,1,71
request and writing the response and setting an error logger for the,0,9,0.3,0.14,0.0,0.03,1,71
Listing 3.3 The Server struct configuration,1,9,0.48,0.17,0.03,0.02,1,71
type Server struct {,0,7,0.26,0.14,0.02,0.0,1,71
Addr           string,0,7,0.26,0.14,0.0,0.0,1,71
Handler        Handler,0,7,0.26,0.14,0.0,0.0,1,71
ReadTimeout    time.Duration,0,7,0.26,0.14,0.0,0.0,1,71
WriteTimeout   time.Duration,0,7,0.26,0.14,0.0,0.0,1,71
MaxHeaderBytes int,0,7,0.26,0.14,0.0,0.0,1,71
TLSConfig      *tls.Config,0,7,0.26,0.14,0.0,0.0,1,71
"TLSNextProto   map[string]func(*Server, *tls.Conn, Handler)",0,7,0.26,0.14,0.0,0.0,1,71
"ConnState      func(net.Conn, ConnState)",0,7,0.26,0.14,0.0,0.0,1,71
ErrorLog       *log.Logger,0,7,0.26,0.14,0.0,0.0,1,71
},0,7,0.17,0.14,0.0,0.02,0,71
3.2.2 Serving through HTTPS,1,10,0.5,0.07,0.02,0.01,1,71
Most major websites use,0,9,0.3,0.14,0.01,0.0,1,71
HTTPS to encrypt and protect the communications between,0,9,0.21,0.35,0.0,0.0,1,71
the client and the server when confidential information like passwords and credit,0,9,0.21,0.14,0.0,0.0,0,71
"card information is shared. In some cases, this protection is mandated. If you accept",0,9,0.21,0.14,0.0,0.0,0,71
"credit card payments, you need to be compliant with the Payment Card Industry",0,9,0.21,0.14,0.0,0.0,0,71
(PCI),0,9,0.21,0.8,0.0,0.01,1,71
"Data Security Standard, and to be compliant you need to encrypt the communications",0,9,0.21,0.14,0.01,0.0,0,71
between the client and the server. Some sites like Gmail and Facebook use,0,9,0.21,0.14,0.0,0.0,0,71
HTTPS,0,9,0.21,0.79,0.0,0.01,1,71
throughout their entire site. If you’re planning to run a site that requires the user to,0,9,0.21,0.14,0.01,0.0,0,71
"log in, you’ll need to use",0,9,0.3,0.14,0.0,0.0,1,71
HTTPS .,0,9,0.21,0.35,0.0,0.0,1,71
52,1,9,0.39,0.06,0.0,0.0,0,72
Handling requests,1,9,0.39,0.42,0.0,0.0,1,72
C 3,1,7,0.26,0.34,0.0,0.0,0,72
HAPTER,1,6,0.33,0.35,0.0,0.03,1,72
HTTPS is nothing more than layering,0,9,0.3,0.16,0.03,0.0,1,72
"HTTP on top of SSL (actually, Transport",0,9,0.21,0.48,0.0,0.0,1,72
Security Layer [ TLS ]). To serve our simple web application through,0,9,0.3,0.13,0.0,0.0,1,72
"HTTPS , we’ll use",0,9,0.21,0.69,0.0,0.0,1,72
the ListenAndServeTLS,0,9,0.3,0.13,0.0,0.0,1,72
"function, shown in listing 3.4.",0,9,0.21,0.33,0.0,0.03,1,72
"SSL, TLS, and HTTPS",1,10,0.5,0.15,0.03,0.01,1,72
SSL (Secure Socket Layer) is a protocol that provides data encryption and authenti-,0,9,0.21,0.15,0.01,0.0,0,72
"cation between two parties, usually a client and a server, using Public Key Infrastruc-",0,9,0.21,0.15,0.0,0.0,0,72
ture (PKI). SSL was originally developed by Netscape and was later taken over by the,0,9,0.21,0.15,0.0,0.0,0,72
"Internet Engineering Task Force (IETF), which renamed it TLS. HTTPS, or HTTP over",0,9,0.21,0.15,0.0,0.0,0,72
"SSL, is essentially just that—HTTP layered over an SSL/TLS connection.",0,9,0.3,0.15,0.0,0.01,1,72
An SSL/TLS certificate (I’ll use the term SSL certificate as it’s more widely known) is,0,9,0.21,0.15,0.01,0.0,0,72
used to provide data encryption and authentication. An SSL certificate is an X.509-,0,9,0.21,0.15,0.0,0.0,0,72
"formatted piece of data that contains some information, as well as a public key, stored",0,9,0.21,0.15,0.0,0.0,0,72
"at a web server. SSL certificates are usually signed by a certificate authority (CA), which",0,9,0.21,0.15,0.0,0.0,0,72
assures the authenticity of the certificate. When the client makes a request to the,0,9,0.21,0.15,0.0,0.0,0,72
"server, it returns with the certificate. If the client is satisfied that the certificate is",0,9,0.21,0.15,0.0,0.0,0,72
"authentic, it will generate a random key and use the certificate (or more specifically",0,9,0.21,0.15,0.0,0.0,0,72
the public key in the certificate) to encrypt it. This symmetric key is the actual key,0,9,0.21,0.15,0.0,0.0,0,72
used to encrypt the data between the client and the server.,0,9,0.3,0.15,0.0,0.06,1,72
Listing 3.4 Serving through HTTPS,1,9,0.48,0.15,0.06,0.02,1,72
package main,0,7,0.26,0.13,0.02,0.02,1,72
import (,0,7,0.26,0.13,0.02,0.0,1,72
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,72
),0,7,0.17,0.13,0.0,0.02,0,72
func main() {,0,7,0.26,0.13,0.02,0.0,1,72
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,72
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,72
"Handler: nil,",0,7,0.26,0.13,0.0,0.0,1,72
},0,7,0.17,0.13,0.0,0.0,0,72
"server.ListenAndServeTLS(""cert.pem"", ""key.pem"")",0,7,0.26,0.13,0.0,0.0,1,72
},0,7,0.17,0.13,0.0,0.02,0,72
"In the previous listing, the cert.pem file is the",0,9,0.3,0.13,0.02,0.0,1,72
SSL certificate whereas key.pem is the,1,9,0.39,0.5,0.0,0.0,1,72
pri-,1,9,0.39,0.8,0.0,0.0,1,72
vate key for the server. In a production scenario you’ll need to get the,1,9,0.39,0.13,0.0,0.0,0,72
SSL certificate,0,9,0.21,0.71,0.0,0.0,1,72
"from a CA like VeriSign, Thawte, or Comodo",0,9,0.3,0.13,0.0,0.0,1,72
SSL . But if you need a certificate and pri-,0,9,0.21,0.49,0.0,0.0,1,72
"vate key only to try things out, you can generate your own certificates. There are many",0,9,0.21,0.13,0.0,0.0,0,72
"ways of generating them, including using Go standard libraries, mostly under the",0,9,0.21,0.13,0.0,0.0,0,72
crypto library group.,0,9,0.3,0.13,0.0,0.0,1,72
Although you won’t use them (the certificate and private key created here) in a,0,9,0.21,0.15,0.0,0.0,0,72
"production server, it’s useful to understand how an",0,9,0.3,0.13,0.0,0.0,1,72
SSL certificate and private key,0,9,0.21,0.57,0.0,0.0,1,72
53,1,9,0.3,0.83,0.0,0.0,0,73
Serving Go,1,9,0.39,0.42,0.0,0.03,1,73
can be generated for development and testing purposes. This listing shows how we,0,9,0.21,0.14,0.03,0.0,0,73
can do this.,0,9,0.3,0.14,0.0,0.03,1,73
Listing 3.5 Generating your own SSL certificate and server private key,1,9,0.48,0.17,0.03,0.02,1,73
package main,0,7,0.26,0.14,0.02,0.02,1,73
import (,0,7,0.26,0.14,0.02,0.0,1,73
"""crypto/rand""",0,7,0.26,0.14,0.0,0.0,1,73
"""crypto/rsa""",0,7,0.26,0.14,0.0,0.0,1,73
"""crypto/x509""",0,7,0.26,0.14,0.0,0.0,1,73
"""crypto/x509/pkix""",0,7,0.26,0.14,0.0,0.0,1,73
"""encoding/pem""",0,7,0.26,0.14,0.0,0.0,1,73
"""math/big""",0,7,0.26,0.14,0.0,0.0,1,73
"""net""",0,7,0.26,0.14,0.0,0.0,1,73
"""os""",0,7,0.26,0.14,0.0,0.0,1,73
"""time""",0,7,0.26,0.14,0.0,0.0,1,73
),0,7,0.17,0.14,0.0,0.02,0,73
func main() {,0,7,0.26,0.14,0.02,0.0,1,73
"max := new(big.Int).Lsh(big.NewInt(1), 128)",0,7,0.26,0.14,0.0,0.0,1,73
"serialNumber, _ := rand.Int(rand.Reader, max)",0,7,0.26,0.14,0.0,0.0,1,73
subject := pkix.Name{,0,7,0.26,0.14,0.0,0.0,1,73
"Organization:       []string{""Manning Publications Co.""},",0,7,0.26,0.14,0.0,0.0,1,73
"OrganizationalUnit: []string{""Books""},",0,7,0.26,0.14,0.0,0.0,1,73
"CommonName:         ""Go Web Programming"",",0,7,0.26,0.14,0.0,0.0,1,73
},0,7,0.17,0.14,0.0,0.02,0,73
template := x509.Certificate{,0,7,0.26,0.14,0.02,0.0,1,73
"SerialNumber: serialNumber,",0,7,0.26,0.14,0.0,0.0,1,73
"Subject:      subject,",0,7,0.26,0.14,0.0,0.0,1,73
"NotBefore:    time.Now(),",0,7,0.26,0.14,0.0,0.0,1,73
"NotAfter:     time.Now().Add(365 * 24 * time.Hour),",0,7,0.26,0.14,0.0,0.0,1,73
KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSig-,0,7,0.26,0.14,0.0,0.0,1,73
"nature,",0,7,0.26,0.17,0.0,0.0,1,73
"ExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},",0,7,0.26,0.14,0.0,0.0,1,73
"IPAddresses:  []net.IP{net.ParseIP(""127.0.0.1"")},",0,7,0.26,0.14,0.0,0.0,1,73
},0,7,0.17,0.14,0.0,0.02,0,73
"pk, _ := rsa.GenerateKey(rand.Reader, 2048)",0,7,0.26,0.14,0.02,0.02,1,73
"derBytes, _ := x509.CreateCertificate(rand.Reader, &template,",0,7,0.26,0.14,0.02,0.0,1,73
➥,0,10,0.23,0.18,0.0,0.0,0,73
"&template, &pk.PublicKey, pk)",0,7,0.26,0.2,0.0,0.0,1,73
"certOut, _ := os.Create(""cert.pem"")",0,7,0.26,0.14,0.0,0.0,1,73
"pem.Encode(certOut, &pem.Block{Type: ""CERTIFICATE"", Bytes: derBytes})",0,7,0.26,0.14,0.0,0.0,1,73
certOut.Close(),0,7,0.26,0.14,0.0,0.02,1,73
"keyOut, _ := os.Create(""key.pem"")",0,7,0.26,0.14,0.02,0.0,1,73
"pem.Encode(keyOut, &pem.Block{Type: ""RSA PRIVATE KEY"", Bytes:",0,7,0.26,0.14,0.0,0.0,1,73
➥,0,10,0.23,0.18,0.0,0.0,0,73
x509.MarshalPKCS1PrivateKey(pk)}),0,7,0.26,0.2,0.0,0.0,1,73
keyOut.Close(),0,7,0.26,0.14,0.0,0.0,1,73
},0,7,0.17,0.14,0.0,0.0,0,73
54,1,9,0.39,0.06,0.0,0.0,0,74
Handling requests,1,9,0.39,0.42,0.0,0.0,1,74
C 3,1,7,0.26,0.34,0.0,0.0,0,74
HAPTER,1,6,0.33,0.35,0.0,0.03,1,74
Generating the SSL certificate and private key is relatively easy. An,0,9,0.3,0.13,0.03,0.0,1,74
SSL certificate is,0,9,0.21,0.69,0.0,0.0,1,74
essentially an X.509 certificate with the extended key usage set to server authentica-,0,9,0.21,0.13,0.0,0.0,0,74
"tion, so we’ll be using the crypto/x509 library to create the certificate. The private key",0,9,0.21,0.13,0.0,0.0,0,74
"is required to create the certificate, so we simply take the private key we created for",0,9,0.21,0.13,0.0,0.0,0,74
the certificate and save it into a file for the server private key file.,0,9,0.21,0.13,0.0,0.0,0,74
"Certificate struct, which",0,9,0.21,0.61,0.0,0.0,1,74
"Let’s go through the code. First, we need to have a",0,9,0.3,0.15,0.0,0.0,1,74
allows us to set the configuration for our certificate:,0,9,0.3,0.13,0.0,0.01,1,74
template := x509.Certificate{,0,7,0.26,0.13,0.01,0.0,1,74
"SerialNumber: serialNumber,",0,7,0.26,0.13,0.0,0.0,1,74
"Subject: subject,",0,7,0.26,0.13,0.0,0.0,1,74
"NotBefore: time.Now(),",0,7,0.26,0.13,0.0,0.0,1,74
"NotAfter:  time.Now().Add(365*24*time.Hour),",0,7,0.26,0.13,0.0,0.0,1,74
"KeyUsage: x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,",0,7,0.17,0.13,0.0,0.0,0,74
"ExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},",0,7,0.26,0.13,0.0,0.0,1,74
"IPAddresses: []net.IP{net.ParseIP(""127.0.0.1"")},",0,7,0.26,0.13,0.0,0.0,1,74
},0,7,0.17,0.13,0.0,0.02,0,74
"We need a certificate serial number, which is a unique number issued by the",0,9,0.21,0.13,0.02,0.0,0,74
CA . For,0,9,0.21,0.76,0.0,0.0,1,74
"our purposes, it’s good enough to use a very large integer that’s randomly generated.",0,9,0.21,0.13,0.0,0.0,0,74
"Next, we create the distinguished name and set it up as the subject for the certificate,",0,9,0.21,0.13,0.0,0.0,0,74
and we also set up the validity period to last for one year from the day the certificate is,0,9,0.21,0.13,0.0,0.0,0,74
created. The KeyUsage and ExtKeyUsage fields are used to indicate that this X.509,0,9,0.21,0.13,0.0,0.0,0,74
"certificate is used for server authentication. Finally, we set up the certificate to run",0,9,0.21,0.13,0.0,0.0,0,74
from the IP 127.0.0.1 only.,0,9,0.3,0.13,0.0,0.03,1,74
SSL certificates,1,10,0.5,0.15,0.03,0.01,1,74
X.509 is an ITU-T (International Telecommunication Union Telecommunication Stan-,0,9,0.21,0.15,0.01,0.0,0,74
dardization Sector) standard for a Public Key Infrastructure (PKI). X.509 includes,0,9,0.21,0.15,0.0,0.0,0,74
standard formats for public key certificates.,0,9,0.3,0.15,0.0,0.01,1,74
An X.509 certificate (also colloquially called an SSL certificate) is a digital document,0,9,0.21,0.15,0.01,0.0,0,74
expressed in ASN.1 (Abstract Syntax Notation One) that has been encoded. ASN.1 is,0,9,0.21,0.15,0.0,0.0,0,74
a standard and notation that describes rules and structures for representing data in,0,9,0.21,0.15,0.0,0.0,0,74
telecommunications and computer networking.,0,9,0.3,0.15,0.0,0.01,1,74
"X.509 certificates can be encoded in various formats, including BER (Basic Encoding",0,9,0.21,0.15,0.01,0.0,0,74
Rules). The BER format specifies a self-describing and self-delimiting format for,0,9,0.21,0.15,0.0,0.0,0,74
"encoding ASN.1 data structures. DER is a subset of BER, providing for exactly one",0,9,0.21,0.15,0.0,0.0,0,74
"way to encode an ASN.1 value, and is widely used in cryptography, especially X.509",0,9,0.21,0.15,0.0,0.0,0,74
certificates.,0,9,0.3,0.15,0.0,0.01,1,74
"In SSL, the certificates can be saved in files of different formats. One of them is PEM",0,9,0.21,0.15,0.01,0.0,0,74
"(Privacy Enhanced Email, which doesn’t have much relevance here except as the name",0,9,0.21,0.15,0.0,0.0,0,74
"of the file format used), which is a Base64-encoded DER X.509 certificate enclosed",0,9,0.21,0.15,0.0,0.0,0,74
between “-----BEGIN CERTIFICATE-----” and “-----END CERTIFICATE-----”.,0,9,0.3,0.15,0.0,0.0,1,74
55,1,9,0.3,0.83,0.0,0.0,0,75
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,75
"Next, we need to generate a private key. We use the crypto/rsa library and call the",0,9,0.21,0.14,0.03,0.0,0,75
GenerateKey function to create an,0,9,0.3,0.14,0.0,0.0,1,75
RSA private key:,0,9,0.21,0.43,0.0,0.01,1,75
"pk, _ := rsa.GenerateKey(rand.Reader, 2048)",0,7,0.26,0.14,0.01,0.01,1,75
"The RSA private key struct that’s created has a public key that we can access, useful",0,9,0.21,0.14,0.01,0.0,0,75
when we use the x509.CreateCertificate,0,9,0.3,0.14,0.0,0.0,1,75
function to create our SSL,0,9,0.21,0.5,0.0,0.0,1,75
certificate:,0,9,0.21,0.71,0.0,0.01,1,75
"derBytes, _ := x509.CreateCertificate(rand.Reader, &template, &template,",0,7,0.17,0.14,0.01,0.0,0,75
➥,0,10,0.23,0.14,0.0,0.0,0,75
"&pk.PublicKey, pk)",0,7,0.26,0.17,0.0,0.02,1,75
The CreateCertificate,0,9,0.3,0.14,0.02,0.0,1,75
"function takes a number of parameters, including the",0,9,0.21,0.36,0.0,0.0,1,75
"Certificate struct and the public and private keys, to create a slice of",0,9,0.21,0.14,0.0,0.0,0,75
DER -formatted,0,9,0.21,0.72,0.0,0.0,1,75
bytes. The rest is relatively straightforward: we use the encoding/pem library to,0,9,0.21,0.14,0.0,0.0,0,75
encode the certificate into the cert.pem file:,0,9,0.3,0.14,0.0,0.01,1,75
"certOut, _ := os.Create(""cert.pem"")",0,7,0.26,0.14,0.01,0.0,1,75
"pem.Encode(certOut, &pem.Block{Type: ""CERTIFICATE"", Bytes: derBytes})",0,7,0.26,0.14,0.0,0.0,1,75
certOut.Close(),0,7,0.26,0.14,0.0,0.02,1,75
We also PEM encode and save the key we generated earlier into the key.pem file:,0,9,0.21,0.14,0.02,0.01,0,75
"keyOut, _ := os.Create(""key.pem"")",0,7,0.26,0.14,0.01,0.0,1,75
"pem.Encode(keyOut, &pem.Block{Type: ""RSA PRIVATE KEY"", Bytes:",0,7,0.26,0.14,0.0,0.0,1,75
➥,0,10,0.23,0.14,0.0,0.0,0,75
x509.MarshalPKCS1PrivateKey(pk)}),0,7,0.26,0.17,0.0,0.0,1,75
keyOut.Close(),0,7,0.26,0.14,0.0,0.02,1,75
Note that if the certificate is signed by a,0,9,0.3,0.14,0.02,0.0,1,75
"CA , the certificate file should be the concate-",0,9,0.21,0.47,0.0,0.0,1,75
nation of the server’s certificate followed by the,0,9,0.3,0.14,0.0,0.0,1,75
CA ’s certificate.,0,9,0.21,0.54,0.0,0.02,1,75
3.3 Handlers and handler functions,1,12,0.54,0.07,0.02,0.01,1,75
"Starting up a server is easy, but it doesn’t do anything. If you access the server, you’ll",0,9,0.21,0.14,0.01,0.0,0,75
get only a 404 HTTP response code. The default multiplexer that will be used if the,0,9,0.21,0.14,0.0,0.0,0,75
handler parameter is nil can’t find any handlers (because we haven’t written any) and,0,9,0.21,0.14,0.0,0.0,0,75
"will respond with the 404. To do any work, we need to have handlers.",0,9,0.3,0.14,0.0,0.02,1,75
3.3.1 Handling requests,1,10,0.5,0.07,0.02,0.01,1,75
So what exactly is a handler? We talked briefly about handlers and handler functions,0,9,0.21,0.14,0.01,0.0,0,75
"in chapters 1 and 2, so let’s elaborate here. In Go, a handler is an interface that has a",0,9,0.21,0.14,0.0,0.0,0,75
method named ServeHTTP,0,9,0.3,0.14,0.0,0.0,1,75
HTTPResponseWriter interface,0,9,0.21,0.59,0.0,0.0,1,75
with two parameters: an,0,9,0.21,0.37,0.0,0.0,1,75
and a pointer to a Request,0,9,0.3,0.14,0.0,0.0,1,75
"struct. In other words, anything that has a method called",0,9,0.21,0.37,0.0,0.0,1,75
ServeHTTP with this method signature is a handler:,0,9,0.3,0.14,0.0,0.01,1,75
"ServeHTTP(http.ResponseWriter, *http.Request)",0,7,0.26,0.14,0.01,0.01,1,75
Let me digress and answer a question that might have occurred to you as you’re read-,0,9,0.21,0.14,0.01,0.0,0,75
"ListenAndServe is a handler, then why is",0,9,0.21,0.51,0.0,0.0,1,75
ing this chapter. If the second parameter for,0,9,0.3,0.14,0.0,0.0,1,75
DefaultServeMux ?,0,9,0.21,0.4,0.0,0.0,1,75
"the default value a multiplexer,",0,9,0.3,0.14,0.0,0.0,1,75
56,1,9,0.39,0.06,0.0,0.0,0,76
Handling requests,1,9,0.39,0.42,0.0,0.0,1,76
C 3,1,7,0.26,0.34,0.0,0.0,0,76
HAPTER,1,6,0.33,0.35,0.0,0.03,1,76
That’s because ServeMux,0,9,0.3,0.15,0.03,0.0,1,76
(which is what DefaultServeMux,0,9,0.21,0.36,0.0,0.0,1,76
is an instance of) has a,0,9,0.21,0.64,0.0,0.0,1,76
method named ServeHTTP,0,9,0.3,0.13,0.0,0.0,1,76
ServeMux is also,0,9,0.21,0.7,0.0,0.0,1,76
"with the same signature! In other words, a",0,9,0.21,0.35,0.0,0.0,1,76
an instance of the Handler,0,9,0.3,0.13,0.0,0.0,1,76
struct. DefaultServeMux,0,9,0.21,0.35,0.0,0.0,1,76
is an instance of ServeMux,0,9,0.21,0.55,0.0,0.0,1,76
", so it is",0,9,0.21,0.77,0.0,0.0,1,76
also an instance of the Handler,0,9,0.3,0.13,0.0,0.0,1,76
"struct. It’s a special type of handler, though, because",0,9,0.21,0.39,0.0,0.0,1,76
the only thing it does is redirect your requests to different handlers depending on the,0,9,0.21,0.13,0.0,0.0,0,76
"URL that’s provided. If we use a handler instead of the default multiplexer, we’ll be",0,9,0.21,0.13,0.0,0.0,0,76
"able to respond, as shown in this listing.",0,9,0.3,0.13,0.0,0.03,1,76
Listing 3.6 Handling requests,1,9,0.48,0.15,0.03,0.02,1,76
package main,0,7,0.26,0.13,0.02,0.02,1,76
import (,0,7,0.26,0.13,0.02,0.0,1,76
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,76
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,76
),0,7,0.17,0.13,0.0,0.01,0,76
type MyHandler struct{},0,7,0.26,0.13,0.01,0.01,1,76
"func (h *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.01,0.0,0,76
"fmt.Fprintf(w, ""Hello World!"")",0,7,0.26,0.13,0.0,0.0,1,76
},0,7,0.17,0.13,0.0,0.01,0,76
func main() {,0,7,0.26,0.13,0.01,0.0,1,76
handler := MyHandler{},0,7,0.26,0.13,0.0,0.0,1,76
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,76
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,76
"Handler: &handler,",0,7,0.26,0.13,0.0,0.0,1,76
},0,7,0.17,0.13,0.0,0.0,0,76
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,76
},0,7,0.17,0.13,0.0,0.02,0,76
"Now let’s start the server (if you’re a bit hazy on how to do this, please flip to section",0,9,0.21,0.13,0.02,0.0,0,76
2.7). If you go to http://localhost:8080 in your browser you’ll see Hello World!,0,9,0.21,0.13,0.0,0.0,0,76
Here’s the tricky bit: if you go to http://localhost:8080/anything/at/all you’ll still,0,9,0.21,0.15,0.0,0.0,0,76
get the same response! Why this is so should be quite obvious. We just created a han-,0,9,0.21,0.13,0.0,0.0,0,76
"dler and attached it to our server, so we’re no longer using any multiplexers. This",0,9,0.21,0.13,0.0,0.0,0,76
means there’s no longer any,0,9,0.3,0.13,0.0,0.0,1,76
URL matching to route the request to a particular han-,0,9,0.21,0.37,0.0,0.0,1,76
"dler, so all requests going into the server will go to this handler.",0,9,0.3,0.13,0.0,0.0,1,76
"In our handler, the ServeHTTP",0,9,0.3,0.15,0.0,0.0,1,76
method does all the processing. It doesn’t do any-,0,9,0.21,0.41,0.0,0.0,1,76
"thing except return Hello World!, so that’s what it does for all requests into the server.",0,9,0.21,0.13,0.0,0.0,0,76
This is the reason why we’d normally use a multiplexer. Most of the time we want,0,9,0.21,0.15,0.0,0.0,0,76
"the server to respond to more than one request, depending on the request",0,9,0.21,0.13,0.0,0.0,0,76
URL . Natu-,0,9,0.21,0.74,0.0,0.0,1,76
"rally if you’re writing a very specialized server for a very specialized purpose, simply",0,9,0.21,0.13,0.0,0.0,0,76
creating one handler will do the job marvelously.,0,9,0.3,0.13,0.0,0.02,1,76
3.3.2 More handlers,1,10,0.5,0.06,0.02,0.01,1,76
"Most of the time, we don’t want to have a single handler to handle all the requests like",0,9,0.21,0.13,0.01,0.0,0,76
in listing 3.6; instead we want to use different handlers instead for different URLs. To,0,9,0.21,0.13,0.0,0.0,0,76
57,1,9,0.3,0.83,0.0,0.0,0,77
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,77
Server struct (which means it will,0,9,0.21,0.56,0.03,0.0,1,77
"do this, we don’t specify the Handler field in the",0,9,0.3,0.14,0.0,0.0,1,77
use the DefaultServeMux,0,9,0.3,0.14,0.0,0.0,1,77
http.Handle function to attach,0,9,0.21,0.58,0.0,0.0,1,77
as the handler); we use the,0,9,0.21,0.36,0.0,0.0,1,77
a handler to DefaultServeMux,0,9,0.3,0.14,0.0,0.0,1,77
Handle are,0,9,0.21,0.75,0.0,0.0,1,77
. Notice that some of the functions like,0,9,0.21,0.4,0.0,0.0,1,77
functions for the http package and also methods for,0,9,0.3,0.14,0.0,0.0,1,77
ServeMux . These functions are,0,9,0.21,0.59,0.0,0.0,1,77
DefaultServeMux ’s corre-,0,9,0.21,0.63,0.0,0.0,1,77
actually convenience functions; calling them simply calls,0,9,0.3,0.14,0.0,0.0,1,77
http.Handle you’re actually calling,0,9,0.21,0.39,0.0,0.0,1,77
DefaultServeMux ’s,0,9,0.21,0.69,0.0,0.0,1,77
sponding functions. If you call,0,9,0.3,0.14,0.0,0.0,1,77
Handle method.,0,9,0.3,0.14,0.0,0.0,1,77
"In the following listing, we create two handlers and then attach the handler to the",0,9,0.21,0.17,0.0,0.0,0,77
respective URL . If you now go to http://localhost:8080/hello you’ll get Hello! whereas,0,9,0.21,0.14,0.0,0.0,0,77
"if you go to http://localhost:8080/world, you’ll get World!.",0,9,0.3,0.14,0.0,0.03,1,77
Listing 3.7 Handling requests with multiple handlers,1,9,0.48,0.17,0.03,0.02,1,77
package main,0,7,0.26,0.14,0.02,0.02,1,77
import (,0,7,0.26,0.14,0.02,0.0,1,77
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,77
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,77
),0,7,0.17,0.14,0.0,0.02,0,77
type HelloHandler struct{},0,7,0.26,0.14,0.02,0.02,1,77
"func (h *HelloHandler) ServeHTTP (w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.14,0.02,0.0,0,77
"fmt.Fprintf(w, ""Hello!"")",0,7,0.26,0.14,0.0,0.0,1,77
},0,7,0.17,0.14,0.0,0.02,0,77
type WorldHandler struct{},0,7,0.26,0.14,0.02,0.02,1,77
"func (h *WorldHandler) ServeHTTP (w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.14,0.02,0.0,0,77
"fmt.Fprintf(w, ""World!"")",0,7,0.26,0.14,0.0,0.0,1,77
},0,7,0.17,0.14,0.0,0.01,0,77
func main() {,0,7,0.26,0.14,0.01,0.0,1,77
hello := HelloHandler{},0,7,0.26,0.14,0.0,0.0,1,77
world := WorldHandler{},0,7,0.26,0.14,0.0,0.01,1,77
server := http.Server{,0,7,0.26,0.14,0.01,0.0,1,77
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,77
},0,7,0.17,0.14,0.0,0.01,0,77
"http.Handle(""/hello"", &hello)",0,7,0.26,0.14,0.01,0.0,1,77
"http.Handle(""/world"", &world)",0,7,0.26,0.14,0.0,0.01,1,77
server.ListenAndServe(),0,7,0.26,0.14,0.01,0.0,1,77
},0,7,0.17,0.14,0.0,0.02,0,77
3.3.3 Handler functions,1,10,0.5,0.07,0.02,0.01,1,77
"We talked about handlers, but what are handler functions? Handler functions are",0,9,0.21,0.14,0.01,0.0,0,77
functions that behave like handlers. Handler functions have the same signature as the,0,9,0.21,0.14,0.0,0.0,0,77
"ServeHTTP method; that is, they accept a",0,9,0.3,0.14,0.0,0.0,1,77
ResponseWriter and a pointer to a,0,9,0.21,0.48,0.0,0.0,1,77
Request .,0,9,0.21,0.77,0.0,0.0,1,77
The following listing shows how this works with our server.,0,9,0.3,0.14,0.0,0.0,1,77
58,1,9,0.39,0.06,0.0,0.0,0,78
Handling requests,1,9,0.39,0.42,0.0,0.0,1,78
C 3,1,7,0.26,0.34,0.0,0.0,0,78
HAPTER,1,6,0.33,0.35,0.0,0.03,1,78
Listing 3.8 Handling requests with handler functions,1,9,0.48,0.15,0.03,0.02,1,78
package main,0,7,0.26,0.13,0.02,0.01,1,78
import (,0,7,0.26,0.13,0.01,0.0,1,78
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,78
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,78
),0,7,0.17,0.13,0.0,0.01,0,78
"func hello(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,78
"fmt.Fprintf(w, ""Hello!"")",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.01,0,78
"func world(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,78
"fmt.Fprintf(w, ""World!"")",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.01,0,78
func main() {,0,7,0.26,0.13,0.01,0.0,1,78
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,78
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.0,0,78
"http.HandleFunc(""/hello"", hello)",0,7,0.26,0.13,0.0,0.0,1,78
"http.HandleFunc(""/world"", world)",0,7,0.26,0.13,0.0,0.01,1,78
server.ListenAndServe(),0,7,0.26,0.13,0.01,0.0,1,78
},0,7,0.17,0.13,0.0,0.02,0,78
"HandlerFunc , which will adapt a",0,9,0.21,0.56,0.02,0.0,1,78
How does this work? Go has a function type named,0,9,0.3,0.13,0.0,0.0,1,78
function f with the appropriate signature into a,0,9,0.3,0.13,0.0,0.0,1,78
Handler with a method f,0,9,0.21,0.53,0.0,0.0,1,78
. For exam-,0,9,0.21,0.73,0.0,0.0,1,78
"ple, take the hello function:",0,9,0.3,0.13,0.0,0.01,1,78
"func hello(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,78
"fmt.Fprintf(w, ""Hello!"")",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.02,0,78
If we do this:,0,9,0.3,0.13,0.02,0.01,1,78
helloHandler := HandlerFunc(hello),0,7,0.26,0.13,0.01,0.01,1,78
then helloHandler becomes a,0,9,0.3,0.13,0.01,0.0,1,78
"Handler . Confused? Let’s go back to our earlier server,",0,9,0.21,0.38,0.0,0.0,1,78
which accepts handlers.,0,9,0.3,0.13,0.0,0.01,1,78
type MyHandler struct{},0,7,0.26,0.13,0.01,0.01,1,78
"func (h *MyHandler) ServeHTTP (w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.01,0.0,0,78
"fmt.Fprintf(w, ""Hello World!"")",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.01,0,78
func main() {,0,7,0.26,0.13,0.01,0.0,1,78
handler := MyHandler{},0,7,0.26,0.13,0.0,0.0,1,78
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,78
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,78
"Handler: &handler,",0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.0,0,78
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,78
},0,7,0.17,0.13,0.0,0.0,0,78
59,1,9,0.3,0.83,0.0,0.0,0,79
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,79
hello function to the URL,0,9,0.21,0.36,0.03,0.0,1,79
The line that registers the,0,9,0.3,0.14,0.0,0.0,1,79
/hello is,1,9,0.39,0.57,0.0,0.01,1,79
"http.Handle(""/hello"", &hello)",0,7,0.26,0.14,0.01,0.01,1,79
This shows us how the Handle,0,9,0.3,0.14,0.01,0.0,1,79
Handler to a URL . To,0,9,0.21,0.67,0.0,0.0,1,79
function registers a pointer to a,0,9,0.21,0.4,0.0,0.0,1,79
"simplify things, the HandleFunc",0,9,0.3,0.14,0.0,0.0,1,79
function converts the hello,0,9,0.21,0.41,0.0,0.0,1,79
function into a Handler,0,9,0.21,0.65,0.0,0.0,1,79
and registers it to DefaultServeMux,0,9,0.3,0.14,0.0,0.0,1,79
". In other words, handler functions are merely",0,9,0.21,0.45,0.0,0.0,1,79
convenient ways of creating handlers. The following listing shows the code for the,0,9,0.21,0.14,0.0,0.0,0,79
http.HandleFunc function.,0,9,0.3,0.14,0.0,0.03,1,79
Listing 3.9 http.HandleFunc,1,9,0.48,0.17,0.03,0.0,1,79
source code,1,9,0.39,0.42,0.0,0.02,1,79
"func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {",0,7,0.17,0.14,0.02,0.0,0,79
"DefaultServeMux.HandleFunc(pattern, handler)",0,7,0.26,0.14,0.0,0.0,1,79
},0,7,0.17,0.14,0.0,0.02,0,79
HandleFunc function:,0,9,0.21,0.4,0.02,0.0,1,79
Here’s the source code for the,0,9,0.3,0.14,0.0,0.01,1,79
"func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter,",0,7,0.17,0.14,0.01,0.0,0,79
*Request)) {,0,7,0.26,0.19,0.0,0.0,1,79
"mux.Handle(pattern, HandlerFunc(handler))",0,7,0.26,0.14,0.0,0.0,1,79
},0,7,0.17,0.14,0.0,0.02,0,79
"Notice that handler , a function, is converted into an actual handler by",0,9,0.21,0.14,0.02,0.0,0,79
HandlerFunc .,0,9,0.21,0.72,0.0,0.0,1,79
"Because using handler functions is cleaner and it does the job just as well, why use",0,9,0.21,0.17,0.0,0.0,0,79
handlers at all? It all boils down to design. If you have an existing interface or if you,0,9,0.21,0.14,0.0,0.0,0,79
ServeHTTP method to that,0,9,0.21,0.63,0.0,0.0,1,79
"want a type that can also be used as a handler, simply add a",0,9,0.3,0.14,0.0,0.0,1,79
interface and you’ll get a handler that you can assign to a,0,9,0.3,0.14,0.0,0.0,1,79
URL . It can also allow you to,0,9,0.21,0.61,0.0,0.0,1,79
build web applications that are more modular.,0,9,0.3,0.14,0.0,0.02,1,79
3.3.4 Chaining handlers and handler functions,1,10,0.5,0.07,0.02,0.01,1,79
"Although Go isn’t considered a functional language, it has some features that are",0,9,0.21,0.14,0.01,0.0,0,79
"common to functional languages, including function types, anonymous functions,",0,9,0.21,0.14,0.0,0.0,0,79
"and closures. As you noticed earlier, we passed a function into another function and",0,9,0.21,0.14,0.0,0.0,0,79
we referred to a named function by its identifier. This means we can pass a function f1,0,9,0.21,0.14,0.0,0.0,0,79
"into another function f2 for f2 to do its processing, and then call f1 (see figure 3.3).",0,9,0.21,0.14,0.0,0.05,0,79
f2,0,7,0.08,0.3,0.05,0.0,0,79
Input,0,7,0.26,0.16,0.0,0.02,1,79
Do some work,0,7,0.17,0.26,0.02,0.02,1,79
f1,0,7,0.08,0.46,0.02,0.01,0,79
Output,0,7,0.17,0.56,0.01,0.02,1,79
Do some work,0,7,0.17,0.43,0.02,0.01,1,79
Figure 3.3 Chaining,1,7,0.35,0.65,0.01,0.0,1,79
handlers,1,7,0.35,0.65,0.0,0.0,1,79
60,1,9,0.39,0.06,0.0,0.0,0,80
Handling requests,1,9,0.39,0.42,0.0,0.0,1,80
C 3,1,7,0.26,0.34,0.0,0.0,0,80
HAPTER,1,6,0.33,0.35,0.0,0.03,1,80
Let’s work through an example. Say every time we call a handler we want to log it,0,9,0.21,0.13,0.03,0.0,0,80
"down somewhere that it was called. We can always add this code into the handler, or",0,9,0.21,0.13,0.0,0.0,0,80
we can refactor a utility function (as we did in chapter 2) that can be called by every,0,9,0.21,0.13,0.0,0.0,0,80
"function. Doing this can be intrusive, though; we usually want our handler to contain",0,9,0.21,0.13,0.0,0.0,0,80
logic for processing the request only.,0,9,0.3,0.13,0.0,0.0,1,80
"Logging, along with a number of similar functions like security and error han-",0,9,0.21,0.15,0.0,0.0,0,80
"dling, is what’s commonly known as a",0,9,0.3,0.13,0.0,0.0,1,80
cross-cutting concern . These functions are com-,1,9,0.39,0.45,0.0,0.0,1,80
"mon and we want to avoid adding them everywhere, which causes code duplication",0,9,0.21,0.13,0.0,0.0,0,80
and dependencies. A common way of cleanly separating cross-cutting concerns away,0,9,0.21,0.13,0.0,0.0,0,80
from your other logic is chaining,1,9,0.48,0.13,0.0,0.0,1,80
. This listing shows how we can chain handlers.,0,9,0.21,0.39,0.0,0.03,1,80
Listing 3.10 Chaining two handler functions,1,9,0.48,0.15,0.03,0.02,1,80
package main,0,7,0.26,0.13,0.02,0.01,1,80
import (,0,7,0.26,0.13,0.01,0.0,1,80
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,80
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,80
"""reflect""",0,7,0.26,0.13,0.0,0.0,1,80
"""runtime""",0,7,0.26,0.13,0.0,0.0,1,80
),0,7,0.17,0.13,0.0,0.01,0,80
"func hello(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,80
"fmt.Fprintf(w, ""Hello!"")",0,7,0.26,0.13,0.0,0.0,1,80
},0,7,0.17,0.13,0.0,0.01,0,80
func log(h http.HandlerFunc) http.HandlerFunc {,0,7,0.26,0.13,0.01,0.0,1,80
"return func(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.0,0.0,1,80
name := runtime.FuncForPC(reflect.ValueOf(h).Pointer()).Name(),0,7,0.26,0.13,0.0,0.0,1,80
"fmt.Println(""Handler function called - "" + name)",0,7,0.26,0.13,0.0,0.0,1,80
"h(w, r)",0,7,0.26,0.13,0.0,0.0,1,80
},0,7,0.17,0.13,0.0,0.0,0,80
},0,7,0.17,0.13,0.0,0.01,0,80
func main() {,0,7,0.26,0.13,0.01,0.0,1,80
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,80
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,80
},0,7,0.17,0.13,0.0,0.0,0,80
"http.HandleFunc(""/hello"", log(hello))",0,7,0.26,0.13,0.0,0.0,1,80
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,80
},0,7,0.17,0.13,0.0,0.02,0,80
We have our usual hello,0,9,0.3,0.13,0.02,0.0,1,80
"log function, which takes",0,9,0.21,0.62,0.0,0.0,1,80
handler function. We also have a,0,9,0.21,0.34,0.0,0.0,1,80
in a HandlerFunc and returns a,0,9,0.3,0.13,0.0,0.0,1,80
HandlerFunc . Remember that,0,9,0.21,0.38,0.0,0.0,1,80
"hello is a HandlerFunc ,",0,9,0.21,0.63,0.0,0.0,1,80
so this sends the hello function into the,0,9,0.3,0.13,0.0,0.0,1,80
log function; in other words it chains the,0,9,0.21,0.46,0.0,0.0,1,80
log,0,9,0.12,0.8,0.0,0.01,0,80
and the hello functions.,0,9,0.3,0.13,0.01,0.01,1,80
log(hello),0,7,0.26,0.13,0.01,0.01,1,80
The log function returns an anonymous function that takes a,0,9,0.3,0.13,0.01,0.0,1,80
ResponseWriter and a,0,9,0.21,0.64,0.0,0.0,1,80
"pointer to a Request , which means that the anonymous function is a",0,9,0.3,0.13,0.0,0.0,1,80
HandlerFunc .,0,9,0.21,0.72,0.0,0.0,1,80
HandlerFunc (in this,0,9,0.21,0.65,0.0,0.0,1,80
"Inside the anonymous function, we print out the name of the",0,9,0.3,0.13,0.0,0.0,1,80
61,1,9,0.3,0.83,0.0,0.0,0,81
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,81
"case it’s main.hello ), and then call it. As a result, we’ll get hello! in the browser and a",0,9,0.21,0.14,0.03,0.0,0,81
printed statement on the console that says this:,0,9,0.3,0.14,0.0,0.01,1,81
Handler function called – main.hello,0,7,0.26,0.14,0.01,0.01,1,81
"Naturally if we can chain together two handler functions, we can chain more. The",0,9,0.21,0.14,0.01,0.0,0,81
"same principle allows us to stack handlers to perform multiple actions, like Lego",0,9,0.21,0.14,0.0,0.0,0,81
bricks. This is sometimes called,0,9,0.3,0.14,0.0,0.0,1,81
pipeline processing (see figure 3.4).,1,9,0.39,0.4,0.0,0.04,1,81
f3,0,7,0.08,0.3,0.04,0.0,0,81
Input,0,7,0.26,0.16,0.0,0.02,1,81
Do some work,0,7,0.17,0.26,0.02,0.02,1,81
f2,0,7,0.08,0.46,0.02,0.03,0,81
Do some work,0,7,0.17,0.43,0.03,0.02,1,81
f1,0,7,0.08,0.63,0.02,0.01,0,81
Output,0,7,0.17,0.73,0.01,0.02,1,81
Do some work,0,7,0.17,0.59,0.02,0.04,1,81
Figure 3.4 Chaining more handlers,1,7,0.44,0.14,0.04,0.03,1,81
"protect , which checks for the user’s authoriza-",0,9,0.21,0.45,0.03,0.0,1,81
Say we have another function named,0,9,0.3,0.14,0.0,0.0,1,81
tion before executing the handler:,0,9,0.3,0.14,0.0,0.01,1,81
func protect(h http.HandlerFunc) http.HandlerFunc {,0,7,0.26,0.14,0.01,0.0,1,81
"return func(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.0,0.0,1,81
. . .,0,7,0.26,0.14,0.0,0.0,1,81
"Code, omitted for brevity,",1,9,0.39,0.68,0.0,0.0,1,81
"h(w, r)",0,7,0.26,0.14,0.0,0.0,1,81
to make sure the user is,1,9,0.39,0.68,0.0,0.0,1,81
},0,7,0.17,0.14,0.0,0.0,0,81
authorized.,1,9,0.39,0.68,0.0,0.0,1,81
},0,7,0.17,0.14,0.0,0.02,0,81
"Then to use protect , we simply chain them together:",0,9,0.3,0.14,0.02,0.01,1,81
"http.HandleFunc(""/hello"", protect(log(hello)))",0,7,0.26,0.14,0.01,0.01,1,81
"You might have noticed that while I mentioned earlier that we’re chaining handlers,",0,9,0.21,0.14,0.01,0.0,0,81
the code in listing 3.10 actually shows chaining handler functions. The mechanisms,0,9,0.21,0.14,0.0,0.0,0,81
"for both chaining handlers and handler functions are very similar, as shown next.",0,9,0.21,0.14,0.0,0.03,0,81
Listing 3.11 Chaining handlers,1,9,0.48,0.17,0.03,0.02,1,81
package main,0,7,0.26,0.14,0.02,0.01,1,81
import (,0,7,0.26,0.14,0.01,0.0,1,81
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,81
62,1,9,0.39,0.06,0.0,0.0,0,82
Handling requests,1,9,0.39,0.42,0.0,0.0,1,82
C 3,1,7,0.26,0.34,0.0,0.0,0,82
HAPTER,1,6,0.33,0.35,0.0,0.03,1,82
"""net/http""",0,7,0.26,0.13,0.03,0.0,1,82
),0,7,0.17,0.13,0.0,0.02,0,82
type HelloHandler struct{},0,7,0.26,0.13,0.02,0.02,1,82
"func (h HelloHandler) ServeHTTP (w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.02,0.0,0,82
"fmt.Fprintf(w, ""Hello!"")",0,7,0.26,0.13,0.0,0.0,1,82
},0,7,0.17,0.13,0.0,0.02,0,82
func log(h http.Handler) http.Handler {,0,7,0.26,0.13,0.02,0.0,1,82
"return http.HandlerFunc (func(w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.0,0.0,0,82
"fmt.Printf(""Handler called - %T\n"", h)",0,7,0.26,0.13,0.0,0.0,1,82
"h.ServeHTTP (w, r)",0,7,0.26,0.13,0.0,0.0,1,82
}),0,7,0.17,0.13,0.0,0.0,0,82
},0,7,0.17,0.13,0.0,0.02,0,82
func protect(h http.Handler) http.Handler {,0,7,0.26,0.13,0.02,0.0,1,82
"return http.HandlerFunc (func(w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.0,0.0,0,82
. . .,0,7,0.26,0.13,0.0,0.0,1,82
"h.ServeHTTP (w, r)",0,7,0.26,0.13,0.0,0.0,1,82
"to make sure the user is Code, omitted for brevity,",1,9,0.39,0.65,0.0,0.0,1,82
}),0,7,0.17,0.13,0.0,0.0,0,82
},0,7,0.17,0.13,0.0,0.0,0,82
authorized.,1,9,0.39,0.65,0.0,0.0,1,82
func main() {,0,7,0.26,0.13,0.0,0.0,1,82
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,82
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,82
},0,7,0.17,0.13,0.0,0.0,0,82
hello := HelloHandler{},0,7,0.26,0.13,0.0,0.0,1,82
"http.Handle(""/hello"", protect(log(hello)))",0,7,0.26,0.13,0.0,0.0,1,82
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,82
},0,7,0.17,0.13,0.0,0.02,0,82
"HelloHandler from earlier, which is the last",0,9,0.21,0.46,0.02,0.0,1,82
Let’s see what’s different. We have our,0,9,0.3,0.13,0.0,0.0,1,82
"log function, instead of taking in a",0,9,0.21,0.43,0.0,0.0,1,82
HandlerFunc,0,9,0.21,0.72,0.0,0.0,1,82
"handler in the chain, as before. The",0,9,0.3,0.13,0.0,0.0,1,82
and returning a HandlerFunc,0,9,0.3,0.13,0.0,0.0,1,82
", takes in a Handler and returns a",0,9,0.21,0.37,0.0,0.0,1,82
Handler :,0,9,0.21,0.64,0.0,0.01,1,82
func log(h http.Handler) http.Handler {,0,7,0.26,0.13,0.01,0.0,1,82
"return http.HandlerFunc (func(w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.13,0.0,0.0,0,82
"fmt.Printf(""Handler called - %T\n"", h)",0,7,0.26,0.13,0.0,0.0,1,82
"h.ServeHTTP (w, r)",0,7,0.26,0.13,0.0,0.0,1,82
}),0,7,0.17,0.13,0.0,0.0,0,82
},0,7,0.17,0.13,0.0,0.02,0,82
"Instead of returning an anonymous function, now we adapt that anonymous function",0,9,0.21,0.13,0.02,0.0,0,82
"using HandlerFunc , which, if you remember from earlier, returns a",0,9,0.3,0.13,0.0,0.0,1,82
"Handler . Also,",0,9,0.21,0.71,0.0,0.0,1,82
"instead of executing the handler function, we now take the handler and call its",0,9,0.21,0.13,0.0,0.0,0,82
"ServeHTTP function. Everything else remains mostly the same, except that instead of",0,9,0.21,0.13,0.0,0.0,0,82
"registering a handler function, we register the handler:",0,9,0.3,0.13,0.0,0.01,1,82
hello := HelloHandler{},0,7,0.26,0.13,0.01,0.0,1,82
"http.Handle(""/hello"", protect(log(hello)))",0,7,0.26,0.13,0.0,0.02,1,82
Chaining handlers or handler functions is a common idiom you’ll find in many web,0,9,0.21,0.13,0.02,0.0,0,82
application frameworks.,0,9,0.3,0.13,0.0,0.0,1,82
63,1,9,0.3,0.83,0.0,0.0,0,83
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,83
3.3.5 ServeMux and DefaultServeMux,1,10,0.5,0.07,0.03,0.01,1,83
We discussed ServeMux and,0,9,0.3,0.14,0.01,0.0,1,83
DefaultServeMux earlier in this chapter and in the previ-,0,9,0.21,0.38,0.0,0.0,1,83
ous chapter. ServeMux is an,0,9,0.3,0.14,0.0,0.0,1,83
HTTP request multiplexer. It accepts an,0,9,0.21,0.37,0.0,0.0,1,83
HTTP request and,0,9,0.21,0.7,0.0,0.0,1,83
redirects it to the correct handler according to the,0,9,0.3,0.14,0.0,0.0,1,83
"URL in the request, illustrated in",0,9,0.21,0.57,0.0,0.0,1,83
figure 3.5.,0,9,0.3,0.14,0.0,0.04,1,83
Server,0,7,0.17,0.45,0.04,0.04,1,83
Handler,0,7,0.17,0.56,0.04,0.04,1,83
Request Multiplexer:,0,7,0.17,0.24,0.04,0.0,1,83
/hello,0,7,0.17,0.5,0.0,0.0,1,83
Client ServeMux,0,7,0.26,0.17,0.0,0.0,1,83
Handler,0,7,0.17,0.56,0.0,0.04,1,83
/world,0,7,0.17,0.49,0.04,0.0,1,83
Handler,0,7,0.17,0.56,0.0,0.05,1,83
Figure 3.5 Multiplexing requests to handlers,1,7,0.44,0.14,0.05,0.05,1,83
ServeMux is a struct with a map of entries that map a,0,9,0.3,0.14,0.05,0.0,1,83
URL to a handler. It’s also a han-,0,9,0.21,0.58,0.0,0.0,1,83
dler because it has a ServeHTTP,0,9,0.3,0.14,0.0,0.0,1,83
method. ServeMux ’s ServeHTTP,0,9,0.21,0.4,0.0,0.0,1,83
method finds the URL,0,9,0.21,0.66,0.0,0.0,1,83
most closely matching the requested one and calls the corresponding handler’s,0,9,0.21,0.14,0.0,0.0,0,83
ServeHTTP (see figure 3.6).,0,9,0.3,0.14,0.0,0.0,1,83
So what is DefaultServeMux,0,9,0.3,0.17,0.0,0.0,1,83
"? ServeMux isn’t an interface, so",0,9,0.21,0.4,0.0,0.0,1,83
DefaultServeMux isn’t,0,9,0.21,0.66,0.0,0.0,1,83
an implementation of ServeMux,0,9,0.3,0.14,0.0,0.0,1,83
. DefaultServeMux is an instance of,0,9,0.21,0.41,0.0,0.0,1,83
ServeMux that’s,0,9,0.21,0.72,0.0,0.05,1,83
Multiplexer: ServeMux,0,7,0.17,0.42,0.05,0.0,1,83
indexHandler,0,7,0.17,0.72,0.0,0.02,1,83
indexHandler,0,7,0.17,0.49,0.02,0.0,1,83
Request,0,7,0.26,0.2,0.0,0.0,1,83
helloHandler,0,7,0.17,0.72,0.0,0.0,1,83
/hello helloHandler,0,7,0.17,0.42,0.0,0.01,1,83
GET /hello HTTP/1.1,0,7,0.26,0.15,0.01,0.0,1,83
/world worldHandler,0,7,0.17,0.42,0.0,0.02,1,83
worldHandler,0,7,0.17,0.72,0.02,0.04,1,83
Struct that maps ServeHTTP method,1,9,0.39,0.41,0.04,0.0,1,83
URL to handlers calls corresponding handler's ServeHTTP,1,9,0.39,0.41,0.0,0.01,1,83
Figure 3.6 Inside a multiplexer,1,7,0.44,0.14,0.01,0.0,1,83
64,1,9,0.39,0.06,0.0,0.0,0,84
Handling requests,1,9,0.39,0.42,0.0,0.0,1,84
C 3,1,7,0.26,0.34,0.0,0.0,0,84
HAPTER,1,6,0.33,0.35,0.0,0.03,1,84
publicly available to the application that imports the net/http library. It’s also the,0,9,0.21,0.13,0.03,0.0,0,84
instance of ServeMux that’s used when no handler is provided to the,0,9,0.3,0.13,0.0,0.0,1,84
Server struct.,0,9,0.21,0.69,0.0,0.0,1,84
ServeMux is also another,0,9,0.21,0.62,0.0,0.0,1,84
"Stepping back a bit, you’ll also come to a realization that",0,9,0.3,0.15,0.0,0.0,1,84
ServeMux is a handler.,0,9,0.21,0.42,0.0,0.0,1,84
"take on chaining handlers, because",0,9,0.3,0.13,0.0,0.0,1,84
In these examples the requested,0,9,0.3,0.15,0.0,0.0,1,84
URL /hello matches nicely with the registered,0,9,0.21,0.44,0.0,0.0,1,84
URL in the multiplexer. What happens if we call the,0,9,0.3,0.13,0.0,0.0,1,84
URL /random? Or if we call the,0,9,0.21,0.56,0.0,0.0,1,84
URL /hello/there?,0,9,0.3,0.13,0.0,0.0,1,84
It all depends on how we register the,0,9,0.3,0.15,0.0,0.0,1,84
URL s. If we register the root,0,9,0.21,0.46,0.0,0.0,1,84
URL (/) as in fig-,0,9,0.21,0.69,0.0,0.0,1,84
"ure 3.6, any URL s that don’t match will fall through the hierarchy and land on the",0,9,0.21,0.13,0.0,0.0,0,84
root URL . If we now call /random and don’t have the handler for this,0,9,0.3,0.13,0.0,0.0,1,84
"URL , the root",0,9,0.21,0.71,0.0,0.0,1,84
URL ’s handler (in this case indexHandler) will be called.,0,9,0.3,0.13,0.0,0.0,1,84
How about /hello/there then? The,0,9,0.3,0.15,0.0,0.0,1,84
Principle of Least Surprise would dictate that,1,9,0.39,0.47,0.0,0.0,1,84
URL and hello-,0,9,0.21,0.69,0.0,0.0,1,84
because we have the URL,0,9,0.3,0.13,0.0,0.0,1,84
/hello registered we should default to that,0,9,0.21,0.33,0.0,0.0,1,84
"Handler should be called. But in figure 3.6,",0,9,0.3,0.13,0.0,0.0,1,84
indexHandler is called instead. Why is,0,9,0.21,0.5,0.0,0.0,1,84
that so?,0,9,0.3,0.13,0.0,0.03,1,84
The Principle of Least Surprise,1,10,0.5,0.15,0.03,0.01,1,84
"The Principle of Least Surprise, also known as the Principle of Least Astonishment,",0,9,0.21,0.15,0.01,0.0,0,84
is a general principle in the design of all things (including software) that says that,0,9,0.21,0.15,0.0,0.0,0,84
"when designing, we should do the least surprising thing. The results of doing some-",0,9,0.21,0.15,0.0,0.0,0,84
"thing should be obvious, consistent, and predictable.",0,9,0.3,0.15,0.0,0.01,1,84
"If we place a button next to a door, we’d expect the button to do something with the",0,9,0.21,0.15,0.01,0.0,0,84
door (ring the doorbell or open the door). If the button turns off the corridor lights,0,9,0.21,0.15,0.0,0.0,0,84
"instead, that would be against the Principle of Least Surprise because it’s doing some-",0,9,0.21,0.15,0.0,0.0,0,84
thing that a user of that button wouldn’t be expecting.,0,9,0.3,0.15,0.0,0.04,1,84
helloHandler to the URL,0,9,0.21,0.46,0.04,0.0,1,84
The reason is because we registered the,0,9,0.3,0.13,0.0,0.0,1,84
/hello instead of /,0,9,0.21,0.67,0.0,0.0,1,84
ServeMux will try to,0,9,0.21,0.66,0.0,0.0,1,84
hello/. For any registered,0,9,0.3,0.13,0.0,0.0,1,84
"URL s that don’t end with a slash (/),",0,9,0.21,0.35,0.0,0.0,1,84
ServeMux will see if the,0,9,0.21,0.64,0.0,0.0,1,84
match the exact URL pattern. If the,0,9,0.3,0.13,0.0,0.0,1,84
"URL ends with a slash (/),",0,9,0.21,0.42,0.0,0.0,1,84
requested URL starts with any registered,0,9,0.3,0.13,0.0,0.0,1,84
URL .,0,9,0.21,0.46,0.0,0.0,1,84
If we’d registered the URL,0,9,0.3,0.15,0.0,0.0,1,84
"/hello/ instead, then when /hello/there is requested, if",0,9,0.21,0.36,0.0,0.0,1,84
"ServeMux can’t find an exact match, it’ll start looking for",0,9,0.3,0.13,0.0,0.0,1,84
URL s that start with /hello/.,0,9,0.21,0.59,0.0,0.0,1,84
"There’s a match, so helloHandler",0,9,0.3,0.13,0.0,0.0,1,84
will be called.,0,9,0.21,0.41,0.0,0.02,1,84
3.3.6 Other multiplexers,1,10,0.5,0.06,0.02,0.01,1,84
Because what it takes to be a handler or even a multiplexer is to implement the,0,9,0.21,0.13,0.01,0.0,0,84
"ServeHTTP , it’s possible to create alternative multiplexers to net/http’s",0,9,0.21,0.13,0.0,0.0,0,84
ServeMux . Sure,0,9,0.21,0.7,0.0,0.0,1,84
"enough, a number of third-party multiplexers are available, including the excellent",0,9,0.21,0.13,0.0,0.0,0,84
Gorilla Toolkit ( www.gorillatoolkit.org,0,9,0.3,0.13,0.0,0.0,1,84
). The Gorilla Toolkit has two different multi-,0,9,0.21,0.44,0.0,0.0,1,84
"plexers that work quite differently: mux and pat. In this section, we’ll go through a",0,9,0.21,0.13,0.0,0.0,0,84
lightweight but effective third-party multiplexer called HttpRouter.,0,9,0.3,0.13,0.0,0.0,1,84
65,1,9,0.3,0.83,0.0,0.0,0,85
Handlers and handler functions,1,9,0.39,0.35,0.0,0.03,1,85
ServeMux is that it doesn’t support variables in,0,9,0.21,0.46,0.03,0.0,1,85
One of the main complaints about,0,9,0.3,0.17,0.0,0.0,1,85
URL . ServeMux handles /threads pretty well to,0,9,0.21,0.43,0.0,0.0,1,85
its pattern matching against the,0,9,0.3,0.14,0.0,0.0,1,85
"retrieve and display all threads in the forum, but it’s difficult to handle /thread/123",0,9,0.21,0.14,0.0,0.0,0,85
for retrieving and displaying the thread with id 123. To process such,0,9,0.3,0.14,0.0,0.0,1,85
"URL s, your han-",0,9,0.21,0.71,0.0,0.0,1,85
"dler will need to parse the request path and extract the relevant sections. Also,",0,9,0.21,0.14,0.0,0.0,0,85
because of the way ServeMux,0,9,0.3,0.14,0.0,0.0,1,85
does pattern matching for the,0,9,0.21,0.38,0.0,0.0,1,85
"URL s, you can’t use some-",0,9,0.21,0.63,0.0,0.0,1,85
thing like /thread/123/post/456 if you want to retrieve the post with id 456 from the,0,9,0.21,0.14,0.0,0.0,0,85
thread with id 123 (at least not with a lot of unnecessary parsing complexity).,0,9,0.21,0.14,0.0,0.0,0,85
"The HttpRouter library overcomes some of these limitations. In this section, we’ll",0,9,0.21,0.17,0.0,0.0,0,85
"explore some of the more important features of this library, but you can always look",0,9,0.21,0.14,0.0,0.0,0,85
up the rest of the documentation at,0,9,0.3,0.14,0.0,0.0,1,85
https://github.com/julienschmidt/httprouter,0,9,0.21,0.46,0.0,0.0,1,85
.,0,9,0.12,0.84,0.0,0.0,0,85
This listing shows an implementation using HttpRouter.,0,9,0.3,0.14,0.0,0.03,1,85
Listing 3.12 Using HttpRouter,1,9,0.48,0.17,0.03,0.02,1,85
package main,0,7,0.26,0.14,0.02,0.02,1,85
import (,0,7,0.26,0.14,0.02,0.0,1,85
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,85
"""github.com/julienschmidt/httprouter""",0,7,0.26,0.14,0.0,0.0,1,85
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,85
),0,7,0.17,0.14,0.0,0.02,0,85
"func hello(w http.ResponseWriter, r *http.Request, p httprouter.Params) {",0,7,0.17,0.14,0.02,0.0,0,85
"fmt.Fprintf(w, ""hello, %s!\n"", p.ByName(""name""))",0,7,0.26,0.14,0.0,0.0,1,85
},0,7,0.17,0.14,0.0,0.02,0,85
func main() {,0,7,0.26,0.14,0.02,0.0,1,85
mux := httprouter.New(),0,7,0.26,0.14,0.0,0.0,1,85
"mux.GET(""/hello/:name"", hello)",0,7,0.26,0.14,0.0,0.02,1,85
server := http.Server{,0,7,0.26,0.14,0.02,0.0,1,85
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,85
"Handler: mux,",0,7,0.26,0.14,0.0,0.0,1,85
},0,7,0.17,0.14,0.0,0.0,0,85
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,85
},0,7,0.17,0.14,0.0,0.02,0,85
Most of the code should look familiar to you now. We create the multiplexer by calling,0,9,0.21,0.14,0.02,0.0,0,85
the New function.,0,9,0.3,0.14,0.0,0.01,1,85
mux := httprouter.New(),0,7,0.26,0.14,0.01,0.01,1,85
Instead of using HandleFunc,0,9,0.3,0.14,0.01,0.0,1,85
"to register the handler functions, we use the method",0,9,0.21,0.39,0.0,0.0,1,85
names:,0,9,0.3,0.14,0.0,0.01,1,85
"mux.GET(""/hello/:name"", hello)",0,7,0.26,0.14,0.01,0.02,1,85
hello function. If we,0,9,0.21,0.67,0.02,0.0,1,85
In this case we’re registering a,0,9,0.3,0.14,0.0,0.0,1,85
URL for the GET method to the,0,9,0.21,0.4,0.0,0.0,1,85
hello function will be called; if we send any other,0,9,0.21,0.36,0.0,0.0,1,85
"send a GET request, the",0,9,0.3,0.14,0.0,0.0,1,85
HTTP,0,9,0.21,0.8,0.0,0.0,1,85
66,1,9,0.39,0.06,0.0,0.0,0,86
Handling requests,1,9,0.39,0.42,0.0,0.0,1,86
C 3,1,7,0.26,0.34,0.0,0.0,0,86
HAPTER,1,6,0.33,0.35,0.0,0.03,1,86
requests it won’t. Notice that the,0,9,0.3,0.13,0.03,0.0,1,86
URL now has something called a,0,9,0.21,0.41,0.0,0.0,1,86
named parameter .,1,9,0.39,0.69,0.0,0.0,1,86
These named parameters can be replaced by any values and can be retrieved later by,0,9,0.21,0.13,0.0,0.0,0,86
the handler.,0,9,0.3,0.13,0.0,0.01,1,86
"func hello(w http.ResponseWriter, r *http.Request, p httprouter.Params) {",0,7,0.17,0.13,0.01,0.0,0,86
"fmt.Fprintf(w, ""hello, %s!\n"", p.ByName(""name""))",0,7,0.26,0.13,0.0,0.0,1,86
},0,7,0.17,0.13,0.0,0.02,0,86
"The handler function has changed too; instead of taking two parameters, we now take",0,9,0.21,0.13,0.02,0.0,0,86
"a third, a Params type. Params",0,9,0.3,0.13,0.0,0.0,1,86
"contain the named parameters, which we can retrieve",0,9,0.21,0.38,0.0,0.0,1,86
using the ByName method.,0,9,0.3,0.13,0.0,0.0,1,86
"Finally, instead of using DefaultServeMux",0,9,0.3,0.15,0.0,0.0,1,86
Server,0,9,0.21,0.77,0.0,0.0,1,86
", we pass our multiplexer into the",0,9,0.21,0.49,0.0,0.0,1,86
struct and let Go use that instead:,0,9,0.3,0.13,0.0,0.01,1,86
server := http.Server{,0,7,0.26,0.13,0.01,0.0,1,86
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,86
"Handler: mux,",0,7,0.26,0.13,0.0,0.0,1,86
},0,7,0.17,0.13,0.0,0.0,0,86
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.02,1,86
But wait. How exactly do we include the third-party library? If we do what we did for,0,9,0.21,0.13,0.02,0.0,0,86
"go build at the console, we’ll get something like this:",0,9,0.21,0.36,0.0,0.0,1,86
the other examples and run,0,9,0.3,0.13,0.0,0.01,1,86
$ go build,0,7,0.26,0.13,0.01,0.0,1,86
"server.go:5:5: cannot find package ""github.com/julienschmidt/httprouter"" in",0,7,0.17,0.13,0.0,0.0,0,86
any of:,0,7,0.26,0.15,0.0,0.0,1,86
/usr/local/go/src/github.com/julienschmidt/httprouter (from $GOROOT),0,7,0.26,0.13,0.0,0.0,1,86
/Users/sausheong/gws/src/github.com/julienschmidt/httprouter (from $GOPATH),0,7,0.17,0.13,0.0,0.02,0,86
A simple package management system is one of the strengths of Go. We simply need,0,9,0.21,0.13,0.02,0.0,0,86
to run,0,9,0.3,0.13,0.0,0.01,1,86
$ go get github.com/julienschmidt/httprouter,0,7,0.26,0.13,0.01,0.01,1,86
"at the console and if we’re connected to the internet, it’ll download the code from the",0,9,0.21,0.13,0.01,0.0,0,86
HttpRouter repository (in GitHub) and store it in the,0,9,0.3,0.13,0.0,0.0,1,86
$GOPATH /src directory. Then,0,9,0.21,0.58,0.0,0.0,1,86
"when we run go build , it’ll import the code and compile our server.",0,9,0.3,0.13,0.0,0.02,1,86
3.4 Using HTTP/2,1,12,0.54,0.06,0.02,0.01,1,86
"Before leaving this chapter, let me show you how you can use",0,9,0.3,0.13,0.01,0.0,1,86
HTTP/2 in Go with what,0,9,0.21,0.63,0.0,0.0,1,86
you have learned in this chapter.,0,9,0.3,0.13,0.0,0.0,1,86
"In chapter 1, you learned about",0,9,0.3,0.15,0.0,0.0,1,86
HTTP/2 and how Go 1.6 includes,0,9,0.21,0.44,0.0,0.0,1,86
HTTP/2 by,0,9,0.21,0.73,0.0,0.0,1,86
default when you start up a server with,0,9,0.3,0.13,0.0,0.0,1,86
"HTTPS . For older versions of Go, you can",0,9,0.21,0.47,0.0,0.0,1,86
golang.org/x/net/http2,0,9,0.21,0.4,0.0,0.0,1,86
enable this manually through the,0,9,0.3,0.13,0.0,0.0,1,86
package.,0,9,0.21,0.62,0.0,0.0,1,86
"If you’re using a Go version prior to 1.6, the http2 package is not installed by",0,9,0.21,0.15,0.0,0.0,0,86
"default, so you need to get it using go get:",0,9,0.3,0.13,0.0,0.01,1,86
"go get ""golang.org/x/net/http2""",0,7,0.26,0.13,0.01,0.01,1,86
Modify the code from listing 3.6 by importing the http2 package and also adding a,0,9,0.21,0.13,0.01,0.0,0,86
line to  set up the server to use,0,9,0.3,0.13,0.0,0.0,1,86
HTTP /2.,0,9,0.21,0.38,0.0,0.0,1,86
67,1,9,0.3,0.83,0.0,0.0,0,87
Using HTTP/2,1,9,0.39,0.41,0.0,0.03,1,87
ConfigureServer method in the,0,9,0.21,0.58,0.03,0.0,1,87
In the following listing you can see by calling the,0,9,0.3,0.17,0.0,0.0,1,87
"http2 package, and passing it the server configuration, you have set up the server to",0,9,0.21,0.14,0.0,0.0,0,87
run in HTTP /2.,0,9,0.3,0.14,0.0,0.03,1,87
Listing 3.13 Using HTTP/2,1,9,0.48,0.17,0.03,0.02,1,87
package main,0,7,0.26,0.14,0.02,0.02,1,87
import (,0,7,0.26,0.14,0.02,0.0,1,87
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,87
"""golang.org/x/net/http2""",0,7,0.26,0.14,0.0,0.0,1,87
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,87
),0,7,0.17,0.14,0.0,0.02,0,87
type MyHandler struct{},0,7,0.26,0.14,0.02,0.02,1,87
"func (h *MyHandler) ServeHTTP (w http.ResponseWriter, r *http.Request) {",0,7,0.17,0.14,0.02,0.0,0,87
"fmt.Fprintf(w, ""Hello World!"")",0,7,0.26,0.14,0.0,0.0,1,87
},0,7,0.17,0.14,0.0,0.02,0,87
func main() {,0,7,0.26,0.14,0.02,0.0,1,87
handler := MyHandler{},0,7,0.26,0.14,0.0,0.0,1,87
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,87
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,87
"Handler: &handler,",0,7,0.26,0.14,0.0,0.0,1,87
},0,7,0.17,0.14,0.0,0.0,0,87
"http2.ConfigureServer(&server, &http2.Server{})",1,7,0.44,0.14,0.0,0.0,1,87
"server.ListenAndServeTLS(""cert.pem"", ""key.pem"")",0,7,0.26,0.14,0.0,0.0,1,87
},0,7,0.17,0.14,0.0,0.02,0,87
"Now, run the server:",0,9,0.3,0.14,0.02,0.01,1,87
go run server.go,0,7,0.26,0.14,0.01,0.01,1,87
To check whether the server is running in,0,9,0.3,0.14,0.01,0.0,1,87
"HTTP /2, you can use c URL",0,9,0.21,0.51,0.0,0.0,1,87
. You will be,0,9,0.21,0.74,0.0,0.0,1,87
"using c URL quite a bit in this book, because it’s widely available on most platforms, so",0,9,0.21,0.14,0.0,0.0,0,87
it’s a good time to get familiar with it.,0,9,0.3,0.14,0.0,0.04,1,87
cURL,1,10,0.5,0.17,0.04,0.01,1,87
cURL is a command-line tool that allows users to get or send files through a URL. It,0,9,0.21,0.17,0.01,0.0,0,87
"supports a large number of common internet protocols, including HTTP and HTTPS.",0,9,0.21,0.17,0.0,0.0,0,87
"cURL is installed by default in many variants of Unix, including OS X, but is also avail-",0,9,0.21,0.17,0.0,0.0,0,87
"able in Windows. To download and install cURL manually, go to",0,9,0.3,0.17,0.0,0.0,1,87
http://curl.haxx.se/,0,9,0.21,0.67,0.0,0.0,1,87
download.html .,0,9,0.3,0.17,0.0,0.05,1,87
"Starting from version 7.43.0, c",0,9,0.3,0.14,0.05,0.0,1,87
URL supports HTTP/2 . You can perform a request using,0,9,0.21,0.39,0.0,0.0,1,87
--http2 flag. To use c URL,0,9,0.21,0.41,0.0,0.0,1,87
the HTTP/2 protocol passing the,0,9,0.3,0.14,0.0,0.0,1,87
"with HTTP/2 , you need to",0,9,0.21,0.63,0.0,0.0,1,87
"link it to nghttp2, a C library that provides support for",0,9,0.3,0.14,0.0,0.0,1,87
"HTTP/2 . As of this writing,",0,9,0.21,0.62,0.0,0.0,1,87
68,1,9,0.39,0.06,0.0,0.0,0,88
Handling requests,1,9,0.39,0.42,0.0,0.0,1,88
C 3,1,7,0.26,0.34,0.0,0.0,0,88
HAPTER,1,6,0.33,0.35,0.0,0.03,1,88
many default c URL implementations don’t yet support,0,9,0.3,0.13,0.03,0.0,1,88
HTTP/2 (including the one,0,9,0.21,0.59,0.0,0.0,1,88
"shipped with OS X ), so if you need to recompile c",0,9,0.3,0.13,0.0,0.0,1,88
"URL , link it with nghttp2 and replace",0,9,0.21,0.53,0.0,0.0,1,88
the previous c URL version with the one you just built.,0,9,0.3,0.13,0.0,0.0,1,88
"Once you have done that, you can use c",0,9,0.3,0.15,0.0,0.0,1,88
URL to check your HTTP/2,0,9,0.21,0.49,0.0,0.0,1,88
web applica-,0,9,0.21,0.72,0.0,0.0,1,88
tion:,0,9,0.3,0.13,0.0,0.01,1,88
curl -I --http2 --insecure https://localhost:8080/,0,7,0.26,0.13,0.01,0.01,1,88
"Remember, you need to run it against",0,9,0.3,0.13,0.01,0.0,1,88
HTTPS . Because you created your own certifi-,0,9,0.21,0.45,0.0,0.0,1,88
"cate and private key, by default c",0,9,0.3,0.13,0.0,0.0,1,88
URL will not proceed as it will try to verify the certifi-,0,9,0.21,0.39,0.0,0.0,1,88
"cate. To force cURL to accept your certificate, you need to set the insecure flag.",0,9,0.21,0.13,0.0,0.0,0,88
You should get an output similar to this:,0,9,0.3,0.15,0.0,0.01,1,88
HTTP/2.0 200,0,7,0.26,0.13,0.01,0.0,1,88
content-type:text/plain; charset=utf-8,0,7,0.26,0.13,0.0,0.0,1,88
content-length:12,0,7,0.26,0.13,0.0,0.0,1,88
"date:Mon, 15 Feb 2016 05:33:01 GMT",0,7,0.26,0.13,0.0,0.02,1,88
"We’ve discussed how to handle requests, but we mostly glossed over how to process the",0,9,0.21,0.13,0.02,0.0,0,88
incoming request and send responses to the client. Handlers and handler functions,0,9,0.21,0.13,0.0,0.0,0,88
"are the key to writing web applications in Go, but processing requests and sending",0,9,0.21,0.13,0.0,0.0,0,88
"responses is the real reason why web applications exist. In the next chapter, we’ll turn",0,9,0.21,0.13,0.0,0.0,0,88
to the details on requests and responses and you’ll see how to extract information,0,9,0.21,0.13,0.0,0.0,0,88
from requests and pass on information through responses.,0,9,0.3,0.13,0.0,0.02,1,88
3.5 Summary,1,12,0.54,0.06,0.02,0.01,1,88
"Go has full-fledged standard libraries for building web applications, with net/",0,9,0.21,0.18,0.01,0.0,0,88
■,0,4,0.11,0.15,0.0,0.01,0,88
http and html/template.,0,9,0.3,0.18,0.01,0.01,1,88
"Although using good web frameworks is often easier and saves time, it is impor-",0,9,0.21,0.18,0.01,0.0,0,88
■,0,4,0.11,0.15,0.0,0.01,0,88
tant to learn the basics of web programming before using them.,0,9,0.3,0.18,0.01,0.01,1,88
Go’s net/http package allows,0,9,0.3,0.18,0.01,0.0,1,88
HTTP to be layered on top of,0,9,0.21,0.44,0.0,0.0,1,88
SSL to be more,0,9,0.21,0.7,0.0,0.0,1,88
■,0,4,0.11,0.15,0.0,0.01,0,88
"secured, creating HTTPS",0,9,0.3,0.18,0.01,0.0,1,88
.,0,9,0.12,0.38,0.0,0.01,0,88
ServeHTTP with two,0,9,0.21,0.66,0.01,0.0,1,88
Go handlers can be any struct that has a method named,0,9,0.3,0.18,0.0,0.0,1,88
■,0,4,0.11,0.15,0.0,0.01,0,88
parameters: an HTTPResponseWriter,0,9,0.3,0.18,0.01,0.0,1,88
Request struct.,0,9,0.21,0.7,0.0,0.0,1,88
interface and a pointer to a,0,9,0.21,0.48,0.0,0.01,1,88
Handler functions are functions that behave like handlers. Handler functions,0,9,0.21,0.18,0.01,0.0,0,88
■,0,4,0.11,0.15,0.0,0.01,0,88
ServeHTTP method and are used to process,0,9,0.21,0.45,0.01,0.0,1,88
have the same signature as the,0,9,0.3,0.18,0.0,0.0,1,88
requests.,0,9,0.3,0.18,0.0,0.01,1,88
Handlers and handler functions can be chained to allow modular processing of,0,9,0.21,0.18,0.01,0.0,0,88
■,0,4,0.11,0.15,0.0,0.01,0,88
requests through separation of concerns.,0,9,0.3,0.18,0.01,0.01,1,88
ServeMux is an HTTP request multiplexer. It,0,9,0.21,0.45,0.01,0.0,1,88
Multiplexers are also handlers.,0,9,0.3,0.18,0.0,0.0,1,88
■,0,4,0.11,0.15,0.0,0.01,0,88
accepts an HTTP request and redirects it to the correct handler according to,0,9,0.21,0.18,0.01,0.0,0,88
DefaultServeMux is a publicly available instance of,0,9,0.21,0.39,0.0,0.0,1,88
the URL in the request.,0,9,0.3,0.18,0.0,0.0,1,88
ServeMux that is used as the default multiplexer.,0,9,0.3,0.18,0.0,0.01,1,88
"In Go 1.6 and later, net/http",0,9,0.3,0.18,0.01,0.0,1,88
"supports HTTP/2 by default. Before 1.6,",0,9,0.21,0.43,0.0,0.0,1,88
HTTP/2,0,9,0.21,0.76,0.0,0.0,1,88
■,0,4,0.11,0.15,0.0,0.01,0,88
http2 package.,0,9,0.21,0.54,0.01,0.0,1,88
support can be added manually by using the,0,9,0.3,0.18,0.0,0.0,1,88
Processing requests,1,30,0.93,0.44,0.0,0.21,1,89
This chapter covers,1,12,0.67,0.13,0.21,0.01,1,89
Using Go requests and responses,0,9,0.3,0.15,0.01,0.0,1,89
■,0,4,0.11,0.13,0.0,0.01,0,89
Processing HTML forms with Go,0,9,0.3,0.15,0.01,0.0,1,89
■,0,4,0.11,0.13,0.0,0.01,0,89
Sending responses back to the client with,0,9,0.3,0.15,0.01,0.0,1,89
■,0,4,0.11,0.13,0.0,0.01,0,89
ResponseWriter,0,9,0.3,0.15,0.01,0.01,1,89
Working with cookies,0,9,0.3,0.15,0.01,0.0,1,89
■,0,4,0.11,0.13,0.0,0.01,0,89
Implementing flash messages with cookies,0,9,0.3,0.15,0.01,0.0,1,89
■,0,4,0.11,0.13,0.0,0.08,0,89
In the previous chapter we explored serving web applications with the built-in net/,0,9,0.21,0.17,0.08,0.0,0,89
"http library. You also learned about handlers, handler functions, and multiplexers.",0,9,0.21,0.17,0.0,0.0,0,89
Now that you know about receiving and handing off the request to the correct set,0,9,0.21,0.17,0.0,0.0,0,89
"of functions, in this chapter we’ll investigate the tools that Go provides to program-",0,9,0.21,0.17,0.0,0.0,0,89
mers to process requests and send responses back to the client.,0,9,0.3,0.17,0.0,0.02,1,89
4.1 Requests and responses,1,12,0.54,0.1,0.02,0.01,1,89
In chapter 1 we went through quite a bit of information about,0,9,0.3,0.17,0.01,0.0,1,89
HTTP messages. If,0,9,0.21,0.69,0.0,0.0,1,89
"that chapter was a blur to you, now would be a great time to revisit it.",0,9,0.21,0.17,0.0,0.0,0,89
HTTP mes-,0,9,0.21,0.75,0.0,0.0,1,89
sages are messages sent between the client and the server. There are two types of,0,9,0.21,0.17,0.0,0.0,0,89
HTTP messages: HTTP request and,0,9,0.3,0.17,0.0,0.0,1,89
HTTP response.,0,9,0.21,0.45,0.0,0.0,1,89
70,1,9,0.39,0.06,0.0,0.0,0,90
Processing requests,1,9,0.39,0.42,0.0,0.0,1,90
C 4,1,7,0.26,0.34,0.0,0.0,0,90
HAPTER,1,6,0.33,0.35,0.0,0.03,1,90
Both requests and responses have basically the same structure:,0,9,0.3,0.15,0.03,0.01,1,90
Request or response line,0,9,0.3,0.18,0.01,0.0,1,90
1,1,6,0.33,0.15,0.0,0.01,0,90
Zero or more headers,0,9,0.3,0.18,0.01,0.0,1,90
2,1,6,0.33,0.15,0.0,0.01,0,90
"An empty line, followed by …",0,9,0.3,0.18,0.01,0.0,1,90
3,1,6,0.33,0.15,0.0,0.01,0,90
… an optional message body,0,9,0.3,0.18,0.01,0.0,1,90
4,1,6,0.33,0.15,0.0,0.01,0,90
Here’s an example of a GET,0,9,0.3,0.13,0.01,0.0,1,90
request:,0,9,0.21,0.35,0.0,0.01,1,90
GET /Protocols/rfc2616/rfc2616.html HTTP/1.1,0,7,0.26,0.13,0.01,0.0,1,90
Host: www.w3.org,0,7,0.26,0.13,0.0,0.0,1,90
User-Agent: Mozilla/5.0,0,7,0.26,0.13,0.0,0.0,1,90
(empty line),0,7,0.26,0.13,0.0,0.02,1,90
The net/http library provides structures for,0,9,0.3,0.13,0.02,0.0,1,90
"messages, and you need to know",0,9,0.21,0.54,0.0,0.0,1,90
HTTP,0,9,0.21,0.5,0.0,0.01,1,90
these structures to understand how to process requests and send responses. Let’s start,0,9,0.21,0.13,0.01,0.0,0,90
with the request.,0,9,0.3,0.13,0.0,0.02,1,90
4.1.1 Request,1,10,0.5,0.06,0.02,0.01,1,90
The Request struct represents an,0,9,0.3,0.13,0.01,0.0,1,90
HTTP request message sent from the client. The rep-,0,9,0.21,0.4,0.0,0.0,1,90
resentation isn’t literal because,0,9,0.3,0.13,0.0,0.0,1,90
HTTP requests are only lines of text. The struct con-,0,9,0.21,0.39,0.0,0.0,1,90
"tains the parsed information that’s considered to be important, as well as a number of",0,9,0.21,0.13,0.0,0.0,0,90
Request are,0,9,0.21,0.47,0.0,0.0,1,90
useful methods. Some important parts of,0,9,0.3,0.13,0.0,0.01,1,90
URL,0,9,0.21,0.18,0.01,0.0,0,90
■,0,4,0.11,0.15,0.0,0.01,0,90
Header,0,9,0.3,0.18,0.01,0.0,1,90
■,0,4,0.11,0.15,0.0,0.01,0,90
Body,0,9,0.3,0.18,0.01,0.0,1,90
■,0,4,0.11,0.15,0.0,0.01,0,90
"Form, PostForm, and MultipartForm",0,9,0.3,0.18,0.01,0.0,1,90
■,0,4,0.11,0.15,0.0,0.02,0,90
You can also get access to the cookies in the request and the referring,0,9,0.21,0.13,0.02,0.0,0,90
URL and the user,0,9,0.21,0.69,0.0,0.0,1,90
agent from methods in Request,0,9,0.3,0.13,0.0,0.0,1,90
". Request can either be requests sent to the server, or",0,9,0.21,0.39,0.0,0.0,1,90
"requests sent from the client, when the net/http library is used as an",0,9,0.3,0.13,0.0,0.0,1,90
HTTP client.,0,9,0.21,0.69,0.0,0.02,1,90
4.1.2 Request URL,1,10,0.5,0.06,0.02,0.01,1,90
The URL field of a Request,0,9,0.3,0.13,0.01,0.0,1,90
is a representation of the,0,9,0.21,0.36,0.0,0.0,1,90
URL that’s sent as part of the,0,9,0.21,0.58,0.0,0.0,1,90
request line (the first line of the,0,9,0.3,0.13,0.0,0.0,1,90
HTTP request). The URL field is a pointer to the,0,9,0.21,0.41,0.0,0.0,1,90
"url.URL type, which is a struct with a number of fields, as shown here.",0,9,0.21,0.13,0.0,0.03,0,90
Listing 4.1 The URL struct,1,9,0.48,0.15,0.03,0.02,1,90
type URL struct {,0,7,0.26,0.13,0.02,0.0,1,90
Scheme   string,0,7,0.26,0.13,0.0,0.0,1,90
Opaque   string,0,7,0.26,0.13,0.0,0.0,1,90
User     *Userinfo,0,7,0.26,0.13,0.0,0.0,1,90
Host     string,0,7,0.26,0.13,0.0,0.0,1,90
Path     string,0,7,0.26,0.13,0.0,0.0,1,90
RawQuery string,0,7,0.26,0.13,0.0,0.0,1,90
Fragment string,0,7,0.26,0.13,0.0,0.0,1,90
},0,7,0.17,0.13,0.0,0.0,0,90
71,1,9,0.3,0.83,0.0,0.0,0,91
Requests and responses,1,9,0.39,0.38,0.0,0.03,1,91
The general form is,0,9,0.3,0.14,0.03,0.01,1,91
scheme://[userinfo@]host/path[?query][#fragment],0,7,0.26,0.14,0.01,0.01,1,91
URL s that don’t start with a slash after the scheme are interpreted as,0,9,0.21,0.14,0.01,0.01,0,91
scheme:opaque[?query][#fragment],0,7,0.26,0.14,0.01,0.01,1,91
"When programming web applications, we often pass information from the client to the",0,9,0.21,0.14,0.01,0.0,0,91
server using the URL query. The RawQuery field provides the actual query string that’s,0,9,0.21,0.14,0.0,0.0,0,91
"passed through. For example, if we send a request to the",0,9,0.3,0.14,0.0,0.0,1,91
URL http://www.example,0,9,0.21,0.63,0.0,0.0,1,91
RawQuery will contain id=123&thread_id=456,0,9,0.21,0.43,0.0,0.0,1,91
.com/post?id=123&thread_id=456,0,9,0.3,0.14,0.0,0.0,1,91
and,0,9,0.12,0.81,0.0,0.0,0,91
we’ll need to parse it to get the key-value pairs. There’s a convenient way of getting,0,9,0.21,0.14,0.0,0.0,0,91
"Request . We’ll get to the Form,",0,9,0.21,0.58,0.0,0.0,1,91
these key-value pairs: through the Form field in the,0,9,0.3,0.14,0.0,0.0,1,91
"PostForm, and MultipartForm fields in a bit.",0,9,0.3,0.14,0.0,0.0,1,91
URL struct,0,9,0.21,0.76,0.0,0.0,1,91
It’s interesting to note that you can’t extract the Fragment field out of a,0,9,0.21,0.17,0.0,0.0,0,91
if you’re getting a request from the browser. Recall from chapter 1 that fragments are,0,9,0.21,0.14,0.0,0.0,0,91
"stripped by the browser before being sent to the server, so it’s not the Go libraries",0,9,0.21,0.14,0.0,0.0,0,91
being annoying—it’s because the fragment you see on the browser never gets sent to,0,9,0.21,0.14,0.0,0.0,0,91
the server. So why have it at all? It’s because not all requests come from browsers; you,0,9,0.21,0.14,0.0,0.0,0,91
can get requests from HTTP,0,9,0.3,0.14,0.0,0.0,1,91
"client libraries or other tools, or even client frameworks",0,9,0.21,0.37,0.0,0.0,1,91
"like Angular. Also, Request",0,9,0.3,0.14,0.0,0.0,1,91
isn’t used only at the server—it can also be used as part of,0,9,0.21,0.37,0.0,0.0,1,91
the client library.,0,9,0.3,0.14,0.0,0.01,1,91
4.1.3 Request header,1,10,0.5,0.07,0.01,0.01,1,91
"Header type, which is a map repre-",0,9,0.21,0.56,0.01,0.0,1,91
Request and response headers are described in the,0,9,0.3,0.14,0.0,0.0,1,91
senting the key-value pairs in an,0,9,0.3,0.14,0.0,0.0,1,91
HTTP header. There are four basic methods on,0,9,0.21,0.43,0.0,0.0,1,91
"Header , which allow you to add, delete, get, and set values, given a key. Both the key",0,9,0.21,0.14,0.0,0.0,0,91
and the value are strings.,0,9,0.3,0.14,0.0,0.0,1,91
The difference between adding and setting a value is straightforward but tells us,0,9,0.21,0.17,0.0,0.0,0,91
Header,0,9,0.21,0.44,0.0,0.0,1,91
quite a lot about the structure of the,0,9,0.3,0.14,0.0,0.0,1,91
type. A header is a map with keys that are,0,9,0.21,0.51,0.0,0.0,1,91
strings and values that are slices of strings. Setting a key creates a blank slice of strings,0,9,0.21,0.14,0.0,0.0,0,91
"as the value, with the first element in the slice being the new header value. To add a",0,9,0.21,0.14,0.0,0.0,0,91
"new header value to a given key, you append the new element to the existing slice of",0,9,0.21,0.14,0.0,0.0,0,91
string (see figure 4.1).,0,9,0.3,0.14,0.0,0.01,1,91
Appending an element to,1,9,0.39,0.21,0.01,0.0,1,91
the value slice adds a new,1,9,0.39,0.21,0.0,0.0,1,91
header value to the key.,1,9,0.39,0.21,0.0,0.03,1,91
Key Value,0,8,0.28,0.17,0.03,0.03,1,91
Allow GET PUT,0,7,0.26,0.17,0.03,0.04,1,91
"Figure 4.1 A header is a map, with the key",1,7,0.35,0.54,0.04,0.0,1,91
a string and the value a slice of strings.,1,7,0.35,0.54,0.0,0.0,1,91
72,1,9,0.39,0.06,0.0,0.0,0,92
Processing requests,1,9,0.39,0.42,0.0,0.0,1,92
C 4,1,7,0.26,0.34,0.0,0.0,0,92
HAPTER,1,6,0.33,0.35,0.0,0.03,1,92
This listing shows how you’d read headers from a request.,0,9,0.3,0.13,0.03,0.03,1,92
Listing 4.2 Reading headers from a request,1,9,0.48,0.15,0.03,0.02,1,92
package main,0,7,0.26,0.13,0.02,0.02,1,92
import (,0,7,0.26,0.13,0.02,0.0,1,92
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,92
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,92
),0,7,0.17,0.13,0.0,0.02,0,92
"func headers(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,92
h := r.Header,0,7,0.26,0.13,0.0,0.0,1,92
"fmt.Fprintln(w, h)",0,7,0.26,0.13,0.0,0.0,1,92
},0,7,0.17,0.13,0.0,0.02,0,92
func main() {,0,7,0.26,0.13,0.02,0.0,1,92
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,92
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,92
},0,7,0.17,0.13,0.0,0.0,0,92
"http.HandleFunc(""/headers"", headers)",0,7,0.26,0.13,0.0,0.0,1,92
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,92
},0,7,0.17,0.13,0.0,0.02,0,92
"The previous listing shows the simple server from chapter 3, but this time the handler",0,9,0.21,0.13,0.02,0.0,0,92
prints out the header. Figure 4.2 shows what you’ll see in your browser (I used Safari,0,9,0.21,0.13,0.0,0.0,0,92
on my OS X machine).,0,9,0.43,0.13,0.0,0.25,1,92
Figure 4.2 Header output as viewed in the browser,1,7,0.58,0.13,0.25,0.04,1,92
"To get just one particular header, instead of using",0,9,0.3,0.13,0.04,0.01,1,92
h := r.Header,0,7,0.26,0.13,0.01,0.01,1,92
you’d use,0,9,0.3,0.13,0.01,0.01,1,92
"h := r.Header[""Accept-Encoding""]",0,7,0.26,0.13,0.01,0.0,1,92
73,1,9,0.3,0.83,0.0,0.0,0,93
Requests and responses,1,9,0.39,0.38,0.0,0.03,1,93
and you’d get,0,9,0.3,0.14,0.03,0.01,1,93
"[gzip, deflate]",0,7,0.26,0.14,0.01,0.01,1,93
You can also use,0,9,0.3,0.14,0.01,0.01,1,93
"h := r.Header.Get(""Accept-Encoding"")",0,7,0.26,0.14,0.01,0.01,1,93
which will give you,0,9,0.3,0.14,0.01,0.01,1,93
"gzip, deflate",0,7,0.26,0.14,0.01,0.01,1,93
"Header directly, you’ll get a map of strings; if",0,9,0.21,0.48,0.01,0.0,1,93
Notice the difference. If you refer to the,0,9,0.3,0.14,0.0,0.0,1,93
you use the Get method on the,0,9,0.3,0.14,0.0,0.0,1,93
"Header , then you’ll get the comma-delimited list of val-",0,9,0.21,0.4,0.0,0.0,1,93
ues (which is the actual string in the header).,0,9,0.3,0.14,0.0,0.02,1,93
4.1.4 Request body,1,10,0.5,0.07,0.02,0.01,1,93
"Both request and response bodies are represented by the Body field, which is an",0,9,0.21,0.14,0.01,0.0,0,93
io.ReadCloser interface. In turn the Body field consists of a,0,9,0.3,0.14,0.0,0.0,1,93
Reader interface and a,0,9,0.21,0.65,0.0,0.0,1,93
Closer interface. A Reader,0,9,0.3,0.14,0.0,0.0,1,93
Read method that takes in a slice,0,9,0.21,0.57,0.0,0.0,1,93
is an interface that has a,0,9,0.21,0.37,0.0,0.0,1,93
Closer is an,0,9,0.21,0.74,0.0,0.0,1,93
of bytes and returns the number of bytes read and an optional error. A,0,9,0.3,0.14,0.0,0.0,1,93
interface that has a Close,0,9,0.3,0.14,0.0,0.0,1,93
"method, which takes in nothing and returns an optional",0,9,0.21,0.37,0.0,0.0,1,93
Read and Close methods of,0,9,0.21,0.61,0.0,0.0,1,93
error. What this really means is that you can call on the,0,9,0.3,0.14,0.0,0.0,1,93
"the Body field. To read the contents of a request body, you can call the Body field’s",0,9,0.21,0.14,0.0,0.0,0,93
"Read method, as shown in this listing.",0,9,0.3,0.14,0.0,0.03,1,93
Listing 4.3 Reading data from a request body,1,9,0.48,0.17,0.03,0.02,1,93
package main,0,7,0.26,0.14,0.02,0.02,1,93
import (,0,7,0.26,0.14,0.02,0.0,1,93
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,93
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,93
),0,7,0.17,0.14,0.0,0.02,0,93
"func body(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,93
len := r.ContentLength,0,7,0.26,0.14,0.0,0.0,1,93
"body := make([]byte, len)",0,7,0.26,0.14,0.0,0.0,1,93
r.Body.Read(body),0,7,0.26,0.14,0.0,0.0,1,93
"fmt.Fprintln(w, string(body))",0,7,0.26,0.14,0.0,0.0,1,93
},0,7,0.17,0.14,0.0,0.02,0,93
func main() {,0,7,0.26,0.14,0.02,0.0,1,93
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,93
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,93
},0,7,0.17,0.14,0.0,0.0,0,93
"http.HandleFunc(""/body"", body)",0,7,0.26,0.14,0.0,0.0,1,93
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,93
},0,7,0.17,0.14,0.0,0.02,0,93
Notice that you first need to determine how much to read; then you create a byte,0,9,0.21,0.14,0.02,0.0,0,93
Read method to read into the byte array.,0,9,0.21,0.47,0.0,0.0,1,93
"array of the content length, and call the",0,9,0.3,0.14,0.0,0.0,1,93
74,1,9,0.39,0.06,0.0,0.0,0,94
Processing requests,1,9,0.39,0.42,0.0,0.0,1,94
C 4,1,7,0.26,0.34,0.0,0.0,0,94
HAPTER,1,6,0.33,0.35,0.0,0.03,1,94
"If you want to test this, you’ll need to send a",0,9,0.3,0.15,0.03,0.0,1,94
POST request to the server with the,0,9,0.21,0.53,0.0,0.0,1,94
"appropriate message body, because",0,9,0.3,0.13,0.0,0.0,1,94
GET requests don’t have message bodies. Remem-,0,9,0.21,0.42,0.0,0.0,1,94
ber that you can’t normally send,0,9,0.3,0.13,0.0,0.0,1,94
POST requests through a browser—you need an,0,9,0.21,0.42,0.0,0.0,1,94
HTTP client. There are plenty of choices. You can use a desktop graphical,0,9,0.21,0.13,0.0,0.0,0,94
HTTP cli-,0,9,0.21,0.75,0.0,0.0,1,94
"ent, a browser plug-in or extension, or even c",0,9,0.3,0.13,0.0,0.0,1,94
URL from the command line.,0,9,0.21,0.5,0.0,0.0,1,94
Type this on your console:,0,9,0.3,0.15,0.0,0.01,1,94
"$ curl -id ""first_name=sausheong&last_name=chang"" 127.0.0.1:8080/body",0,7,0.26,0.13,0.01,0.01,1,94
"c URL will display the full, raw",0,9,0.3,0.13,0.01,0.0,1,94
"HTTP response, with the",0,9,0.21,0.37,0.0,0.0,1,94
HTTP body after the blank line.,0,9,0.21,0.57,0.0,0.0,1,94
This is what you should be getting:,0,9,0.3,0.13,0.0,0.01,1,94
HTTP/1.1 200 OK,0,7,0.26,0.13,0.01,0.0,1,94
"Date: Tue, 13 Jan 2015 16:11:58 GMT",0,7,0.26,0.13,0.0,0.0,1,94
Content-Length: 37,0,7,0.26,0.13,0.0,0.0,1,94
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.13,0.0,0.01,1,94
first_name=sausheong&last_name=chang,0,7,0.26,0.13,0.01,0.02,1,94
"Normally you wouldn’t need to read the raw form of the body, though, because Go pro-",0,9,0.21,0.13,0.02,0.0,0,94
vides methods such as FormValue,0,9,0.3,0.13,0.0,0.0,1,94
and FormFile to extract the values from a,0,9,0.21,0.39,0.0,0.0,1,94
POST form.,0,9,0.21,0.73,0.0,0.01,1,94
4.2 HTML forms and Go,1,12,0.54,0.06,0.01,0.01,1,94
Before we delve into getting form data from a,0,9,0.3,0.13,0.01,0.0,1,94
"POST request, let’s take a deeper look at",0,9,0.21,0.5,0.0,0.0,1,94
"forms. Most often,",0,9,0.3,0.18,0.0,0.0,1,94
requests come in the form (pun intended) of an,0,9,0.21,0.39,0.0,0.0,1,94
HTML,0,9,0.3,0.13,0.0,0.0,1,94
POST,0,9,0.21,0.35,0.0,0.0,1,94
HTML form and often look like this:,0,9,0.3,0.13,0.0,0.01,1,94
"<form action=""/process"" method=""post"">",0,7,0.26,0.13,0.01,0.0,1,94
"<input type=""text"" name=""first_name""/>",0,7,0.26,0.13,0.0,0.0,1,94
"<input type=""text"" name=""last_name""/>",0,7,0.26,0.13,0.0,0.0,1,94
"<input type=""submit""/>",0,7,0.26,0.13,0.0,0.0,1,94
</form>,0,7,0.26,0.13,0.0,0.02,1,94
"Within the <form> tag, we place a number of",0,9,0.3,0.13,0.02,0.0,1,94
HTML form elements including text,0,9,0.21,0.52,0.0,0.0,1,94
"input, text area, radio buttons, checkboxes, and file uploads. These elements allow",0,9,0.21,0.13,0.0,0.0,0,94
users to enter data to be submitted to the server. Data is submitted to the server when,0,9,0.21,0.13,0.0,0.0,0,94
the user clicks a button or somehow triggers the form submission.,0,9,0.3,0.13,0.0,0.0,1,94
We know the data is sent to the server through an,0,9,0.3,0.15,0.0,0.0,1,94
HTTP POST request and is placed,0,9,0.21,0.56,0.0,0.0,1,94
in the body of the request. But how is the data formatted? The,0,9,0.3,0.13,0.0,0.0,1,94
HTML form data is always,0,9,0.21,0.62,0.0,0.0,1,94
"sent as name-value pairs, but how are these name-value pairs formatted in the",0,9,0.21,0.13,0.0,0.0,0,94
POST,0,9,0.21,0.78,0.0,0.0,1,94
body? It’s important for us to know this because as we receive the,0,9,0.3,0.13,0.0,0.0,1,94
POST request from the,0,9,0.21,0.64,0.0,0.0,1,94
"browser, we need to be able to parse the data and extract the name-value pairs.",0,9,0.21,0.13,0.0,0.0,0,94
The format of the name-value pairs sent through a,0,9,0.3,0.15,0.0,0.0,1,94
POST request is specified by the,0,9,0.21,0.57,0.0,0.0,1,94
enctype attribute like this:,0,9,0.21,0.6,0.0,0.0,1,94
content type of the,0,9,0.3,0.13,0.0,0.0,1,94
form. This is defined using the,0,9,0.21,0.34,0.0,0.0,1,94
HTML,0,9,0.21,0.29,0.0,0.01,1,94
"<form action=""/process"" method=""post"" enctype=""application/x-www-",0,7,0.26,0.13,0.01,0.0,1,94
➥,0,10,0.23,0.13,0.0,0.0,0,94
"form-urlencoded"">",0,7,0.26,0.15,0.0,0.0,1,94
"<input type=""text"" name=""first_name""/>",0,7,0.26,0.13,0.0,0.0,1,94
"<input type=""text"" name=""last_name""/>",0,7,0.26,0.13,0.0,0.0,1,94
"<input type=""submit""/>",0,7,0.26,0.13,0.0,0.0,1,94
75,1,9,0.3,0.83,0.0,0.0,0,95
HTML forms and Go,1,9,0.39,0.39,0.0,0.03,1,95
The default value for enctype,0,9,0.3,0.14,0.03,0.0,1,95
is application/x-www-form-urlencoded,0,9,0.21,0.39,0.0,0.0,1,95
. Browsers are,0,9,0.21,0.73,0.0,0.0,1,95
application/x-www-form-urlencoded,0,9,0.21,0.38,0.0,0.0,1,95
and multipart/,0,9,0.21,0.71,0.0,0.0,1,95
required to support at least,0,9,0.3,0.14,0.0,0.0,1,95
form-data ( HTML 5 also supports a,0,9,0.3,0.14,0.0,0.0,1,95
text/plain value).,0,9,0.21,0.43,0.0,0.0,1,95
If we set enctype to,0,9,0.3,0.17,0.0,0.0,1,95
application/x-www-form-urlencoded,0,9,0.21,0.37,0.0,0.0,1,95
", the browser will",0,9,0.21,0.69,0.0,0.0,1,95
"encode in the HTML form data a long query string, with the name-value pairs sepa-",0,9,0.21,0.14,0.0,0.0,0,95
rated by an ampersand (&) and the name separated from the values by an equal sign,0,9,0.21,0.14,0.0,0.0,0,95
(=). That’s the same as,0,9,0.3,0.14,0.0,0.0,1,95
"URL encoding, hence the name (see chapter 1). In other",0,9,0.21,0.35,0.0,0.0,1,95
"words, the HTTP body will look something like this:",0,9,0.3,0.14,0.0,0.02,1,95
first_name=sau%20sheong&last_name=chang,0,7,0.26,0.14,0.02,0.02,1,95
If you set enctype to multipart/form-data,0,9,0.3,0.14,0.02,0.0,1,95
", each name-value pair will be converted",0,9,0.21,0.51,0.0,0.0,1,95
"into a MIME message part, each with its own content type and content disposition.",0,9,0.21,0.14,0.0,0.0,0,95
Our form data will now look something like this:,0,9,0.3,0.14,0.0,0.01,1,95
------WebKitFormBoundaryMPNjKpeO9cLiocMw,0,7,0.26,0.14,0.01,0.0,1,95
"Content-Disposition: form-data; name=""first_name""",0,7,0.26,0.14,0.0,0.02,1,95
sau sheong,0,7,0.26,0.14,0.02,0.0,1,95
------WebKitFormBoundaryMPNjKpeO9cLiocMw,0,7,0.26,0.14,0.0,0.0,1,95
"Content-Disposition: form-data; name=""last_name""",0,7,0.26,0.14,0.0,0.02,1,95
chang,0,7,0.26,0.14,0.02,0.0,1,95
------WebKitFormBoundaryMPNjKpeO9cLiocMw--,0,7,0.26,0.14,0.0,0.02,1,95
"When would you use one or the other? If you’re sending simple text data, the",0,9,0.21,0.14,0.02,0.0,0,95
URL,0,9,0.12,0.81,0.0,0.01,0,95
encoded form is better—it’s simpler and more efficient and less processing is needed.,0,9,0.21,0.14,0.01,0.0,0,95
"If you’re sending large amounts of data, such as uploading files, the multipart-",0,9,0.21,0.14,0.0,0.0,0,95
MIME,0,9,0.21,0.8,0.0,0.01,1,95
form is better. You can even specify that you want to do Base64 encoding to send,0,9,0.21,0.14,0.01,0.0,0,95
binary data as text.,0,9,0.3,0.14,0.0,0.0,1,95
So far we’ve only talked about,0,9,0.3,0.17,0.0,0.0,1,95
POST requests—what about,0,9,0.21,0.44,0.0,0.0,1,95
GET requests in an,0,9,0.21,0.68,0.0,0.0,1,95
HTML form? HTML allows the method attribute to be either,0,9,0.3,0.14,0.0,0.0,1,95
"POST or GET , so this is",0,9,0.21,0.65,0.0,0.0,1,95
also a valid format:,0,9,0.3,0.14,0.0,0.01,1,95
"<form action=""/process"" method=""get"">",0,7,0.26,0.14,0.01,0.0,1,95
"<input type=""text"" name=""first_name""/>",0,7,0.26,0.14,0.0,0.0,1,95
"<input type=""text"" name=""last_name""/>",0,7,0.26,0.14,0.0,0.0,1,95
"<input type=""submit""/>",0,7,0.26,0.14,0.0,0.0,1,95
</form>,0,7,0.26,0.14,0.0,0.02,1,95
"In this case, there’s no request body (",0,9,0.3,0.14,0.02,0.0,1,95
"GET requests have no request body), and all the",0,9,0.21,0.45,0.0,0.0,1,95
data is set in the URL as name-value pairs.,0,9,0.3,0.14,0.0,0.0,1,95
Now that you know how data is sent from an,0,9,0.3,0.17,0.0,0.0,1,95
"HTML form to the server, let’s go back",0,9,0.21,0.53,0.0,0.0,1,95
to the server and see how you can use net/http to process the request.,0,9,0.3,0.14,0.0,0.02,1,95
4.2.1 Form,1,10,0.5,0.07,0.02,0.01,1,95
"In the previous sections, we talked about extracting data from the",0,9,0.3,0.14,0.01,0.0,1,95
URL and the body,0,9,0.21,0.69,0.0,0.0,1,95
"in the raw form, which requires us to parse the data ourselves. In fact, we normally",0,9,0.21,0.14,0.0,0.0,0,95
76,1,9,0.39,0.06,0.0,0.0,0,96
Processing requests,1,9,0.39,0.42,0.0,0.0,1,96
C 4,1,7,0.26,0.34,0.0,0.0,0,96
HAPTER,1,6,0.33,0.35,0.0,0.03,1,96
"don’t need to, because the net/http library includes a rather comprehensive set of",0,9,0.21,0.13,0.03,0.0,0,96
functions that normally provides us with all we need. Let’s talk about each in turn.,0,9,0.21,0.13,0.0,0.0,0,96
The functions in Request,0,9,0.3,0.15,0.0,0.0,1,96
that allow us to extract data from the,0,9,0.21,0.37,0.0,0.0,1,96
URL and/or the,0,9,0.21,0.69,0.0,0.0,1,96
"body revolve around the Form, PostForm, and MultipartForm fields. The data is in the",0,9,0.21,0.13,0.0,0.0,0,96
form of key-value pairs (which is what we normally get from a,0,9,0.3,0.13,0.0,0.0,1,96
POST request anyway).,0,9,0.21,0.64,0.0,0.0,1,96
The general algorithm is:,0,9,0.3,0.13,0.0,0.01,1,96
Call ParseForm or ParseMultipartForm,0,9,0.3,0.18,0.01,0.0,1,96
to parse the request.,0,9,0.21,0.51,0.0,0.0,1,96
1,1,6,0.33,0.15,0.0,0.01,0,96
"Access the Form, PostForm, or MultipartForm field accordingly.",0,9,0.3,0.18,0.01,0.0,1,96
2,1,6,0.33,0.15,0.0,0.01,0,96
This listing shows parsing forms.,0,9,0.3,0.13,0.01,0.03,1,96
Listing 4.4 Parsing forms,1,9,0.48,0.15,0.03,0.02,1,96
package main,0,7,0.26,0.13,0.02,0.01,1,96
import (,0,7,0.26,0.13,0.01,0.0,1,96
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,96
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,96
),0,7,0.17,0.13,0.0,0.01,0,96
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,96
r.ParseForm(),0,7,0.26,0.13,0.0,0.0,1,96
"fmt.Fprintln(w, r.Form)",0,7,0.26,0.13,0.0,0.0,1,96
},0,7,0.17,0.13,0.0,0.01,0,96
func main() {,0,7,0.26,0.13,0.01,0.0,1,96
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,96
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,96
},0,7,0.17,0.13,0.0,0.0,0,96
"http.HandleFunc(""/process"", process)",0,7,0.26,0.13,0.0,0.0,1,96
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,96
},0,7,0.17,0.13,0.0,0.02,0,96
The focus of the server in listing 4.4 is on these two lines:,0,9,0.3,0.13,0.02,0.01,1,96
r.ParseForm(),0,7,0.26,0.13,0.01,0.0,1,96
"fmt.Fprintln(w, r.Form)",0,7,0.26,0.13,0.0,0.02,1,96
"ParseForm , and then",0,9,0.21,0.65,0.02,0.0,1,96
"As mentioned earlier, you need to first parse the request using",0,9,0.3,0.13,0.0,0.0,1,96
access the Form field.,0,9,0.3,0.13,0.0,0.0,1,96
"Let’s look at the client that’s going to call this server. You’ll create a simple, mini-",0,9,0.21,0.15,0.0,0.0,0,96
mal HTML form to send the request to the server. Place the code in a file named cli-,0,9,0.21,0.13,0.0,0.0,0,96
ent.html.,0,9,0.3,0.13,0.0,0.01,1,96
<html>,0,7,0.26,0.13,0.01,0.0,1,96
<head>,0,7,0.26,0.13,0.0,0.0,1,96
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />",0,7,0.26,0.13,0.0,0.0,1,96
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,96
</head>,0,7,0.26,0.13,0.0,0.0,1,96
<body>,0,7,0.26,0.13,0.0,0.0,1,96
<form action=http://127.0.0.1:8080/process?hello=world&thread=123,0,7,0.26,0.13,0.0,0.0,1,96
➥,0,10,0.23,0.13,0.0,0.0,0,96
"method=""post"" enctype=""application/x-www-form-urlencoded"">",0,7,0.26,0.19,0.0,0.0,1,96
77,1,9,0.3,0.83,0.0,0.0,0,97
HTML forms and Go,1,9,0.39,0.39,0.0,0.03,1,97
"<input type=""text"" name=""hello"" value=""sau sheong""/>",0,7,0.26,0.14,0.03,0.0,1,97
"<input type=""text"" name=""post"" value=""456""/>",0,7,0.26,0.14,0.0,0.0,1,97
"<input type=""submit""/>",0,7,0.26,0.14,0.0,0.0,1,97
</form>,0,7,0.26,0.14,0.0,0.0,1,97
</body>,0,7,0.26,0.14,0.0,0.0,1,97
</html>,0,7,0.26,0.14,0.0,0.02,1,97
"In this form, you are",0,9,0.3,0.14,0.02,0.01,1,97
Sending the URL http://localhost:8080/process?hello=world&thread=123 to,0,9,0.21,0.19,0.01,0.0,0,97
■,0,4,0.11,0.17,0.0,0.01,0,97
the server using the POST,0,9,0.3,0.19,0.01,0.0,1,97
method,0,9,0.21,0.4,0.0,0.01,1,97
application/x-www-,0,9,0.21,0.67,0.01,0.0,1,97
Specifying the content type (in the enctype field) to be,0,9,0.3,0.19,0.0,0.0,1,97
■,0,4,0.11,0.17,0.0,0.01,0,97
form-urlencoded,0,9,0.3,0.19,0.01,0.01,1,97
hello=sau sheong and post=456,0,9,0.21,0.54,0.01,0.0,1,97
Sending two HTML form key-value pairs—,0,9,0.3,0.19,0.0,0.0,1,97
—to,0,9,0.12,0.81,0.0,0.0,0,97
■,0,4,0.11,0.17,0.0,0.01,0,97
the server,0,9,0.3,0.19,0.01,0.01,1,97
hello . One of them is world,0,9,0.21,0.48,0.01,0.0,1,97
Note that you have two values for the key,0,9,0.3,0.14,0.0,0.0,1,97
in the URL and,0,9,0.21,0.72,0.0,0.0,1,97
the other is sau sheong in the,0,9,0.3,0.14,0.0,0.0,1,97
HTML form.,0,9,0.21,0.4,0.0,0.0,1,97
Open the client.html file directly in your browser (you don’t need to serve it out,0,9,0.21,0.17,0.0,0.0,0,97
from a web server—just running it locally on your browser is fine) and click the sub-,0,9,0.21,0.14,0.0,0.0,0,97
mit button. You’ll see the following in the browser:,0,9,0.3,0.14,0.0,0.01,1,97
map[thread:[123] hello:[sau sheong world] post:[456]],0,7,0.26,0.14,0.01,0.01,1,97
"Form struct in the POST request, after the request",0,9,0.21,0.44,0.01,0.0,1,97
This is the raw string version of the,0,9,0.3,0.14,0.0,0.0,1,97
has been parsed. The Form,0,9,0.3,0.14,0.0,0.0,1,97
"struct is a map, whose keys are strings and values are a slice",0,9,0.21,0.36,0.0,0.0,1,97
"of strings. Notice that the map isn’t sorted, so you might get a different sorting of the",0,9,0.21,0.14,0.0,0.0,0,97
"returned values. Nonetheless, what we get is the combination of the query values",0,9,0.21,0.14,0.0,0.0,0,97
hello=world and thread=123,0,9,0.3,0.14,0.0,0.0,1,97
hello=sau sheong and,0,9,0.21,0.64,0.0,0.0,1,97
as well as the form values,0,9,0.21,0.4,0.0,0.0,1,97
"post=456 . As you can see, the values are",0,9,0.3,0.14,0.0,0.0,1,97
sau,0,9,0.12,0.81,0.0,0.0,0,97
URL decoded (there’s a space between,0,9,0.21,0.49,0.0,0.0,1,97
and sheong ).,0,9,0.3,0.14,0.0,0.01,1,97
4.2.2 PostForm,1,10,0.5,0.07,0.01,0.01,1,97
"post , you can use",0,9,0.21,0.68,0.01,0.0,1,97
"Of course, if you only want to get the value to the key",0,9,0.3,0.14,0.0,0.0,1,97
"r.Form[""post""]",0,9,0.3,0.14,0.0,0.0,1,97
[456],0,9,0.21,0.66,0.0,0.0,1,97
", which will give you a map with one element:",0,9,0.21,0.28,0.0,0.0,1,97
. If the form and,0,9,0.21,0.71,0.0,0.0,1,97
"the URL have the same key, both of them will be placed in a slice, with the form value",0,9,0.21,0.14,0.0,0.0,0,97
always prioritized before the,0,9,0.3,0.14,0.0,0.0,1,97
URL value.,0,9,0.21,0.38,0.0,0.0,1,97
What if you need just the form key-value pairs and want to totally ignore the,0,9,0.21,0.17,0.0,0.0,0,97
URL,0,9,0.12,0.81,0.0,0.0,0,97
"key-value pairs? For that you can use the PostForm field, which provides key-value",0,9,0.21,0.14,0.0,0.0,0,97
r.Form to using,0,9,0.21,0.71,0.0,0.0,1,97
pairs only for the form and not the,0,9,0.3,0.14,0.0,0.0,1,97
URL . If you change from using,0,9,0.21,0.45,0.0,0.0,1,97
"r.PostForm in the code, this is what you get:",0,9,0.3,0.14,0.0,0.01,1,97
map[post:[456] hello:[sau sheong]],0,7,0.26,0.14,0.01,0.01,1,97
This example used application/x-www-form-urlencoded,0,9,0.3,0.14,0.01,0.0,1,97
for the content type. What,0,9,0.21,0.63,0.0,0.0,1,97
happens if you use multipart/form-data,0,9,0.3,0.14,0.0,0.0,1,97
? Make the change to the client,0,9,0.21,0.48,0.0,0.0,1,97
"HTML form,",0,9,0.21,0.74,0.0,0.0,1,97
switch back to using r.Form,0,9,0.3,0.14,0.0,0.0,1,97
", and let’s find out:",0,9,0.21,0.37,0.0,0.01,1,97
map[hello:[world] thread:[123]],0,7,0.26,0.14,0.01,0.0,1,97
78,1,9,0.39,0.06,0.0,0.0,0,98
Processing requests,1,9,0.39,0.42,0.0,0.0,1,98
C 4,1,7,0.26,0.34,0.0,0.0,0,98
HAPTER,1,6,0.33,0.35,0.0,0.03,1,98
What happened here? You only get the,0,9,0.3,0.13,0.03,0.0,1,98
URL query key-value pairs this time and not,0,9,0.21,0.46,0.0,0.0,1,98
application/,0,9,0.21,0.71,0.0,0.0,1,98
"the form key-value pairs, because the PostForm field only supports",0,9,0.3,0.13,0.0,0.0,1,98
x-www-form-urlencoded,0,9,0.3,0.13,0.0,0.0,1,98
". To get multipart key-value pairs from the body, you must use",0,9,0.21,0.33,0.0,0.0,1,98
the MultipartForm field.,0,9,0.3,0.13,0.0,0.02,1,98
4.2.3 MultipartForm,1,10,0.5,0.06,0.02,0.01,1,98
Instead of using the ParseForm,0,9,0.3,0.13,0.01,0.0,1,98
method on the Request,0,9,0.21,0.4,0.0,0.0,1,98
struct and then using the,0,9,0.21,0.61,0.0,0.0,1,98
ParseMultipartForm method and then,0,9,0.21,0.5,0.0,0.0,1,98
"Form field on the request, you have to use the",0,9,0.3,0.13,0.0,0.0,1,98
ParseMultipartForm method also,0,9,0.21,0.54,0.0,0.0,1,98
use the MultipartForm field on the request. The,0,9,0.3,0.13,0.0,0.0,1,98
calls the ParseForm method when necessary.,0,9,0.3,0.13,0.0,0.01,1,98
r.ParseMultipartForm(1024),0,7,0.26,0.13,0.01,0.0,1,98
"fmt.Fprintln(w, r.MultipartForm)",0,7,0.26,0.13,0.0,0.02,1,98
You need to tell the ParseMultipartForm,0,9,0.3,0.13,0.02,0.0,1,98
method how much data you want to extract,0,9,0.21,0.47,0.0,0.0,1,98
"from the multipart form, in bytes. Now let’s see what happens:",0,9,0.3,0.13,0.0,0.01,1,98
&{map[hello:[sau sheong] post:[456]] map[]},0,7,0.26,0.13,0.01,0.01,1,98
This time you see the form key-value pairs but not the,0,9,0.3,0.13,0.01,0.0,1,98
URL key-value pairs. This is,0,9,0.21,0.6,0.0,0.0,1,98
because the MultipartForm field,0,9,0.3,0.13,0.0,0.0,1,98
contains only the form key-value pairs. Notice that,0,9,0.21,0.41,0.0,0.0,1,98
the returned value is no longer a map but a struct that contains two maps. The first,0,9,0.21,0.13,0.0,0.0,0,98
map has keys that are strings and values that are slices of string; the second map is,0,9,0.21,0.13,0.0,0.0,0,98
"empty. It’s empty because it’s a map with keys that are strings but values that are files,",0,9,0.21,0.13,0.0,0.0,0,98
which we’re going to talk about in the next section.,0,9,0.3,0.13,0.0,0.0,1,98
Request that allows you to access the key-value,0,9,0.21,0.44,0.0,0.0,1,98
There’s one last set of methods on,0,9,0.3,0.15,0.0,0.0,1,98
FormValue method lets you access the key-value pairs just,0,9,0.21,0.36,0.0,0.0,1,98
pairs even more easily. The,0,9,0.3,0.13,0.0,0.0,1,98
"like in the Form field, except that it’s for a specific key and you don’t need to call the",0,9,0.21,0.13,0.0,0.0,0,98
ParseForm or ParseMultipartForm,0,9,0.3,0.13,0.0,0.0,1,98
FormValue method,0,9,0.21,0.67,0.0,0.0,1,98
methods beforehand—the,0,9,0.21,0.43,0.0,0.0,1,98
does that for you.,0,9,0.3,0.13,0.0,0.0,1,98
"Taking our previous example, this means if you do this in your handler function:",0,9,0.21,0.15,0.0,0.01,0,98
"fmt.Fprintln(w, r.FormValue(""hello""))",0,7,0.26,0.13,0.01,0.01,1,98
enctype attribute to application/x-www-form-urlencoded,0,9,0.21,0.33,0.01,0.0,1,98
and set the client’s form,0,9,0.3,0.13,0.0,0.0,1,98
",",0,9,0.12,0.82,0.0,0.0,0,98
you’ll get this:,0,9,0.3,0.13,0.0,0.01,1,98
sau sheong,0,7,0.26,0.13,0.01,0.01,1,98
That’s because the FormValue,0,9,0.3,0.13,0.01,0.0,1,98
"method retrieves only the first value, even though you",0,9,0.21,0.38,0.0,0.0,1,98
"Form struct. To prove this, let’s add another line below",0,9,0.21,0.38,0.0,0.0,1,98
actually have both values in the,0,9,0.3,0.13,0.0,0.0,1,98
"the earlier line of code, like this:",0,9,0.3,0.13,0.0,0.01,1,98
"fmt.Fprintln(w, r.FormValue(""hello""))",0,7,0.26,0.13,0.01,0.0,1,98
"fmt.Fprintln(w, r.Form)",0,7,0.26,0.13,0.0,0.02,1,98
This time you’ll see,0,9,0.3,0.13,0.02,0.01,1,98
sau sheong,0,7,0.26,0.13,0.01,0.0,1,98
map[post:[456] hello:[sau sheong world] thread:[123]],0,7,0.26,0.13,0.0,0.0,1,98
79,1,9,0.3,0.83,0.0,0.0,0,99
HTML forms and Go,1,9,0.39,0.39,0.0,0.03,1,99
"The PostFormValue method does the same thing, except that it’s for the PostForm",0,9,0.21,0.14,0.03,0.0,0,99
Post-,0,9,0.21,0.79,0.0,0.0,1,99
field instead of the Form field. Let’s make some changes to the code to use the,0,9,0.21,0.14,0.0,0.0,0,99
FormValue method:,0,9,0.3,0.14,0.0,0.01,1,99
"fmt.Fprintln(w, r.PostFormValue(""hello""))",0,7,0.26,0.14,0.01,0.0,1,99
"fmt.Fprintln(w, r.PostForm)",0,7,0.26,0.14,0.0,0.02,1,99
This time you get this instead:,0,9,0.3,0.14,0.02,0.01,1,99
sau sheong,0,7,0.26,0.14,0.01,0.0,1,99
map[hello:[sau sheong] post:[456]],0,7,0.26,0.14,0.0,0.02,1,99
"As you can see, you get only the form key-value pairs.",0,9,0.3,0.14,0.02,0.0,1,99
Both the FormValue and,0,9,0.3,0.17,0.0,0.0,1,99
PostFormValue methods call the,0,9,0.21,0.39,0.0,0.0,1,99
ParseMultipartForm,0,9,0.21,0.67,0.0,0.01,1,99
"method for you so you don’t need to call it yourself, but there’s a slightly confusing",0,9,0.21,0.14,0.01,0.0,0,99
gotcha that you should be careful with (at least as of Go 1.4). If you set the client,0,9,0.21,0.14,0.0,0.0,0,99
form’s enctype to multipart/form-data,0,9,0.3,0.14,0.0,0.0,1,99
and try to get the value using either the,0,9,0.21,0.49,0.0,0.0,1,99
FormValue or the PostFormValue,0,9,0.3,0.14,0.0,0.0,1,99
"method, you won’t be able to get it even though the",0,9,0.21,0.42,0.0,0.0,1,99
MultipartForm method has been called!,0,9,0.3,0.14,0.0,0.0,1,99
"To help clarify, let’s make changes to the server’s handler function again:",0,9,0.21,0.17,0.0,0.01,0,99
"fmt.Fprintln(w, ""(1)"", r.FormValue(""hello""))",0,7,0.26,0.14,0.01,0.0,1,99
"fmt.Fprintln(w, ""(2)"", r.PostFormValue(""hello""))",0,7,0.26,0.14,0.0,0.0,1,99
"fmt.Fprintln(w, ""(3)"", r.PostForm)",0,7,0.26,0.14,0.0,0.0,1,99
"fmt.Fprintln(w, ""(4)"", r.MultipartForm)",0,7,0.26,0.14,0.0,0.02,1,99
enctype set to multipart/form-data,0,9,0.21,0.5,0.02,0.0,1,99
Here’s the result from using our form with,0,9,0.3,0.14,0.0,0.0,1,99
:,0,9,0.12,0.8,0.0,0.01,0,99
(1) world,0,7,0.26,0.14,0.01,0.0,1,99
(2),0,7,0.17,0.14,0.0,0.0,0,99
(3) map[],0,7,0.26,0.14,0.0,0.0,1,99
(4) &{map[hello:[sau sheong] post:[456]] map[]},0,7,0.26,0.14,0.0,0.02,1,99
The first line in the results gives you the value for hello that’s found in the,0,9,0.21,0.14,0.02,0.0,0,99
URL and,0,9,0.21,0.77,0.0,0.0,1,99
"not the form. The second and third lines tell you why, because if you just take the",0,9,0.21,0.14,0.0,0.0,0,99
FormValue and PostForm-,0,9,0.21,0.63,0.0,0.0,1,99
"form key-value pairs, you get nothing. That’s because the",0,9,0.3,0.14,0.0,0.0,1,99
"Value methods correspond to the Form and PostForm fields, and not the Multipart-",0,9,0.21,0.14,0.0,0.0,0,99
ParseMultipartForm method,0,9,0.21,0.6,0.0,0.0,1,99
Form field. The last line in the results proves that the,0,9,0.3,0.14,0.0,0.0,1,99
was actually called—that’s why if you try to access the MultipartForm field you’ll get,0,9,0.21,0.14,0.0,0.0,0,99
the data there.,0,9,0.3,0.14,0.0,0.0,1,99
"We covered quite a bit in these sections, so let’s recap, in table 4.1, how these func-",0,9,0.21,0.17,0.0,0.0,0,99
tions are different. The table shows the methods that should be called if you’re look-,0,9,0.21,0.14,0.0,0.0,0,99
ing for values in the corresponding fields. The table also shows where the data comes,0,9,0.21,0.14,0.0,0.0,0,99
"from and what type of data you’ll get. For example, in the first row, if you’re looking",0,9,0.21,0.14,0.0,0.0,0,99
ParseForm method (either,0,9,0.21,0.62,0.0,0.0,1,99
"for data in the Form field, you should be calling the",0,9,0.3,0.14,0.0,0.0,1,99
directly or indirectly). You’ll then get both the,0,9,0.3,0.14,0.0,0.0,1,99
URL data and the form data from the,0,9,0.21,0.53,0.0,0.0,1,99
request and the data will be,0,9,0.3,0.14,0.0,0.0,1,99
URL -encoded. Undoubtedly the naming convention,0,9,0.21,0.4,0.0,0.0,1,99
leaves much to be desired!,0,9,0.3,0.14,0.0,0.0,1,99
80,1,9,0.39,0.06,0.0,0.0,0,100
Processing requests,1,9,0.39,0.42,0.0,0.0,1,100
C 4,1,7,0.26,0.34,0.0,0.0,0,100
HAPTER,1,6,0.33,0.35,0.0,0.03,1,100
"Table 4.1 Comparing Form, PostForm, and MultipartForm fields",1,7,0.44,0.13,0.03,0.02,1,100
Key-value pairs from,1,7,0.35,0.46,0.02,0.0,1,100
Content type,1,7,0.35,0.68,0.0,0.02,1,100
Field Should call method,1,7,0.44,0.17,0.02,0.0,1,100
URL Form URL encoded,1,7,0.35,0.46,0.0,0.0,1,100
Multipart,1,7,0.35,0.74,0.0,0.02,1,100
Form ParseForm,0,7,0.26,0.14,0.02,0.0,1,100
✓ ✓ ✓,0,7,0.17,0.47,0.0,0.01,1,100
✓ ✓,0,7,0.08,0.57,0.01,0.0,0,100
PostForm Form,0,7,0.26,0.14,0.0,0.01,1,100
MultipartForm ParseMultipartForm,0,7,0.26,0.14,0.01,0.0,1,100
✓,0,7,0.08,0.57,0.0,0.0,0,100
✓,0,7,0.08,0.77,0.0,0.01,0,100
✓ ✓ ✓,0,7,0.17,0.47,0.01,0.0,1,100
FormValue NA,0,7,0.26,0.14,0.0,0.01,1,100
✓ ✓,0,7,0.08,0.57,0.01,0.0,0,100
PostFormValue NA,0,7,0.26,0.14,0.0,0.03,1,100
4.2.4 Files,1,10,0.5,0.06,0.03,0.01,1,100
multipart/form-data is for uploading files. This,0,9,0.21,0.42,0.01,0.0,1,100
Probably the most common use for,0,9,0.3,0.13,0.0,0.0,1,100
mostly means the file HTML,0,9,0.3,0.13,0.0,0.0,1,100
"tag, so let’s make some changes, shown in bold in the fol-",0,9,0.21,0.35,0.0,0.0,1,100
"lowing listing, to our client form.",0,9,0.3,0.13,0.0,0.03,1,100
Listing 4.5 Uploading files,1,9,0.48,0.15,0.03,0.02,1,100
<html>,0,7,0.26,0.13,0.02,0.0,1,100
<head>,0,7,0.26,0.13,0.0,0.0,1,100
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />",0,7,0.26,0.13,0.0,0.0,1,100
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,100
</head>,0,7,0.26,0.13,0.0,0.0,1,100
<body>,0,7,0.26,0.13,0.0,0.0,1,100
"<form action=""http://localhost:8080/process?hello=world&thread=123""",0,7,0.26,0.13,0.0,0.0,1,100
"method=""post"" enctype=""multipart/form-data""",1,7,0.44,0.15,0.0,0.0,1,100
>,0,7,0.08,0.54,0.0,0.0,0,100
"<input type=""text"" name=""hello"" value=""sau sheong""/>",0,7,0.26,0.13,0.0,0.0,1,100
"<input type=""text"" name=""post"" value=""456""/>",0,7,0.26,0.13,0.0,0.0,1,100
"<input type=""file"" name=""uploaded"">",1,7,0.44,0.18,0.0,0.0,1,100
"<input type=""submit"">",0,7,0.26,0.13,0.0,0.0,1,100
</form>,0,7,0.26,0.13,0.0,0.0,1,100
</body>,0,7,0.26,0.13,0.0,0.0,1,100
</html>,0,7,0.26,0.13,0.0,0.02,1,100
"To receive files, we’ll make changes, shown next, in our handler function.",0,9,0.21,0.13,0.02,0.03,0,100
Listing 4.6 Receiving uploaded files using the MultipartForm field,1,9,0.48,0.15,0.03,0.02,1,100
package main,0,7,0.26,0.13,0.02,0.02,1,100
import (,0,7,0.26,0.13,0.02,0.0,1,100
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,100
"""io/ioutil""",0,7,0.26,0.13,0.0,0.0,1,100
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,100
),0,7,0.17,0.13,0.0,0.02,0,100
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,100
r.ParseMultipartForm(1024),0,7,0.26,0.13,0.0,0.0,1,100
81,1,9,0.3,0.83,0.0,0.0,0,101
HTML forms and Go,1,9,0.39,0.39,0.0,0.03,1,101
"fileHeader := r.MultipartForm.File[""uploaded""][0]",0,7,0.26,0.14,0.03,0.0,1,101
"file, err := fileHeader.Open()",0,7,0.26,0.14,0.0,0.0,1,101
if err == nil {,0,7,0.26,0.14,0.0,0.0,1,101
"data, err := ioutil.ReadAll(file)",0,7,0.26,0.14,0.0,0.0,1,101
if err == nil {,0,7,0.26,0.14,0.0,0.0,1,101
"fmt.Fprintln(w, string(data))",0,7,0.26,0.14,0.0,0.0,1,101
},0,7,0.17,0.14,0.0,0.0,0,101
},0,7,0.17,0.14,0.0,0.0,0,101
},0,7,0.17,0.14,0.0,0.02,0,101
func main() {,0,7,0.26,0.14,0.02,0.0,1,101
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,101
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,101
},0,7,0.17,0.14,0.0,0.0,0,101
"http.HandleFunc(""/process"", process)",0,7,0.26,0.14,0.0,0.0,1,101
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,101
},0,7,0.17,0.14,0.0,0.02,0,101
ParseMultipartForm method first. After that,0,9,0.21,0.48,0.02,0.0,1,101
"As mentioned earlier, you need to call the",0,9,0.3,0.14,0.0,0.0,1,101
Open,0,9,0.21,0.8,0.0,0.0,1,101
you get a FileHeader from the File field of the MultipartForm field and call its,0,9,0.21,0.14,0.0,0.0,0,101
"method to get the file. If you upload a text file and send it across to the server, the han-",0,9,0.21,0.14,0.0,0.0,0,101
"dler will get the file, read it into a byte array, and then print it out to the browser.",0,9,0.21,0.14,0.0,0.0,0,101
As with the FormValue and,0,9,0.3,0.17,0.0,0.0,1,101
"PostFormValue methods, there’s a shorter way of get-",0,9,0.21,0.4,0.0,0.0,1,101
"FormFile method, shown in the following listing. The",0,9,0.21,0.4,0.0,0.0,1,101
ting an uploaded file using the,0,9,0.3,0.14,0.0,0.0,1,101
"FormFile method returns the first value given the key, so this approach is normally",0,9,0.21,0.14,0.0,0.0,0,101
faster if you have only one file to be uploaded.,0,9,0.3,0.14,0.0,0.03,1,101
Listing 4.7 Retrieving uploaded files using FormFile,1,9,0.48,0.17,0.03,0.02,1,101
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,101
"file, _, err := r.FormFile(""uploaded"")",0,7,0.26,0.14,0.0,0.0,1,101
if err == nil {,0,7,0.26,0.14,0.0,0.0,1,101
"data, err := ioutil.ReadAll(file)",0,7,0.26,0.14,0.0,0.0,1,101
if err == nil {,0,7,0.26,0.14,0.0,0.0,1,101
"fmt.Fprintln(w, string(data))",0,7,0.26,0.14,0.0,0.0,1,101
},0,7,0.17,0.14,0.0,0.0,0,101
},0,7,0.17,0.14,0.0,0.0,0,101
},0,7,0.17,0.14,0.0,0.02,0,101
"ParseMultipartForm method, and the",0,9,0.21,0.53,0.02,0.0,1,101
"As you can see, you no longer have to call the",0,9,0.3,0.14,0.0,0.0,1,101
FormFile method returns both the file and the file header at the same time. You sim-,0,9,0.21,0.14,0.0,0.0,0,101
ply need to process the file that’s returned.,0,9,0.3,0.14,0.0,0.02,1,101
4.2.5 Processing POST requests with JSON body,1,10,0.5,0.07,0.02,0.01,1,101
So far in our discussion we’ve focused on name-value pairs in the request body. This is,0,9,0.21,0.14,0.01,0.0,0,101
because we’ve been focusing on,0,9,0.3,0.14,0.0,0.0,1,101
HTML forms only. But not all,0,9,0.21,0.41,0.0,0.0,1,101
POST requests will come,0,9,0.21,0.65,0.0,0.0,1,101
from HTML forms. Sending,0,9,0.3,0.14,0.0,0.0,1,101
POST requests is increasingly common with client libraries,0,9,0.21,0.37,0.0,0.0,1,101
"such as JQ uery as well as client-side frameworks such as Angular or Ember, or even the",0,9,0.21,0.14,0.0,0.0,0,101
older Adobe Flash or Microsoft Silverlight technologies.,0,9,0.3,0.14,0.0,0.0,1,101
82,1,9,0.39,0.06,0.0,0.0,0,102
Processing requests,1,9,0.39,0.42,0.0,0.0,1,102
C 4,1,7,0.26,0.34,0.0,0.0,0,102
HAPTER,1,6,0.33,0.35,0.0,0.03,1,102
If you’re trying to get the,0,9,0.3,0.15,0.03,0.0,1,102
JSON data from a POST request sent by an Angular client,0,9,0.21,0.36,0.0,0.0,1,102
and you’re calling the ParseForm,0,9,0.3,0.13,0.0,0.0,1,102
"method to get the data, you won’t be able to. At the",0,9,0.21,0.4,0.0,0.0,1,102
"same time, other JavaScript libraries like",0,9,0.3,0.13,0.0,0.0,1,102
JQ uery allow you to do so. What gives?,0,9,0.21,0.46,0.0,0.0,1,102
Client frameworks encode their,0,9,0.3,0.15,0.0,0.0,1,102
requests differently. uery encodes,0,9,0.21,0.47,0.0,0.0,1,102
POST,0,9,0.21,0.43,0.0,0.0,1,102
JQ POST,0,9,0.21,0.65,0.0,0.0,1,102
application/x-www-form-urlencoded,0,9,0.21,0.42,0.0,0.0,1,102
requests like an HTML form with,0,9,0.3,0.13,0.0,0.0,1,102
"(that is, it",0,9,0.21,0.74,0.0,0.0,1,102
Content-Type to application/x-www-form-urlencoded,0,9,0.21,0.34,0.0,0.0,1,102
sets the request header,0,9,0.3,0.13,0.0,0.0,1,102
);,0,9,0.12,0.81,0.0,0.0,0,102
application/json . Go’s,0,9,0.21,0.43,0.0,0.0,1,102
ParseForm method only,0,9,0.21,0.63,0.0,0.0,1,102
Angular encodes POST requests with,0,9,0.3,0.13,0.0,0.0,1,102
application/json . If you call the,1,9,0.39,0.44,0.0,0.0,1,102
ParseForm,0,9,0.21,0.74,0.0,0.0,1,102
parses forms and so doesn’t accept,0,9,0.3,0.13,0.0,0.0,1,102
"method, you won’t get any data at all!",0,9,0.3,0.13,0.0,0.0,1,102
The problem doesn’t lie with the implementation of any of the libraries. It lies in,0,9,0.21,0.15,0.0,0.0,0,102
the lack of sufficient documentation (although there will arguably never be enough,0,9,0.21,0.13,0.0,0.0,0,102
documentation) and the programmer making certain assumptions based on their,0,9,0.21,0.13,0.0,0.0,0,102
dependency on frameworks.,0,9,0.3,0.13,0.0,0.0,1,102
Frameworks help programmers by hiding the underlying complexities and imple-,0,9,0.21,0.15,0.0,0.0,0,102
mentation details. As a programmer you should be using frameworks. But it’s also,0,9,0.21,0.13,0.0,0.0,0,102
important to understand how things work and what the framework simplifies for you,0,9,0.21,0.13,0.0,0.0,0,102
because eventually there will be cases where the framework’s seams show at the joints.,0,9,0.21,0.13,0.0,0.0,0,102
We’ve covered quite a lot on processing requests. Now let’s look at sending,0,9,0.21,0.15,0.0,0.0,0,102
responses to the user.,0,9,0.3,0.13,0.0,0.01,1,102
4.3 ResponseWriter,1,12,0.54,0.06,0.01,0.01,1,102
If you were thinking that sending a response to the client would involve creating a,0,9,0.21,0.13,0.01,0.0,0,102
"Response struct, setting up the data in it, and sending it out, then you’d be wrong.",0,9,0.21,0.13,0.0,0.0,0,102
The correct interface to use when sending a response from the server to the client is,0,9,0.21,0.13,0.0,0.0,0,102
ResponseWriter .,0,9,0.3,0.13,0.0,0.0,1,102
ResponseWriter is an interface that a handler uses to create an,0,9,0.3,0.15,0.0,0.0,1,102
HTTP response.,0,9,0.21,0.7,0.0,0.0,1,102
ResponseWriter is the nonexported struct,0,9,0.21,0.43,0.0,0.0,1,102
The actual struct backing up,0,9,0.3,0.13,0.0,0.0,1,102
"http.response . Because it’s nonexported, you can’t use it directly; you can only use it",0,9,0.21,0.13,0.0,0.0,0,102
through the ResponseWriter,0,9,0.3,0.13,0.0,0.0,1,102
interface.,0,9,0.21,0.37,0.0,0.03,1,102
Why do we pass ResponseWriter into ServeHTTP by value?,1,10,0.5,0.15,0.03,0.01,1,102
"Having read the earlier part of this chapter, you might wonder why the ServeHTTP func-",0,9,0.21,0.15,0.01,0.0,0,102
tion takes two parameters—the,0,9,0.3,0.15,0.0,0.0,1,102
interface and a pointer to a,0,9,0.21,0.53,0.0,0.0,1,102
ResponseWriter,0,9,0.21,0.39,0.0,0.0,1,102
Request,0,9,0.21,0.74,0.0,0.0,1,102
struct. The reason why it’s a pointer to,0,9,0.3,0.15,0.0,0.0,1,102
Request is simple: changes to,0,9,0.21,0.46,0.0,0.0,1,102
Request by,0,9,0.21,0.71,0.0,0.0,1,102
"the handler need to be visible to the server, so we’re only passing it by reference in-",0,9,0.21,0.15,0.0,0.0,0,102
stead of by value. But why are we passing in a,0,9,0.3,0.15,0.0,0.0,1,102
ResponseWriter by value? The server,0,9,0.21,0.51,0.0,0.0,1,102
needs to know the changes to,0,9,0.3,0.15,0.0,0.0,1,102
"ResponseWriter too, doesn’t it?",0,9,0.21,0.39,0.0,0.01,1,102
"If you dig into the net/http library code, you’ll find that",0,9,0.3,0.15,0.01,0.0,1,102
ResponseWriter is an interface,0,9,0.21,0.56,0.0,0.0,1,102
"to a nonexported struct response, and we’re passing the struct by reference (we’re",0,9,0.21,0.15,0.0,0.0,0,102
passing in a pointer to response) and not by value.,0,9,0.3,0.15,0.0,0.01,1,102
"In other words, both the parameters are passed in by reference; it’s just that the meth-",0,9,0.21,0.15,0.01,0.0,0,102
od signature takes a,0,9,0.3,0.15,0.0,0.0,1,102
"that’s an interface to a pointer to a struct, so",0,9,0.21,0.45,0.0,0.0,1,102
ResponseWriter,0,9,0.21,0.31,0.0,0.0,1,102
it looks as if it’s passed in by value.,0,9,0.3,0.15,0.0,0.0,1,102
83,1,9,0.3,0.83,0.0,0.0,0,103
ResponseWriter,1,9,0.39,0.41,0.0,0.03,1,103
The ResponseWriter interface has three methods:,0,9,0.3,0.14,0.03,0.01,1,103
Write,0,9,0.3,0.19,0.01,0.0,1,103
■,0,4,0.11,0.17,0.0,0.01,0,103
WriteHeader,0,9,0.3,0.19,0.01,0.0,1,103
■,0,4,0.11,0.17,0.0,0.01,0,103
Header,0,9,0.3,0.19,0.01,0.0,1,103
■,0,4,0.11,0.17,0.0,0.02,0,103
4.3.1 Writing to the ResponseWriter,1,10,0.5,0.07,0.02,0.01,1,103
"The Write method takes in an array of bytes, and this gets written into the body of the",0,9,0.21,0.14,0.01,0.0,0,103
"Write is called,",0,9,0.21,0.72,0.0,0.0,1,103
HTTP response. If the header doesn’t have a content type by the time,0,9,0.3,0.14,0.0,0.0,1,103
the first 512 bytes of the data are used to detect the content type. This listing shows,0,9,0.21,0.14,0.0,0.0,0,103
how to use the Write method.,0,9,0.3,0.14,0.0,0.03,1,103
Listing 4.8 Write to send responses to the client,1,9,0.48,0.17,0.03,0.02,1,103
package main,0,7,0.26,0.14,0.02,0.01,1,103
import (,0,7,0.26,0.14,0.01,0.0,1,103
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,103
),0,7,0.17,0.14,0.0,0.01,0,103
"func writeExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.01,0.0,1,103
str := `<html>,0,7,0.26,0.14,0.0,0.0,1,103
<head><title>Go Web Programming</title></head>,0,7,0.26,0.14,0.0,0.0,1,103
<body><h1>Hello World</h1></body>,0,7,0.26,0.14,0.0,0.0,1,103
</html>`,0,7,0.26,0.14,0.0,0.0,1,103
w.Write([]byte(str)),0,7,0.26,0.14,0.0,0.0,1,103
},0,7,0.17,0.14,0.0,0.01,0,103
func main() {,0,7,0.26,0.14,0.01,0.0,1,103
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,103
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,103
},0,7,0.17,0.14,0.0,0.0,0,103
"http.HandleFunc(""/write"", writeExample)",0,7,0.26,0.14,0.0,0.0,1,103
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,103
},0,7,0.17,0.14,0.0,0.02,0,103
In listing 4.8 you’re writing an,0,9,0.3,0.14,0.02,0.0,1,103
HTML string to the HTTP,0,9,0.21,0.43,0.0,0.0,1,103
response body using,0,9,0.21,0.66,0.0,0.0,1,103
ResponseWriter . You send this command through c,0,9,0.3,0.14,0.0,0.0,1,103
URL :,0,9,0.21,0.57,0.0,0.01,1,103
curl -i 127.0.0.1:8080/write,0,7,0.26,0.14,0.01,0.0,1,103
HTTP/1.1 200 OK,0,7,0.26,0.14,0.0,0.0,1,103
"Date: Tue, 13 Jan 2015 16:16:13 GMT",0,7,0.26,0.14,0.0,0.0,1,103
Content-Length: 95,0,7,0.26,0.14,0.0,0.0,1,103
Content-Type: text/html; charset=utf-8,0,7,0.26,0.14,0.0,0.02,1,103
<html>,0,7,0.26,0.14,0.02,0.0,1,103
<head><title>Go Web Programming</title></head>,0,7,0.26,0.14,0.0,0.0,1,103
<body><h1>Hello World</h1></body>,0,7,0.26,0.14,0.0,0.0,1,103
</html>,0,7,0.26,0.14,0.0,0.02,1,103
"Notice that you didn’t set the content type, but it was detected and set correctly.",0,9,0.21,0.14,0.02,0.0,0,103
84,1,9,0.39,0.06,0.0,0.0,0,104
Processing requests,1,9,0.39,0.42,0.0,0.0,1,104
C 4,1,7,0.26,0.34,0.0,0.0,0,104
HAPTER,1,6,0.33,0.35,0.0,0.03,1,104
The WriteHeader method’s name is a bit misleading. It doesn’t allow you to write,0,9,0.21,0.15,0.03,0.0,0,104
any headers (you use Header,0,9,0.3,0.13,0.0,0.0,1,104
"for that), but it takes an integer that represents the status",0,9,0.21,0.36,0.0,0.0,1,104
code of the HTTP response and writes it as the return status code for the,0,9,0.21,0.13,0.0,0.0,0,104
HTTP,0,9,0.21,0.78,0.0,0.0,1,104
"ResponseWriter , though",0,9,0.21,0.62,0.0,0.0,1,104
"response. After calling this method, you can still write to the",0,9,0.3,0.13,0.0,0.0,1,104
"you can no longer write to the header. If you don’t call this method, by default when",0,9,0.21,0.13,0.0,0.0,0,104
"you call the Write method, 200 OK will be sent as the response code.",0,9,0.3,0.13,0.0,0.0,1,104
The WriteHeader method is pretty useful if you want to return error codes. Let’s,0,9,0.21,0.15,0.0,0.0,0,104
say you’re writing an API,0,9,0.3,0.13,0.0,0.0,1,104
"and though you defined the interface, you haven’t fleshed it",0,9,0.21,0.33,0.0,0.0,1,104
"out, so you want to return a 501 Not Implemented status code. Let’s see how this",0,9,0.21,0.13,0.0,0.0,0,104
"works by adding a new handler function to our existing server, shown in the following",0,9,0.21,0.13,0.0,0.0,0,104
HandleFunc,0,9,0.21,0.73,0.0,0.0,1,104
listing. Remember to register this to DefaultServeMux by calling the,0,9,0.3,0.13,0.0,0.0,1,104
function!,0,9,0.3,0.13,0.0,0.03,1,104
WriteHeader,1,9,0.39,0.52,0.03,0.0,1,104
Listing 4.9 Writing headers to responses using,1,9,0.48,0.15,0.0,0.02,1,104
package main,0,7,0.26,0.13,0.02,0.02,1,104
import (,0,7,0.26,0.13,0.02,0.0,1,104
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,104
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,104
),0,7,0.17,0.13,0.0,0.02,0,104
"func writeExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,104
str := `<html>,0,7,0.26,0.13,0.0,0.0,1,104
<head><title>Go Web Programming</title></head>,0,7,0.26,0.13,0.0,0.0,1,104
<body><h1>Hello World</h1></body>,0,7,0.26,0.13,0.0,0.0,1,104
</html>`,0,7,0.26,0.13,0.0,0.0,1,104
w.Write([]byte(str)),0,7,0.26,0.13,0.0,0.0,1,104
},0,7,0.17,0.13,0.0,0.02,0,104
"func writeHeaderExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,104
w.WriteHeader(501),0,7,0.26,0.13,0.0,0.0,1,104
"fmt.Fprintln(w, ""No such service, try next door"")",0,7,0.26,0.13,0.0,0.0,1,104
},0,7,0.17,0.13,0.0,0.02,0,104
func main() {,0,7,0.26,0.13,0.02,0.0,1,104
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,104
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,104
},0,7,0.17,0.13,0.0,0.0,0,104
"http.HandleFunc(""/write"", writeExample)",0,7,0.26,0.13,0.0,0.0,1,104
"http.HandleFunc(""/writeheader"", writeHeaderExample)",0,7,0.26,0.13,0.0,0.0,1,104
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,104
},0,7,0.17,0.13,0.0,0.02,0,104
Call the URL through c URL,0,9,0.3,0.13,0.02,0.0,1,104
:,0,9,0.12,0.35,0.0,0.01,0,104
curl -i 127.0.0.1:8080/writeheader,0,7,0.26,0.13,0.01,0.0,1,104
HTTP/1.1 501 Not Implemented,0,7,0.26,0.13,0.0,0.0,1,104
"Date: Tue, 13 Jan 2015 16:20:29 GMT",0,7,0.26,0.13,0.0,0.0,1,104
Content-Length: 31,0,7,0.26,0.13,0.0,0.0,1,104
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.13,0.0,0.0,1,104
85,1,9,0.3,0.83,0.0,0.0,0,105
ResponseWriter,1,9,0.39,0.41,0.0,0.04,1,105
"No such service, try next door",0,7,0.26,0.14,0.04,0.02,1,105
Finally the Header method returns a map of headers that you can modify (refer to sec-,0,9,0.21,0.14,0.02,0.0,0,105
tion 4.1.3). The modified headers will be in the,0,9,0.3,0.14,0.0,0.0,1,105
HTTP response that’s sent to the client.,0,9,0.21,0.53,0.0,0.03,1,105
Listing 4.10 Writing headers to redirect the client,1,9,0.48,0.17,0.03,0.02,1,105
package main,0,7,0.26,0.14,0.02,0.02,1,105
import (,0,7,0.26,0.14,0.02,0.0,1,105
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,105
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,105
),0,7,0.17,0.14,0.0,0.02,0,105
"func writeExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,105
str := `<html>,0,7,0.26,0.14,0.0,0.0,1,105
<head><title>Go Web Programming</title></head>,0,7,0.26,0.14,0.0,0.0,1,105
<body><h1>Hello World</h1></body>,0,7,0.26,0.14,0.0,0.0,1,105
</html>`,0,7,0.26,0.14,0.0,0.0,1,105
w.Write([]byte(str)),0,7,0.26,0.14,0.0,0.0,1,105
},0,7,0.17,0.14,0.0,0.02,0,105
"func writeHeaderExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,105
w.WriteHeader(501),0,7,0.26,0.14,0.0,0.0,1,105
"fmt.Fprintln(w, ""No such service, try next door"")",0,7,0.26,0.14,0.0,0.0,1,105
},0,7,0.17,0.14,0.0,0.02,0,105
"func headerExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,105
"w.Header().Set(""Location"", ""http://google.com"")",0,7,0.26,0.14,0.0,0.0,1,105
w.WriteHeader(302),0,7,0.26,0.14,0.0,0.0,1,105
},0,7,0.17,0.14,0.0,0.02,0,105
func main() {,0,7,0.26,0.14,0.02,0.0,1,105
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,105
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,105
},0,7,0.17,0.14,0.0,0.0,0,105
"http.HandleFunc(""/write"", writeExample)",0,7,0.26,0.14,0.0,0.0,1,105
"http.HandleFunc(""/writeheader"", writeHeaderExample)",0,7,0.26,0.14,0.0,0.0,1,105
"http.HandleFunc(""/redirect"", headerExample)",0,7,0.26,0.14,0.0,0.0,1,105
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,105
},0,7,0.17,0.14,0.0,0.02,0,105
The previous listing shows how a redirect works—it’s simple to set the status code to 302,0,9,0.21,0.14,0.02,0.0,0,105
Location with the value of the location you want the user,0,9,0.21,0.39,0.0,0.0,1,105
and then add a header named,0,9,0.3,0.14,0.0,0.0,1,105
Location header before writing the sta-,0,9,0.21,0.52,0.0,0.0,1,105
to be redirected to. Note that you must add the,0,9,0.3,0.14,0.0,0.0,1,105
tus code because WriteHeader,0,9,0.3,0.14,0.0,0.0,1,105
prevents the header from being modified after it’s,0,9,0.21,0.41,0.0,0.0,1,105
called. When you call the,0,9,0.3,0.14,0.0,0.0,1,105
"URL from the browser, you’ll be redirected to Google.",0,9,0.21,0.35,0.0,0.0,1,105
"If you use c URL , you will see this:",0,9,0.3,0.17,0.0,0.01,1,105
curl -i 127.0.0.1:8080/redirect,0,7,0.26,0.14,0.01,0.0,1,105
HTTP/1.1 302 Found,0,7,0.26,0.14,0.0,0.0,1,105
Location: http://google.com,0,7,0.26,0.14,0.0,0.0,1,105
86,1,9,0.39,0.06,0.0,0.0,0,106
Processing requests,1,9,0.39,0.42,0.0,0.0,1,106
C 4,1,7,0.26,0.34,0.0,0.0,0,106
HAPTER,1,6,0.33,0.35,0.0,0.03,1,106
"Date: Tue, 13 Jan 2015 16:22:16 GMT",0,7,0.26,0.13,0.03,0.0,1,106
Content-Length: 0,0,7,0.26,0.13,0.0,0.0,1,106
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.13,0.0,0.02,1,106
"ResponseWriter directly. This time, you",0,9,0.21,0.5,0.02,0.0,1,106
Let’s look at one last example of how to use,0,9,0.3,0.13,0.0,0.0,1,106
"Post , the",0,9,0.21,0.75,0.0,0.0,1,106
want to return JSON to the client. Assuming that you have a struct named,0,9,0.21,0.13,0.0,0.0,0,106
following listing shows the handler function.,0,9,0.3,0.13,0.0,0.03,1,106
Listing 4.11 Writing JSON output,1,9,0.48,0.15,0.03,0.02,1,106
package main,0,7,0.26,0.13,0.02,0.01,1,106
import (,0,7,0.26,0.13,0.01,0.0,1,106
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,106
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,106
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,106
),0,7,0.17,0.13,0.0,0.01,0,106
type Post struct {,0,7,0.26,0.13,0.01,0.0,1,106
User    string,0,7,0.26,0.13,0.0,0.0,1,106
Threads []string,0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.01,0,106
"func writeExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,106
str := `<html>,0,7,0.26,0.13,0.0,0.0,1,106
<head><title>Go Web Programming</title></head>,0,7,0.26,0.13,0.0,0.0,1,106
<body><h1>Hello World</h1></body>,0,7,0.26,0.13,0.0,0.0,1,106
</html>`,0,7,0.26,0.13,0.0,0.0,1,106
w.Write([]byte(str)),0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.01,0,106
"func writeHeaderExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,106
w.WriteHeader(501),0,7,0.26,0.13,0.0,0.0,1,106
"fmt.Fprintln(w, ""No such service, try next door"")",0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.01,0,106
"func headerExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,106
"w.Header().Set(""Location"", ""http://google.com"")",0,7,0.26,0.13,0.0,0.0,1,106
w.WriteHeader(302),0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.01,0,106
"func jsonExample(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,106
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.13,0.0,0.0,1,106
post := &Post{,0,7,0.26,0.13,0.0,0.0,1,106
"User:    ""Sau Sheong"",",0,7,0.26,0.13,0.0,0.0,1,106
"Threads: []string{""first"", ""second"", ""third""},",0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.0,0,106
"json, _ := json.Marshal(post)",0,7,0.26,0.13,0.0,0.0,1,106
w.Write(json),0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.01,0,106
func main() {,0,7,0.26,0.13,0.01,0.0,1,106
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,106
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,106
},0,7,0.17,0.13,0.0,0.0,0,106
"http.HandleFunc(""/write"", writeExample)",0,7,0.26,0.13,0.0,0.0,1,106
"http.HandleFunc(""/writeheader"", writeHeaderExample)",0,7,0.26,0.13,0.0,0.0,1,106
87,1,9,0.3,0.83,0.0,0.0,0,107
Cookies,1,9,0.39,0.43,0.0,0.03,1,107
"http.HandleFunc(""/redirect"", headerExample)",0,7,0.26,0.14,0.03,0.0,1,107
"http.HandleFunc(""/json"", headerExample)",0,7,0.26,0.14,0.0,0.0,1,107
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,107
},0,7,0.17,0.14,0.0,0.02,0,107
Focus only on the ResponseWriter,0,9,0.3,0.14,0.02,0.0,1,107
. It’s okay if you don’t understand the,1,9,0.39,0.44,0.0,0.0,1,107
JSON bits,0,9,0.21,0.77,0.0,0.0,1,107
json is a JSON,0,9,0.21,0.72,0.0,0.0,1,107
yet—we’ll be covering JSON,0,9,0.3,0.14,0.0,0.0,1,107
in chapter 7. Just know that the variable,0,9,0.21,0.37,0.0,0.0,1,107
Post struct.,0,9,0.21,0.39,0.0,0.0,1,107
string that’s marshaled from a,0,9,0.3,0.14,0.0,0.0,1,107
application/json using,0,9,0.21,0.44,0.0,0.0,1,107
Header ; then you write,0,9,0.21,0.65,0.0,0.0,1,107
First you set the content type to,0,9,0.3,0.17,0.0,0.0,1,107
the JSON string to the ResponseWriter,0,9,0.3,0.14,0.0,0.0,1,107
. If you call this using c URL,0,9,0.21,0.46,0.0,0.0,1,107
", you will see:",0,9,0.21,0.68,0.0,0.01,1,107
curl -i 127.0.0.1:8080/json,0,7,0.26,0.14,0.01,0.0,1,107
HTTP/1.1 200 OK,0,7,0.26,0.14,0.0,0.0,1,107
Content-Type: application/json,0,7,0.26,0.14,0.0,0.0,1,107
"Date: Tue, 13 Jan 2015 16:27:01 GMT",0,7,0.26,0.14,0.0,0.0,1,107
Content-Length: 58,0,7,0.26,0.14,0.0,0.02,1,107
"{""User"":""Sau Sheong"",""Threads"":[""first"",""second"",""third""]}",0,7,0.26,0.14,0.02,0.02,1,107
4.4 Cookies,1,12,0.54,0.07,0.02,0.01,1,107
"In chapter 2, you saw how to use cookies to create sessions for authentication. In this",0,9,0.21,0.14,0.01,0.0,0,107
"section, we’ll delve into the details of using cookies not just for sessions but for persis-",0,9,0.21,0.14,0.0,0.0,0,107
tence at the client in general.,0,9,0.3,0.14,0.0,0.0,1,107
"A cookie is a small piece of information that’s stored at the client, originally sent",0,9,0.21,0.17,0.0,0.0,0,107
from the server through an,0,9,0.3,0.14,0.0,0.0,1,107
HTTP response message. Every time the client sends an,0,9,0.21,0.38,0.0,0.0,1,107
"HTTP request to the server, the cookie is sent along with it. Cookies are designed to",0,9,0.21,0.14,0.0,0.0,0,107
overcome the stateless-ness of,0,9,0.3,0.14,0.0,0.0,1,107
HTTP . Although it’s not the only mechanism that can be,0,9,0.21,0.39,0.0,0.0,1,107
"used, it’s one of the most common and popular methods. Entire industries’ revenues",0,9,0.21,0.14,0.0,0.0,0,107
"depend on it, especially in the internet advertising domain.",0,9,0.3,0.14,0.0,0.0,1,107
"There are a number of types of cookies, including interestingly named ones like",0,9,0.21,0.17,0.0,0.0,0,107
"super cookies, third-party cookies, and zombie cookies. But generally there are only",0,9,0.21,0.14,0.0,0.0,0,107
two classes of cookies: session cookies and persistent cookies. Most other types of,0,9,0.21,0.14,0.0,0.0,0,107
cookies are variants of the persistent cookies.,0,9,0.3,0.14,0.0,0.02,1,107
4.4.1 Cookies with Go,1,10,0.5,0.07,0.02,0.01,1,107
"The Cookie struct, shown in this listing, is the representation of a cookie in Go.",0,9,0.21,0.14,0.01,0.03,0,107
Listing 4.12 The Cookie,1,9,0.48,0.17,0.03,0.0,1,107
struct,1,9,0.39,0.37,0.0,0.02,1,107
type Cookie struct {,0,7,0.26,0.14,0.02,0.0,1,107
Name       string,0,7,0.26,0.14,0.0,0.0,1,107
Value      string,0,7,0.26,0.14,0.0,0.0,1,107
Path       string,0,7,0.26,0.14,0.0,0.0,1,107
Domain     string,0,7,0.26,0.14,0.0,0.0,1,107
Expires    time.Time,0,7,0.26,0.14,0.0,0.0,1,107
RawExpires string,0,7,0.26,0.14,0.0,0.0,1,107
MaxAge     int,0,7,0.26,0.14,0.0,0.0,1,107
Secure     bool,0,7,0.26,0.14,0.0,0.0,1,107
88,1,9,0.39,0.06,0.0,0.0,0,108
Processing requests,1,9,0.39,0.42,0.0,0.0,1,108
C 4,1,7,0.26,0.34,0.0,0.0,0,108
HAPTER,1,6,0.33,0.35,0.0,0.03,1,108
HttpOnly   bool,0,7,0.26,0.13,0.03,0.0,1,108
Raw        string,0,7,0.26,0.13,0.0,0.0,1,108
Unparsed   []string,0,7,0.26,0.13,0.0,0.0,1,108
},0,7,0.17,0.13,0.0,0.02,0,108
"If the Expires field isn’t set, then the cookie is a session or temporary cookie. Session",0,9,0.21,0.13,0.02,0.0,0,108
"cookies are removed from the browser when the browser is closed. Otherwise, the",0,9,0.21,0.13,0.0,0.0,0,108
cookie is a persistent cookie that’ll last as long as it isn’t expired or removed.,0,9,0.21,0.13,0.0,0.0,0,108
There are two ways of specifying the expiry time: the Expires field and the MaxAge,0,9,0.21,0.15,0.0,0.0,0,108
"field. Expires tells us exactly when the cookie will expire, and MaxAge tells us how",0,9,0.21,0.13,0.0,0.0,0,108
"long the cookie should last (in seconds), starting from the time it’s created in the",0,9,0.21,0.13,0.0,0.0,0,108
"browser. This isn’t a design issue with Go, but rather results from the inconsistent",0,9,0.21,0.13,0.0,0.0,0,108
implementation differences of cookies in various browsers. Expires was deprecated in,0,9,0.21,0.13,0.0,0.0,0,108
favor of MaxAge in HTTP,0,9,0.3,0.13,0.0,0.0,1,108
"1.1 , but almost all browsers still support it. MaxAge isn’t sup-",0,9,0.21,0.34,0.0,0.0,1,108
"ported by Microsoft Internet Explorer 6, 7, and 8. The pragmatic solution is to use",0,9,0.21,0.13,0.0,0.0,0,108
only Expires or to use both in order to support all browsers.,0,9,0.3,0.13,0.0,0.02,1,108
4.4.2 Sending cookies to the browser,1,10,0.5,0.06,0.02,0.01,1,108
Cookie has a String method that returns a serialized version of the cookie for use in a,0,9,0.21,0.13,0.01,0.0,0,108
Set-Cookie response header. Let’s take a closer look.,0,9,0.3,0.13,0.0,0.03,1,108
Listing 4.13 Sending cookies to the browser,1,9,0.48,0.15,0.03,0.02,1,108
package main,0,7,0.26,0.13,0.02,0.02,1,108
import (,0,7,0.26,0.13,0.02,0.0,1,108
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,108
),0,7,0.17,0.13,0.0,0.02,0,108
"func setCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,108
c1 := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,108
"Name:     ""first_cookie"",",0,7,0.26,0.13,0.0,0.0,1,108
"Value:    ""Go Web Programming"",",0,7,0.26,0.13,0.0,0.0,1,108
"HttpOnly: true,",0,7,0.26,0.13,0.0,0.0,1,108
},0,7,0.17,0.13,0.0,0.0,0,108
c2 := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,108
"Name:     ""second_cookie"",",0,7,0.26,0.13,0.0,0.0,1,108
"Value:    ""Manning Publications Co"",",0,7,0.26,0.13,0.0,0.0,1,108
"HttpOnly: true,",0,7,0.26,0.13,0.0,0.0,1,108
},0,7,0.17,0.13,0.0,0.0,0,108
"w.Header().Set(""Set-Cookie"", c1.String())",0,7,0.26,0.13,0.0,0.0,1,108
"w.Header().Add(""Set-Cookie"", c2.String())",0,7,0.26,0.13,0.0,0.0,1,108
},0,7,0.17,0.13,0.0,0.02,0,108
func main() {,0,7,0.26,0.13,0.02,0.0,1,108
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,108
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,108
},0,7,0.17,0.13,0.0,0.0,0,108
89,1,9,0.3,0.83,0.0,0.0,0,109
Cookies,1,9,0.53,0.43,0.0,0.33,1,109
Figure 4.3 Viewing cookies on Web Inspector (Safari),1,7,0.58,0.14,0.33,0.04,1,109
"http.HandleFunc(""/set_cookie"", setCookie)",0,7,0.26,0.14,0.04,0.0,1,109
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,109
},0,7,0.17,0.14,0.0,0.02,0,109
You use the Set method to add the first cookie and then the,0,9,0.3,0.14,0.02,0.0,1,109
Add method to add a sec-,0,9,0.21,0.64,0.0,0.0,1,109
ond cookie. Go to http://127.0.0.1:8080/set_cookie,0,9,0.3,0.14,0.0,0.0,1,109
"in your browser, and then inspect",0,9,0.21,0.57,0.0,0.0,1,109
"the list of cookies set on the browser. (In figure 4.3 I’m using Web Inspector in Safari,",0,9,0.21,0.14,0.0,0.0,0,109
but any corresponding tool on other browsers should show the same thing.),0,9,0.21,0.14,0.0,0.0,0,109
SetCookie function,0,9,0.21,0.68,0.0,0.0,1,109
Go provides a simpler shortcut to setting the cookie: using the,0,9,0.3,0.17,0.0,0.0,1,109
"in the net/http library. Taking the example from listing 4.13, let’s make a change",0,9,0.21,0.14,0.0,0.0,0,109
(shown in bold in the following listing) to the response header.,0,9,0.3,0.14,0.0,0.03,1,109
SetCookie,1,9,0.39,0.56,0.03,0.0,1,109
Listing 4.14 Sending cookies to the browser using,1,9,0.48,0.17,0.0,0.02,1,109
"func setCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,109
c1 := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,109
"Name:     ""first_cookie"",",0,7,0.26,0.14,0.0,0.0,1,109
"Value:    ""Go Web Programming"",",0,7,0.26,0.14,0.0,0.0,1,109
"HttpOnly: true,",0,7,0.26,0.14,0.0,0.0,1,109
},0,7,0.17,0.14,0.0,0.0,0,109
c2 := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,109
"Name:     ""second_cookie"",",0,7,0.26,0.14,0.0,0.0,1,109
"Value:    ""Manning Publications Co"",",0,7,0.26,0.14,0.0,0.0,1,109
"HttpOnly: true,",0,7,0.26,0.14,0.0,0.0,1,109
},0,7,0.17,0.14,0.0,0.0,0,109
"http.SetCookie(w, &c1)",1,7,0.44,0.14,0.0,0.0,1,109
"http.SetCookie(w, &c2)",1,7,0.44,0.14,0.0,0.0,1,109
},0,7,0.17,0.14,0.0,0.0,0,109
90,1,9,0.39,0.06,0.0,0.0,0,110
Processing requests,1,9,0.39,0.42,0.0,0.0,1,110
C 4,1,7,0.26,0.34,0.0,0.0,0,110
HAPTER,1,6,0.33,0.35,0.0,0.03,1,110
"It doesn’t make too much of a difference, though you should take note that you need",0,9,0.21,0.13,0.03,0.0,0,110
to pass in the cookies by reference instead.,0,9,0.3,0.13,0.0,0.02,1,110
4.4.3 Getting cookies from the browser,1,10,0.5,0.06,0.02,0.01,1,110
"Now that you can set a cookie, you want to also retrieve that cookie from the client.",0,9,0.21,0.13,0.01,0.0,0,110
This listing demonstrates how.,0,9,0.3,0.13,0.0,0.03,1,110
Listing 4.15 Getting cookies from the header,1,9,0.48,0.15,0.03,0.02,1,110
package main,0,7,0.26,0.13,0.02,0.02,1,110
import (,0,7,0.26,0.13,0.02,0.0,1,110
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,110
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,110
),0,7,0.17,0.13,0.0,0.02,0,110
"func setCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,110
c1 := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,110
"Name:     ""first_cookie"",",0,7,0.26,0.13,0.0,0.0,1,110
"Value:    ""Go Web Programming"",",0,7,0.26,0.13,0.0,0.0,1,110
"HttpOnly: true,",0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.0,0,110
c2 := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,110
"Name:     ""second_cookie"",",0,7,0.26,0.13,0.0,0.0,1,110
"Value:    ""Manning Publications Co"",",0,7,0.26,0.13,0.0,0.0,1,110
"HttpOnly: true,",0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.0,0,110
"http.SetCookie(w, &c1)",0,7,0.26,0.13,0.0,0.0,1,110
"http.SetCookie(w, &c2)",0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.02,0,110
"func getCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,110
"h := r.Header[""Cookie""]",0,7,0.26,0.13,0.0,0.0,1,110
"fmt.Fprintln(w, h)",0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.02,0,110
func main() {,0,7,0.26,0.13,0.02,0.0,1,110
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,110
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.0,0,110
"http.HandleFunc(""/set_cookie"", setCookie)",0,7,0.26,0.13,0.0,0.0,1,110
"http.HandleFunc(""/get_cookie"", getCookie)",0,7,0.26,0.13,0.0,0.0,1,110
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,110
},0,7,0.17,0.13,0.0,0.02,0,110
"After you recompile and start the server, when you go to",0,9,0.3,0.13,0.02,0.0,1,110
http://127.0.0.1:8080/,0,9,0.21,0.64,0.0,0.0,1,110
get_cookie you’ll see this in the browser:,0,9,0.3,0.13,0.0,0.02,1,110
[first_cookie=Go Web Programming; second_cookie=Manning Publications Co],0,7,0.17,0.13,0.02,0.0,0,110
91,1,9,0.3,0.83,0.0,0.0,0,111
Cookies,1,9,0.39,0.43,0.0,0.01,1,111
"This is a slice, with a single string. If you want to get the individual name-value pairs",0,9,0.21,0.14,0.01,0.0,0,111
"you’ll have to parse the string yourself. But as you can see in the following listing, Go",0,9,0.21,0.14,0.0,0.0,0,111
provides a couple of easy ways to get cookies.,0,9,0.3,0.14,0.0,0.02,1,111
Listing 4.16 Using the Cookie,1,9,0.48,0.17,0.02,0.0,1,111
and Cookies methods,1,9,0.39,0.41,0.0,0.02,1,111
package main,0,7,0.26,0.14,0.02,0.02,1,111
import (,0,7,0.26,0.14,0.02,0.0,1,111
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,111
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,111
),0,7,0.17,0.14,0.0,0.02,0,111
"func setCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,111
c1 := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,111
"Name:     ""first_cookie"",",0,7,0.26,0.14,0.0,0.0,1,111
"Value:    ""Go Web Programming"",",0,7,0.26,0.14,0.0,0.0,1,111
"HttpOnly: true,",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.0,0,111
c2 := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,111
"Name:     ""second_cookie"",",0,7,0.26,0.14,0.0,0.0,1,111
"Value:    ""Manning Publications Co"",",0,7,0.26,0.14,0.0,0.0,1,111
"HttpOnly: true,",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.0,0,111
"http.SetCookie(w, &c1)",0,7,0.26,0.14,0.0,0.0,1,111
"http.SetCookie(w, &c2)",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.02,0,111
"func getCookie(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,111
"c1, err := r.Cookie(""first_cookie"")",1,7,0.44,0.14,0.0,0.0,1,111
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,111
"fmt.Fprintln(w, ""Cannot get the first cookie"")",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.0,0,111
cs := r.Cookies(),0,7,0.26,0.14,0.0,0.0,1,111
"fmt.Fprintln(w, c1)",0,7,0.26,0.14,0.0,0.0,1,111
"fmt.Fprintln(w, cs)",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.02,0,111
func main() {,0,7,0.26,0.14,0.02,0.0,1,111
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,111
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.0,0,111
"http.HandleFunc(""/set_cookie"", setCookie)",0,7,0.26,0.14,0.0,0.0,1,111
"http.HandleFunc(""/get_cookie"", getCookie)",0,7,0.26,0.14,0.0,0.0,1,111
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,111
},0,7,0.17,0.14,0.0,0.02,0,111
Go provides a Cookie method on,0,9,0.3,0.14,0.02,0.0,1,111
Request (shown in bold text in listing 4.16) that,0,9,0.21,0.43,0.0,0.0,1,111
"allows you to retrieve a named cookie. If the cookie doesn’t exist, it’ll throw an error.",0,9,0.21,0.14,0.0,0.0,0,111
"This is a single value, though, so if you want to get multiple cookies you can use the",0,9,0.21,0.14,0.0,0.0,0,111
Cookies method on Request,0,9,0.3,0.14,0.0,0.0,1,111
". That way, you retrieve all cookies into a Go slice; in fact,",0,9,0.21,0.38,0.0,0.0,1,111
"Header yourself. If you recompile, restart the",0,9,0.21,0.47,0.0,0.0,1,111
it’s the same as getting it through the,0,9,0.3,0.14,0.0,0.0,1,111
"server, and go to http://127.0.0.1:8080/get_cookie",0,9,0.3,0.14,0.0,0.0,1,111
"now, you’ll see this in your browser:",0,9,0.21,0.56,0.0,0.0,1,111
92,1,9,0.39,0.06,0.0,0.0,0,112
Processing requests,1,9,0.39,0.42,0.0,0.0,1,112
C 4,1,7,0.26,0.34,0.0,0.0,0,112
HAPTER,1,6,0.33,0.35,0.0,0.03,1,112
first_cookie=Go Web Programming,0,7,0.26,0.13,0.03,0.0,1,112
[first_cookie=Go Web Programming second_cookie=Manning Publications Co],0,7,0.17,0.13,0.0,0.02,0,112
"We didn’t set the Expires or the MaxAge fields when we set the cookie, so what was",0,9,0.21,0.13,0.02,0.0,0,112
"returned are session cookies. To prove the point, quit your browser (don’t just close",0,9,0.21,0.13,0.0,0.0,0,112
the tab or window; completely quit your browser). Then go to,0,9,0.3,0.13,0.0,0.0,1,112
http://127.0.0.1:8080/,0,9,0.21,0.64,0.0,0.0,1,112
get_cookie again and you’ll see that the cookies are gone.,0,9,0.3,0.13,0.0,0.02,1,112
4.4.4 Using cookies for flash messages,1,10,0.5,0.06,0.02,0.01,1,112
"In chapter 2 we looked at using cookies for managing sessions, so let’s try out our new-",0,9,0.21,0.13,0.01,0.0,0,112
found cookie skills on something else.,0,9,0.3,0.13,0.0,0.0,1,112
Sometimes it’s necessary to show users a short informational message telling them,0,9,0.21,0.15,0.0,0.0,0,112
whether or not they’ve successfully completed an action. If the user submits a post to a,0,9,0.21,0.13,0.0,0.0,0,112
"forum and his posting fails, you’ll want to show him a message that tells him that the",0,9,0.21,0.13,0.0,0.0,0,112
post didn’t go through. Following the Principle of Least Surprise from the previous,0,9,0.21,0.13,0.0,0.0,0,112
"chapter, you want to show the message on the same page. But this page doesn’t nor-",0,9,0.21,0.13,0.0,0.0,0,112
"mally show any messages, so you want the message to show on certain conditions and",0,9,0.21,0.13,0.0,0.0,0,112
it must be transient (which means it doesn’t show again when the page is refreshed).,1,9,0.39,0.13,0.0,0.0,0,112
These transient messages are commonly known as,0,9,0.3,0.13,0.0,0.0,1,112
flash messages .,1,9,0.39,0.54,0.0,0.0,1,112
"There are many ways to implement flash messages, but one of the most common is",0,9,0.21,0.15,0.0,0.0,0,112
to store them in session cookies that are removed when the page is refreshed. This list-,0,9,0.21,0.13,0.0,0.0,0,112
ing shows how you can do this in Go.,0,9,0.3,0.13,0.0,0.03,1,112
Listing 4.17 Implementing flash messaging using Go cookies,1,9,0.48,0.15,0.03,0.02,1,112
package main,0,7,0.26,0.13,0.02,0.02,1,112
import (,0,7,0.26,0.13,0.02,0.0,1,112
"""encoding/base64""",0,7,0.26,0.13,0.0,0.0,1,112
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,112
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,112
"""time""",0,7,0.26,0.13,0.0,0.0,1,112
),0,7,0.17,0.13,0.0,0.02,0,112
"func setMessage(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,112
"msg := []byte(""Hello World!"")",0,7,0.26,0.13,0.0,0.0,1,112
c := http.Cookie{,0,7,0.26,0.13,0.0,0.0,1,112
"Name:  ""flash"",",0,7,0.26,0.13,0.0,0.0,1,112
"Value: base64.URLEncoding.EncodeToString(msg),",0,7,0.26,0.13,0.0,0.0,1,112
},0,7,0.17,0.13,0.0,0.0,0,112
"http.SetCookie(w, &c)",0,7,0.26,0.13,0.0,0.0,1,112
},0,7,0.17,0.13,0.0,0.02,0,112
"func showMessage(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,112
"c, err := r.Cookie(""flash"")",0,7,0.26,0.13,0.0,0.0,1,112
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,112
if err == http.ErrNoCookie {,0,7,0.26,0.13,0.0,0.0,1,112
"fmt.Fprintln(w, ""No message found"")",0,7,0.26,0.13,0.0,0.0,1,112
},0,7,0.17,0.13,0.0,0.0,0,112
93,1,9,0.3,0.83,0.0,0.0,0,113
Cookies,1,9,0.39,0.43,0.0,0.03,1,113
} else {,0,7,0.26,0.14,0.03,0.0,1,113
rc := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,113
"Name:    ""flash"",",0,7,0.26,0.14,0.0,0.0,1,113
"MaxAge:  -1,",0,7,0.26,0.14,0.0,0.0,1,113
"Expires: time.Unix(1, 0),",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.0,0,113
"http.SetCookie(w, &rc)",0,7,0.26,0.14,0.0,0.0,1,113
"val, _ := base64.URLEncoding.DecodeString(c.Value)",0,7,0.26,0.14,0.0,0.0,1,113
"fmt.Fprintln(w, string(val))",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.0,0,113
},0,7,0.17,0.14,0.0,0.02,0,113
func main() {,0,7,0.26,0.14,0.02,0.0,1,113
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,113
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.0,0,113
"http.HandleFunc(""/set_message"", setMessage)",0,7,0.26,0.14,0.0,0.0,1,113
"http.HandleFunc(""/show_message"", showMessage)",0,7,0.26,0.14,0.0,0.0,1,113
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.02,0,113
setMessage and showMessage,0,9,0.21,0.43,0.02,0.0,1,113
"You create two handler functions,",0,9,0.3,0.14,0.0,0.0,1,113
", and attach them to",0,9,0.21,0.67,0.0,0.0,1,113
/set_message and /show_message,0,9,0.3,0.14,0.0,0.0,1,113
"setMessage , which is",0,9,0.21,0.67,0.0,0.0,1,113
", respectively. Let’s start with",0,9,0.21,0.43,0.0,0.0,1,113
straightforward.,0,9,0.3,0.14,0.0,0.03,1,113
Listing 4.18 Setting the message,1,9,0.48,0.17,0.03,0.02,1,113
"func setMessage(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,113
"msg := []byte(""Hello World!"")",0,7,0.26,0.14,0.0,0.0,1,113
c := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,113
"Name:  ""flash"",",0,7,0.26,0.14,0.0,0.0,1,113
"Value: base64.URLEncoding.EncodeToString(msg),",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.0,0,113
"http.SetCookie(w, &c)",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.02,0,113
"setCookie handler function from earlier, except",0,9,0.21,0.44,0.02,0.0,1,113
This isn’t much different from the,0,9,0.3,0.14,0.0,0.0,1,113
this time you do a Base64,0,9,0.3,0.14,0.0,0.0,1,113
URL encoding of the message. You do so because the cookie,0,9,0.21,0.35,0.0,0.0,1,113
values need to be URL encoded in the header. You managed to get away with it earlier,0,9,0.21,0.14,0.0,0.0,0,113
"because you didn’t have any special characters like a space or the percentage sign, but",0,9,0.21,0.14,0.0,0.0,0,113
you can’t get away with here because messages will eventually need to have them.,0,9,0.21,0.14,0.0,0.0,0,113
Now let’s look at the showMessage,0,9,0.3,0.17,0.0,0.0,1,113
function:,0,9,0.21,0.45,0.0,0.01,1,113
"func showMessage(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.01,0.0,1,113
"c, err := r.Cookie(""flash"")",0,7,0.26,0.14,0.0,0.0,1,113
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,113
if err == http.ErrNoCookie {,0,7,0.26,0.14,0.0,0.0,1,113
"fmt.Fprintln(w, ""No message found"")",0,7,0.26,0.14,0.0,0.0,1,113
},0,7,0.17,0.14,0.0,0.0,0,113
} else {,0,7,0.26,0.14,0.0,0.0,1,113
rc := http.Cookie{,0,7,0.26,0.14,0.0,0.0,1,113
"Name:    ""flash"",",0,7,0.26,0.14,0.0,0.0,1,113
94,1,9,0.39,0.06,0.0,0.0,0,114
Processing requests,1,9,0.39,0.42,0.0,0.0,1,114
C 4,1,7,0.26,0.34,0.0,0.0,0,114
HAPTER,1,6,0.33,0.35,0.0,0.03,1,114
"MaxAge:  -1,",0,7,0.26,0.13,0.03,0.0,1,114
"Expires: time.Unix(1, 0),",0,7,0.26,0.13,0.0,0.0,1,114
},0,7,0.17,0.13,0.0,0.0,0,114
"http.SetCookie(w, &rc)",0,7,0.26,0.13,0.0,0.0,1,114
"val, _ := base64.URLEncoding.DecodeString(c.Value)",0,7,0.26,0.13,0.0,0.0,1,114
"fmt.Fprintln(w, string(val))",0,7,0.26,0.13,0.0,0.0,1,114
},0,7,0.17,0.13,0.0,0.0,0,114
},0,7,0.17,0.13,0.0,0.02,0,114
err will have a value of,0,9,0.21,0.62,0.02,0.0,1,114
"First, you get the cookie. If you can’t find the cookie (",0,9,0.3,0.13,0.0,0.0,1,114
"http.ErrNoCookie ), you’ll show the message “No message found.”",0,9,0.3,0.13,0.0,0.0,1,114
"If you find the message, you have to do two things:",0,9,0.3,0.15,0.0,0.01,1,114
"Create a cookie with the same name, but with MaxAge set to a negative number",0,9,0.21,0.18,0.01,0.0,0,114
1,1,6,0.33,0.15,0.0,0.01,0,114
and an Expires value that’s in the past.,0,9,0.3,0.18,0.01,0.01,1,114
SetCookie .,0,9,0.21,0.48,0.01,0.0,1,114
Send the cookie to the browser with,0,9,0.3,0.18,0.0,0.0,1,114
2,1,6,0.33,0.15,0.0,0.01,0,114
"Here you’re replacing the existing cookie, essentially removing it altogether because",0,9,0.21,0.13,0.01,0.0,0,114
the MaxAge field is a negative number and the Expires field is in the past. Once you,0,9,0.21,0.13,0.0,0.0,0,114
"do that, you can decode your string and show the value.",0,9,0.3,0.13,0.0,0.0,1,114
Now let’s see that in action. Start up your browser and go to http://localhost:8080/,0,9,0.21,0.15,0.0,0.0,0,114
set_message. Figure 4.4 shows what you’ll see in Web Inspector.,0,9,0.43,0.13,0.0,0.34,1,114
Figure 4.4 The flash message cookie in Web Inspector (Safari),1,7,0.58,0.13,0.34,0.05,1,114
Notice that the value is Base64,0,9,0.3,0.13,0.05,0.0,1,114
"URL encoded. Now, using the same browser window, go",0,9,0.21,0.38,0.0,0.0,1,114
to http://localhost:8080/show_message. This is what you should see in the browser:,0,9,0.21,0.13,0.0,0.01,0,114
Hello World!,0,7,0.26,0.13,0.01,0.0,1,114
95,1,9,0.3,0.83,0.0,0.0,0,115
Summary,1,9,0.39,0.43,0.0,0.03,1,115
Go back to the Web Inspector and look at the cookies. Your cookie is gone! Setting a,0,9,0.21,0.14,0.03,0.0,0,115
cookie with the same name to the browser will replace the old cookie with the new,0,9,0.21,0.14,0.0,0.0,0,115
cookie of the same name. Because the new cookie has a negative number for MaxAge,0,9,0.21,0.14,0.0,0.0,0,115
"and expires in some time in the past, this tells the browser to remove the cookie,",0,9,0.21,0.14,0.0,0.0,0,115
which means the earlier cookie you set is removed.,0,9,0.3,0.14,0.0,0.0,1,115
This is what you’ll see in the browser:,0,9,0.3,0.17,0.0,0.01,1,115
No message found,0,7,0.26,0.14,0.01,0.01,1,115
This chapter wraps up our two-part tour of what net/http offers for web application,0,9,0.21,0.14,0.01,0.0,0,115
"development on the server. In the next chapter, we move on to the next big compo-",0,9,0.21,0.14,0.0,0.0,0,115
nent in a web application: templates. I will cover template engines and templates in,0,9,0.21,0.14,0.0,0.0,0,115
Go and show you how they can be used to generate responses to the client.,0,9,0.21,0.14,0.0,0.02,0,115
4.5 Summary,1,12,0.54,0.07,0.02,0.01,1,115
Go provides a representation of the,0,9,0.3,0.19,0.01,0.0,1,115
"HTTP requests through various structs,",0,9,0.21,0.51,0.0,0.0,1,115
■,0,4,0.11,0.17,0.0,0.01,0,115
which can be used to extract data from the requests.,0,9,0.3,0.19,0.01,0.01,1,115
"The Go Request struct has three fields, Form, PostForm, and MultipartForm,",0,9,0.21,0.19,0.01,0.0,0,115
■,0,4,0.11,0.17,0.0,0.01,0,115
that allow easy extraction of different data from a request. To get data from,0,9,0.21,0.19,0.01,0.0,0,115
"these fields, call ParseForm",0,9,0.3,0.19,0.0,0.0,1,115
or ParseMultipartForm,0,9,0.21,0.43,0.0,0.0,1,115
to parse the request and,0,9,0.21,0.64,0.0,0.0,1,115
"then access the Form, PostForm, or MultipartForm field accordingly.",0,9,0.3,0.19,0.0,0.01,1,115
Form is used for URL -encoded data from the,0,9,0.3,0.19,0.01,0.0,1,115
"URL and HTML form, PostForm is",0,9,0.21,0.57,0.0,0.0,1,115
■,0,4,0.11,0.17,0.0,0.01,0,115
used for URL -encoded data from the,0,9,0.3,0.19,0.01,0.0,1,115
"HTML form only, and MultipartForm is",0,9,0.21,0.51,0.0,0.0,1,115
used for multi-part data from the,0,9,0.3,0.19,0.0,0.0,1,115
and form.,0,9,0.21,0.5,0.0,0.0,1,115
URL HTML,0,9,0.21,0.47,0.0,0.01,1,115
ResponseWriter .,0,9,0.21,0.7,0.01,0.0,1,115
"To send data back to the client, write header and body data to",0,9,0.3,0.19,0.0,0.0,1,115
■,0,4,0.11,0.17,0.0,0.01,0,115
ResponseWriter .,0,9,0.21,0.59,0.01,0.0,1,115
"To persist data at the client, send cookies in the",0,9,0.3,0.19,0.0,0.0,1,115
■,0,4,0.11,0.17,0.0,0.01,0,115
Cookies can be used for implementing flash messages.,0,9,0.3,0.19,0.01,0.0,1,115
■,0,4,0.11,0.17,0.0,0.0,0,115
Displaying content,1,30,0.93,0.41,0.0,0.19,1,116
This chapter covers,1,12,0.67,0.11,0.19,0.01,1,116
Templates and template engines,0,9,0.3,0.13,0.01,0.0,1,116
■,0,4,0.11,0.11,0.0,0.01,0,116
The Go template libraries text/template and,0,9,0.3,0.13,0.01,0.0,1,116
■,0,4,0.11,0.11,0.0,0.01,0,116
html/template,0,9,0.3,0.13,0.01,0.01,1,116
"Actions, pipelines, and functions in templates",0,9,0.3,0.13,0.01,0.0,1,116
■,0,4,0.11,0.11,0.0,0.01,0,116
Nesting of templates and layouts,0,9,0.3,0.13,0.01,0.0,1,116
■,0,4,0.11,0.11,0.0,0.08,0,116
A web template is a predesigned,1,9,0.48,0.14,0.08,0.0,1,116
HTML page that’s used repeatedly by a software pro-,0,9,0.21,0.39,0.0,0.0,1,116
"gram, called a template engine, to generate one or more",0,9,0.3,0.14,0.0,0.0,1,116
pages. Web tem-,0,9,0.21,0.68,0.0,0.0,1,116
HTML,0,9,0.21,0.63,0.0,0.0,1,116
"plate engines are an important part of any web application framework, and most if",0,9,0.21,0.14,0.0,0.0,0,116
not all full-fledged frameworks have one. Although a number of frameworks have,0,9,0.21,0.14,0.0,0.0,0,116
"embedded template engines, many frameworks use a mix-and-match strategy that",0,9,0.21,0.14,0.0,0.0,0,116
allows programmers to choose the template engine they prefer.,0,9,0.3,0.14,0.0,0.0,1,116
"Go is no exception. Although Go is a relatively new programming language,",0,9,0.21,0.17,0.0,0.0,0,116
there are already a few template engines built on it. However the Go’s standard,0,9,0.21,0.14,0.0,0.0,0,116
library provides strong template support through the text/template and html/tem-,0,9,0.21,0.14,0.0,0.0,0,116
"plate libraries, and unsurprisingly, most Go frameworks support these libraries as",0,9,0.21,0.14,0.0,0.0,0,116
the default template engine.,0,9,0.3,0.14,0.0,0.0,1,116
In this chapter we’ll focus on these two libraries and show how they can be used,0,9,0.21,0.17,0.0,0.0,0,116
to generate HTML responses.,0,9,0.3,0.14,0.0,0.0,1,116
97,1,9,0.3,0.83,0.0,0.0,0,117
Templates and template engines,1,9,0.39,0.35,0.0,0.02,1,117
5.1 Templates and template engines,1,12,0.54,0.07,0.02,0.01,1,117
Template engines often combine data with templates to produce the final,0,9,0.21,0.14,0.01,0.0,0,117
HTML (see,0,9,0.21,0.75,0.0,0.0,1,117
figure 5.1). Handlers usually call template engines to combine data with the templates,0,9,0.21,0.14,0.0,0.0,0,117
and return the resultant,0,9,0.3,0.14,0.0,0.0,1,117
HTML to the client.,0,9,0.21,0.34,0.0,0.05,1,117
Template engine,0,7,0.17,0.31,0.05,0.0,1,117
HMTL,0,7,0.26,0.19,0.0,0.0,1,117
Data,0,7,0.17,0.58,0.0,0.09,1,117
Templates,0,7,0.17,0.33,0.09,0.05,1,117
Figure 5.1 Template engines combine data and templates to produce the final displayed HTML.,1,7,0.35,0.14,0.05,0.04,0,117
Web template engines evolved from server-side includes (,0,9,0.3,0.14,0.04,0.0,1,117
"SSI s), which eventually",0,9,0.21,0.65,0.0,0.0,1,117
branched out into web programming languages like,0,9,0.3,0.14,0.0,0.0,1,117
"PHP , ColdFusion, and JSP",0,9,0.21,0.59,0.0,0.0,1,117
. As a,0,9,0.21,0.8,0.0,0.0,1,117
"result, no standards exist for template engines and the features of existing template",0,9,0.21,0.14,0.0,0.0,0,117
"engines vary widely, depending on why they were created. But there are roughly two",0,9,0.21,0.14,0.0,0.0,0,117
"ideal types of template engines, at opposite ends of the spectrum:",0,9,0.3,0.14,0.0,0.01,1,117
—Dynamic data is substituted into the templates at,0,9,0.21,0.39,0.01,0.0,1,117
Logic-less template engines,1,9,0.48,0.19,0.0,0.0,1,117
■,0,4,0.11,0.17,0.0,0.01,0,117
specified placeholders. The template engine doesn’t do any logic processing; it,0,9,0.21,0.19,0.01,0.0,0,117
only does string substitutions. The idea behind having logic-less template,0,9,0.21,0.19,0.0,0.0,0,117
"engines is to have a clean separation between presentation and logic, where the",0,9,0.21,0.19,0.0,0.0,0,117
processing is done by the handlers only.,0,9,0.3,0.19,0.0,0.01,1,117
—Programming language code is embedded into,0,9,0.21,0.43,0.01,0.0,1,117
Embedded logic template engines,1,9,0.48,0.19,0.0,0.0,1,117
■,0,4,0.11,0.17,0.0,0.01,0,117
"the template and executed during runtime by the template engine, including",0,9,0.21,0.19,0.01,0.0,0,117
substitutions. This makes these types of template engines very powerful.,0,9,0.21,0.19,0.0,0.0,0,117
"Because the logic is embedded in the template itself, though, we often get the",0,9,0.21,0.19,0.0,0.0,0,117
"logic distributed between the handlers, making the code harder to maintain.",0,9,0.21,0.19,0.0,0.01,0,117
Logic-less template engines are usually faster to render because less processing is,0,9,0.21,0.14,0.01,0.0,0,117
"involved. Some template engines claim to be logic-less (such as Mustache), but the",0,9,0.21,0.14,0.0,0.0,0,117
ideal of substitution-only is impossible to achieve. Mustache claims to be logic-less but,0,9,0.21,0.14,0.0,0.0,0,117
has tags that behave like conditionals and loops.,0,9,0.3,0.14,0.0,0.0,1,117
Embedded logic template engines that are completely at the other end of the spec-,0,9,0.21,0.17,0.0,0.0,0,117
trum are indistinguishable from a computer program itself. We can see this with,0,9,0.21,0.14,0.0,0.0,0,117
PHP .,0,9,0.21,0.81,0.0,0.0,1,117
98,1,9,0.39,0.06,0.0,0.0,0,118
Displaying content,1,9,0.39,0.42,0.0,0.0,1,118
C 5,1,7,0.26,0.34,0.0,0.0,0,118
HAPTER,1,6,0.33,0.35,0.0,0.03,1,118
"PHP originated as a standalone web template engine, but today many",0,9,0.3,0.13,0.03,0.0,1,118
PHP pages are,0,9,0.21,0.71,0.0,0.0,1,118
written without a single line of,0,9,0.3,0.13,0.0,0.0,1,118
HTML . It’s difficult to even say that,0,9,0.21,0.37,0.0,0.0,1,118
PHP is still a template,0,9,0.21,0.66,0.0,0.0,1,118
"engine. In fact, plenty of template engines, like Smarty and Blade, are built for",0,9,0.21,0.13,0.0,0.0,0,118
PHP .,0,9,0.21,0.77,0.0,0.0,1,118
The biggest argument against embedded logic template engines is that presenta-,0,9,0.21,0.15,0.0,0.0,0,118
"tion and logic are mixed up together and logic is distributed in multiple places, result-",0,9,0.21,0.13,0.0,0.0,0,118
ing in code that’s hard to maintain. The counter-argument against logic-less template,0,9,0.21,0.13,0.0,0.0,0,118
engines is that the ideal logic-less template engine would be impractical and that plac-,0,9,0.21,0.13,0.0,0.0,0,118
"ing more logic into the handlers, especially for presentation, would add unnecessary",0,9,0.21,0.13,0.0,0.0,0,118
complexity to the handlers.,0,9,0.3,0.13,0.0,0.0,1,118
"In reality, most useful template engines would lie somewhere between these two",0,9,0.21,0.15,0.0,0.0,0,118
"ideal types, with some closer to being logic-less and others closer to having embedded",0,9,0.21,0.13,0.0,0.0,0,118
"logic. Go’s template engine, mostly in text/template and the",0,9,0.3,0.13,0.0,0.0,1,118
HTML -specific bits in,0,9,0.21,0.65,0.0,0.0,1,118
"html/template, is such a hybrid. It can be used as a logic-less template engine, but",0,9,0.21,0.13,0.0,0.0,0,118
there’s enough embedded features that make Go’s template engine an interesting,0,9,0.21,0.13,0.0,0.0,0,118
and powerful one.,0,9,0.3,0.13,0.0,0.02,1,118
5.2 The Go template engine,1,12,0.54,0.06,0.02,0.01,1,118
"The Go template engine, like most template engines, lies somewhere along the spec-",0,9,0.21,0.13,0.01,0.0,0,118
"trum between logic-less and embedded logic. In a web app, the handler normally trig-",0,9,0.21,0.13,0.0,0.0,0,118
gers the template engine. Figure 5.2 shows how Go’s template engine is called from a,0,9,0.21,0.13,0.0,0.0,0,118
"handler. The handler calls the template engine, passing it the template(s) to be used,",0,9,0.21,0.13,0.0,0.0,0,118
usually as a list of template files and the dynamic data. The template engine then gen-,0,9,0.21,0.13,0.0,0.0,0,118
"ResponseWriter , which adds it to the",0,9,0.21,0.45,0.0,0.0,1,118
erates the and writes it to the,0,9,0.3,0.13,0.0,0.0,1,118
HTML,0,9,0.21,0.22,0.0,0.0,1,118
HTTP,0,9,0.21,0.78,0.0,0.0,1,118
response sent back to the client.,0,9,0.3,0.13,0.0,0.0,1,118
"Go templates are text documents (for web apps, these would normally be",0,9,0.3,0.15,0.0,0.0,1,118
HTML,0,9,0.21,0.78,0.0,0.01,1,118
"files), with certain commands embedded in them, called",0,9,0.3,0.13,0.01,0.0,1,118
actions . In the Go template,1,9,0.39,0.6,0.0,0.06,1,118
Server,0,7,0.17,0.48,0.06,0.02,1,118
Request,0,7,0.17,0.23,0.02,0.01,1,118
Client Multiplexer,0,7,0.26,0.15,0.01,0.0,1,118
Handler,0,7,0.17,0.49,0.0,0.01,1,118
Response,0,7,0.17,0.22,0.01,0.0,1,118
Model,0,7,0.17,0.62,0.0,0.02,1,118
Model,0,7,0.17,0.62,0.02,0.0,1,118
Template engine Handler,0,7,0.17,0.33,0.0,0.0,1,118
Database,0,7,0.17,0.73,0.0,0.0,1,118
Model,0,7,0.17,0.62,0.0,0.02,1,118
Model,0,7,0.17,0.62,0.02,0.02,1,118
Templates Handler,0,7,0.17,0.34,0.02,0.05,1,118
Figure 5.2 The Go template engine as part of a web application,1,7,0.44,0.13,0.05,0.0,1,118
99,1,9,0.3,0.83,0.0,0.0,0,119
The Go template engine,1,9,0.39,0.38,0.0,0.03,1,119
"engine, a template is text (usually in a template file) that has embedded actions. The",0,9,0.21,0.14,0.03,0.0,0,119
text is parsed and executed by the template engine to produce another piece of text.,0,9,0.21,0.14,0.0,0.0,0,119
Go has a text/template standard library that’s a generic template engine for any type,0,9,0.21,0.14,0.0,0.0,0,119
"of text format, as well as an html/template library that’s a specific template engine for",0,9,0.21,0.14,0.0,0.0,0,119
"HTML . Actions are added between two double braces, {{ and }} (although these delim-",0,9,0.21,0.14,0.0,0.0,0,119
iters can be changed programmatically). We’ll get into actions later in this chapter.,0,9,0.21,0.14,0.0,0.0,0,119
This listing shows an example of a very simple template.,0,9,0.3,0.14,0.0,0.03,1,119
Listing 5.1 A simple template,1,9,0.48,0.17,0.03,0.02,1,119
<!DOCTYPE html>,0,7,0.26,0.14,0.02,0.0,1,119
<html>,0,7,0.26,0.14,0.0,0.0,1,119
<head>,0,7,0.26,0.14,0.0,0.0,1,119
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,119
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,119
</head>,0,7,0.26,0.14,0.0,0.0,1,119
<body>,0,7,0.26,0.14,0.0,0.0,1,119
{{ . }},0,7,0.26,0.14,0.0,0.0,1,119
</body>,0,7,0.26,0.14,0.0,0.0,1,119
</html>,0,7,0.26,0.14,0.0,0.02,1,119
This template is placed in a template file named tmpl.html. Naturally we can have as,0,9,0.21,0.14,0.02,0.0,0,119
many template files as we like. Template files must be in a readable text format but,0,9,0.21,0.14,0.0,0.0,0,119
can have any extension. In this case because it generates,0,9,0.3,0.14,0.0,0.0,1,119
"HTML output, I used the",0,9,0.21,0.63,0.0,0.0,1,119
.html extension.,0,9,0.3,0.14,0.0,0.0,1,119
"Notice the dot (.) between the double braces. The dot is an action, and it’s a com-",0,9,0.21,0.17,0.0,0.0,0,119
mand for the template engine to replace it with a value when the template is executed.,0,9,0.21,0.14,0.0,0.0,0,119
Using the Go web template engine requires two steps:,0,9,0.3,0.17,0.0,0.01,1,119
"Parse the text-formatted template source, which can be a string or from a tem-",0,9,0.21,0.19,0.01,0.0,0,119
1,1,6,0.33,0.17,0.0,0.01,0,119
"plate file, to create a parsed template struct.",0,9,0.3,0.19,0.01,0.01,1,119
ResponseWriter and some data to it.,0,9,0.21,0.53,0.01,0.0,1,119
"Execute the parsed template, passing a",0,9,0.3,0.19,0.0,0.0,1,119
2,1,6,0.33,0.17,0.0,0.01,0,119
This triggers the template engine to combine the parsed template with the data,0,9,0.21,0.19,0.01,0.0,0,119
ResponseWriter,0,9,0.21,0.58,0.0,0.0,1,119
to generate the final HTML,0,9,0.3,0.19,0.0,0.0,1,119
that’s passed to the,0,9,0.21,0.42,0.0,0.0,1,119
.,0,9,0.12,0.72,0.0,0.01,0,119
"This listing provides a concrete, simple example.",0,9,0.3,0.14,0.01,0.03,1,119
Listing 5.2 Triggering a template engine from a handler function,1,9,0.48,0.17,0.03,0.02,1,119
package main,0,7,0.26,0.14,0.02,0.01,1,119
import (,0,7,0.26,0.14,0.01,0.0,1,119
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,119
"""html/template""",0,7,0.26,0.14,0.0,0.0,1,119
),0,7,0.17,0.14,0.0,0.01,0,119
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.01,0.0,1,119
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.0,0.0,1,119
"t.Execute(w, ""Hello World!"")",0,7,0.26,0.14,0.0,0.0,1,119
},0,7,0.17,0.14,0.0,0.0,0,119
100,1,9,0.39,0.06,0.0,0.0,0,120
Displaying content,1,9,0.39,0.42,0.0,0.0,1,120
C 5,1,7,0.26,0.34,0.0,0.0,0,120
HAPTER,1,6,0.33,0.35,0.0,0.03,1,120
func main() {,0,7,0.26,0.13,0.03,0.0,1,120
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,120
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,120
},0,7,0.17,0.13,0.0,0.0,0,120
"http.HandleFunc(""/process"", process)",0,7,0.26,0.13,0.0,0.0,1,120
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,120
},0,7,0.17,0.13,0.0,0.02,0,120
"process ,",0,9,0.21,0.75,0.02,0.0,1,120
We’re back to our server again. This time we have a handler function named,0,9,0.21,0.13,0.0,0.0,0,120
"which triggers the template engine. First, we parse the template file tmpl.html using",0,9,0.21,0.13,0.0,0.0,0,120
the ParseFiles function which returns a parsed template of type,0,9,0.3,0.13,0.0,0.0,1,120
Template and an,0,9,0.21,0.68,0.0,0.0,1,120
"error, which we conveniently ignore for brevity.",0,9,0.3,0.13,0.0,0.01,1,120
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.01,0.01,1,120
Then we call the Execute,0,9,0.3,0.13,0.01,0.0,1,120
Hello World! ),0,9,0.21,0.7,0.0,0.0,1,120
"method to apply data (in this case, the string",0,9,0.21,0.34,0.0,0.0,1,120
to the template:,0,9,0.3,0.13,0.0,0.01,1,120
"t.Execute(w, ""Hello World!"")",0,7,0.26,0.13,0.01,0.01,1,120
We pass in the ResponseWriter,0,9,0.3,0.13,0.01,0.0,1,120
along with the data so that the generated,0,9,0.21,0.39,0.0,0.0,1,120
HTML can,0,9,0.21,0.74,0.0,0.0,1,120
"be passed into it. When you’re running this example, the template file should be in",0,9,0.21,0.13,0.0,0.0,0,120
the same directory as the binary (remember that we didn’t specify the absolute path to,0,9,0.21,0.13,0.0,0.0,0,120
the file).,0,9,0.3,0.13,0.0,0.0,1,120
"This is the simplest way to use the template engine, and as expected, there are vari-",0,9,0.21,0.15,0.0,0.0,0,120
"ations, which I’ll describe later in the chapter.",0,9,0.3,0.13,0.0,0.02,1,120
5.2.1 Parsing templates,1,10,0.5,0.06,0.02,0.01,1,120
ParseFiles is a standalone function that parses template files and creates a parsed,0,9,0.21,0.13,0.01,0.0,0,120
ParseFiles function is actually a con-,0,9,0.21,0.51,0.0,0.0,1,120
template struct that you can execute later. The,0,9,0.3,0.13,0.0,0.0,1,120
ParseFiles method on the,0,9,0.21,0.34,0.0,0.0,1,120
Template struct. When you call,0,9,0.21,0.57,0.0,0.0,1,120
venience function to the,0,9,0.3,0.13,0.0,0.0,1,120
"the ParseFiles function, Go creates a new template, with the name of the file as the",0,9,0.21,0.13,0.0,0.0,0,120
name of the template:,0,9,0.3,0.13,0.0,0.01,1,120
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.01,0.01,1,120
Then it calls the ParseFiles,0,9,0.3,0.13,0.01,0.0,1,120
method on that template:,0,9,0.21,0.36,0.0,0.01,1,120
"t := template.New(""tmpl.html"")",0,7,0.26,0.13,0.01,0.0,1,120
"t, _ := t.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.02,1,120
ParseFiles (both the function and the method) can take in one or more filenames as,0,9,0.21,0.13,0.02,0.0,0,120
parameters (making it a,0,9,0.3,0.13,0.0,0.0,1,120
"variadic function—that is, a function that can take in a vari-",1,9,0.39,0.33,0.0,0.0,1,120
"able number of parameters). But it still returns just one template, regardless of the",0,9,0.21,0.13,0.0,0.0,0,120
number of files it’s passed. What’s up with that?,0,9,0.3,0.13,0.0,0.0,1,120
"When we pass in more than one file, the returned parsed template has the name",0,9,0.21,0.15,0.0,0.0,0,120
"and content of the first file. The rest of the files are parsed as a map of templates,",0,9,0.21,0.13,0.0,0.0,0,120
which can be referred to later on during the execution. You can think of this as,0,9,0.21,0.13,0.0,0.0,0,120
ParseFiles returning a template when you provide a single file and a template set,0,9,0.21,0.13,0.0,0.0,0,120
101,1,9,0.3,0.82,0.0,0.0,0,121
The Go template engine,1,9,0.39,0.38,0.0,0.03,1,121
when you provide more than one file. This fact is important when we look at includ-,0,9,0.21,0.14,0.03,0.0,0,121
"ing a template within a template, or nesting templates, later in this chapter.",0,9,0.21,0.14,0.0,0.0,0,121
"ParseGlob function, which uses pattern",0,9,0.21,0.51,0.0,0.0,1,121
Another way to parse files is to use the,0,9,0.3,0.17,0.0,0.0,1,121
matching instead of specific files. Using the same example:,0,9,0.3,0.14,0.0,0.01,1,121
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.01,0.01,1,121
and,0,9,0.21,0.14,0.01,0.01,0,121
"t, _ := template.ParseGlob(""*.html"")",0,7,0.26,0.14,0.01,0.01,1,121
"would be the same, if tmpl.html were the only file in the same path.",0,9,0.3,0.14,0.01,0.0,1,121
"Parsing files is probably the most common use, but you can also parse templates",0,9,0.21,0.17,0.0,0.0,0,121
Parse,0,9,0.21,0.79,0.0,0.0,1,121
"using strings. In fact, all other ways of parsing templates ultimately call the",0,9,0.21,0.14,0.0,0.0,0,121
method to parse the template. Using the same example again:,0,9,0.3,0.14,0.0,0.01,1,121
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.01,0.01,1,121
and,0,9,0.21,0.14,0.01,0.01,0,121
tmpl := `<!DOCTYPE html>,0,7,0.26,0.14,0.01,0.0,1,121
<html>,0,7,0.26,0.14,0.0,0.0,1,121
<head>,0,7,0.26,0.14,0.0,0.0,1,121
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,121
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,121
</head>,0,7,0.26,0.14,0.0,0.0,1,121
<body>,0,7,0.26,0.14,0.0,0.0,1,121
{{ . }},0,7,0.26,0.14,0.0,0.0,1,121
</body>,0,7,0.26,0.14,0.0,0.0,1,121
</html>,0,7,0.26,0.14,0.0,0.0,1,121
`,0,7,0.17,0.14,0.0,0.0,0,121
"t := template.New(""tmpl.html"")",0,7,0.26,0.14,0.0,0.0,1,121
"t, _ = t.Parse(tmpl)",0,7,0.26,0.14,0.0,0.0,1,121
"t.Execute(w, ""Hello World!"")",0,7,0.26,0.14,0.0,0.02,1,121
"are the same, assuming tmpl.html contains the same",0,9,0.3,0.14,0.02,0.0,1,121
HTML .,0,9,0.21,0.58,0.0,0.0,1,121
So far we’ve been ignoring the error that’s returned along with the parsed tem-,0,9,0.21,0.17,0.0,0.0,0,121
"plate. The usual Go practice is to handle the error, but Go provides another mecha-",0,9,0.21,0.14,0.0,0.0,0,121
nism to handle errors returned by parsing templates:,0,9,0.3,0.14,0.0,0.01,1,121
"t  := template.Must(template.ParseFiles(""tmpl.html""))",0,7,0.26,0.14,0.01,0.01,1,121
The Must function wraps around a function that returns a pointer to a template and,0,9,0.21,0.14,0.01,0.0,0,121
"nil . (In Go, panicking refers to a situation",1,9,0.39,0.49,0.0,0.0,1,121
"an error, and panics if the error is not a",0,9,0.3,0.14,0.0,0.0,1,121
"where the normal flow of execution is stopped, and if it’s within a function, the func-",0,9,0.21,0.14,0.0,0.0,0,121
tion returns to its caller. The process continues up the stack until it reaches the main,0,9,0.21,0.14,0.0,0.0,0,121
"program, which then crashes.)",0,9,0.3,0.14,0.0,0.02,1,121
5.2.2 Executing templates,1,10,0.5,0.07,0.02,0.01,1,121
"Execute function on a template,",0,9,0.21,0.57,0.01,0.0,1,121
The usual way to execute a template is to call the,0,9,0.3,0.14,0.0,0.0,1,121
passing it the ResponseWriter,0,9,0.3,0.14,0.0,0.0,1,121
and the data. This works well when the parsed template,0,9,0.21,0.39,0.0,0.0,1,121
Execute method on a,0,9,0.21,0.66,0.0,0.0,1,121
is a single template instead of a template set. If you call the,0,9,0.3,0.14,0.0,0.0,1,121
102,1,9,0.39,0.06,0.0,0.0,0,122
Displaying content,1,9,0.39,0.42,0.0,0.0,1,122
C 5,1,7,0.26,0.34,0.0,0.0,0,122
HAPTER,1,6,0.33,0.35,0.0,0.03,1,122
"template set, it’ll take the first template in the set. But if you want to execute a differ-",0,9,0.21,0.13,0.03,0.0,0,122
Execute-,0,9,0.21,0.75,0.0,0.0,1,122
"ent template in the template set and not the first one, you need to use the",0,9,0.21,0.13,0.0,0.0,0,122
Template method. For example:,0,9,0.3,0.13,0.0,0.01,1,122
"t, _ := template.ParseFiles(""t1.html"", ""t2.html"")",0,7,0.26,0.13,0.01,0.01,1,122
"The argument t is a template set containing two templates, the first named t1.html",0,9,0.21,0.13,0.01,0.0,0,122
"and the second t2.html (the name of the template is the name of the file, extension",0,9,0.21,0.13,0.0,0.0,0,122
Execute method on it:,0,9,0.21,0.49,0.0,0.0,1,122
"and all, unless you change it). If you call the",0,9,0.3,0.13,0.0,0.01,1,122
"t.Execute(w, ""Hello World!"")",0,7,0.26,0.13,0.01,0.01,1,122
"it’ll result in t1.html being executed. If you want to execute t2.html, you need to do",0,9,0.21,0.13,0.01,0.0,0,122
this instead:,0,9,0.3,0.13,0.0,0.01,1,122
"t.ExecuteTemplate(w, ""t2.html"", ""Hello World!"")",0,7,0.26,0.13,0.01,0.01,1,122
We’ve discussed how to trigger the template engine to parse and execute templates.,0,9,0.21,0.13,0.01,0.0,0,122
Let’s look at the templates next.,0,9,0.3,0.13,0.0,0.01,1,122
5.3 Actions,1,12,0.54,0.06,0.01,0.01,1,122
"As mentioned earlier, actions",1,9,0.48,0.13,0.01,0.0,1,122
"are embedded commands in Go templates, placed",0,9,0.21,0.37,0.0,0.0,1,122
"between a set of double braces, {{ and }}. Go has an extensive set of actions, which are",0,9,0.21,0.13,0.0,0.0,0,122
"quite powerful and flexible. In this section, we’ll discuss some of the important ones:",0,9,0.21,0.13,0.0,0.01,0,122
Conditional actions,0,9,0.3,0.18,0.01,0.0,1,122
■,0,4,0.11,0.15,0.0,0.01,0,122
Iterator actions,0,9,0.3,0.18,0.01,0.0,1,122
■,0,4,0.11,0.15,0.0,0.01,0,122
Set actions,0,9,0.3,0.18,0.01,0.0,1,122
■,0,4,0.11,0.15,0.0,0.01,0,122
Include actions,0,9,0.3,0.18,0.01,0.0,1,122
■,0,4,0.11,0.15,0.0,0.02,0,122
"We’ll discuss another important action, the define action, later in this chapter. You",0,9,0.21,0.13,0.02,0.0,0,122
can look up the other actions in the text/template library documentation.,0,9,0.21,0.13,0.0,0.0,0,122
"It might come as a surprise, but the dot (.) is an action, and it’s the most important",0,9,0.21,0.15,0.0,0.0,0,122
one. The dot is the evaluation of the data that’s passed to the template. The other,0,9,0.21,0.13,0.0,0.0,0,122
actions and functions mostly manipulate the dot for formatting and display.,0,9,0.21,0.13,0.0,0.01,0,122
5.3.1 Conditional actions,1,10,0.5,0.06,0.01,0.01,1,122
The conditional actions are ones that select one of many data evaluations depending,0,9,0.21,0.13,0.01,0.0,0,122
on value of the argument. The simplest action is one with this format:,0,9,0.3,0.13,0.0,0.01,1,122
{{ if arg }},0,7,0.26,0.13,0.01,0.0,1,122
some content,0,7,0.26,0.13,0.0,0.0,1,122
{{ end }},0,7,0.26,0.13,0.0,0.02,1,122
The other variant is,0,9,0.3,0.13,0.02,0.01,1,122
{{ if arg }},0,7,0.26,0.13,0.01,0.0,1,122
some content,0,7,0.26,0.13,0.0,0.0,1,122
{{ else }},0,7,0.26,0.13,0.0,0.0,1,122
other content,0,7,0.26,0.13,0.0,0.0,1,122
{{ end }},0,7,0.26,0.13,0.0,0.0,1,122
103,1,9,0.3,0.82,0.0,0.0,0,123
Actions,1,9,0.39,0.43,0.0,0.03,1,123
The arg in both formats is the argument to the action. We’ll examine arguments in,0,9,0.21,0.14,0.03,0.0,0,123
"detail later in this chapter. For now, consider arguments to be values like a string con-",0,9,0.21,0.14,0.0,0.0,0,123
"stant, a variable, a function, or a method that returns a value. Let’s see how it can be",0,9,0.21,0.14,0.0,0.0,0,123
"used in a template. First, you need to create a handler that generates a random inte-",0,9,0.21,0.14,0.0,0.0,0,123
"ger between 0 and 10, shown in the next listing. Then you check if it’s larger than 5",0,9,0.21,0.14,0.0,0.0,0,123
and return it as a Boolean to the template.,0,9,0.3,0.14,0.0,0.03,1,123
Listing 5.3 Generating a random number in the handler,1,9,0.48,0.17,0.03,0.02,1,123
package main,0,7,0.26,0.14,0.02,0.02,1,123
import (,0,7,0.26,0.14,0.02,0.0,1,123
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,123
"""html/template""",0,7,0.26,0.14,0.0,0.0,1,123
"""math/rand""",0,7,0.26,0.14,0.0,0.0,1,123
"""time""",0,7,0.26,0.14,0.0,0.0,1,123
),0,7,0.17,0.14,0.0,0.02,0,123
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,123
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.0,0.0,1,123
rand.Seed(time.Now().Unix()),0,7,0.26,0.14,0.0,0.0,1,123
"t.Execute(w, rand.Intn(10) > 5)",0,7,0.26,0.14,0.0,0.0,1,123
},0,7,0.17,0.14,0.0,0.02,0,123
func main() {,0,7,0.26,0.14,0.02,0.0,1,123
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,123
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,123
},0,7,0.17,0.14,0.0,0.0,0,123
"http.HandleFunc(""/process"", process)",0,7,0.26,0.14,0.0,0.0,1,123
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,123
},0,7,0.17,0.14,0.0,0.02,0,123
"Next, in the template file tmpl.html, you test the argument (which happens to be the",0,9,0.21,0.14,0.02,0.0,0,123
"dot, which is the value passed from the handler) and display either",0,9,0.3,0.14,0.0,0.0,1,123
Number is greater,1,9,0.39,0.71,0.0,0.0,1,123
than 5! or Number is 5 or less!,1,9,0.48,0.14,0.0,0.03,1,123
Listing 5.4 Template file tmpl.html for conditional action,1,9,0.48,0.17,0.03,0.02,1,123
<!DOCTYPE html>,0,7,0.26,0.14,0.02,0.0,1,123
<html>,0,7,0.26,0.14,0.0,0.0,1,123
<head>,0,7,0.26,0.14,0.0,0.0,1,123
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,123
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,123
</head>,0,7,0.26,0.14,0.0,0.0,1,123
<body>,0,7,0.26,0.14,0.0,0.0,1,123
{{ if . }},0,7,0.26,0.14,0.0,0.0,1,123
Number is greater than 5!,0,7,0.26,0.14,0.0,0.0,1,123
{{ else }},0,7,0.26,0.14,0.0,0.0,1,123
Number is 5 or less!,0,7,0.26,0.14,0.0,0.0,1,123
{{ end }},0,7,0.26,0.14,0.0,0.0,1,123
</body>,0,7,0.26,0.14,0.0,0.0,1,123
</html>,0,7,0.26,0.14,0.0,0.0,1,123
104,1,9,0.39,0.06,0.0,0.0,0,124
Displaying content,1,9,0.39,0.42,0.0,0.0,1,124
C 5,1,7,0.26,0.34,0.0,0.0,0,124
HAPTER,1,6,0.33,0.35,0.0,0.03,1,124
5.3.2 Iterator actions,1,10,0.5,0.06,0.03,0.01,1,124
"Iterator actions are those that iterate through an array, slice, map, or channel. Within",0,9,0.21,0.13,0.01,0.0,0,124
"the iteration loop, the dot (.) is set to the successive elements of the array, slice, map,",0,9,0.21,0.13,0.0,0.0,0,124
or channel. This is how it looks:,0,9,0.3,0.13,0.0,0.01,1,124
{{ range array }},0,7,0.26,0.13,0.01,0.0,1,124
Dot is set to the element {{ . }},0,7,0.26,0.13,0.0,0.0,1,124
{{ end }},0,7,0.26,0.13,0.0,0.02,1,124
The example in this listing shows the template file tmpl.html.,0,9,0.3,0.13,0.02,0.03,1,124
Listing 5.5 Iterator action,1,9,0.48,0.15,0.03,0.02,1,124
<!DOCTYPE html>,0,7,0.26,0.13,0.02,0.0,1,124
<html>,0,7,0.26,0.13,0.0,0.0,1,124
<head>,0,7,0.26,0.13,0.0,0.0,1,124
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,124
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,124
</head>,0,7,0.26,0.13,0.0,0.0,1,124
<body>,0,7,0.26,0.13,0.0,0.0,1,124
<ul>,0,7,0.26,0.13,0.0,0.0,1,124
{{ range . }},0,7,0.26,0.13,0.0,0.0,1,124
<li>{{ . }}</li>,0,7,0.26,0.13,0.0,0.0,1,124
{{ end}},0,7,0.26,0.13,0.0,0.0,1,124
</ul>,0,7,0.26,0.13,0.0,0.0,1,124
</body>,0,7,0.26,0.13,0.0,0.0,1,124
</html>,0,7,0.26,0.13,0.0,0.02,1,124
Let’s look at the triggering handler:,0,9,0.3,0.13,0.02,0.01,1,124
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,124
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.0,1,124
"daysOfWeek := []string{""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""}",0,7,0.17,0.13,0.0,0.0,0,124
"t.Execute(w, daysOfWeek)",0,7,0.26,0.13,0.0,0.0,1,124
},0,7,0.17,0.13,0.0,0.02,0,124
You’re simply passing a slice of,0,9,0.3,0.13,0.02,0.0,1,124
strings with the short names of the,0,9,0.3,0.13,0.0,0.0,1,124
days in a week. This slice is then,0,9,0.3,0.13,0.0,0.0,1,124
{{,0,9,0.12,0.39,0.0,0.0,0,124
passed on to the dot (.) in the,0,9,0.3,0.13,0.0,0.0,1,124
"range . }} , which loops through",0,9,0.3,0.13,0.0,0.0,1,124
the elements of this slice.,0,9,0.3,0.13,0.0,0.0,1,124
The {{ . }} within the iterator,0,9,0.3,0.15,0.0,0.0,1,124
"loop is an element in the slice, so",0,9,0.3,0.13,0.0,0.0,1,124
figure 5.3 shows what you’ll see in,0,9,0.3,0.13,0.0,0.0,1,124
the browser.,0,9,0.3,0.13,0.0,0.02,1,124
Figure 5.3 Iterating with the iterator action,1,7,0.44,0.11,0.02,0.0,1,124
105,1,9,0.3,0.82,0.0,0.0,0,125
Actions,1,9,0.39,0.43,0.0,0.03,1,125
The following listing shows a variant of the iterator action that allows you to display a,0,9,0.21,0.14,0.03,0.0,0,125
fallback in case the iterator is empty.,0,9,0.3,0.14,0.0,0.03,1,125
Listing 5.6 Iterator action with fallback,1,9,0.48,0.17,0.03,0.02,1,125
<html>,0,7,0.26,0.14,0.02,0.0,1,125
<head>,0,7,0.26,0.14,0.0,0.0,1,125
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,125
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,125
</head>,0,7,0.26,0.14,0.0,0.0,1,125
<body>,0,7,0.26,0.14,0.0,0.0,1,125
<ul>,0,7,0.26,0.14,0.0,0.0,1,125
{{ range . }},0,7,0.26,0.14,0.0,0.0,1,125
<li>{{ . }}</li>,0,7,0.26,0.14,0.0,0.0,1,125
{{ else }},0,7,0.26,0.14,0.0,0.0,1,125
<li> Nothing to show </li>,0,7,0.26,0.14,0.0,0.0,1,125
{{ end}},0,7,0.26,0.14,0.0,0.0,1,125
</ul>,0,7,0.26,0.14,0.0,0.0,1,125
</body>,0,7,0.26,0.14,0.0,0.0,1,125
</html>,0,7,0.26,0.14,0.0,0.02,1,125
{{ else }} and before {{ end }},0,9,0.21,0.4,0.02,0.0,1,125
In the listing the content after,0,9,0.3,0.14,0.0,0.0,1,125
will be displayed if,0,9,0.21,0.69,0.0,0.0,1,125
"the dot (.) is nil . In this case, we’re displaying the text",0,9,0.3,0.14,0.0,0.0,1,125
Nothing to show .,1,9,0.39,0.59,0.0,0.02,1,125
5.3.3 Set actions,1,10,0.5,0.07,0.02,0.01,1,125
The set actions allow us to set the value of dot (.) for use within the enclosed section.,0,9,0.21,0.14,0.01,0.0,0,125
This is how it looks:,0,9,0.3,0.14,0.0,0.01,1,125
{{ with arg }},0,7,0.26,0.14,0.01,0.0,1,125
Dot is set to arg,0,7,0.26,0.14,0.0,0.0,1,125
{{ end }},0,7,0.26,0.14,0.0,0.02,1,125
The dot (.) between {{ with arg }},0,9,0.3,0.14,0.02,0.0,1,125
and {{ end }} is now pointing to,0,9,0.21,0.44,0.0,0.0,1,125
arg . In the next,0,9,0.21,0.72,0.0,0.0,1,125
"listing, let’s look at something more concrete and make changes to tmpl.html again.",0,9,0.21,0.14,0.0,0.03,0,125
Listing 5.7 Setting the dot,1,9,0.48,0.17,0.03,0.02,1,125
<html>,0,7,0.26,0.14,0.02,0.0,1,125
<head>,0,7,0.26,0.14,0.0,0.0,1,125
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,125
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,125
</head>,0,7,0.26,0.14,0.0,0.0,1,125
<body>,0,7,0.26,0.14,0.0,0.0,1,125
<div>The dot is {{ . }}</div>,0,7,0.26,0.14,0.0,0.0,1,125
<div>,0,7,0.26,0.14,0.0,0.0,1,125
"{{ with ""world""}}",0,7,0.26,0.14,0.0,0.0,1,125
Now the dot is set to {{ . }},0,7,0.26,0.14,0.0,0.0,1,125
{{ end }},0,7,0.26,0.14,0.0,0.0,1,125
</div>,0,7,0.26,0.14,0.0,0.0,1,125
<div>The dot is {{ . }} again</div>,0,7,0.26,0.14,0.0,0.0,1,125
</body>,0,7,0.26,0.14,0.0,0.0,1,125
</html>,0,7,0.26,0.14,0.0,0.0,1,125
106,1,9,0.39,0.06,0.0,0.0,0,126
Displaying content,1,9,0.39,0.42,0.0,0.0,1,126
C 5,1,7,0.26,0.34,0.0,0.0,0,126
HAPTER,1,6,0.33,0.35,0.0,0.03,1,126
hello to the template:,0,9,0.21,0.41,0.03,0.0,1,126
"For the handler, we’ll pass a string",0,9,0.3,0.13,0.0,0.01,1,126
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,126
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.0,1,126
"t.Execute(w,""hello"")",0,7,0.26,0.13,0.0,0.0,1,126
},0,7,0.17,0.13,0.0,0.02,0,126
"The dot before {{ with ""world""}}",0,9,0.3,0.13,0.02,0.0,1,126
"is set to hello . The value is from the handler, but",0,9,0.21,0.42,0.0,0.0,1,126
"between {{ with ""world""}}",0,9,0.3,0.13,0.0,0.0,1,126
and {{ end }} it’s set to world,0,9,0.21,0.36,0.0,0.0,1,126
. After {{ end }} it’ll revert,0,9,0.21,0.61,0.0,0.0,1,126
"to hello again, as shown in figure 5.4.",0,9,0.43,0.13,0.0,0.23,1,126
Figure 5.4 Setting the dot,1,7,0.49,0.54,0.23,0.0,1,126
with the set action,1,7,0.35,0.54,0.0,0.03,1,126
"As with the iterator action, there’s a variant of the set action that allows a fallback:",0,9,0.21,0.13,0.03,0.01,0,126
{{ with arg }},0,7,0.26,0.13,0.01,0.0,1,126
Dot is set to arg,0,7,0.26,0.13,0.0,0.0,1,126
{{ else }},0,7,0.26,0.13,0.0,0.0,1,126
Fallback if arg is empty,0,7,0.26,0.13,0.0,0.0,1,126
{{ end }},0,7,0.26,0.13,0.0,0.02,1,126
This listing takes another look at how this is used in tmpl.html.,0,9,0.3,0.13,0.02,0.03,1,126
Listing 5.8 Setting the dot with fallback,1,9,0.48,0.15,0.03,0.02,1,126
<html>,0,7,0.26,0.13,0.02,0.0,1,126
<head>,0,7,0.26,0.13,0.0,0.0,1,126
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,126
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,126
</head>,0,7,0.26,0.13,0.0,0.0,1,126
<body>,0,7,0.26,0.13,0.0,0.0,1,126
<div>The dot is {{ . }}</div>,0,7,0.26,0.13,0.0,0.0,1,126
<div>,0,7,0.26,0.13,0.0,0.0,1,126
"{{ with """" }}",0,7,0.26,0.13,0.0,0.0,1,126
Now the dot is set to {{ . }},0,7,0.26,0.13,0.0,0.0,1,126
{{ else }},0,7,0.26,0.13,0.0,0.0,1,126
The dot is still {{ . }},0,7,0.26,0.13,0.0,0.0,1,126
{{ end }},0,7,0.26,0.13,0.0,0.0,1,126
107,1,9,0.3,0.82,0.0,0.0,0,127
Actions,1,9,0.39,0.43,0.0,0.03,1,127
</div>,0,7,0.26,0.14,0.03,0.0,1,127
<div>The dot is {{ . }} again</div>,0,7,0.26,0.14,0.0,0.0,1,127
</body>,0,7,0.26,0.14,0.0,0.0,1,127
</html>,0,7,0.26,0.14,0.0,0.02,1,127
"with action is an empty string, which means the content",0,9,0.21,0.37,0.02,0.0,1,127
The argument next to the,0,9,0.3,0.14,0.0,0.0,1,127
after {{ else }} will be displayed. The dot in the content is still,0,9,0.3,0.14,0.0,0.0,1,127
hello because it’s not,0,9,0.21,0.67,0.0,0.0,1,127
affected. If you run the server again (you don’t need to make any changes to the han-,0,9,0.21,0.14,0.0,0.0,0,127
"dler—in fact, you don’t even need to stop the server), you’ll see figure 5.5.",0,9,0.34,0.14,0.0,0.23,0,127
Figure 5.5 Setting the dot,1,7,0.49,0.57,0.23,0.0,1,127
with a fallback,1,7,0.35,0.57,0.0,0.03,1,127
5.3.4 Include actions,1,10,0.5,0.07,0.03,0.01,1,127
"Next, we have the include actions, which allow us to include a template in another",0,9,0.21,0.14,0.01,0.0,0,127
"template. As you might realize, these actions let us nest templates. The format of the",0,9,0.21,0.14,0.0,0.0,0,127
"include action is {{ template ""name"" }}",0,9,0.3,0.14,0.0,0.0,1,127
", where name is the name of the template to",0,9,0.21,0.49,0.0,0.0,1,127
be included.,0,9,0.3,0.14,0.0,0.0,1,127
"In our example, we have two templates: t1.html and t2.html. The template t1.html",0,9,0.21,0.17,0.0,0.0,0,127
includes t2.html. Let’s look at t1.html first.,0,9,0.3,0.14,0.0,0.03,1,127
Listing 5.9 t1.html,1,9,0.48,0.17,0.03,0.02,1,127
<!DOCTYPE html>,0,7,0.26,0.14,0.02,0.0,1,127
"<html lang=""en"">",0,7,0.26,0.14,0.0,0.0,1,127
<head>,0,7,0.26,0.14,0.0,0.0,1,127
"<meta charset=""utf-8"">",0,7,0.26,0.14,0.0,0.0,1,127
"<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">",0,7,0.26,0.14,0.0,0.0,1,127
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,127
</head>,0,7,0.26,0.14,0.0,0.0,1,127
<body>,0,7,0.26,0.14,0.0,0.0,1,127
<div> This is t1.html before</div>,0,7,0.26,0.14,0.0,0.0,1,127
<div>This is the value of the dot in t1.html - [{{ . }}]</div>,0,7,0.26,0.14,0.0,0.0,1,127
<hr/>,0,7,0.26,0.14,0.0,0.0,1,127
"{{ template ""t2.html"" }}",0,7,0.26,0.14,0.0,0.0,1,127
<hr/>,0,7,0.26,0.14,0.0,0.0,1,127
108,1,9,0.39,0.06,0.0,0.0,0,128
Displaying content,1,9,0.39,0.42,0.0,0.0,1,128
C 5,1,7,0.26,0.34,0.0,0.0,0,128
HAPTER,1,6,0.33,0.35,0.0,0.03,1,128
<div> This is t1.html after</div>,0,7,0.26,0.13,0.03,0.0,1,128
</body>,0,7,0.26,0.13,0.0,0.0,1,128
</html>,0,7,0.26,0.13,0.0,0.02,1,128
"As you can see, the name of the file is used as the name of the template. Remember",0,9,0.21,0.13,0.02,0.0,0,128
"that if we don’t set the name of the template when it’s created, Go will set the name of",0,9,0.21,0.13,0.0,0.0,0,128
"the file, including its extension, as the name of the template.",0,9,0.3,0.13,0.0,0.0,1,128
Let’s look at t2.html now.,0,9,0.3,0.15,0.0,0.03,1,128
Listing 5.10 t2.html,1,9,0.48,0.15,0.03,0.02,1,128
"<div style=""background-color: yellow;"">",0,7,0.26,0.13,0.02,0.0,1,128
This is t2.html<br/>,0,7,0.26,0.13,0.0,0.0,1,128
This is the value of the dot in t2.html - [{{ . }}],0,7,0.26,0.13,0.0,0.0,1,128
</div>,0,7,0.26,0.13,0.0,0.02,1,128
The template t2.html is a snippet of,0,9,0.3,0.13,0.02,0.0,1,128
"HTML . The next listing shows the handler, which",0,9,0.21,0.42,0.0,0.0,1,128
is just as short.,0,9,0.3,0.13,0.0,0.03,1,128
Listing 5.11 Handler that includes templates,1,9,0.48,0.15,0.03,0.02,1,128
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,128
"t, _ := template.ParseFiles(""t1.html"", ""t2.html"")",0,7,0.26,0.13,0.0,0.0,1,128
"t.Execute(w, ""Hello World!"")",0,7,0.26,0.13,0.0,0.0,1,128
},0,7,0.17,0.13,0.0,0.02,0,128
"Unlike with the previous handlers, we need to parse both the template files that we’re",0,9,0.21,0.13,0.02,0.0,0,128
going to use. This is extremely important because if we forget to parse our template,0,9,0.21,0.13,0.0,0.0,0,128
"files, we’ll get nothing.",0,9,0.3,0.13,0.0,0.0,1,128
"Because we didn’t set the name of the templates, the templates in the template set",0,9,0.21,0.15,0.0,0.0,0,128
ParseFiles,0,9,0.21,0.73,0.0,0.0,1,128
"use the name of the files. As mentioned earlier, the parameters for the",0,9,0.21,0.13,0.0,0.0,0,128
function are position-sensitive for the first parameter. The first template file that’s,0,9,0.21,0.13,0.0,0.0,0,128
Execute method on the template,0,9,0.21,0.55,0.0,0.0,1,128
"parsed is the main template, and when we call the",0,9,0.3,0.13,0.0,0.0,1,128
"set, this is the template that’ll be called.",0,9,0.3,0.13,0.0,0.0,1,128
Figure 5.6 shows what happens in the browser when you run the server.,0,9,0.43,0.15,0.0,0.2,1,128
Figure 5.6 Including a template,1,7,0.49,0.54,0.2,0.0,1,128
within a template,1,7,0.35,0.54,0.0,0.0,1,128
109,1,9,0.3,0.82,0.0,0.0,0,129
Actions,1,9,0.39,0.43,0.0,0.03,1,129
Hello World! And the,0,9,0.21,0.65,0.03,0.0,1,129
You can see that in t1.html the dot is replaced correctly with,0,9,0.3,0.14,0.0,0.0,1,129
"{{ template ""t2.html"" }}",0,9,0.21,0.46,0.0,0.0,1,129
contents of t2.html are inserted where,0,9,0.3,0.14,0.0,0.0,1,129
appears. You can,0,9,0.21,0.7,0.0,0.0,1,129
Hello World! isn’t passed,0,9,0.21,0.63,0.0,0.0,1,129
also see that the dot in t2.html is empty because the string,0,9,0.3,0.14,0.0,0.0,1,129
{{,0,9,0.12,0.82,0.0,0.0,0,129
to included templates. But there’s a variant of the include action that allows this:,0,9,0.21,0.14,0.0,0.0,0,129
"template ""name"" arg }}",0,9,0.3,0.14,0.0,0.0,1,129
", where arg is the argument you want to pass on to the",0,9,0.21,0.37,0.0,0.0,1,129
included template. This listing shows how this works in our example.,0,9,0.3,0.14,0.0,0.03,1,129
Listing 5.12 t1.html with an argument passed to t2.html,1,9,0.48,0.17,0.03,0.02,1,129
<html>,0,7,0.26,0.14,0.02,0.0,1,129
<head>,0,7,0.26,0.14,0.0,0.0,1,129
"<meta charset=""utf-8"">",0,7,0.26,0.14,0.0,0.0,1,129
"<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">",0,7,0.26,0.14,0.0,0.0,1,129
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,129
</head>,0,7,0.26,0.14,0.0,0.0,1,129
<body>,0,7,0.26,0.14,0.0,0.0,1,129
<div> This is t1.html before</div>,0,7,0.26,0.14,0.0,0.0,1,129
<div>This is the value of the dot in t1.html - [{{ . }}]</div>,0,7,0.26,0.14,0.0,0.0,1,129
<hr/>,0,7,0.26,0.14,0.0,0.0,1,129
"{{ template ""t2.html"" . }}",0,7,0.26,0.14,0.0,0.0,1,129
<hr/>,0,7,0.26,0.14,0.0,0.0,1,129
<div> This is t1.html after</div>,0,7,0.26,0.14,0.0,0.0,1,129
</body>,0,7,0.26,0.14,0.0,0.0,1,129
</html>,0,7,0.26,0.14,0.0,0.02,1,129
"The change isn’t obvious, but what we did here in t1.html is pass the dot to t2.html. If",0,9,0.21,0.14,0.02,0.0,0,129
"we go back to the browser now, we’ll see figure 5.7.",0,9,0.43,0.14,0.0,0.24,1,129
Figure 5.7 Passing data,1,7,0.49,0.59,0.24,0.0,1,129
to included templates,1,7,0.35,0.59,0.0,0.04,1,129
"Actions provide flexibility for programmers, but so far we’ve only seen the simpler and",0,9,0.21,0.14,0.04,0.0,0,129
more straightforward use of templates. We’ll get back into nested templates later in,0,9,0.21,0.14,0.0,0.0,0,129
"this chapter, and also talk about another action that we didn’t cover in this section: the",0,9,0.21,0.14,0.0,0.0,0,129
"define action. But first, we need to talk about arguments, variables, and pipelines.",0,9,0.21,0.14,0.0,0.0,0,129
110,1,9,0.39,0.06,0.0,0.0,0,130
Displaying content,1,9,0.39,0.42,0.0,0.0,1,130
C 5,1,7,0.26,0.34,0.0,0.0,0,130
HAPTER,1,6,0.33,0.35,0.0,0.03,1,130
"5.4 Arguments, variables, and pipelines",1,12,0.54,0.06,0.03,0.01,1,130
"An argument is a value that’s used in a template. It can be a Boolean, integer, string,",1,9,0.39,0.13,0.01,0.0,0,130
"and so on. It can also be a struct, or a field of a struct, or the key of an array. Argu-",0,9,0.21,0.13,0.0,0.0,0,130
"ments can be a variable, a method (which must return either one value, or a value and",0,9,0.21,0.13,0.0,0.0,0,130
"an error) or a function. An argument can also be a dot (.), which is the value passed",0,9,0.21,0.13,0.0,0.0,0,130
from the template engine.,0,9,0.3,0.13,0.0,0.0,1,130
In the example,0,9,0.3,0.15,0.0,0.01,1,130
{{ if arg }},0,7,0.26,0.13,0.01,0.0,1,130
some content,0,7,0.26,0.13,0.0,0.0,1,130
{{ end }},0,7,0.26,0.13,0.0,0.02,1,130
the argument is arg .,0,9,0.3,0.13,0.02,0.0,1,130
$ ) and,0,9,0.21,0.77,0.0,0.0,1,130
We can also set variables in the action. Variables start with the dollar sign (,0,9,0.21,0.15,0.0,0.0,0,130
look like this:,0,9,0.3,0.13,0.0,0.01,1,130
$variable := value,0,7,0.26,0.13,0.01,0.01,1,130
"Variables don’t look too useful at first glance, but they can be quite invaluable in",0,9,0.21,0.13,0.01,0.0,0,130
actions. Here’s one way to use a variable as a variant of the iterator action:,0,9,0.21,0.13,0.0,0.01,0,130
"{{ range $key, $value := . }}",0,7,0.26,0.13,0.01,0.0,1,130
The key is {{ $key }} and the value is {{ $value }},0,7,0.26,0.13,0.0,0.0,1,130
{{ end }},0,7,0.26,0.13,0.0,0.02,1,130
range initializes the $key,0,9,0.21,0.45,0.02,0.0,1,130
and $value variables,0,9,0.21,0.66,0.0,0.0,1,130
"In this snippet, the dot (.) is a map and",0,9,0.3,0.13,0.0,0.0,1,130
with the key and value of the successive elements in the map.,0,9,0.3,0.13,0.0,0.0,1,130
"Pipelines are arguments, functions, and methods chained together in a sequence.",1,9,0.39,0.15,0.0,0.0,0,130
"This works much like the Unix pipeline. In fact, the syntax looks very similar",0,9,0.21,0.13,0.0,0.01,0,130
{{ p1 | p2 | p3 }},0,7,0.26,0.13,0.01,0.01,1,130
"where p1 , p2 , and p3 are either arguments or functions. Pipelining allows us to send",0,9,0.21,0.13,0.01,0.0,0,130
"the output of an argument into the next one, which is separated by the pipeline (|).",0,9,0.21,0.13,0.0,0.0,0,130
The next listing shows how this looks in a template.,0,9,0.3,0.13,0.0,0.03,1,130
Listing 5.13 Pipelining in a template,1,9,0.48,0.15,0.03,0.02,1,130
<!DOCTYPE html>,0,7,0.26,0.13,0.02,0.0,1,130
<html>,0,7,0.26,0.13,0.0,0.0,1,130
<head>,0,7,0.26,0.13,0.0,0.0,1,130
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,130
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,130
</head>,0,7,0.26,0.13,0.0,0.0,1,130
<body>,0,7,0.26,0.13,0.0,0.0,1,130
"{{ 12.3456 | printf ""%.2f"" }}",0,7,0.26,0.13,0.0,0.0,1,130
</body>,0,7,0.26,0.13,0.0,0.0,1,130
</html>,0,7,0.26,0.13,0.0,0.0,1,130
111,1,9,0.3,0.82,0.0,0.0,0,131
Functions,1,9,0.39,0.43,0.0,0.03,1,131
"We often need to reformat data for display in our templates, and in the previous list-",0,9,0.21,0.14,0.03,0.0,0,131
ing we want to display a floating point number with two decimal points accuracy. To,0,9,0.21,0.14,0.0,0.0,0,131
"do so, we can use the fmt.Sprintf",0,9,0.3,0.14,0.0,0.0,1,131
function or the built-in printf,0,9,0.21,0.43,0.0,0.0,1,131
function that wraps,0,9,0.21,0.68,0.0,0.0,1,131
around fmt.Sprintf .,0,9,0.3,0.14,0.0,0.0,1,131
"printf function, with the for-",0,9,0.21,0.6,0.0,0.0,1,131
"In listing 5.13, we pipe the number 12.3456 to the",0,9,0.3,0.17,0.0,0.0,1,131
mat specifier as the first parameter (we’ll talk about functions later in this chapter).,0,9,0.21,0.14,0.0,0.0,0,131
This will result in 12.35 being displayed in the browser.,1,9,0.48,0.14,0.0,0.0,1,131
"Pipelining doesn’t look terribly exciting, but when we talk about functions you’ll",0,9,0.21,0.17,0.0,0.0,0,131
understand why it can be a very powerful feature.,0,9,0.3,0.14,0.0,0.02,1,131
5.5 Functions,1,12,0.54,0.07,0.02,0.01,1,131
"As mentioned earlier, an argument can be a Go function. The Go template engine has",0,9,0.21,0.14,0.01,0.0,0,131
"a set of built-in functions that are pretty basic, including a number of aliases for vari-",0,9,0.21,0.14,0.0,0.0,0,131
ants of fmt.Sprint .(Refer to the,0,9,0.3,0.14,0.0,0.0,1,131
fmt package documentation to see the list.) What’s,0,9,0.21,0.42,0.0,0.0,1,131
more useful is the capability for programmers to define their own functions.,0,9,0.21,0.14,0.0,0.0,0,131
Go template engine functions are limited. Although a function can take any num-,0,9,0.21,0.17,0.0,0.0,0,131
"ber of input parameters, it must only return either one value, or two values only if the",0,9,0.21,0.14,0.0,0.0,0,131
second value is an error.,0,9,0.3,0.14,0.0,0.0,1,131
"To define custom functions, you need to:",0,9,0.3,0.17,0.0,0.01,1,131
"Create a FuncMap map, which has the name of the function as the key and the",0,9,0.21,0.19,0.01,0.0,0,131
1,1,6,0.33,0.17,0.0,0.01,0,131
actual function as the value.,0,9,0.3,0.19,0.01,0.01,1,131
Attach the FuncMap to the template.,0,9,0.3,0.19,0.01,0.0,1,131
2,1,6,0.33,0.17,0.0,0.01,0,131
Let’s look at how you can create your own custom function. When writing web applica-,0,9,0.21,0.14,0.01,0.0,0,131
"tions, you may need to convert a time or date object to an",0,9,0.3,0.14,0.0,0.0,1,131
ISO 8601 formatted time or,0,9,0.21,0.62,0.0,0.0,1,131
"date string, respectively. Unfortunately, this formatter isn’t a built-in function, which",0,9,0.21,0.14,0.0,0.0,0,131
"gives you a nice excuse for creating it as a custom function, shown next.",0,9,0.21,0.14,0.0,0.03,0,131
Listing 5.14 Custom function for templates,1,9,0.48,0.17,0.03,0.02,1,131
package main,0,7,0.26,0.14,0.02,0.02,1,131
import (,0,7,0.26,0.14,0.02,0.0,1,131
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,131
"""html/template""",0,7,0.26,0.14,0.0,0.0,1,131
"""time""",0,7,0.26,0.14,0.0,0.0,1,131
),0,7,0.17,0.14,0.0,0.02,0,131
func formatDate(t time.Time) string {,0,7,0.26,0.14,0.02,0.0,1,131
"layout := ""2006-01-02""",0,7,0.26,0.14,0.0,0.0,1,131
return t.Format(layout),0,7,0.26,0.14,0.0,0.0,1,131
},0,7,0.17,0.14,0.0,0.02,0,131
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,131
"funcMap := template.FuncMap { ""fdate"": formatDate }",0,7,0.26,0.14,0.0,0.0,1,131
"t := template.New(""tmpl.html"").Funcs(funcMap)",0,7,0.26,0.14,0.0,0.0,1,131
"t, _ = t.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.0,0.0,1,131
112,1,9,0.39,0.06,0.0,0.0,0,132
Displaying content,1,9,0.39,0.42,0.0,0.0,1,132
C 5,1,7,0.26,0.34,0.0,0.0,0,132
HAPTER,1,6,0.33,0.35,0.0,0.03,1,132
"t.Execute(w, time.Now())",0,7,0.26,0.13,0.03,0.0,1,132
},0,7,0.17,0.13,0.0,0.02,0,132
func main() {,0,7,0.26,0.13,0.02,0.0,1,132
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,132
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,132
},0,7,0.17,0.13,0.0,0.0,0,132
"http.HandleFunc(""/process"", process)",0,7,0.26,0.13,0.0,0.0,1,132
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,132
},0,7,0.17,0.13,0.0,0.02,0,132
formatDate that takes in a,0,9,0.21,0.51,0.02,0.0,1,132
Time struct,0,9,0.21,0.74,0.0,0.0,1,132
The previous listing defines a function named,0,9,0.3,0.13,0.0,0.0,1,132
and returns an ISO 8601 formatted string in the Year-Month-Day format. This is the,0,9,0.21,0.13,0.0,0.0,0,132
function that we’ll be using later.,0,9,0.3,0.13,0.0,0.0,1,132
FuncMap struct named funcMap,0,9,0.21,0.41,0.0,0.0,1,132
"In the handler, you first create a",0,9,0.3,0.15,0.0,0.0,1,132
", mapping the name",0,9,0.21,0.66,0.0,0.0,1,132
fdate to the formatDate,0,9,0.3,0.13,0.0,0.0,1,132
"function. Next, you create a template with the name",0,9,0.21,0.36,0.0,0.0,1,132
tmpl.html using the template.New,0,9,0.3,0.13,0.0,0.0,1,132
"function. This function returns a template, so you",0,9,0.21,0.42,0.0,0.0,1,132
can chain it with the Funcs,0,9,0.3,0.13,0.0,0.0,1,132
"function, passing it funcMap",0,9,0.21,0.35,0.0,0.0,1,132
. This attaches funcMap to the,0,9,0.21,0.58,0.0,0.0,1,132
"template, which you can then use to parse your template file tmpl.html. Finally, you call",0,9,0.21,0.13,0.0,0.0,0,132
"Execute on the template, passing it the",0,9,0.3,0.13,0.0,0.0,1,132
ResponseWriter as well as the current time.,0,9,0.21,0.45,0.0,0.0,1,132
Func-,0,9,0.21,0.78,0.0,0.0,1,132
There are potentially a few minor gotchas here. First you need to attach the,0,9,0.21,0.15,0.0,0.0,0,132
Map before you parse the template. This is because when you parse the template you,0,9,0.21,0.13,0.0,0.0,0,132
"must already know the functions used within the template, which you won’t unless the",0,9,0.21,0.13,0.0,0.0,0,132
template has the FuncMap,0,9,0.3,0.13,0.0,0.0,1,132
.,0,9,0.12,0.33,0.0,0.0,0,132
ParseFiles if no templates are defined in,0,9,0.21,0.48,0.0,0.0,1,132
"Second, remember that when you call",0,9,0.3,0.15,0.0,0.0,1,132
"the template files, it’ll take the name of the file as the template name. When you cre-",0,9,0.21,0.13,0.0,0.0,0,132
"New function, you’ll have to pass in the template name. If",0,9,0.21,0.36,0.0,0.0,1,132
ate a new template using the,0,9,0.3,0.13,0.0,0.0,1,132
"this template name and the template name derived from the filename don’t match,",0,9,0.21,0.13,0.0,0.0,0,132
you’ll get an error.,0,9,0.3,0.13,0.0,0.0,1,132
"Now that you have the handler done, the following listing shows you how you can",0,9,0.21,0.15,0.0,0.0,0,132
use it in tmpl.html.,0,9,0.3,0.13,0.0,0.03,1,132
Listing 5.15 Using a custom function by pipelining,1,9,0.48,0.15,0.03,0.02,1,132
<html>,0,7,0.26,0.13,0.02,0.0,1,132
<head>,0,7,0.26,0.13,0.0,0.0,1,132
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,132
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,132
</head>,0,7,0.26,0.13,0.0,0.0,1,132
<body>,0,7,0.26,0.13,0.0,0.0,1,132
<div>The date/time is {{ . | fdate }}</div>,0,7,0.26,0.13,0.0,0.0,1,132
</body>,0,7,0.26,0.13,0.0,0.0,1,132
</html>,0,7,0.26,0.13,0.0,0.0,1,132
113,1,9,0.3,0.82,0.0,0.0,0,133
Context awareness,1,9,0.39,0.4,0.0,0.03,1,133
"You can use your function in a couple of ways. You can use it in a pipeline, piping the",0,9,0.21,0.14,0.03,0.0,0,133
current time into the fdate,0,9,0.3,0.14,0.0,0.0,1,133
"function, which will produce figure 5.8.",0,9,0.34,0.37,0.0,0.18,1,133
Figure 5.8 Using a custom function,1,7,0.49,0.57,0.18,0.0,1,133
to format the date/time,1,7,0.35,0.57,0.0,0.04,1,133
"An alternative is to use it as with a normal function, passing the dot as a parameter to",0,9,0.21,0.14,0.04,0.0,0,133
"the fdate function, as illustrated in this listing.",0,9,0.3,0.14,0.0,0.03,1,133
Listing 5.16 Using a custom function by passing parameters,1,9,0.48,0.17,0.03,0.02,1,133
<html>,0,7,0.26,0.14,0.02,0.0,1,133
<head>,0,7,0.26,0.14,0.0,0.0,1,133
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,133
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,133
</head>,0,7,0.26,0.14,0.0,0.0,1,133
<body>,0,7,0.26,0.14,0.0,0.0,1,133
<div>The date/time is {{ fdate . }}</div>,0,7,0.26,0.14,0.0,0.0,1,133
</body>,0,7,0.26,0.14,0.0,0.0,1,133
</html>,0,7,0.26,0.14,0.0,0.02,1,133
"Both produce the same results, but you can see that pipelining is more powerful and",0,9,0.21,0.14,0.02,0.0,0,133
"flexible. If you define a number of custom functions, you can pipeline the output of",0,9,0.21,0.14,0.0,0.0,0,133
"one function to the input of another, as well as mix and match them. Although you",0,9,0.21,0.14,0.0,0.0,0,133
"can also do this with normal function calls, this approach is a lot more readable and",0,9,0.21,0.14,0.0,0.0,0,133
creates simpler code.,0,9,0.3,0.14,0.0,0.02,1,133
5.6 Context awareness,1,12,0.54,0.07,0.02,0.01,1,133
One of the most interesting features of the Go template engine is that the content it,0,9,0.21,0.14,0.01,0.0,0,133
"displays can be changed according to its context. Yes, you read this correctly. The con-",0,9,0.21,0.14,0.0,0.0,0,133
tent that’s displayed changes depending on where you place it within the document;,0,9,0.21,0.14,0.0,0.0,0,133
"that is, the display of the content is",0,9,0.3,0.14,0.0,0.0,1,133
context-aware . Why would anyone want that and,1,9,0.39,0.45,0.0,0.0,1,133
how is it useful?,0,9,0.3,0.14,0.0,0.0,1,133
One obvious use of this is to escape the displayed content properly. This means if,0,9,0.21,0.17,0.0,0.0,0,133
"the content is , it will be",0,9,0.3,0.14,0.0,0.0,1,133
"escaped; if it is JavaScript, it will be JavaScript",0,9,0.21,0.45,0.0,0.0,1,133
HTML HTML,0,9,0.21,0.26,0.0,0.0,1,133
114,1,9,0.39,0.06,0.0,0.0,0,134
Displaying content,1,9,0.39,0.42,0.0,0.0,1,134
C 5,1,7,0.26,0.34,0.0,0.0,0,134
HAPTER,1,6,0.33,0.35,0.0,0.03,1,134
escaped; and so on. The Go template engine also recognizes content that’s part of a,0,9,0.21,0.13,0.03,0.0,0,134
URL or is a CSS style. This listing demonstrates how this works.,0,9,0.3,0.13,0.0,0.03,1,134
Listing 5.17 Handler for context awareness in templates,1,9,0.48,0.15,0.03,0.02,1,134
package main,0,7,0.26,0.13,0.02,0.02,1,134
import (,0,7,0.26,0.13,0.02,0.0,1,134
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,134
"""html/template""",0,7,0.26,0.13,0.0,0.0,1,134
),0,7,0.17,0.13,0.0,0.02,0,134
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,134
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.0,1,134
"content := `I asked: <i>""What's up?""</i>`",0,7,0.26,0.13,0.0,0.0,1,134
"t.Execute(w, content)",0,7,0.26,0.13,0.0,0.0,1,134
},0,7,0.17,0.13,0.0,0.02,0,134
func main() {,0,7,0.26,0.13,0.02,0.0,1,134
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,134
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,134
},0,7,0.17,0.13,0.0,0.0,0,134
"http.HandleFunc(""/process"", process)",0,7,0.26,0.13,0.0,0.0,1,134
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,134
},0,7,0.17,0.13,0.0,0.02,0,134
"I asked: <i>""What's up?""</i>",0,9,0.21,0.54,0.02,0.0,1,134
"For the handler, we’re going to send a text string",0,9,0.3,0.13,0.0,0.0,1,134
.,0,9,0.12,0.82,0.0,0.0,0,134
This string has a number of special characters that normally should be escaped,0,9,0.21,0.13,0.0,0.0,0,134
beforehand. This listing contains the template file tmpl.html.,0,9,0.3,0.13,0.0,0.03,1,134
Listing 5.18 Context-aware template,1,9,0.48,0.15,0.03,0.02,1,134
<html>,0,7,0.26,0.13,0.02,0.0,1,134
<head>,0,7,0.26,0.13,0.0,0.0,1,134
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,134
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,134
</head>,0,7,0.26,0.13,0.0,0.0,1,134
<body>,0,7,0.26,0.13,0.0,0.0,1,134
<div>{{ . }}</div>,0,7,0.26,0.13,0.0,0.0,1,134
"<div><a href=""/{{ . }}"">Path</a></div>",0,7,0.26,0.13,0.0,0.0,1,134
"<div><a href=""/?q={{ . }}"">Query</a></div>",0,7,0.26,0.13,0.0,0.0,1,134
"<div><a onclick=""f('{{ . }}')"">Onclick</a></div>",0,7,0.26,0.13,0.0,0.0,1,134
</body>,0,7,0.26,0.13,0.0,0.0,1,134
</html>,0,7,0.26,0.13,0.0,0.02,1,134
"As you can see, we’re placing it in various places within the",0,9,0.3,0.13,0.02,0.0,1,134
HTML . The “control” text,0,9,0.21,0.62,0.0,0.0,1,134
is within a normal <div>,0,9,0.3,0.13,0.0,0.0,1,134
tag. When we run c URL to get the raw,0,9,0.21,0.33,0.0,0.0,1,134
HTML (please refer to,0,9,0.21,0.65,0.0,0.0,1,134
"section 4.1.4), we get this:",0,9,0.3,0.13,0.0,0.01,1,134
curl –i 127.0.0.1:8080/process,0,7,0.26,0.13,0.01,0.0,1,134
HTTP/1.1 200 OK,0,7,0.26,0.13,0.0,0.0,1,134
"Date: Sat, 07 Feb 2015 05:42:41 GMT",0,7,0.26,0.13,0.0,0.0,1,134
115,1,9,0.3,0.82,0.0,0.0,0,135
Context awareness,1,9,0.39,0.4,0.0,0.03,1,135
Content-Length: 505,0,7,0.26,0.14,0.03,0.0,1,135
Content-Type: text/html; charset=utf-8,0,7,0.26,0.14,0.0,0.02,1,135
<html>,0,7,0.26,0.14,0.02,0.0,1,135
<head>,0,7,0.26,0.14,0.0,0.0,1,135
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,135
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,135
</head>,0,7,0.26,0.14,0.0,0.0,1,135
<body>,0,7,0.26,0.14,0.0,0.0,1,135
<div>I asked: &lt;i&gt;&#34;What&#39;s up?&#34;&lt;/i&gt;</div>,0,7,0.26,0.14,0.0,0.0,1,135
<div>,0,7,0.26,0.14,0.0,0.0,1,135
"<a href=""/I%20asked:%20%3ci%3e%22What%27s%20up?%22%3c/i%3e"">",0,7,0.26,0.14,0.0,0.0,1,135
Path,0,7,0.26,0.14,0.0,0.0,1,135
</a>,0,7,0.26,0.14,0.0,0.0,1,135
</div>,0,7,0.26,0.14,0.0,0.0,1,135
<div>,0,7,0.26,0.14,0.0,0.0,1,135
"<a href=""/?q=I%20asked%3a%20%3ci%3e%22What%27s%20up%3f%22%3c%2fi%3e"">",0,7,0.26,0.14,0.0,0.0,1,135
Query,0,7,0.26,0.14,0.0,0.0,1,135
</a>,0,7,0.26,0.14,0.0,0.0,1,135
</div>,0,7,0.26,0.14,0.0,0.0,1,135
<div>,0,7,0.26,0.14,0.0,0.0,1,135
"<a onclick=""f('I asked: \x3ci\x3e\x22What\x27s up?\x22\x3c\/i\x3e')"">",0,7,0.26,0.14,0.0,0.0,1,135
Onclick,0,7,0.26,0.14,0.0,0.0,1,135
</a>,0,7,0.26,0.14,0.0,0.0,1,135
</div>,0,7,0.26,0.14,0.0,0.0,1,135
</body>,0,7,0.26,0.14,0.0,0.0,1,135
</html>,0,7,0.26,0.14,0.0,0.02,1,135
which looks a bit messy. Let’s explore the differences in table 5.1.,0,9,0.3,0.14,0.02,0.02,1,135
Table 5.1 Context awareness in Go templates: different content is produced according,1,7,0.35,0.14,0.02,0.0,0,135
to the location of the actions,1,7,0.44,0.14,0.0,0.02,1,135
Context,1,7,0.35,0.23,0.02,0.0,1,135
Content,1,7,0.35,0.54,0.0,0.02,1,135
"I asked: <i>""What's up?""</i>",0,7,0.17,0.39,0.02,0.0,1,135
Original text,0,7,0.26,0.15,0.0,0.01,1,135
{{ . }},0,7,0.26,0.15,0.01,0.0,1,135
I asked: &lt;i&gt;&#34;What&#39;s,0,7,0.17,0.39,0.0,0.0,1,135
up?&#34;&lt;/i&gt;,0,7,0.17,0.39,0.0,0.01,1,135
"<a href=""/{{ . }}"">",0,7,0.26,0.15,0.01,0.0,1,135
I%20asked:%20%3ci%3e%22What%27s%20up?%22%,0,7,0.17,0.39,0.0,0.0,1,135
3c/i%3e,0,7,0.17,0.39,0.0,0.01,1,135
"<a href=""/?q={{ . }}"">",0,7,0.26,0.15,0.01,0.0,1,135
I%20asked%3a%20%3ci%3e%22What%27s%20up%3f,0,7,0.17,0.39,0.0,0.0,1,135
%22%3c%2fi%3e,0,7,0.17,0.39,0.0,0.01,1,135
"<a onclick=""{{ . }}"">",0,7,0.26,0.15,0.01,0.0,1,135
I asked: \x3ci\x3e\x22What\x27s,0,7,0.17,0.39,0.0,0.0,1,135
up?\x22\x3c\/i\x3e,0,7,0.17,0.39,0.0,0.03,1,135
"This feature is pretty convenient, but its critical use is for automating defensive pro-",0,9,0.21,0.14,0.03,0.0,0,135
"gramming. By changing the content according to the context, we eliminate certain",0,9,0.21,0.14,0.0,0.0,0,135
obvious and newbie programmer mistakes. Let’s see how this feature can be used to,0,9,0.21,0.14,0.0,0.0,0,135
defend against XSS (cross-site scripting) attacks.,0,9,0.3,0.14,0.0,0.0,1,135
116,1,9,0.39,0.06,0.0,0.0,0,136
Displaying content,1,9,0.39,0.42,0.0,0.0,1,136
C 5,1,7,0.26,0.34,0.0,0.0,0,136
HAPTER,1,6,0.33,0.35,0.0,0.03,1,136
5.6.1 Defending against XSS attacks,1,10,0.5,0.06,0.03,0.01,1,136
A common XSS attack is the persistent,0,9,0.3,0.13,0.01,0.0,1,136
XSS vulnerability. This happens when data pro-,0,9,0.21,0.44,0.0,0.0,1,136
vided by an attacker is saved to the server and then displayed to other users as it is. Say,0,9,0.21,0.13,0.0,0.0,0,136
there’s a vulnerable forum site that allows its users to create posts or comments to be,0,9,0.21,0.13,0.0,0.0,0,136
saved and read by other users. An attacker can post a comment that includes mali-,0,9,0.21,0.13,0.0,0.0,0,136
<script> tag. Because the forum displays the com-,0,9,0.21,0.4,0.0,0.0,1,136
cious JavaScript code within the,0,9,0.3,0.13,0.0,0.0,1,136
"<script> tag isn’t shown to the user, the",0,9,0.21,0.46,0.0,0.0,1,136
ment as is and whatever is within the,0,9,0.3,0.13,0.0,0.0,1,136
malicious code is executed with the user’s permissions but without the user’s knowl-,0,9,0.21,0.13,0.0,0.0,0,136
edge. The normal way to prevent this is to escape whatever is passed into the system,0,9,0.21,0.13,0.0,0.0,0,136
"before displaying or storing it. But as with most exploits and bugs, the biggest culprit",0,9,0.21,0.13,0.0,0.0,0,136
is the human factor.,0,9,0.3,0.13,0.0,0.0,1,136
"Rather than hardcoding data at the handler, you can put your newly acquired",0,9,0.21,0.15,0.0,0.0,0,136
knowledge from chapter 4 to good use and create an,0,9,0.3,0.13,0.0,0.0,1,136
"HTML form, shown in the follow-",0,9,0.21,0.56,0.0,0.0,1,136
"ing listing, that allows you to submit data to your web application and place it in a",0,9,0.21,0.13,0.0,0.0,0,136
form.html file.,0,9,0.3,0.13,0.0,0.03,1,136
Listing 5.19 Form for submitting XSS attack,1,9,0.48,0.15,0.03,0.02,1,136
<html>,0,7,0.26,0.13,0.02,0.0,1,136
<head>,0,7,0.26,0.13,0.0,0.0,1,136
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,136
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,136
</head>,0,7,0.26,0.13,0.0,0.0,1,136
<body>,0,7,0.26,0.13,0.0,0.0,1,136
"<form action=""/process"" method=""post"">",0,7,0.26,0.13,0.0,0.0,1,136
"Comment: <input name=""comment"" type=""text"">",0,7,0.26,0.13,0.0,0.0,1,136
<hr/>,0,7,0.26,0.13,0.0,0.0,1,136
"<button id=""submit"">Submit</button>",0,7,0.26,0.13,0.0,0.0,1,136
</form>,0,7,0.26,0.13,0.0,0.0,1,136
</body>,0,7,0.26,0.13,0.0,0.0,1,136
</html>,0,7,0.26,0.13,0.0,0.02,1,136
"Next, change your handler accordingly to process the data from the form shown in",0,9,0.21,0.13,0.02,0.0,0,136
this listing.,0,9,0.3,0.13,0.0,0.03,1,136
Listing 5.20 Testing an XSS attack,1,9,0.48,0.15,0.03,0.02,1,136
package main,0,7,0.26,0.13,0.02,0.02,1,136
import (,0,7,0.26,0.13,0.02,0.0,1,136
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,136
"""html/template""",0,7,0.26,0.13,0.0,0.0,1,136
),0,7,0.17,0.13,0.0,0.02,0,136
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,136
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.0,1,136
"t.Execute(w, r.FormValue(""comment""))",0,7,0.26,0.13,0.0,0.0,1,136
},0,7,0.17,0.13,0.0,0.0,0,136
117,1,9,0.3,0.82,0.0,0.0,0,137
Context awareness,1,9,0.39,0.4,0.0,0.03,1,137
"func form(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.03,0.0,1,137
"t, _ := template.ParseFiles(""form.html"")",0,7,0.26,0.14,0.0,0.0,1,137
"t.Execute(w, nil)",0,7,0.26,0.14,0.0,0.0,1,137
},0,7,0.17,0.14,0.0,0.02,0,137
func main() {,0,7,0.26,0.14,0.02,0.0,1,137
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,137
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,137
},0,7,0.17,0.14,0.0,0.0,0,137
"http.HandleFunc(""/process"", process)",0,7,0.26,0.14,0.0,0.0,1,137
"http.HandleFunc(""/form"", form)",0,7,0.26,0.14,0.0,0.0,1,137
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,137
},0,7,0.17,0.14,0.0,0.02,0,137
"In your tmpl.html, clean up the output a bit to better see the results.",0,9,0.21,0.14,0.02,0.03,0,137
Listing 5.21 Cleaned-up tmpl.html,1,9,0.48,0.17,0.03,0.02,1,137
<html>,0,7,0.26,0.14,0.02,0.0,1,137
<head>,0,7,0.26,0.14,0.0,0.0,1,137
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,137
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,137
</head>,0,7,0.26,0.14,0.0,0.0,1,137
<body>,0,7,0.26,0.14,0.0,0.0,1,137
<div>{{ . }}</div>,0,7,0.26,0.14,0.0,0.0,1,137
</body>,0,7,0.26,0.14,0.0,0.0,1,137
</html>,0,7,0.26,0.14,0.0,0.02,1,137
"Now compile the server and start it up, then go to http://127.0.0.1:8080/form. Enter",0,9,0.21,0.14,0.02,0.0,0,137
"the following into the text field and click the submit button, shown in figure 5.9:",0,9,0.21,0.14,0.0,0.01,0,137
<script>alert('Pwnd!');</script>,0,7,0.4,0.14,0.01,0.19,1,137
Figure 5.9 Form for creating,1,7,0.49,0.63,0.19,0.0,1,137
an XSS attack,1,7,0.35,0.63,0.0,0.04,1,137
"A web app using a different template engine that doesn’t scrub the input, and displays",0,9,0.21,0.14,0.04,0.0,0,137
"user input directly on a web page, will get an alert message, or potentially any other",0,9,0.21,0.14,0.0,0.0,0,137
"malicious code that the attacker writes. As you probably realize, the Go template",0,9,0.21,0.14,0.0,0.0,0,137
"engine protects you from such mistakes because even if you don’t scrub the input,",0,9,0.21,0.14,0.0,0.0,0,137
118,1,9,0.39,0.06,0.0,0.0,0,138
Displaying content,1,9,0.39,0.42,0.0,0.0,1,138
C 5,1,7,0.26,0.34,0.0,0.0,0,138
HAPTER,1,6,0.33,0.35,0.0,0.03,1,138
when the input is displayed on the screen it’ll be converted into escaped,0,9,0.21,0.13,0.03,0.0,0,138
"HTML ,",0,9,0.21,0.77,0.0,0.0,1,138
shown in figure 5.10.,0,9,0.43,0.13,0.0,0.19,1,138
"Figure 5.10 The input is escaped,",1,7,0.49,0.55,0.19,0.0,1,138
thanks to the Go template engine.,1,7,0.35,0.55,0.0,0.04,1,138
If you inspect the source code of the page you’ll see something like this:,0,9,0.21,0.13,0.04,0.01,0,138
<html>,0,7,0.26,0.13,0.01,0.0,1,138
<head>,0,7,0.26,0.13,0.0,0.0,1,138
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,138
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,138
</head>,0,7,0.26,0.13,0.0,0.0,1,138
<body>,0,7,0.26,0.13,0.0,0.0,1,138
<div>&lt;script&gt;alert(&#39;Pwnd!&#39;);&lt;/script&gt;</div>,0,7,0.26,0.13,0.0,0.0,1,138
</body>,0,7,0.26,0.13,0.0,0.0,1,138
</html>,0,7,0.26,0.13,0.0,0.02,1,138
Context-awareness isn’t just for,0,9,0.3,0.13,0.02,0.0,1,138
"HTML , it also works on XSS",0,9,0.21,0.39,0.0,0.0,1,138
"attacks on JavaScript, CSS",0,9,0.21,0.61,0.0,0.0,1,138
",",0,9,0.12,0.82,0.0,0.0,0,138
and even URL s. Does this mean we’re saved from ourselves if we use the Go template,0,9,0.21,0.13,0.0,0.0,0,138
"engine? Well, no, nothing really saves us from ourselves, and there are ways of getting",0,9,0.21,0.13,0.0,0.0,0,138
"around this. In fact, Go allows us to escape from being context-aware if we really want to.",0,9,0.21,0.13,0.0,0.02,0,138
5.6.2 Unescaping HTML,1,10,0.5,0.06,0.02,0.01,1,138
"Say you really want this behavior, meaning you want the user to enter",0,9,0.3,0.13,0.01,0.0,1,138
HTML or Java-,0,9,0.21,0.71,0.0,0.0,1,138
Script code that’s executable when displayed. Go provides a mechanism to “unescape”,0,9,0.21,0.13,0.0,0.0,0,138
. Just cast your input string to template.,0,9,0.3,0.18,0.0,0.0,1,138
"and use that instead, and our",0,9,0.21,0.57,0.0,0.0,1,138
HTML,0,9,0.3,0.13,0.0,0.0,1,138
HTML,0,9,0.21,0.52,0.0,0.0,1,138
"code is happily unescaped. Let’s see how to do this. First, make a minor change to the",0,9,0.21,0.13,0.0,0.0,0,138
handler:,0,9,0.3,0.13,0.0,0.01,1,138
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.01,0.0,1,138
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.13,0.0,0.0,1,138
"t.Execute(w, template.HTML(r.FormValue(""comment"")))",0,7,0.26,0.13,0.0,0.0,1,138
},0,7,0.17,0.13,0.0,0.02,0,138
Notice that you’ve just typecast the comment value to the template.,0,9,0.3,0.13,0.02,0.0,1,138
HTML type.,0,9,0.21,0.67,0.0,0.0,1,138
"Now recompile and run the server, and then try the same attack. What happens",0,9,0.21,0.15,0.0,0.0,0,138
"depends on which browser you use. If you use Internet Explorer (8 and above),",0,9,0.21,0.13,0.0,0.0,0,138
119,1,9,0.3,0.82,0.0,0.0,0,139
Nesting templates,1,9,0.39,0.4,0.0,0.03,1,139
"Chrome, or Safari, nothing will happen—you’ll get a blank page. If you use Firefox,",0,9,0.21,0.14,0.03,0.0,0,139
you’ll get something like figure 5.11.,0,9,0.43,0.14,0.0,0.28,1,139
Figure 5.11 You are pwnd!,1,7,0.49,0.64,0.28,0.04,1,139
"What just happened? By default Internet Explorer, Chrome, and Safari have built-in",0,9,0.21,0.14,0.04,0.0,0,139
support for protection against certain types of,0,9,0.3,0.14,0.0,0.0,1,139
"XSS attacks. As a result, the simulated",0,9,0.21,0.53,0.0,0.0,1,139
attack doesn’t work on these browsers. But you can turn off the protection by,0,9,0.21,0.17,0.0,0.0,0,139
XSS,0,9,0.21,0.14,0.0,0.01,0,139
sending a special HTTP response header:,0,9,0.3,0.14,0.01,0.0,1,139
X-XSS-Protection (originally created by Micro-,1,9,0.39,0.48,0.0,0.0,1,139
soft for Internet Explorer) will disable it. (Note: Firefox doesn’t have default protec-,0,9,0.21,0.14,0.0,0.0,0,139
tion against these types of attacks.),0,9,0.3,0.14,0.0,0.0,1,139
If you really want to stop the browser from protecting you from,0,9,0.3,0.17,0.0,0.0,1,139
"XSS attacks, you",0,9,0.21,0.71,0.0,0.0,1,139
simply need to set a response header in our handler:,0,9,0.3,0.14,0.0,0.01,1,139
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.01,0.0,1,139
"w.Header().Set(""X-XSS-Protection"", ""0"")",0,7,0.26,0.14,0.0,0.0,1,139
"t, _ := template.ParseFiles(""tmpl.html"")",0,7,0.26,0.14,0.0,0.0,1,139
"t.Execute(w, template.HTML(r.FormValue(""comment"")))",0,7,0.26,0.14,0.0,0.0,1,139
},0,7,0.17,0.14,0.0,0.02,0,139
"Once you do this and try the same attack again, you’ll find that the attack works for",0,9,0.21,0.14,0.02,0.0,0,139
"Internet Explorer, Chrome, and Safari.",0,9,0.3,0.14,0.0,0.02,1,139
5.7 Nesting templates,1,12,0.54,0.07,0.02,0.01,1,139
We went through quite a lot of features of the Go template engine in this chapter.,0,9,0.21,0.14,0.01,0.0,0,139
"Before we move on, I’d like to show you how you can use layouts in your web app.",0,9,0.21,0.14,0.0,0.0,0,139
So what exactly are layouts?,0,9,0.3,0.17,0.0,0.0,1,139
Layouts are fixed patterns in web page design that can,1,9,0.39,0.4,0.0,0.0,1,139
"be reused for multiple pages. Web apps often use layouts, because pages in a web app",0,9,0.21,0.14,0.0,0.0,0,139
"need to look the same for a consistent UI. For example, many web application designs",0,9,0.21,0.14,0.0,0.0,0,139
have a header menu as well as a footer that provides additional information such as,0,9,0.21,0.14,0.0,0.0,0,139
120,1,9,0.39,0.06,0.0,0.0,0,140
Displaying content,1,9,0.39,0.42,0.0,0.0,1,140
C 5,1,7,0.26,0.34,0.0,0.0,0,140
HAPTER,1,6,0.33,0.35,0.0,0.03,1,140
status or copyright or contact details. Other layouts include a left navigation bar or,0,9,0.21,0.13,0.03,0.0,0,140
multilevel navigation menus. You can easily make the leap that layouts can be imple-,0,9,0.21,0.13,0.0,0.0,0,140
mented with nested templates.,0,9,0.3,0.13,0.0,0.0,1,140
"In an earlier section, you learned that templates can be nested using the include",0,9,0.21,0.15,0.0,0.0,0,140
"action. If you start writing a complicated web app, though, you’ll realize that you",0,9,0.21,0.13,0.0,0.0,0,140
might end up with a lot of hardcoding in your handler and a lot of template files.,0,9,0.21,0.13,0.0,0.0,0,140
Why is this so?,0,9,0.3,0.15,0.0,0.0,1,140
Remember that the syntax of the include action looks like this:,0,9,0.3,0.15,0.0,0.01,1,140
"{{ template ""name"" . }}",0,7,0.26,0.13,0.01,0.01,1,140
where name is the name of the template and a string constant. This means that if you,0,9,0.21,0.13,0.01,0.0,0,140
"use the name of the file as the template name, it’ll be impossible to have one or two",0,9,0.21,0.13,0.0,0.0,0,140
"common layouts, because every page will have its own layout template file—which",0,9,0.21,0.13,0.0,0.0,0,140
"defeats the purpose of having layouts in the first place. As an example, the file shown",0,9,0.21,0.13,0.0,0.0,0,140
in the next listing won’t work as a common layout template file.,0,9,0.3,0.13,0.0,0.03,1,140
Listing 5.22 An unworkable layout file,1,9,0.48,0.15,0.03,0.02,1,140
<html>,0,7,0.26,0.13,0.02,0.0,1,140
<head>,0,7,0.26,0.13,0.0,0.0,1,140
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,140
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,140
</head>,0,7,0.26,0.13,0.0,0.0,1,140
<body>,0,7,0.26,0.13,0.0,0.0,1,140
"{{ template ""content.html"" }}",0,7,0.26,0.13,0.0,0.0,1,140
</body>,0,7,0.26,0.13,0.0,0.0,1,140
</html>,0,7,0.26,0.13,0.0,0.02,1,140
The answer to this dilemma is that the Go template engine doesn’t work this way.,0,9,0.21,0.13,0.02,0.0,0,140
"Although we can have each template file define a single template, with the name of",0,9,0.21,0.13,0.0,0.0,0,140
"the template as the name of the file, we can explicitly define a template in a template",0,9,0.21,0.13,0.0,0.0,0,140
file using the define action. This listing shows our layout.html now.,0,9,0.3,0.13,0.0,0.03,1,140
Listing 5.23 Defining a template explicitly,1,9,0.48,0.15,0.03,0.02,1,140
"{{ define ""layout"" }}",0,7,0.26,0.13,0.02,0.02,1,140
<html>,0,7,0.26,0.13,0.02,0.0,1,140
<head>,0,7,0.26,0.13,0.0,0.0,1,140
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,140
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,140
</head>,0,7,0.26,0.13,0.0,0.0,1,140
<body>,0,7,0.26,0.13,0.0,0.0,1,140
"{{ template ""content"" }}",0,7,0.26,0.13,0.0,0.0,1,140
</body>,0,7,0.26,0.13,0.0,0.0,1,140
</html>,0,7,0.26,0.13,0.0,0.02,1,140
{{ end }},0,7,0.26,0.13,0.02,0.0,1,140
121,1,9,0.3,0.82,0.0,0.0,0,141
Nesting templates,1,9,0.39,0.4,0.0,0.03,1,141
"{{ define ""layout"" }}",0,9,0.21,0.41,0.03,0.0,1,141
and end it with {{ end }},0,9,0.21,0.62,0.0,0.0,1,141
Notice that we start the file with,0,9,0.3,0.14,0.0,0.0,1,141
.,0,9,0.12,0.84,0.0,0.0,0,141
Anything within these two action tags is considered part of the layout template. This,0,9,0.21,0.14,0.0,0.0,0,141
{{ end }} we can define another,0,9,0.21,0.57,0.0,0.0,1,141
means if we have another define action tag after the,0,9,0.3,0.14,0.0,0.0,1,141
"template! In other words, we can define multiple templates in the same template file,",0,9,0.21,0.14,0.0,0.0,0,141
as you can see in this listing.,0,9,0.3,0.14,0.0,0.03,1,141
Listing 5.24 Defining multiple templates in a single template file,1,9,0.48,0.17,0.03,0.02,1,141
"{{ define ""layout"" }}",0,7,0.26,0.14,0.02,0.02,1,141
<html>,0,7,0.26,0.14,0.02,0.0,1,141
<head>,0,7,0.26,0.14,0.0,0.0,1,141
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.14,0.0,0.0,1,141
<title>Go Web Programming</title>,0,7,0.26,0.14,0.0,0.0,1,141
</head>,0,7,0.26,0.14,0.0,0.0,1,141
<body>,0,7,0.26,0.14,0.0,0.0,1,141
"{{ template ""content"" }}",0,7,0.26,0.14,0.0,0.0,1,141
</body>,0,7,0.26,0.14,0.0,0.0,1,141
</html>,0,7,0.26,0.14,0.0,0.02,1,141
{{ end }},0,7,0.26,0.14,0.02,0.02,1,141
"{{ define ""content"" }}",0,7,0.26,0.14,0.02,0.02,1,141
Hello World!,0,7,0.26,0.14,0.02,0.02,1,141
{{ end }},0,7,0.26,0.14,0.02,0.02,1,141
The following listing shows how we use these templates in our handler.,0,9,0.3,0.14,0.02,0.03,1,141
Listing 5.25 Using explicitly defined templates,1,9,0.48,0.17,0.03,0.02,1,141
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,141
"t, _ := template.ParseFiles(""layout.html"")",0,7,0.26,0.14,0.0,0.0,1,141
"t.ExecuteTemplate(w, ""layout"", """")",0,7,0.26,0.14,0.0,0.0,1,141
},0,7,0.17,0.14,0.0,0.02,0,141
"Parsing the template file is the same, but this time if we want to execute the template,",0,9,0.21,0.14,0.02,0.0,0,141
"ExecuteTemplate method, with the name of",0,9,0.21,0.48,0.0,0.0,1,141
we have to be more explicit and use the,0,9,0.3,0.14,0.0,0.0,1,141
the template we want to execute as the second parameter. The layout template nests,0,9,0.21,0.14,0.0,0.0,0,141
Hello World! in,0,9,0.21,0.7,0.0,0.0,1,141
"the content template, so if we execute the layout template, we’ll see",0,9,0.3,0.14,0.0,0.0,1,141
the browser. Let’s use c URL,0,9,0.3,0.14,0.0,0.0,1,141
to get the actual HTML so that we can see it properly:,0,9,0.21,0.37,0.0,0.01,1,141
> curl -i http://127.0.0.1:8080/process,0,7,0.26,0.14,0.01,0.0,1,141
HTTP/1.1 200 OK,0,7,0.26,0.14,0.0,0.0,1,141
"Date: Sun, 08 Feb 2015 14:09:15 GMT",0,7,0.26,0.14,0.0,0.0,1,141
Content-Length: 187,0,7,0.26,0.14,0.0,0.0,1,141
Content-Type: text/html; charset=utf-8,0,7,0.26,0.14,0.0,0.02,1,141
<html>,0,7,0.26,0.14,0.02,0.0,1,141
<head>,0,7,0.26,0.14,0.0,0.0,1,141
122,1,9,0.39,0.06,0.0,0.0,0,142
Displaying content,1,9,0.39,0.42,0.0,0.0,1,142
C 5,1,7,0.26,0.34,0.0,0.0,0,142
HAPTER,1,6,0.33,0.35,0.0,0.03,1,142
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.03,0.0,1,142
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,142
</head>,0,7,0.26,0.13,0.0,0.0,1,142
<body>,0,7,0.26,0.13,0.0,0.02,1,142
Hello World!,0,7,0.26,0.13,0.02,0.02,1,142
</body>,0,7,0.26,0.13,0.02,0.0,1,142
</html>,0,7,0.26,0.13,0.0,0.02,1,142
We can also define the same template in the multiple template files. To see how this,0,9,0.21,0.13,0.02,0.0,0,142
"works, let’s remove the definition of the content template in layout.html and place it",0,9,0.21,0.13,0.0,0.0,0,142
"in red_hello.html, as shown in this listing. Listing 5.27 shows how to create a",0,9,0.21,0.13,0.0,0.0,0,142
blue_hello.html template file.,0,9,0.3,0.13,0.0,0.03,1,142
Listing 5.26 red_hello.html,1,9,0.48,0.15,0.03,0.02,1,142
"{{ define ""content"" }}",0,7,0.26,0.13,0.02,0.02,1,142
"<h1 style=""color: red;"">Hello World!</h1>",0,7,0.26,0.13,0.02,0.02,1,142
{{ end }},0,7,0.26,0.13,0.02,0.03,1,142
Listing 5.27 blue_hello.html,1,9,0.48,0.15,0.03,0.01,1,142
"{{ define ""content"" }}",0,7,0.26,0.13,0.01,0.02,1,142
"<h1 style=""color: blue;"">Hello World!</h1>",0,7,0.26,0.13,0.02,0.02,1,142
{{ end }},0,7,0.26,0.13,0.02,0.02,1,142
Notice that we’ve just defined the content template in two places. How can we use,0,9,0.21,0.13,0.02,0.0,0,142
these two templates? This listing shows our modified handler.,0,9,0.3,0.13,0.0,0.03,1,142
Listing 5.28 A handler using the same template in different template files,1,9,0.39,0.15,0.03,0.02,0,142
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,142
rand.Seed(time.Now().Unix()),0,7,0.26,0.13,0.0,0.0,1,142
var t *template.Template,0,7,0.26,0.13,0.0,0.0,1,142
if rand.Intn(10) > 5 {,0,7,0.26,0.13,0.0,0.0,1,142
"t, _ = template.ParseFiles(""layout.html"", ""red_hello.html"")",0,7,0.26,0.13,0.0,0.0,1,142
} else {,0,7,0.26,0.13,0.0,0.0,1,142
"t, _ = template.ParseFiles(""layout.html"", ""blue_hello.html"")",0,7,0.26,0.13,0.0,0.0,1,142
},0,7,0.17,0.13,0.0,0.0,0,142
"t.ExecuteTemplate(w, ""layout"", """")",0,7,0.26,0.13,0.0,0.0,1,142
},0,7,0.17,0.13,0.0,0.02,0,142
Note that we’re actually parsing different template files (either red_hello.html or blue_,0,9,0.21,0.13,0.02,0.0,0,142
hello.html) according to the random number we create. We use the same layout tem-,0,9,0.21,0.13,0.0,0.0,0,142
"plate as before, which includes a",0,9,0.3,0.13,0.0,0.0,1,142
content template. Remember that the content,1,9,0.39,0.43,0.0,0.0,1,142
template is defined in two different files. Which template we use depends now on which,0,9,0.21,0.13,0.0,0.0,0,142
123,1,9,0.3,0.82,0.0,0.0,0,143
Using the block action to define default templates,1,9,0.39,0.29,0.0,0.03,1,143
"template file we parse, because both of these template files define the same template.",0,9,0.21,0.14,0.03,0.0,0,143
"In other words, we can switch content by parsing different template files, while main-",0,9,0.21,0.14,0.0,0.0,0,143
taining the same template to be nested in the layout.,0,9,0.3,0.14,0.0,0.0,1,143
"If we now recompile our server, start it, and access it through the browser,",0,9,0.21,0.17,0.0,0.0,0,143
Hello World! showing up in the browser (see,0,9,0.21,0.47,0.0,0.0,1,143
we’ll randomly see either a blue or red,0,9,0.3,0.14,0.0,0.0,1,143
figure 5.12).,0,9,0.43,0.14,0.0,0.22,1,143
Figure 5.12 Switching templates,1,7,0.49,0.6,0.22,0.04,1,143
5.8 Using the block action to define default templates,1,12,0.54,0.07,0.04,0.01,1,143
Go 1.6 introduced a new block action that allows you to define a template and use it at,0,9,0.21,0.14,0.01,0.0,0,143
the same time. This is how it looks:,0,9,0.3,0.14,0.0,0.01,1,143
{{ block arg }},0,7,0.26,0.14,0.01,0.0,1,143
Dot is set to arg,0,7,0.26,0.14,0.0,0.0,1,143
{{ end }},0,7,0.26,0.14,0.0,0.02,1,143
"To see how this works, I’ll use the previous example and use the block action to repli-",0,9,0.21,0.14,0.02,0.0,0,143
cate the same results. What I’ll do is default to using the blue Hello World template if,0,9,0.21,0.14,0.0,0.0,0,143
no templates are specified. Instead of parsing the layout.html and blue_hello.html,0,9,0.21,0.14,0.0,0.0,0,143
"files in the else block, as in listing 5.28, I will parse layout.html only as indicated in",0,9,0.21,0.14,0.0,0.0,0,143
bold in the following listing.,0,9,0.3,0.14,0.0,0.03,1,143
Listing 5.29 Parsing layout.html only,1,9,0.48,0.17,0.03,0.02,1,143
"func process(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,143
rand.Seed(time.Now().Unix()),0,7,0.26,0.14,0.0,0.0,1,143
var t *template.Template,0,7,0.26,0.14,0.0,0.0,1,143
if rand.Intn(10) > 5 {,0,7,0.26,0.14,0.0,0.0,1,143
"t, _ = template.ParseFiles(""layout.html"", ""red_hello.html"")",0,7,0.26,0.14,0.0,0.0,1,143
} else {,0,7,0.26,0.14,0.0,0.0,1,143
"t, _ = template.ParseFiles(""layout.html"")",1,7,0.35,0.21,0.0,0.0,1,143
},0,7,0.17,0.14,0.0,0.0,0,143
"t.ExecuteTemplate(w, ""layout"", """")",0,7,0.26,0.14,0.0,0.0,1,143
},0,7,0.17,0.14,0.0,0.0,0,143
124,1,9,0.39,0.06,0.0,0.0,0,144
Displaying content,1,9,0.39,0.42,0.0,0.0,1,144
C 5,1,7,0.26,0.34,0.0,0.0,0,144
HAPTER,1,6,0.33,0.35,0.0,0.03,1,144
"Without any further changes, this will result in a crash at random, because the tem-",0,9,0.21,0.13,0.03,0.0,0,144
plate in the else block doesn’t have a content template. Instead of passing it exter-,0,9,0.21,0.13,0.0,0.0,0,144
"nally, I will use a block action and add it as a default content in layout.html itself, as in",0,9,0.21,0.13,0.0,0.0,0,144
the code in bold in this listing.,0,9,0.3,0.13,0.0,0.03,1,144
Listing 5.30 Using the block action to add a default content template,1,9,0.48,0.15,0.03,0.02,1,144
"{{ define ""layout"" }}",0,7,0.26,0.13,0.02,0.01,1,144
<html>,0,7,0.26,0.13,0.01,0.0,1,144
<head>,0,7,0.26,0.13,0.0,0.0,1,144
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,144
<title>Go Web Programming</title>,0,7,0.26,0.13,0.0,0.0,1,144
</head>,0,7,0.26,0.13,0.0,0.0,1,144
<body>,0,7,0.26,0.13,0.0,0.0,1,144
"{{ block ""content"" . }}",1,7,0.44,0.13,0.0,0.0,1,144
"<h1 style=""color: blue;"">Hello World!</h1>",1,7,0.44,0.13,0.0,0.0,1,144
{{ end }},1,7,0.44,0.13,0.0,0.0,1,144
</body>,0,7,0.26,0.13,0.0,0.0,1,144
</html>,0,7,0.26,0.13,0.0,0.01,1,144
{{ end }},0,7,0.26,0.13,0.01,0.02,1,144
The block action effectively defines a template named content and also places it in the,0,9,0.21,0.13,0.02,0.0,0,144
"layout. If no content template is available when the overall template is executed, the",0,9,0.21,0.13,0.0,0.0,0,144
content template defined by the block will be used instead.,0,9,0.3,0.13,0.0,0.0,1,144
"We’re done with handling requests, processing them, and generating content to",0,9,0.21,0.15,0.0,0.0,0,144
"respond to the requests. In the next chapter, you’ll learn how you can store data in",0,9,0.21,0.13,0.0,0.0,0,144
"memory, in files, and in databases using Go.",0,9,0.3,0.13,0.0,0.02,1,144
5.9 Summary,1,12,0.54,0.06,0.02,0.01,1,144
"In a web app, template engines combine templates and data to produce the",0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
HTML that is sent back to the client.,0,9,0.3,0.18,0.01,0.01,1,144
html/template package.,0,9,0.21,0.5,0.01,0.0,1,144
Go’s standard template engine is in the,0,9,0.3,0.18,0.0,0.0,1,144
■,0,4,0.11,0.15,0.0,0.01,0,144
"Go’s template engine works by parsing a template and then executing it, pass-",0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
ResponseWriter,0,9,0.21,0.22,0.01,0.0,1,144
ing a and some data to it. This triggers the template engine to,0,9,0.3,0.18,0.0,0.0,1,144
ResponseWriter .,0,9,0.21,0.68,0.0,0.0,1,144
combine the parsed template with the data and send it to the,0,9,0.3,0.18,0.0,0.01,1,144
Actions are instructions about how data is to be combined with the template.,0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
Go has an extensive and powerful set of actions.,0,9,0.3,0.18,0.01,0.01,1,144
"Besides actions, templates can also contain arguments, variables, and pipelines.",0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
Arguments represent the data value in a template; variables are constructs used,0,9,0.21,0.18,0.01,0.0,0,144
with actions in a template. Pipelines allow chaining of arguments and functions.,0,9,0.21,0.18,0.0,0.01,0,144
Go has a default but limited set of template functions. Customized functions,0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
can also be created by making a function map and attaching it to the template.,0,9,0.21,0.18,0.01,0.01,0,144
Go’s template engine can change the content it displays according to where the,0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.01,0,144
data is placed. This context-awareness is useful in defending against,0,9,0.3,0.18,0.01,0.0,1,144
XSS attacks.,0,9,0.21,0.73,0.0,0.01,1,144
Web layouts are commonly used to design a web app that has a consistent look,0,9,0.21,0.18,0.01,0.0,0,144
■,0,4,0.11,0.15,0.0,0.0,0,144
Storing data,1,30,0.93,0.57,0.0,0.22,1,145
This chapter covers,1,12,0.67,0.13,0.22,0.01,1,145
In-memory storage with structs,0,9,0.3,0.15,0.01,0.0,1,145
■,0,4,0.11,0.13,0.0,0.01,0,145
File storage with CSV and gob binary files,0,9,0.3,0.15,0.01,0.0,1,145
■,0,4,0.11,0.13,0.0,0.01,0,145
Relational database storage with SQL,0,9,0.3,0.15,0.01,0.0,1,145
■,0,4,0.11,0.13,0.0,0.01,0,145
Go and SQL mappers,0,9,0.3,0.15,0.01,0.0,1,145
■,0,4,0.11,0.13,0.0,0.08,0,145
"We introduced data persistence in chapter 2, briefly touching on how to persist",0,9,0.21,0.17,0.08,0.0,0,145
"data into a relational database,",0,9,0.3,0.17,0.0,0.0,1,145
P ostgre SQL . In this chapter we’ll delve deeper into,0,9,0.21,0.42,0.0,0.0,1,145
"data persistence and talk about how you can store data in memory, files, relational",0,9,0.21,0.17,0.0,0.0,0,145
"databases, and o databases.",0,9,0.3,0.17,0.0,0.0,1,145
N SQL,0,9,0.21,0.29,0.0,0.01,1,145
"Data persistence is technically not part of web application programming, but it’s",0,9,0.21,0.19,0.01,0.0,0,145
often considered the third pillar of any web application—the other two pillars are,0,9,0.21,0.17,0.0,0.0,0,145
templates and handlers. This is because most web applications need to store data in,0,9,0.21,0.16,0.0,0.0,0,145
one form or another.,0,9,0.3,0.16,0.0,0.0,1,145
I’m generalizing but here are the places where you can store data:,0,9,0.3,0.19,0.0,0.01,1,145
In memory (while the program is running),0,9,0.21,0.22,0.01,0.0,1,145
■,0,4,0.11,0.19,0.0,0.01,0,145
In files on the filesystem,0,9,0.21,0.22,0.01,0.0,1,145
■,0,4,0.11,0.19,0.0,0.01,0,145
"In a database, fronted by a server program",0,9,0.21,0.22,0.01,0.0,1,145
■,0,4,0.11,0.19,0.0,0.0,0,145
126,1,9,0.39,0.06,0.0,0.0,0,146
Storing data,1,9,0.39,0.44,0.0,0.0,1,146
C 6,1,7,0.26,0.36,0.0,0.0,0,146
HAPTER,1,6,0.33,0.37,0.0,0.03,1,146
"In this chapter, we’ll go through how Go can be used to access data (create, retrieve,",0,9,0.21,0.13,0.03,0.0,0,146
"update, and delete—better known as",0,9,0.3,0.13,0.0,0.0,1,146
CRUD ) in all these places.,0,9,0.21,0.43,0.0,0.02,1,146
6.1 In-memory storage,1,12,0.54,0.06,0.02,0.01,1,146
In-memory storage refers not to storing data in in-memory databases but in the run-,0,9,0.21,0.13,0.01,0.0,0,146
"ning application itself, to be used while the application is running. In-memory data is",0,9,0.21,0.13,0.0,0.0,0,146
"usually stored in data structures, and for Go, this primarily means with arrays, slices,",0,9,0.21,0.13,0.0,0.0,0,146
"maps, and most importantly, structs.",0,9,0.3,0.13,0.0,0.0,1,146
"Storing data itself is no issue—it simply involves creating the structs, slices, and",0,9,0.21,0.15,0.0,0.0,0,146
"maps. If we stop to think about it, what we’ll eventually manipulate is likely not to be",0,9,0.21,0.13,0.0,0.0,0,146
"the individual structs themselves, but",0,9,0.3,0.13,0.0,0.0,1,146
"containers for the structs. This could be arrays,",1,9,0.39,0.44,0.0,0.0,1,146
"slices, and maps but could also be any other types of data structures like stacks, trees,",0,9,0.21,0.13,0.0,0.0,0,146
and queues.,0,9,0.3,0.13,0.0,0.0,1,146
What’s more interesting is how you can retrieve the data that you need back from,0,9,0.21,0.15,0.0,0.0,0,146
"these containers. In the following listing, you’ll use maps as containers for your",0,9,0.21,0.13,0.0,0.0,0,146
structs.,0,9,0.3,0.13,0.0,0.03,1,146
Listing 6.1 Storing data in memory,1,9,0.48,0.15,0.03,0.02,1,146
package main,0,7,0.26,0.13,0.02,0.02,1,146
import (,0,7,0.26,0.13,0.02,0.0,1,146
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,146
),0,7,0.17,0.13,0.0,0.02,0,146
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,146
Id     int,0,7,0.26,0.13,0.0,0.0,1,146
Content string,0,7,0.26,0.13,0.0,0.0,1,146
Author  string,0,7,0.26,0.13,0.0,0.0,1,146
},0,7,0.17,0.13,0.0,0.02,0,146
var PostById map[int]*Post,0,7,0.26,0.13,0.02,0.0,1,146
var PostsByAuthor map[string][]*Post,0,7,0.26,0.13,0.0,0.02,1,146
func store(post Post) {,0,7,0.26,0.13,0.02,0.0,1,146
PostById[post.Id] = &post,0,7,0.26,0.13,0.0,0.0,1,146
"PostsByAuthor[post.Author] = append(PostsByAuthor[post.Author], &post)",0,7,0.26,0.13,0.0,0.0,1,146
},0,7,0.17,0.13,0.0,0.02,0,146
func main() {,0,7,0.26,0.13,0.02,0.02,1,146
PostById = make(map[int]*Post),0,7,0.26,0.13,0.02,0.0,1,146
PostsByAuthor = make(map[string][]*Post),0,7,0.26,0.13,0.0,0.02,1,146
"post1 := Post{Id: 1, Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.13,0.02,0.0,1,146
"post2 := Post{Id: 2, Content: ""Bonjour Monde!"", Author: ""Pierre""}",0,7,0.26,0.13,0.0,0.0,1,146
"post3 := Post{Id: 3, Content: ""Hola Mundo!"", Author: ""Pedro""}",0,7,0.26,0.13,0.0,0.0,1,146
"post4 := Post{Id: 4, Content: ""Greetings Earthlings!"", Author:",0,7,0.26,0.13,0.0,0.0,1,146
➥,0,10,0.23,0.13,0.0,0.0,0,146
"""Sau Sheong""}",0,7,0.26,0.15,0.0,0.0,1,146
127,1,9,0.3,0.82,0.0,0.0,0,147
In-memory storage,1,9,0.39,0.4,0.0,0.03,1,147
store(post1),0,7,0.26,0.14,0.03,0.0,1,147
store(post2),0,7,0.26,0.14,0.0,0.0,1,147
store(post3),0,7,0.26,0.14,0.0,0.0,1,147
store(post4),0,7,0.26,0.14,0.0,0.02,1,147
fmt.Println(PostById[1]),0,7,0.26,0.14,0.02,0.0,1,147
fmt.Println(PostById[2]),0,7,0.26,0.14,0.0,0.02,1,147
"for _, post := range PostsByAuthor[""Sau Sheong""] {",0,7,0.26,0.14,0.02,0.0,1,147
fmt.Println(post),0,7,0.26,0.14,0.0,0.0,1,147
},0,7,0.17,0.14,0.0,0.0,0,147
"for _, post := range PostsByAuthor[""Pedro""] {",0,7,0.26,0.14,0.0,0.0,1,147
fmt.Println(post),0,7,0.26,0.14,0.0,0.0,1,147
},0,7,0.17,0.14,0.0,0.0,0,147
},0,7,0.17,0.14,0.0,0.02,0,147
You’re going to use a Post,0,9,0.3,0.14,0.02,0.0,1,147
struct that represents a post in a forum application. Here’s,0,9,0.21,0.36,0.0,0.0,1,147
the data that you’ll be saving in memory:,0,9,0.3,0.14,0.0,0.01,1,147
type Post struct {,0,7,0.26,0.14,0.01,0.0,1,147
Id     int,0,7,0.26,0.14,0.0,0.0,1,147
Content string,0,7,0.26,0.14,0.0,0.0,1,147
Author  string,0,7,0.26,0.14,0.0,0.0,1,147
},0,7,0.17,0.14,0.0,0.02,0,147
The main data for this Post,0,9,0.3,0.14,0.02,0.0,1,147
"struct is the content, and there are two ways of getting the",0,9,0.21,0.37,0.0,0.0,1,147
post: either by a unique,0,9,0.3,0.14,0.0,0.0,1,147
or by the name of its author. Storing posts in a map means,0,9,0.21,0.36,0.0,0.0,1,147
ID,0,9,0.12,0.34,0.0,0.0,0,147
Post struct.,0,9,0.21,0.75,0.0,0.0,1,147
that you’re going to map a key that represents the post with the actual,0,9,0.21,0.14,0.0,0.0,0,147
"Because you have two ways of accessing a post, you should have two maps, one each to",0,9,0.21,0.14,0.0,0.0,0,147
access the post:,0,9,0.3,0.14,0.0,0.01,1,147
var PostById map[int]*Post,0,7,0.26,0.14,0.01,0.0,1,147
var PostsByAuthor map[string][]*Post,0,7,0.26,0.14,0.0,0.02,1,147
You have two variables: PostById,0,9,0.3,0.14,0.02,0.0,1,147
PostsBy-,0,9,0.21,0.77,0.0,0.0,1,147
maps the unique ID to a pointer to a post;,0,9,0.21,0.42,0.0,0.0,1,147
Author maps the author’s name to a slice of pointers to posts. Notice that you map to,0,9,0.21,0.14,0.0,0.0,0,147
pointers of the posts and not to the post themselves. The reason for this is obvious:,0,9,0.21,0.14,0.0,0.0,0,147
whether you’re getting the post through its,0,9,0.3,0.14,0.0,0.0,1,147
"ID or through the author’s name, you",0,9,0.21,0.52,0.0,0.0,1,147
"want the same post, not two different copies of it.",0,9,0.3,0.14,0.0,0.0,1,147
store function:,0,9,0.21,0.42,0.0,0.0,1,147
"To store the post, you create a",0,9,0.3,0.17,0.0,0.01,1,147
func store(post Post) {,0,7,0.26,0.14,0.01,0.0,1,147
PostById[post.Id] = &post,0,7,0.26,0.14,0.0,0.0,1,147
"PostsByAuthor[post.Author] = append(PostsByAuthor[post.Author], &post)",0,7,0.26,0.14,0.0,0.0,1,147
},0,7,0.17,0.14,0.0,0.02,0,147
The store function stores a pointer to the post into,0,9,0.3,0.14,0.02,0.0,1,147
PostById as well as PostsBy-,0,9,0.21,0.6,0.0,0.0,1,147
"Author . Next, you create the posts themselves, a process that involves nothing more",0,9,0.21,0.14,0.0,0.0,0,147
than creating structs.,0,9,0.3,0.14,0.0,0.01,1,147
"post1 := Post{Id: 1, Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.01,0.0,1,147
"post2 := Post{Id: 2, Content: ""Bonjour Monde!"", Author: ""Pierre""}",0,7,0.26,0.14,0.0,0.0,1,147
128,1,9,0.39,0.06,0.0,0.0,0,148
Storing data,1,9,0.39,0.44,0.0,0.0,1,148
C 6,1,7,0.26,0.36,0.0,0.0,0,148
HAPTER,1,6,0.33,0.37,0.0,0.03,1,148
"post3 := Post{Id: 3, Content: ""Hola Mundo!"", Author: ""Pedro""}",0,7,0.26,0.13,0.03,0.0,1,148
"post4 := Post{Id: 4, Content: ""Greetings Earthlings!"", Author: ""Sau Sheong""}",0,7,0.17,0.13,0.0,0.0,0,148
store(post1),0,7,0.26,0.13,0.0,0.0,1,148
store(post2),0,7,0.26,0.13,0.0,0.0,1,148
store(post3),0,7,0.26,0.13,0.0,0.0,1,148
store(post4),0,7,0.26,0.13,0.0,0.02,1,148
"When you execute the program, you’ll see the following:",0,9,0.3,0.13,0.02,0.01,1,148
&{1 Hello World! Sau Sheong},0,7,0.26,0.13,0.01,0.0,1,148
&{2 Bonjour Monde! Pierre},0,7,0.26,0.13,0.0,0.0,1,148
&{1 Hello World! Sau Sheong},0,7,0.26,0.13,0.0,0.0,1,148
&{4 Greetings Earthlings! Sau Sheong},0,7,0.26,0.13,0.0,0.0,1,148
&{3 Hola Mundo! Pedro},0,7,0.26,0.13,0.0,0.02,1,148
Note that you’re getting back the same post regardless of whether you access it,0,9,0.21,0.13,0.02,0.0,0,148
through the author or the post,0,9,0.3,0.13,0.0,0.0,1,148
ID .,0,9,0.21,0.38,0.0,0.0,1,148
This process seems simple and obvious enough—trivial even. Why would we want,0,9,0.21,0.15,0.0,0.0,0,148
to even talk about storing data in memory?,0,9,0.3,0.13,0.0,0.0,1,148
Very often in our web applications we start off with using relational databases (as in,0,9,0.21,0.15,0.0,0.0,0,148
"chapter 2) and then as we scale, we realize that we need to cache the data that we",0,9,0.21,0.13,0.0,0.0,0,148
retrieve from the database in order to improve performance. As you’ll see in the rest,0,9,0.21,0.13,0.0,0.0,0,148
"of this chapter, most of the methods used to persist data involve structs in one way or",0,9,0.21,0.13,0.0,0.0,0,148
"another. Instead of using an external in-memory database like Redis, we have the",0,9,0.21,0.13,0.0,0.0,0,148
option of refactoring our code and storing the cache data in memory.,0,9,0.3,0.13,0.0,0.0,1,148
"I’ll also introduce you to storing data in structs, which is going to be the recurrent",0,9,0.21,0.15,0.0,0.0,0,148
pattern for data storage for this chapter and much of the book.,0,9,0.3,0.13,0.0,0.02,1,148
6.2 File storage,1,12,0.54,0.06,0.02,0.01,1,148
Storing in memory is fast and immediate because there’s no retrieval from disk. But,0,9,0.21,0.13,0.01,0.0,0,148
there’s one very important drawback: in-memory data isn’t actually persistent. If you,0,9,0.21,0.13,0.0,0.0,0,148
"never shut down your machine or program, or if it doesn’t matter if the data is lost (as",0,9,0.21,0.13,0.0,0.0,0,148
"in a cache), then that’s probably fine. But you usually want data to be persisted when",0,9,0.21,0.13,0.0,0.0,0,148
"the machine or program is shut down, even if it’s in cache. There are a number of",0,9,0.21,0.13,0.0,0.0,0,148
"ways data can be persisted, but the most common method is to store it to some sort of",0,9,0.21,0.13,0.0,0.0,0,148
nonvolatile storage such as a hard disk or flash memory.,0,9,0.3,0.13,0.0,0.0,1,148
You have a number of options for storing data to nonvolatile storage. The tech-,0,9,0.21,0.15,0.0,0.0,0,148
nique we’ll discuss in this section revolves around storing data to the filesystem. Spe-,0,9,0.21,0.13,0.0,0.0,0,148
cifically we’ll explore two ways of storing data to files in Go. The first is through a,0,9,0.21,0.13,0.0,0.0,0,148
"commonly used text format,",0,9,0.3,0.13,0.0,0.0,1,148
"CSV (comma-separated values), and the second is specific",0,9,0.21,0.36,0.0,0.0,1,148
to Go—using the gob package.,0,9,0.3,0.13,0.0,0.0,1,148
CSV is a common file format that’s used for transferring data from the user to the,0,9,0.21,0.15,0.0,0.0,0,148
system. It can be quite useful when you need to ask your users to provide you with a,0,9,0.21,0.13,0.0,0.0,0,148
large amount of data and it’s not feasible to ask them to enter the data into your,0,9,0.21,0.13,0.0,0.0,0,148
"forms. You can ask your users to use their favorite spreadsheet, enter all their data,",0,9,0.21,0.13,0.0,0.0,0,148
"and then save it as CSV and upload it to your web application. Once you have the file,",0,9,0.21,0.13,0.0,0.0,0,148
129,1,9,0.3,0.82,0.0,0.0,0,149
File storage,1,9,0.39,0.42,0.0,0.03,1,149
"you can decode the data for your purposes. Similarly, you can allow your users to get",0,9,0.21,0.14,0.03,0.0,0,149
their data by creating a CSV,0,9,0.3,0.14,0.0,0.0,1,149
file out of their data and sending it to them from your web,0,9,0.21,0.36,0.0,0.0,1,149
application.,0,9,0.3,0.14,0.0,0.0,1,149
"Gob is a binary format that can be saved in a file, providing a quick and effective",0,9,0.21,0.17,0.0,0.0,0,149
means of serializing in-memory data to one or more files. Binary data files can be,0,9,0.21,0.14,0.0,0.0,0,149
pretty useful too. You can use them to quickly store your structs for backup or for,0,9,0.21,0.14,0.0,0.0,0,149
"orderly shutdown. Just as a caching mechanism is useful, being able to store and load",0,9,0.21,0.14,0.0,0.0,0,149
"data temporarily in files is useful for things like sessions or shopping carts, or to serve",0,9,0.21,0.14,0.0,0.0,0,149
as a temporary workspace.,0,9,0.3,0.14,0.0,0.0,1,149
"Let’s start with the simple exercise of opening up a file and writing to it, shown in",0,9,0.21,0.17,0.0,0.0,0,149
the following listing. You’ll see this repeated as we discuss saving to,0,9,0.21,0.14,0.0,0.0,0,149
CSV and gob,0,9,0.21,0.73,0.0,0.0,1,149
binary files.,0,9,0.3,0.14,0.0,0.03,1,149
Listing 6.2 Reading and writing to a file,1,9,0.48,0.17,0.03,0.02,1,149
package main,0,7,0.26,0.14,0.02,0.02,1,149
import (,0,7,0.26,0.14,0.02,0.0,1,149
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,149
"""io/ioutil""",0,7,0.26,0.14,0.0,0.0,1,149
"""os""",0,7,0.26,0.14,0.0,0.0,1,149
),0,7,0.17,0.14,0.0,0.02,0,149
func main() {,0,7,0.26,0.14,0.02,0.0,1,149
"data := []byte(""Hello World!\n"")",0,7,0.26,0.14,0.0,0.0,1,149
"err := ioutil.WriteFile(""data1"", data, 0644)",0,7,0.26,0.14,0.0,0.0,1,149
Writes to file and,1,9,0.39,0.67,0.0,0.0,1,149
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,149
reads from file using,1,9,0.39,0.67,0.0,0.0,1,149
panic(err),0,7,0.26,0.14,0.0,0.0,1,149
WriteFile and ReadFile,1,9,0.39,0.67,0.0,0.0,1,149
},0,7,0.17,0.14,0.0,0.0,0,149
"read1, _ := ioutil.ReadFile(""data1"")",0,7,0.26,0.14,0.0,0.0,1,149
fmt.Print(string(read1)),0,7,0.26,0.14,0.0,0.02,1,149
"file1, _ := os.Create(""data2"")",0,7,0.26,0.18,0.02,0.0,1,149
Writes to file and,1,9,0.39,0.67,0.0,0.0,1,149
defer file1.Close(),0,7,0.26,0.14,0.0,0.0,1,149
reads from file using,1,9,0.39,0.67,0.0,0.0,1,149
the File struct,1,9,0.39,0.67,0.0,0.0,1,149
"bytes, _ := file1.Write(data)",0,7,0.26,0.14,0.0,0.0,1,149
"fmt.Printf(""Wrote %d bytes to file\n"", bytes)",0,7,0.26,0.14,0.0,0.02,1,149
"file2, _ := os.Open(""data2"")",0,7,0.26,0.14,0.02,0.0,1,149
defer file2.Close(),0,7,0.26,0.14,0.0,0.02,1,149
"read2 := make([]byte, len(data))",0,7,0.26,0.14,0.02,0.0,1,149
"bytes, _ = file2.Read(read2)",0,7,0.26,0.14,0.0,0.0,1,149
"fmt.Printf(""Read %d bytes from file\n"", bytes)",0,7,0.26,0.14,0.0,0.0,1,149
fmt.Println(string(read2)),0,7,0.26,0.14,0.0,0.0,1,149
},0,7,0.17,0.14,0.0,0.02,0,149
"To reduce the amount of code on the page, in the previous listing I’ve replaced the",0,9,0.21,0.14,0.02,0.0,0,149
errors returned by the function with a blank identifier.,0,9,0.3,0.14,0.0,0.0,1,149
"In the listing, you can see two ways of writing to and reading from a file. The first is",0,9,0.21,0.17,0.0,0.0,0,149
WriteFile and ReadFile,0,9,0.21,0.39,0.0,0.0,1,149
from the ioutil package.,0,9,0.21,0.62,0.0,0.0,1,149
"short and simple, and uses",0,9,0.3,0.14,0.0,0.0,1,149
130,1,9,0.39,0.06,0.0,0.0,0,150
Storing data,1,9,0.39,0.44,0.0,0.0,1,150
C 6,1,7,0.26,0.36,0.0,0.0,0,150
HAPTER,1,6,0.33,0.37,0.0,0.03,1,150
Writing to a file uses WriteFile,0,9,0.3,0.13,0.03,0.0,1,150
", passing in the name of the file, the data to be written,",0,9,0.21,0.38,0.0,0.0,1,150
and a number representing the permissions to set for the file. Reading from a file sim-,0,9,0.21,0.13,0.0,0.0,0,150
ply uses ReadFile with the filename. The data that’s passed to both,0,9,0.3,0.13,0.0,0.0,1,150
WriteFile and,0,9,0.21,0.7,0.0,0.0,1,150
read from ReadFile is byte slices.,0,9,0.3,0.13,0.0,0.0,1,150
File struct is more verbose but gives you,0,9,0.21,0.5,0.0,0.0,1,150
Writing to and reading from a file using a,0,9,0.3,0.15,0.0,0.0,1,150
Create function in the os,0,9,0.21,0.61,0.0,0.0,1,150
"more flexibility. To write a file, you first create it using the",0,9,0.3,0.13,0.0,0.0,1,150
"package, passing it the name of the file you want to create. It’s good practice to use",0,9,0.21,0.13,0.0,0.0,0,150
defer to close the file so that you won’t forget. A,0,9,0.3,0.13,0.0,0.0,1,150
defer statement pushes a function,0,9,0.21,0.54,0.0,0.0,1,150
call on a stack. The list of saved calls is then executed after the surrounding func-,0,9,0.21,0.13,0.0,0.0,0,150
file2 will be,0,9,0.21,0.72,0.0,0.0,1,150
"tion returns. In our example, this means at the end of the main function",0,9,0.21,0.13,0.0,0.0,0,150
"closed, followed by file1",0,9,0.3,0.13,0.0,0.0,1,150
. Once you have the File,0,9,0.21,0.33,0.0,0.0,1,150
"struct, you can write to it using the",0,9,0.21,0.54,0.0,0.0,1,150
Write method. There are a number of other methods you can call on the,0,9,0.3,0.13,0.0,0.0,1,150
File struct,0,9,0.21,0.74,0.0,0.0,1,150
to write data to a file.,0,9,0.3,0.13,0.0,0.0,1,150
Reading a file with the File,0,9,0.3,0.15,0.0,0.0,1,150
Open function in,0,9,0.21,0.69,0.0,0.0,1,150
struct is similar. You need to use the,0,9,0.21,0.39,0.0,0.0,1,150
"the os package, and then use the",0,9,0.3,0.13,0.0,0.0,1,150
Read method on the File,0,9,0.21,0.4,0.0,0.0,1,150
"struct, or any of the other",0,9,0.21,0.62,0.0,0.0,1,150
File struct is much more flexible,0,9,0.21,0.55,0.0,0.0,1,150
methods to read the data. Reading data using the,0,9,0.3,0.13,0.0,0.0,1,150
because File has several other methods you can use to locate the correct part of the,0,9,0.21,0.13,0.0,0.0,0,150
file you want to read from.,0,9,0.3,0.13,0.0,0.0,1,150
"When you execute the program, you should see two files being created: data1 and",0,9,0.21,0.15,0.0,0.0,0,150
"data2, both containing the text “Hello World!”.",0,9,0.3,0.13,0.0,0.02,1,150
6.2.1 Reading and writing CSV files,1,10,0.5,0.06,0.02,0.01,1,150
The format is a file format in which tabular data (numbers and text) can be easily,0,9,0.21,0.13,0.01,0.0,0,150
CSV,0,9,0.21,0.16,0.0,0.0,0,150
written and read in a text editor.,0,9,0.3,0.13,0.0,0.0,1,150
"CSV is widely supported, and most spreadsheet pro-",0,9,0.21,0.4,0.0,0.0,1,150
"grams, such as Microsoft Excel and Apple Numbers, support",0,9,0.3,0.13,0.0,0.0,1,150
"CSV . Consequently, many",0,9,0.21,0.62,0.0,0.0,1,150
"programming languages, including Go, come with libraries that produce and con-",0,9,0.21,0.13,0.0,0.0,0,150
sume the data in CSV files.,0,9,0.3,0.13,0.0,0.0,1,150
encoding/csv package. The next listing shows,0,9,0.21,0.44,0.0,0.0,1,150
"In Go, is manipulated by the",0,9,0.3,0.15,0.0,0.0,1,150
CSV,0,9,0.12,0.21,0.0,0.01,0,150
code for reading and writing,0,9,0.3,0.13,0.01,0.0,1,150
CSV .,0,9,0.21,0.37,0.0,0.03,1,150
Listing 6.3 Reading and writing CSV,1,9,0.48,0.15,0.03,0.02,1,150
package main,0,7,0.26,0.13,0.02,0.02,1,150
import (,0,7,0.26,0.13,0.02,0.0,1,150
"""encoding/csv""",0,7,0.26,0.13,0.0,0.0,1,150
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,150
"""os""",0,7,0.26,0.13,0.0,0.0,1,150
"""strconv""",0,7,0.26,0.13,0.0,0.0,1,150
),0,7,0.17,0.13,0.0,0.02,0,150
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,150
Id     int,0,7,0.26,0.13,0.0,0.0,1,150
Content string,0,7,0.26,0.13,0.0,0.0,1,150
Author  string,0,7,0.26,0.13,0.0,0.0,1,150
},0,7,0.17,0.13,0.0,0.0,0,150
131,1,9,0.3,0.82,0.0,0.0,0,151
File storage,1,9,0.39,0.42,0.0,0.03,1,151
func main() {,0,7,0.26,0.14,0.03,0.0,1,151
"csvFile, err := os.Create(""posts.csv"")",0,7,0.26,0.14,0.0,0.0,1,151
Creating a CSV file,1,9,0.39,0.67,0.0,0.0,1,151
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,151
panic(err),0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.0,0,151
defer csvFile.Close(),0,7,0.26,0.14,0.0,0.02,1,151
allPosts := []Post{,0,7,0.26,0.14,0.02,0.0,1,151
"Post{Id: 1, Content: ""Hello World!"", Author: ""Sau Sheong""},",0,7,0.26,0.14,0.0,0.0,1,151
"Post{Id: 2, Content: ""Bonjour Monde!"", Author: ""Pierre""},",0,7,0.26,0.14,0.0,0.0,1,151
"Post{Id: 3, Content: ""Hola Mundo!"", Author: ""Pedro""},",0,7,0.26,0.14,0.0,0.0,1,151
"Post{Id: 4, Content: ""Greetings Earthlings!"", Author: ""Sau Sheong""},",0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.02,0,151
writer := csv.NewWriter(csvFile),0,7,0.26,0.14,0.02,0.0,1,151
"for _, post := range allPosts {",0,7,0.26,0.14,0.0,0.0,1,151
"line := []string{strconv.Itoa(post.Id), post.Content, post.Author}",0,7,0.26,0.14,0.0,0.0,1,151
err := writer.Write(line),0,7,0.26,0.14,0.0,0.0,1,151
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,151
panic(err),0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.0,0,151
},0,7,0.17,0.14,0.0,0.0,0,151
writer.Flush(),0,7,0.26,0.14,0.0,0.02,1,151
"file, err := os.Open(""posts.csv"")",0,7,0.26,0.18,0.02,0.0,1,151
Reading a CSV file,1,9,0.39,0.64,0.0,0.0,1,151
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,151
panic(err),0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.0,0,151
defer file.Close(),0,7,0.26,0.14,0.0,0.02,1,151
reader := csv.NewReader(file),0,7,0.26,0.14,0.02,0.0,1,151
reader.FieldsPerRecord = -1,0,7,0.26,0.14,0.0,0.0,1,151
"record, err := reader.ReadAll()",0,7,0.26,0.14,0.0,0.0,1,151
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,151
panic(err),0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.02,0,151
var posts []Post,0,7,0.26,0.14,0.02,0.0,1,151
"for _, item := range record {",0,7,0.26,0.14,0.0,0.0,1,151
"id, _ := strconv.ParseInt(item[0], 0, 0)",0,7,0.26,0.14,0.0,0.0,1,151
"post := Post{Id: int(id), Content: item[1], Author: item[2]}",0,7,0.26,0.14,0.0,0.0,1,151
"posts = append(posts, post)",0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.0,0,151
fmt.Println(posts[0].Id),0,7,0.26,0.14,0.0,0.0,1,151
fmt.Println(posts[0].Content),0,7,0.26,0.14,0.0,0.0,1,151
fmt.Println(posts[0].Author),0,7,0.26,0.14,0.0,0.0,1,151
},0,7,0.17,0.14,0.0,0.02,0,151
First let’s look at writing to a,0,9,0.3,0.14,0.02,0.0,1,151
CSV file. You create a file called posts.csv and a variable,0,9,0.21,0.39,0.0,0.0,1,151
named csvFile . Your objective is to write the posts in the,0,9,0.3,0.14,0.0,0.0,1,151
allPosts variable into this,0,9,0.21,0.62,0.0,0.0,1,151
"NewWriter function, passing in the file.",0,9,0.21,0.51,0.0,0.0,1,151
file. Step one is to create a writer using the,0,9,0.3,0.14,0.0,0.0,1,151
Write method on,0,9,0.21,0.7,0.0,0.0,1,151
"Then for each post, you create a slice of strings. Finally, you call the",0,9,0.21,0.14,0.0,0.0,0,151
the writer to write the slice of strings into the,0,9,0.3,0.14,0.0,0.0,1,151
CSV file and you’re done.,0,9,0.21,0.51,0.0,0.0,1,151
132,1,9,0.39,0.06,0.0,0.0,0,152
Storing data,1,9,0.39,0.44,0.0,0.0,1,152
C 6,1,7,0.26,0.36,0.0,0.0,0,152
HAPTER,1,6,0.33,0.37,0.0,0.03,1,152
"If the program ends here and exits, all is well and the data is written to file.",0,9,0.21,0.15,0.03,0.0,0,152
"Because you’ll need to read the same posts.csv file next, we need to make sure that any",0,9,0.21,0.13,0.0,0.0,0,152
Flush method on the writer.,0,9,0.21,0.59,0.0,0.0,1,152
buffered data is properly written to the file by calling the,0,9,0.3,0.13,0.0,0.0,1,152
"Reading the CSV file works much the same way. First, you need to open the file.",0,9,0.21,0.15,0.0,0.0,0,152
Then call the NewReader,0,9,0.3,0.13,0.0,0.0,1,152
"function, passing in the file, to create a reader. Set the",0,9,0.21,0.35,0.0,0.0,1,152
"FieldsPerRecord field in the reader to be a negative number, which indicates that",0,9,0.21,0.13,0.0,0.0,0,152
FieldsPer-,0,9,0.21,0.73,0.0,0.0,1,152
you aren’t that bothered if you don’t have all the fields in the record. If,0,9,0.21,0.13,0.0,0.0,0,152
"Record is a positive number, then that’s the number of fields you expect from each",0,9,0.21,0.13,0.0,0.0,0,152
CSV file. If FieldsPerRecord,0,9,0.21,0.59,0.0,0.0,1,152
record and Go will throw an error if you get less from the,0,9,0.3,0.13,0.0,0.0,1,152
FieldsPerRecord value.,0,9,0.21,0.62,0.0,0.0,1,152
"is 0, you’ll use the number of fields in the first record as the",0,9,0.3,0.13,0.0,0.0,1,152
"You call the ReadAll method on the reader to read all the records in at once, but if",0,9,0.21,0.15,0.0,0.0,0,152
the file is large you can also retrieve one record at a time from the reader. This results,0,9,0.21,0.13,0.0,0.0,0,152
Post structs. If,0,9,0.21,0.71,0.0,0.0,1,152
"in a slice of slices, which you can then iterate through and create the",0,9,0.21,0.13,0.0,0.0,0,152
"you run the program now, it’ll create a",0,9,0.3,0.13,0.0,0.0,1,152
"CSV file called posts.csv, which contains lines of",0,9,0.21,0.44,0.0,0.0,1,152
comma-delimited text:,0,9,0.3,0.13,0.0,0.01,1,152
"1,Hello World!,Sau Sheong",0,7,0.26,0.13,0.01,0.0,1,152
"2,Bonjour Monde!,Pierre",0,7,0.26,0.13,0.0,0.0,1,152
"3,Hola Mundo!,Pedro",0,7,0.26,0.13,0.0,0.0,1,152
"4,Greetings Earthlings!,Sau Sheong",0,7,0.26,0.13,0.0,0.02,1,152
It’ll also read from the same file and print out the data from the first line of the,0,9,0.21,0.13,0.02,0.0,0,152
CSV file:,0,9,0.21,0.76,0.0,0.01,1,152
1,0,7,0.17,0.13,0.01,0.0,0,152
Hello World!,0,7,0.26,0.13,0.0,0.0,1,152
Sau Sheong,0,7,0.26,0.13,0.0,0.02,1,152
6.2.2 The gob package,1,10,0.5,0.06,0.02,0.01,1,152
"The encoding/gob package manages streams of gobs, which are binary data,",0,9,0.21,0.13,0.01,0.0,0,152
exchanged between an encoder and a decoder. It’s designed for serialization and,0,9,0.21,0.13,0.0,0.0,0,152
transporting data but it can also be used for persisting data. Encoders and decoders,0,9,0.21,0.13,0.0,0.0,0,152
"wrap around writers and readers, which conveniently allows you to use them to write",0,9,0.21,0.13,0.0,0.0,0,152
gob,0,9,0.12,0.8,0.0,0.0,0,152
to and read from files. The following listing demonstrates how you can use the,0,9,0.21,0.13,0.0,0.0,0,152
package to create binary data files and read from them.,0,9,0.3,0.13,0.0,0.03,1,152
gob package,1,9,0.39,0.57,0.03,0.0,1,152
Listing 6.4 Reading and writing binary data using the,1,9,0.48,0.15,0.0,0.02,1,152
package main,0,7,0.26,0.13,0.02,0.01,1,152
import (,0,7,0.26,0.13,0.01,0.0,1,152
"""bytes""",0,7,0.26,0.13,0.0,0.0,1,152
"""encoding/gob""",0,7,0.26,0.13,0.0,0.0,1,152
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,152
"""io/ioutil""",0,7,0.26,0.13,0.0,0.0,1,152
),0,7,0.17,0.13,0.0,0.01,0,152
type Post struct {,0,7,0.26,0.13,0.01,0.0,1,152
Id     int,0,7,0.26,0.13,0.0,0.0,1,152
Content string,0,7,0.26,0.13,0.0,0.0,1,152
133,1,9,0.3,0.82,0.0,0.0,0,153
File storage,1,9,0.39,0.42,0.0,0.03,1,153
Author  string,0,7,0.26,0.14,0.03,0.0,1,153
},0,7,0.17,0.14,0.0,0.02,0,153
"func store(data interface{}, filename string) {",0,7,0.26,0.14,0.02,0.0,1,153
Store data,1,9,0.39,0.64,0.0,0.0,1,153
buffer := new(bytes.Buffer),0,7,0.26,0.14,0.0,0.0,1,153
encoder := gob.NewEncoder(buffer),0,7,0.26,0.14,0.0,0.0,1,153
err := encoder.Encode(data),0,7,0.26,0.14,0.0,0.0,1,153
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,153
panic(err),0,7,0.26,0.14,0.0,0.0,1,153
},0,7,0.17,0.14,0.0,0.0,0,153
"err = ioutil.WriteFile(filename, buffer.Bytes(), 0600)",0,7,0.26,0.14,0.0,0.0,1,153
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,153
panic(err),0,7,0.26,0.14,0.0,0.0,1,153
},0,7,0.17,0.14,0.0,0.0,0,153
},0,7,0.17,0.14,0.0,0.02,0,153
"func load(data interface{}, filename string) {",0,7,0.26,0.14,0.02,0.0,1,153
Load data,1,9,0.39,0.64,0.0,0.0,1,153
"raw, err := ioutil.ReadFile(filename)",0,7,0.26,0.14,0.0,0.0,1,153
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,153
panic(err),0,7,0.26,0.14,0.0,0.0,1,153
},0,7,0.17,0.14,0.0,0.0,0,153
buffer := bytes.NewBuffer(raw),0,7,0.26,0.14,0.0,0.0,1,153
dec := gob.NewDecoder(buffer),0,7,0.26,0.14,0.0,0.0,1,153
err = dec.Decode(data),0,7,0.26,0.14,0.0,0.0,1,153
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,153
panic(err),0,7,0.26,0.14,0.0,0.0,1,153
},0,7,0.17,0.14,0.0,0.0,0,153
},0,7,0.17,0.14,0.0,0.02,0,153
func main() {,0,7,0.26,0.14,0.02,0.0,1,153
"post := Post{Id: 1, Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.0,0.0,1,153
"store(post, ""post1"")",0,7,0.26,0.14,0.0,0.0,1,153
var postRead Post,0,7,0.26,0.14,0.0,0.0,1,153
"load(&postRead, ""post1"")",0,7,0.26,0.14,0.0,0.0,1,153
fmt.Println(postRead),0,7,0.26,0.14,0.0,0.0,1,153
},0,7,0.17,0.14,0.0,0.02,0,153
"Post struct and you’ll be saving a post to binary, then",0,9,0.21,0.38,0.02,0.0,1,153
"As before, you’re using the",0,9,0.3,0.14,0.0,0.0,1,153
"retrieving it, using the store",0,9,0.3,0.14,0.0,0.0,1,153
"and load functions, respectively. Let’s look at the",0,9,0.21,0.38,0.0,0.0,1,153
store,0,9,0.21,0.79,0.0,0.01,1,153
function first.,0,9,0.3,0.14,0.01,0.0,1,153
"The store function takes an empty interface (meaning it can take anything, as well",0,9,0.21,0.17,0.0,0.0,0,153
"as a filename for the binary file it’ll be saved to). In our example code, you’ll be pass-",0,9,0.21,0.14,0.0,0.0,0,153
"ing a Post struct. First, you need to create a",0,9,0.3,0.14,0.0,0.0,1,153
"bytes.Buffer struct, which is essentially a",0,9,0.21,0.5,0.0,0.0,1,153
"Read and Write methods. In other words, a",0,9,0.21,0.47,0.0,0.0,1,153
variable buffer of bytes that has both,0,9,0.3,0.14,0.0,0.0,1,153
bytes.Buffer can be both a,0,9,0.3,0.14,0.0,0.0,1,153
Reader and a Writer .,0,9,0.21,0.38,0.0,0.0,1,153
NewEncoder function.,0,9,0.21,0.67,0.0,0.0,1,153
Then you create a gob encoder by passing the buffer to the,0,9,0.3,0.17,0.0,0.0,1,153
Post struct) into the buffer using the,0,9,0.21,0.53,0.0,0.0,1,153
You use the encoder to encode the data (the,0,9,0.3,0.14,0.0,0.0,1,153
"Encode method. Finally, you write the buffer to a file.",0,9,0.3,0.14,0.0,0.0,1,153
"To use the store function, you pass a",0,9,0.3,0.17,0.0,0.0,1,153
"Post struct and a filename to it, creating a",0,9,0.21,0.49,0.0,0.0,1,153
load function. Loading data from,0,9,0.21,0.56,0.0,0.0,1,153
binary data file named post1. Now let’s look at the,0,9,0.3,0.14,0.0,0.0,1,153
"the binary data file post1 is the reverse of creating it. First, you need to read the raw",0,9,0.21,0.14,0.0,0.0,0,153
data out from the file.,0,9,0.3,0.14,0.0,0.0,1,153
134,1,9,0.39,0.06,0.0,0.0,0,154
Storing data,1,9,0.39,0.44,0.0,0.0,1,154
C 6,1,7,0.26,0.36,0.0,0.0,0,154
HAPTER,1,6,0.33,0.37,0.0,0.03,1,154
"Next, you’ll create a buffer from the raw data. Doing so will essentially give the raw",0,9,0.21,0.15,0.03,0.0,0,154
data the Read and Write,0,9,0.3,0.13,0.0,0.0,1,154
methods. You create a decoder from the buffer using the,0,9,0.21,0.34,0.0,0.0,1,154
NewDecoder function. The decoder is then used to decode the raw data into the,0,9,0.21,0.13,0.0,0.0,0,154
Post,0,9,0.21,0.79,0.0,0.01,1,154
struct that you passed in earlier.,0,9,0.3,0.13,0.01,0.0,1,154
You define a Post struct called,0,9,0.3,0.15,0.0,0.0,1,154
"postRead , and then pass a reference to it into the",0,9,0.21,0.41,0.0,0.0,1,154
"load function, along with the name of the binary data file. The",0,9,0.3,0.13,0.0,0.0,1,154
load function will load,0,9,0.21,0.64,0.0,0.0,1,154
the data from the binary file into the struct.,0,9,0.3,0.13,0.0,0.0,1,154
"When you run the program, a post1 file, which contains the binary data, will be",0,9,0.21,0.15,0.0,0.0,0,154
created. You can open it and it’ll look like gibberish. The post1 file is also read into,0,9,0.21,0.13,0.0,0.0,0,154
"another Post struct, and you’ll see the struct being printed on the console:",0,9,0.21,0.13,0.0,0.01,0,154
{1 Hello World! Sau Sheong},0,7,0.26,0.13,0.01,0.01,1,154
"We’re done with files. For the rest of this chapter, we’ll be discussing data stored in",0,9,0.21,0.13,0.01,0.0,0,154
specialized server-side programs called database servers.,0,9,0.3,0.13,0.0,0.02,1,154
6.3 Go and SQL,1,12,0.54,0.06,0.02,0.01,1,154
"Storing and accessing data in the memory and on the filesystem is useful, but if you",0,9,0.21,0.13,0.01,0.0,0,154
"need robustness and scalability, you’ll need to turn to",0,9,0.3,0.13,0.0,0.0,1,154
database servers . Database servers,1,9,0.39,0.57,0.0,0.0,1,154
are programs that allow other programs to access data through a client-server model.,0,9,0.21,0.13,0.0,0.0,0,154
"The data is normally protected from other means of access, except through the server.",0,9,0.21,0.13,0.0,0.0,0,154
"Typically, a client (either a library or another program) connects to the database",0,9,0.21,0.13,0.0,0.0,0,154
server to access the data through a Structured Query Language,0,9,0.3,0.13,0.0,0.0,1,154
(SQL) . Database man-,0,9,0.21,0.65,0.0,0.0,1,154
agement systems ( DBMS s) often include a database server as part of the system.,0,9,0.21,0.13,0.0,0.0,0,154
Perhaps the most well-known and popularly used database management system is,0,9,0.21,0.15,0.0,0.0,0,154
the relational database management system,1,9,0.48,0.13,0.0,0.0,1,154
(RDBMS) . RDBMS s use relational databases,1,9,0.39,0.47,0.0,0.0,1,154
",",0,9,0.12,0.82,0.0,0.0,0,154
which are databases that are based on the relational model of data. Relational data-,0,9,0.21,0.13,0.0,0.0,0,154
bases are mostly accessed through relational database servers using,0,9,0.3,0.13,0.0,0.0,1,154
SQL .,0,9,0.21,0.68,0.0,0.0,1,154
Relational databases and,0,9,0.3,0.15,0.0,0.0,1,154
SQL are also the most commonly used means of storing,0,9,0.21,0.36,0.0,0.0,1,154
"data in a scalable and easy-to-use way. I discussed this topic briefly in chapter 2, and I",0,9,0.21,0.13,0.0,0.0,0,154
"promised that we’ll go through it properly in this chapter, so here goes.",0,9,0.21,0.13,0.0,0.02,0,154
6.3.1 Setting up the database,1,10,0.5,0.06,0.02,0.01,1,154
"Before you start, you need to set up your database. In chapter 2 you learned how to",0,9,0.21,0.13,0.01,0.0,0,154
"install and set up Postgres, which is the database we’re using for this section. If you",0,9,0.21,0.13,0.0,0.0,0,154
"haven’t done so, now is a great time to do it.",0,9,0.3,0.13,0.0,0.0,1,154
"Once you’ve created the database, you’ll follow these steps:",0,9,0.3,0.15,0.0,0.01,1,154
Create the database user.,0,9,0.3,0.18,0.01,0.0,1,154
1,1,6,0.33,0.15,0.0,0.01,0,154
Create the database for the user.,0,9,0.3,0.18,0.01,0.0,1,154
2,1,6,0.33,0.15,0.0,0.01,0,154
Run the setup script that’ll create the table that you need.,0,9,0.3,0.18,0.01,0.0,1,154
3,1,6,0.33,0.15,0.0,0.01,0,154
Let’s start with creating the user. Run this command at the console:,0,9,0.3,0.13,0.01,0.01,1,154
createuser -P -d gwp,0,7,0.26,0.13,0.01,0.0,1,154
135,1,9,0.3,0.82,0.0,0.0,0,155
Go and SQL,1,9,0.39,0.42,0.0,0.03,1,155
gwp . The option -P tells the,1,9,0.39,0.61,0.03,0.0,1,155
This command creates a Postgres database user called,0,9,0.3,0.14,0.0,0.0,1,155
"createuser program to prompt you for a password for gwp, and the option",0,9,0.21,0.14,0.0,0.0,0,155
-d tells,0,9,0.21,0.78,0.0,0.0,1,155
the program to allow gwp to create databases. You’ll be prompted to enter gwp’s pass-,0,9,0.21,0.14,0.0,0.0,0,155
"word, which I assume you’ll set to gwp as well.",0,9,0.3,0.14,0.0,0.0,1,155
"Next, you’ll create the database for the gwp user. The database name has to be the",0,9,0.21,0.17,0.0,0.0,0,155
same as the user’s name. You can create databases with other names but that will,0,9,0.21,0.14,0.0,0.0,0,155
require setting up permissions and so on. For simplicity’s sake let’s use the default,0,9,0.21,0.14,0.0,0.0,0,155
"database for our database user. To create a database named gwp, run this command at",0,9,0.21,0.14,0.0,0.0,0,155
the console:,0,9,0.3,0.14,0.0,0.02,1,155
createdb gwp,0,7,0.26,0.14,0.02,0.02,1,155
"Now that you have a database, let’s create our one and only table. Create a file named",0,9,0.21,0.14,0.02,0.0,0,155
setup.sql with the script shown in this listing.,0,9,0.3,0.14,0.0,0.03,1,155
Listing 6.5 Script that creates our database,1,9,0.48,0.17,0.03,0.02,1,155
create table posts (,0,7,0.26,0.14,0.02,0.0,1,155
"id     serial primary key,",0,7,0.26,0.14,0.0,0.0,1,155
"content text,",0,7,0.26,0.14,0.0,0.0,1,155
author  varchar(255),0,7,0.26,0.14,0.0,0.0,1,155
);,0,7,0.17,0.14,0.0,0.02,0,155
"To execute the script, run this command on the console",0,9,0.3,0.14,0.02,0.02,1,155
psql -U gwp -f setup.sql -d gwp,0,7,0.26,0.14,0.02,0.02,1,155
and you should now have your database. Take note that you’ll likely need to run this,0,9,0.21,0.14,0.02,0.0,0,155
command over and over again to clean and set up the database every time before run-,0,9,0.21,0.14,0.0,0.0,0,155
ning the code.,0,9,0.3,0.14,0.0,0.0,1,155
"Now that you have your database and it’s set up properly, let’s connect to it. The",0,9,0.21,0.17,0.0,0.0,0,155
"next listing shows the example we’ll be going through, using a file named store.go.",0,9,0.21,0.14,0.0,0.03,0,155
Listing 6.6 Go and CRUD with Postgres,1,9,0.48,0.17,0.03,0.02,1,155
package main,0,7,0.26,0.14,0.02,0.02,1,155
import (,0,7,0.26,0.14,0.02,0.0,1,155
"""database/sql""",0,7,0.26,0.14,0.0,0.0,1,155
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,155
"_ ""github.com/lib/pq""",0,7,0.26,0.14,0.0,0.0,1,155
),0,7,0.17,0.14,0.0,0.02,0,155
type Post struct {,0,7,0.26,0.14,0.02,0.0,1,155
Id     int,0,7,0.26,0.14,0.0,0.0,1,155
Content string,0,7,0.26,0.14,0.0,0.0,1,155
Author  string,0,7,0.26,0.14,0.0,0.0,1,155
},0,7,0.17,0.14,0.0,0.0,0,155
136,1,9,0.39,0.06,0.0,0.0,0,156
Storing data,1,9,0.39,0.44,0.0,0.0,1,156
C 6,1,7,0.26,0.36,0.0,0.0,0,156
HAPTER,1,6,0.33,0.37,0.0,0.03,1,156
var Db *sql.DB,0,7,0.26,0.13,0.03,0.0,1,156
func init() {,0,7,0.26,0.13,0.0,0.0,1,156
var err error,0,7,0.26,0.13,0.0,0.0,1,156
"Db, err = sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.13,0.0,0.0,1,156
➥,0,10,0.23,0.13,0.0,0.0,0,156
"sslmode=disable"")",0,7,0.26,0.18,0.0,0.0,1,156
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,156
Connects to,1,9,0.39,0.54,0.0,0.0,1,156
panic(err),0,7,0.26,0.13,0.0,0.0,1,156
the database,1,9,0.39,0.54,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
},0,7,0.17,0.13,0.0,0.02,0,156
"func Posts(limit int) (posts []Post, err error) {",0,7,0.26,0.13,0.02,0.0,1,156
"rows, err := Db.Query(""select id, content, author from posts limit $1"",",0,7,0.17,0.13,0.0,0.0,0,156
➥,0,10,0.23,0.13,0.0,0.0,0,156
limit),0,7,0.26,0.18,0.0,0.0,1,156
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
for rows.Next() {,0,7,0.26,0.13,0.0,0.0,1,156
post := Post{},0,7,0.26,0.13,0.0,0.0,1,156
"err = rows.Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.13,0.0,0.0,1,156
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
"posts = append(posts, post)",0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
rows.Close(),0,7,0.26,0.13,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
Gets a single post,1,9,0.39,0.68,0.0,0.01,1,156
"func GetPost(id int) (post Post, err error) {",0,7,0.26,0.13,0.01,0.0,1,156
post = Post{},0,7,0.26,0.13,0.0,0.0,1,156
"err = Db.QueryRow(""select id, content, author from posts where id =",0,7,0.26,0.13,0.0,0.0,1,156
➥,0,10,0.23,0.16,0.0,0.0,0,156
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.19,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
Creates a new post,1,9,0.39,0.68,0.0,0.01,1,156
func (post *Post) Create() (err error) {,0,7,0.26,0.13,0.01,0.0,1,156
"statement := ""insert into posts (content, author) values ($1, $2)",0,7,0.26,0.13,0.0,0.0,1,156
➥,0,10,0.23,0.16,0.0,0.0,0,156
"returning id""",0,7,0.26,0.19,0.0,0.0,1,156
"stmt, err := Db.Prepare(statement)",0,7,0.26,0.13,0.0,0.0,1,156
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
defer stmt.Close(),0,7,0.26,0.13,0.0,0.0,1,156
"err = stmt.QueryRow(post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.13,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.02,0,156
func (post *Post) Update() (err error) {,0,7,0.26,0.13,0.02,0.0,1,156
"_, err = Db.Exec(""update posts set content = $2, author = $3 where id =",0,7,0.17,0.13,0.0,0.0,0,156
➥,0,10,0.23,0.16,0.0,0.0,0,156
"$1"", post.Id, post.Content, post.Author)",0,7,0.26,0.19,0.0,0.0,1,156
Updates a post,1,9,0.48,0.03,0.0,0.0,1,156
return,0,7,0.26,0.13,0.0,0.0,1,156
},0,7,0.17,0.13,0.0,0.0,0,156
Deletes a post,1,9,0.39,0.68,0.0,0.01,1,156
func (post *Post) Delete() (err error) {,0,7,0.26,0.13,0.01,0.0,1,156
"_, err = Db.Exec(""delete from posts where id = $1"", post.Id)",0,7,0.26,0.13,0.0,0.0,1,156
137,1,9,0.3,0.82,0.0,0.0,0,157
Go and SQL,1,9,0.39,0.42,0.0,0.03,1,157
return,0,7,0.26,0.14,0.03,0.0,1,157
},0,7,0.17,0.14,0.0,0.02,0,157
func main() {,0,7,0.26,0.14,0.02,0.0,1,157
"post := Post{Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.0,0.02,1,157
fmt.Println(post),0,7,0.26,0.14,0.02,0.0,1,157
{0 Hello World! Sau Sheong},1,9,0.39,0.64,0.0,0.0,1,157
post.Create(),0,7,0.26,0.14,0.0,0.0,1,157
fmt.Println(post),0,7,0.26,0.14,0.0,0.0,1,157
{ 1 Hello World! Sau Sheong},1,9,0.39,0.5,0.0,0.01,1,157
"readPost, _ := GetPost(post.Id)",0,7,0.26,0.14,0.01,0.0,1,157
fmt.Println(readPost),0,7,0.26,0.14,0.0,0.0,1,157
{ 1 Hello World! Sau Sheong},1,9,0.39,0.57,0.0,0.01,1,157
"readPost.Content = ""Bonjour Monde!""",0,7,0.26,0.14,0.01,0.0,1,157
"readPost.Author = ""Pierre""",0,7,0.26,0.14,0.0,0.0,1,157
readPost.Update(),0,7,0.26,0.14,0.0,0.02,1,157
"posts, _ := Posts()",0,7,0.26,0.14,0.02,0.0,1,157
fmt.Println(posts),0,7,0.26,0.14,0.0,0.0,1,157
[{ 1 Bonjour Monde! Pierre}],1,9,0.39,0.57,0.0,0.01,1,157
readPost.Delete(),0,7,0.26,0.14,0.01,0.0,1,157
},0,7,0.17,0.14,0.0,0.02,0,157
6.3.2 Connecting to the database,1,10,0.5,0.07,0.02,0.01,1,157
You need to connect to the database before doing anything else. Doing so is relatively,0,9,0.21,0.14,0.01,0.0,0,157
Db as a pointer to an sql.DB,0,9,0.21,0.61,0.0,0.0,1,157
simple; in the following listing you first declare a variable,0,9,0.3,0.14,0.0,0.0,1,157
init function (which is called automatically for every pack-,0,9,0.21,0.35,0.0,0.0,1,157
"struct, and then use the",0,9,0.3,0.14,0.0,0.0,1,157
age) to initialize it.,0,9,0.3,0.14,0.0,0.03,1,157
Listing 6.7 Function that creates a database handle,1,9,0.48,0.17,0.03,0.02,1,157
var Db *sql.DB,0,7,0.26,0.14,0.02,0.02,1,157
func init() {,0,7,0.26,0.14,0.02,0.0,1,157
var err error,0,7,0.26,0.14,0.0,0.0,1,157
"Db, err = sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.14,0.0,0.0,1,157
"sslmode=disable"")",0,7,0.26,0.17,0.0,0.0,1,157
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,157
panic(err),0,7,0.26,0.14,0.0,0.0,1,157
},0,7,0.17,0.14,0.0,0.0,0,157
},0,7,0.17,0.14,0.0,0.02,0,157
sql.DB,0,9,0.3,0.18,0.02,0.0,1,157
The struct is a handle to the database and represents a pool of zero or data-,0,9,0.21,0.14,0.0,0.0,0,157
sql package. Setting up the connection to,0,9,0.21,0.49,0.0,0.0,1,157
base connections that’s maintained by the,0,9,0.3,0.14,0.0,0.0,1,157
"Open function, passing in the database driver",0,9,0.21,0.46,0.0,0.0,1,157
the database is a one-liner using the,0,9,0.3,0.14,0.0,0.0,1,157
"name (in our case, it’s postgres",1,9,0.48,0.14,0.0,0.0,1,157
) and a data source name. The data source name is a,0,9,0.21,0.39,0.0,0.0,1,157
string that’s specific to the database driver and tells the driver how to connect to the,0,9,0.21,0.14,0.0,0.0,0,157
database. The Open function then returns a pointer to a,0,9,0.3,0.14,0.0,0.0,1,157
sql.DB struct.,0,9,0.21,0.6,0.0,0.0,1,157
Note that the Open function doesn’t connect to the database or even validate the,0,9,0.21,0.17,0.0,0.0,0,157
parameters yet—it simply sets up the necessary structs for connection to the database,0,9,0.21,0.14,0.0,0.0,0,157
later. The connection will be set up lazily when it’s needed.,0,9,0.3,0.14,0.0,0.0,1,157
138,1,9,0.39,0.06,0.0,0.0,0,158
Storing data,1,9,0.39,0.44,0.0,0.0,1,158
C 6,1,7,0.26,0.36,0.0,0.0,0,158
HAPTER,1,6,0.33,0.37,0.0,0.03,1,158
"Also, sql.DB doesn’t needed to be closed (you can do so if you like); it’s simply a",0,9,0.21,0.15,0.03,0.0,0,158
handle and not the actual connection. Remember that this abstraction contains a,0,9,0.21,0.13,0.0,0.0,0,158
"pool of database connections and will maintain them. In our example, you’ll be using",0,9,0.21,0.13,0.0,0.0,0,158
the globally defined Db,0,9,0.3,0.13,0.0,0.0,1,158
variable from our various,0,9,0.21,0.33,0.0,0.0,1,158
"CRUD methods and functions, but",0,9,0.21,0.54,0.0,0.0,1,158
sql.DB struct around once you’ve created it.,0,9,0.21,0.35,0.0,0.0,1,158
an alternative is to pass the,0,9,0.3,0.13,0.0,0.0,1,158
"Open function, which returns a",0,9,0.21,0.37,0.0,0.0,1,158
sql.DB struct given the,0,9,0.21,0.63,0.0,0.0,1,158
So far we’ve discussed the,0,9,0.3,0.15,0.0,0.0,1,158
database driver name and a data source name. How do you get the database driver?,0,9,0.21,0.13,0.0,0.0,0,158
Register,0,9,0.21,0.75,0.0,0.0,1,158
The normal way that you’d register a database driver involves using the,0,9,0.21,0.13,0.0,0.0,0,158
"function, with the name of the database driver, and a struct that implements the",0,9,0.21,0.13,0.0,0.0,0,158
driver.Driver interface like this:,0,9,0.3,0.13,0.0,0.01,1,158
"sql.Register(""postgres"", &drv{})",0,7,0.26,0.13,0.01,0.01,1,158
"In this example, postgres",0,9,0.3,0.13,0.01,0.0,1,158
drv is a struct that imple-,0,9,0.21,0.61,0.0,0.0,1,158
is the name of the driver and,0,9,0.21,0.35,0.0,0.0,1,158
ments the Driver interface. You’ll notice that we didn’t do this earlier. Why not?,0,9,0.21,0.13,0.0,0.0,0,158
The Postgres driver we used (a third-party driver) registered itself when we,0,9,0.21,0.15,0.0,0.0,0,158
"imported the driver, that’s why.",0,9,0.3,0.13,0.0,0.01,1,158
import (,0,7,0.26,0.13,0.01,0.0,1,158
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,158
"""database/sql""",0,7,0.26,0.13,0.0,0.0,1,158
"_ ""github.com/lib/pq""",0,7,0.26,0.13,0.0,0.0,1,158
),0,7,0.17,0.13,0.0,0.02,0,158
The github.com/lib/pq,0,9,0.3,0.13,0.02,0.0,1,158
"package you imported is the Postgres driver, and when it’s",0,9,0.21,0.34,0.0,0.0,1,158
"imported, its init function will kick in and register itself. Go doesn’t provide any offi-",0,9,0.21,0.13,0.0,0.0,0,158
cial database drivers; all database drivers are third-party libraries that should conform,0,9,0.21,0.13,0.0,0.0,0,158
sql.driver package. Notice that when you import the,0,9,0.21,0.38,0.0,0.0,1,158
to the interfaces defined in the,0,9,0.3,0.13,0.0,0.0,1,158
"database driver, you set the name of the package to be an underscore (_). This is",0,9,0.21,0.13,0.0,0.0,0,158
database/sql,0,9,0.21,0.71,0.0,0.0,1,158
because you shouldn’t use the database driver directly; you should use,0,9,0.3,0.13,0.0,0.0,1,158
"only. This way, if you upgrade the version of the driver or change the implementation",0,9,0.21,0.13,0.0,0.0,0,158
"of the driver, you don’t need to make changes to all your code.",0,9,0.3,0.13,0.0,0.0,1,158
"To install this driver, run this command on the console:",0,9,0.3,0.15,0.0,0.01,1,158
"go get ""github.com/lib/pq""",0,7,0.26,0.13,0.01,0.01,1,158
This command will fetch the code from the repository and place it in the package,0,9,0.21,0.13,0.01,0.0,0,158
"repository, and then compile it along with your other code.",0,9,0.3,0.13,0.0,0.02,1,158
6.3.3 Creating a post,1,10,0.5,0.06,0.02,0.01,1,158
"With the initial database setup done, let’s start creating our first record in the data-",0,9,0.21,0.13,0.01,0.0,0,158
Post struct you’ve used in the previous few sec-,0,9,0.21,0.44,0.0,0.0,1,158
"base. In this example, you’ll the same",0,9,0.3,0.13,0.0,0.0,1,158
"tions. Instead of storing to memory or file, you’ll be storing and retrieving the same",0,9,0.21,0.13,0.0,0.0,0,158
information from a Postgres database.,0,9,0.3,0.13,0.0,0.0,1,158
"In our sample application, you’ll use various functions to perform create, retrieve,",0,9,0.21,0.15,0.0,0.0,0,158
"update, and delete the data. In this section, you’ll learn how to create posts using the",0,9,0.21,0.13,0.0,0.0,0,158
139,1,9,0.3,0.82,0.0,0.0,0,159
Go and SQL,1,9,0.39,0.42,0.0,0.03,1,159
Create function. Before we get into the,0,9,0.3,0.14,0.03,0.0,1,159
"Create function, though, we’ll discuss how",0,9,0.21,0.48,0.0,0.0,1,159
you want to create posts.,0,9,0.3,0.14,0.0,0.0,1,159
"Post struct, with the Content and Author fields filled in.",0,9,0.21,0.38,0.0,0.0,1,159
You’ll begin by creating a,0,9,0.3,0.17,0.0,0.0,1,159
Note that you’re not filling in the Id field because it’ll be populated by the database,0,9,0.21,0.14,0.0,0.0,0,159
(as an auto-incremented primary key).,0,9,0.3,0.14,0.0,0.01,1,159
"post := Post{Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.01,0.01,1,159
"fmt.Println statement to debug, you’ll see that the Id",0,9,0.21,0.39,0.01,0.0,1,159
If you pause here and insert a,0,9,0.3,0.14,0.0,0.0,1,159
field is set to 0:,0,9,0.3,0.14,0.0,0.01,1,159
{0 Hello World! Sau Sheong},1,9,0.39,0.57,0.01,0.0,1,159
fmt.Println(post),0,7,0.26,0.14,0.0,0.01,1,159
"Now, let’s create this post as a database record:",0,9,0.3,0.14,0.01,0.01,1,159
post.Create(),0,7,0.26,0.14,0.01,0.01,1,159
"The Create method should return an error if something goes wrong, but for brevity’s",0,9,0.21,0.14,0.01,0.0,0,159
"sake, let’s ignore that. Let’s print out the value in the variable again:",0,9,0.21,0.14,0.0,0.01,0,159
{ 1 Hello World! Sau Sheong},1,9,0.39,0.57,0.01,0.0,1,159
fmt.Println(post),0,7,0.26,0.14,0.0,0.01,1,159
This time you’ll see that the Id field should be set to 1. Now that you know what you,0,9,0.21,0.14,0.01,0.0,0,159
"want the Create function to do, let’s dive into the code.",0,9,0.3,0.14,0.0,0.03,1,159
Listing 6.8 Creating a post,1,9,0.48,0.17,0.03,0.02,1,159
func (post *Post) Create() (err error) {,0,7,0.26,0.14,0.02,0.0,1,159
"statement := ""insert into posts (content, author) values ($1, $2)",0,7,0.26,0.14,0.0,0.0,1,159
➥,0,10,0.23,0.18,0.0,0.0,0,159
"returning id """,0,7,0.26,0.2,0.0,0.0,1,159
"stmt, err := db.Prepare(statement)",0,7,0.26,0.14,0.0,0.0,1,159
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,159
return,0,7,0.26,0.14,0.0,0.0,1,159
},0,7,0.17,0.14,0.0,0.0,0,159
defer stmt.Close(),0,7,0.26,0.14,0.0,0.0,1,159
"err = stmt.QueryRow(post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.14,0.0,0.0,1,159
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,159
return,0,7,0.26,0.14,0.0,0.0,1,159
},0,7,0.17,0.14,0.0,0.0,0,159
return,0,7,0.26,0.14,0.0,0.0,1,159
},0,7,0.17,0.14,0.0,0.02,0,159
The Create function is a method to the,0,9,0.3,0.14,0.02,0.0,1,159
Post struct. You can see that because when,0,9,0.21,0.48,0.0,0.0,1,159
you’re defining the Create,0,9,0.3,0.14,0.0,0.0,1,159
Post struct between,0,9,0.21,0.68,0.0,0.0,1,159
"function, you place a reference to a",0,9,0.21,0.37,0.0,0.0,1,159
"the func keyword and the name of the function,",0,9,0.3,0.14,0.0,0.0,1,159
Create . The reference to a,0,9,0.21,0.57,0.0,0.0,1,159
Post,0,9,0.21,0.8,0.0,0.01,1,159
"struct, post , is also called the receiver of the method and can be referred to without",0,9,0.21,0.14,0.01,0.0,0,159
the ampersand ( & ) within the method.,0,9,0.3,0.14,0.0,0.0,1,159
You start the method by getting defining an,0,9,0.3,0.17,0.0,0.0,1,159
SQL prepared statement. A,0,9,0.21,0.55,0.0,0.0,1,159
prepared,1,9,0.39,0.78,0.0,0.0,1,159
"statement is an SQL statement template, where you can replace certain values during",1,9,0.39,0.14,0.0,0.0,0,159
execution. Prepared statements are often used to execute statements repeatedly.,0,9,0.21,0.14,0.0,0.01,0,159
"statement := ""insert into posts (content, author) values ($1, $2) returning id""",0,7,0.17,0.14,0.01,0.0,0,159
140,1,9,0.39,0.06,0.0,0.0,0,160
Storing data,1,9,0.39,0.44,0.0,0.0,1,160
C 6,1,7,0.26,0.36,0.0,0.0,0,160
HAPTER,1,6,0.33,0.37,0.0,0.03,1,160
Replace $1 and $2 with the actual values you want when creating the record. Notice,0,9,0.21,0.13,0.03,0.0,0,160
that you’re stating that you want the database to return the id column. Why we need,0,9,0.21,0.13,0.0,0.0,0,160
to return the value of the id column will become clear soon.,0,9,0.3,0.13,0.0,0.0,1,160
Prepare method from the,0,9,0.21,0.55,0.0,0.0,1,160
sql.DB,0,9,0.21,0.77,0.0,0.0,1,160
"To create it as a prepared statement, let’s use the",0,9,0.3,0.15,0.0,0.0,1,160
struct:,0,9,0.3,0.13,0.0,0.01,1,160
"stmt, err := db.Prepare(statement)",0,7,0.26,0.13,0.01,0.01,1,160
sql.Stmt interface (defined in the,0,9,0.21,0.44,0.01,0.0,1,160
sql.Driver,0,9,0.21,0.73,0.0,0.0,1,160
This code will create a reference to an,0,9,0.3,0.13,0.0,0.0,1,160
"package and the struct implemented by the database driver), which is our statement.",0,9,0.21,0.13,0.0,0.0,0,160
QueryRow method on the state-,0,9,0.21,0.57,0.0,0.0,1,160
"Next, execute the prepared statement using the",0,9,0.3,0.15,0.0,0.0,1,160
"ment, passing it the data from the receiver:",0,9,0.3,0.13,0.0,0.01,1,160
"err = stmt.QueryRow(post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.13,0.01,0.01,1,160
You use QueryRow here because you want to return only a single reference to an,0,9,0.21,0.13,0.01,0.0,0,160
sql.Row struct. If more than one,0,9,0.3,0.13,0.0,0.0,1,160
sql.Row is returned by the,0,9,0.21,0.4,0.0,0.0,1,160
"SQL statement, only the",0,9,0.21,0.63,0.0,0.0,1,160
first is returned by QueryRow,0,9,0.3,0.13,0.0,0.0,1,160
QueryRow returns only the,0,9,0.21,0.6,0.0,0.0,1,160
. The rest are discarded.,0,9,0.21,0.37,0.0,0.0,1,160
sql.Row struct; no errors. This is because,0,9,0.3,0.13,0.0,0.0,1,160
QueryRow is often used with the,0,9,0.21,0.5,0.0,0.0,1,160
Scan,0,9,0.21,0.79,0.0,0.01,1,160
"method on the Row struct, which copies the values in the row into its parameters. As",0,9,0.21,0.13,0.01,0.0,0,160
"you can see, the post receiver will have its Id field filled by the returned id field from",0,9,0.21,0.13,0.0,0.0,0,160
the SQL query. This is why you need to specify the returning instruction in your,0,9,0.21,0.13,0.0,0.0,0,160
SQL,0,9,0.12,0.79,0.0,0.0,0,160
"statement. Obviously you only need the Id field, since that’s the auto-incremented",0,9,0.21,0.13,0.0,0.0,0,160
"value generated by the database, while you already know the Content and Author",0,9,0.21,0.13,0.0,0.0,0,160
"fields. As you’ve likely guessed by now, because the post’s Id field is populated, you’ll",0,9,0.21,0.13,0.0,0.0,0,160
now have a fully filled Post,0,9,0.3,0.13,0.0,0.0,1,160
struct that corresponds to a database record.,0,9,0.21,0.35,0.0,0.02,1,160
6.3.4 Retrieving a post,1,10,0.5,0.06,0.02,0.01,1,160
"You’ve created the post, so naturally you need to retrieve it. As before, you want to see",0,9,0.21,0.13,0.01,0.0,0,160
Post,0,9,0.21,0.79,0.0,0.0,1,160
what you need before creating the function to do it. You don’t have an existing,0,9,0.21,0.13,0.0,0.0,0,160
"GetPost function,",0,9,0.21,0.68,0.0,0.0,1,160
"struct, so you can’t define a method on it. You’ll have to define a",0,9,0.3,0.13,0.0,0.0,1,160
Post struct:,0,9,0.21,0.54,0.0,0.0,1,160
which takes in a single Id and returns a fully filled,0,9,0.3,0.13,0.0,0.01,1,160
"readPost, _ := GetPost(1)",0,7,0.26,0.13,0.01,0.0,1,160
{ 1 Hello World! Sau Sheong},1,9,0.39,0.51,0.0,0.0,1,160
fmt.Println(readPost),0,7,0.26,0.13,0.0,0.02,1,160
Note that this code snippet is slightly different from the overall listing; I’m making it,0,9,0.21,0.13,0.02,0.0,0,160
GetPost,0,9,0.21,0.76,0.0,0.0,1,160
clearer here that I’m retrieving a post by its id. This listing shows how the,0,9,0.21,0.13,0.0,0.0,0,160
function works.,0,9,0.3,0.13,0.0,0.03,1,160
Listing 6.9 Retrieving a post,1,9,0.48,0.15,0.03,0.02,1,160
"func GetPost(id int) (post Post, err error) {",0,7,0.26,0.13,0.02,0.0,1,160
post = Post{},0,7,0.26,0.13,0.0,0.0,1,160
"err = Db.QueryRow(""select id, content, author from posts where id =",0,7,0.26,0.13,0.0,0.0,1,160
➥,0,10,0.23,0.16,0.0,0.0,0,160
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.19,0.0,0.0,1,160
return,0,7,0.26,0.13,0.0,0.0,1,160
},0,7,0.17,0.13,0.0,0.0,0,160
141,1,9,0.3,0.82,0.0,0.0,0,161
Go and SQL,1,9,0.39,0.42,0.0,0.03,1,161
You want to return a Post,0,9,0.3,0.14,0.03,0.0,1,161
"struct, so you start by creating an empty one:",0,9,0.21,0.36,0.0,0.01,1,161
post = Post{},0,7,0.26,0.14,0.01,0.01,1,161
QueryRow method and the,0,9,0.21,0.45,0.01,0.0,1,161
Scan method to copy,0,9,0.21,0.67,0.0,0.0,1,161
"As you saw earlier, you can chain the",0,9,0.3,0.14,0.0,0.0,1,161
Post struct. Notice that you’re using,0,9,0.21,0.54,0.0,0.0,1,161
the value of the returned results on the empty,0,9,0.3,0.14,0.0,0.0,1,161
the QueryRow method on the,0,9,0.3,0.14,0.0,0.0,1,161
sql.DB struct instead of sql.Stmt,0,9,0.21,0.38,0.0,0.0,1,161
because obviously you,0,9,0.21,0.66,0.0,0.0,1,161
don’t have or need a prepared statement. It should also be obvious that you could,0,9,0.21,0.14,0.0,0.0,0,161
Create and GetPost functions. The only reason I’m,0,9,0.21,0.4,0.0,0.0,1,161
have done it either way in the,0,9,0.3,0.14,0.0,0.0,1,161
showing you a different way is to illustrate the possibilities.,0,9,0.3,0.14,0.0,0.0,1,161
Post struct populated with the data from the data-,0,9,0.21,0.42,0.0,0.0,1,161
Now that you have the empty,0,9,0.3,0.17,0.0,0.0,1,161
"base, it’ll be returned to the calling function.",0,9,0.3,0.14,0.0,0.02,1,161
6.3.5 Updating a post,1,10,0.5,0.07,0.02,0.01,1,161
"After you retrieve a post, you may want to update the information in the record.",0,9,0.21,0.14,0.01,0.0,0,161
"readPost , let’s modify it and then have the new",0,9,0.21,0.44,0.0,0.0,1,161
Assuming you’ve already retrieved,0,9,0.3,0.14,0.0,0.0,1,161
data updated in the database as well:,0,9,0.3,0.14,0.0,0.01,1,161
"readPost.Content = ""Bonjour Monde!""",0,7,0.26,0.14,0.01,0.0,1,161
"readPost.Author = ""Pierre""",0,7,0.26,0.14,0.0,0.0,1,161
readPost.Update(),0,7,0.26,0.14,0.0,0.02,1,161
You’ll create an Update method on the,0,9,0.3,0.14,0.02,0.0,1,161
"Post struct for this purpose, as shown in this",0,9,0.21,0.47,0.0,0.0,1,161
listing.,0,9,0.3,0.14,0.0,0.03,1,161
Listing 6.10 Updating a post,1,9,0.48,0.17,0.03,0.02,1,161
func (post *Post) Update() (err error) {,0,7,0.26,0.14,0.02,0.0,1,161
"_, err = Db.Exec(""update posts set content = $2, author = $3 where id =",0,7,0.17,0.14,0.0,0.0,0,161
➥,0,10,0.23,0.18,0.0,0.0,0,161
"$1"", post.Id, post.Content, post.Author)",0,7,0.26,0.2,0.0,0.0,1,161
return,0,7,0.26,0.14,0.0,0.0,1,161
},0,7,0.17,0.14,0.0,0.02,0,161
"Unlike when creating a post, you won’t use a prepared statement. Instead, you’ll jump",0,9,0.21,0.14,0.02,0.0,0,161
Exec method of the sql.DB,0,9,0.21,0.36,0.0,0.0,1,161
right in with a call to the,0,9,0.3,0.14,0.0,0.0,1,161
struct. You no longer have to,0,9,0.21,0.6,0.0,0.0,1,161
"update the receiver, so you don’t need to scan the returned results. Therefore, using",0,9,0.21,0.14,0.0,0.0,0,161
the Exec method on the global database variable,0,9,0.3,0.14,0.0,0.0,1,161
"Db , which returns sql.Result",0,9,0.21,0.56,0.0,0.0,1,161
and,0,9,0.12,0.81,0.0,0.0,0,161
"an error, is much faster:",0,9,0.3,0.14,0.0,0.01,1,161
"_, err = Db.Exec(post.Id, post.Content, post.Author)",0,7,0.26,0.14,0.01,0.01,1,161
We aren’t interested in the result (which just gives the number of rows affected and,0,9,0.21,0.14,0.01,0.0,0,161
"the last inserted id, if applicable) because there’s nothing we want to process from it,",0,9,0.21,0.14,0.0,0.0,0,161
so you can ignore it by assigning it to the underscore (_). And your post will be,0,9,0.21,0.14,0.0,0.0,0,161
updated (unless there’s an error).,0,9,0.3,0.14,0.0,0.02,1,161
6.3.6 Deleting a post,1,10,0.5,0.07,0.02,0.01,1,161
"So far we’ve been able to create, retrieve, and update posts. Deleting them when",0,9,0.21,0.14,0.01,0.0,0,161
142,1,9,0.39,0.06,0.0,0.0,0,162
Storing data,1,9,0.39,0.44,0.0,0.0,1,162
C 6,1,7,0.26,0.36,0.0,0.0,0,162
HAPTER,1,6,0.33,0.37,0.0,0.03,1,162
"readPost after retrieving it previously, you want to be able to delete it using a",0,9,0.21,0.13,0.03,0.0,0,162
Delete,0,9,0.21,0.77,0.0,0.01,1,162
method:,0,9,0.3,0.13,0.01,0.01,1,162
readPost.Delete(),0,7,0.26,0.13,0.01,0.01,1,162
Delete method in the Post,0,9,0.21,0.46,0.01,0.0,1,162
That’s simple enough. If you look at the,0,9,0.3,0.13,0.0,0.0,1,162
struct in the fol-,0,9,0.21,0.69,0.0,0.0,1,162
"lowing listing, there’s nothing new that we haven’t gone through before.",0,9,0.21,0.13,0.0,0.03,0,162
Listing 6.11 Deleting a post,1,9,0.48,0.15,0.03,0.02,1,162
func (post *Post) Delete() (err error) {,0,7,0.26,0.13,0.02,0.0,1,162
"_, err = Db.Exec(""delete from posts where id = $1"", post.Id)",0,7,0.26,0.13,0.0,0.0,1,162
return,0,7,0.26,0.13,0.0,0.0,1,162
},0,7,0.17,0.13,0.0,0.02,0,162
Exec,0,9,0.21,0.79,0.02,0.0,1,162
"As before, when you were updating the post, you’ll jump right into using the",0,9,0.21,0.13,0.0,0.0,0,162
method on the sql.DB struct. This executes the,0,9,0.3,0.13,0.0,0.0,1,162
"SQL statement, and as before, you’re",0,9,0.21,0.52,0.0,0.0,1,162
not interested in the returned result and so assign it to the underscore (_).,0,9,0.21,0.13,0.0,0.0,0,162
You probably noticed that the methods and functions I created are arbitrary. You,0,9,0.21,0.15,0.0,0.0,0,162
Post struct,0,9,0.21,0.74,0.0,0.0,1,162
can certainly change them to however you’d like. Instead of populating a,0,9,0.21,0.13,0.0,0.0,0,162
"Update method on the struct, for example, you",0,9,0.21,0.43,0.0,0.0,1,162
"with your changes, then calling the",0,9,0.3,0.13,0.0,0.0,1,162
"Update method. Or more commonly, if you",0,9,0.21,0.47,0.0,0.0,1,162
can pass the changes as parameters to the,0,9,0.3,0.13,0.0,0.0,1,162
"want to retrieve posts using a particular column or filter, you can create different func-",0,9,0.21,0.13,0.0,0.0,0,162
tions to do that.,0,9,0.3,0.13,0.0,0.02,1,162
6.3.7 Getting all posts,1,10,0.5,0.06,0.02,0.01,1,162
"One common function is to get all posts from the database, with a given limit. In other",0,9,0.21,0.13,0.01,0.0,0,162
"words, you want to do the following:",0,9,0.3,0.13,0.0,0.0,1,162
"posts, _ := Posts(10)",0,7,0.26,0.13,0.0,0.0,1,162
You want to get the first 10 posts from the database and put them in a slice. This listing,0,9,0.21,0.13,0.0,0.0,0,162
shows how you can do this.,0,9,0.3,0.13,0.0,0.03,1,162
Listing 6.12 Getting all posts,1,9,0.48,0.15,0.03,0.02,1,162
"func Posts(limit int) (posts []Post, err error) {",0,7,0.26,0.13,0.02,0.0,1,162
"rows, err := Db.Query(""select id, content, author from posts limit $1"",",0,7,0.17,0.13,0.0,0.0,0,162
➥,0,10,0.23,0.16,0.0,0.0,0,162
limit),0,7,0.26,0.19,0.0,0.0,1,162
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,162
return,0,7,0.26,0.13,0.0,0.0,1,162
},0,7,0.17,0.13,0.0,0.0,0,162
for rows.Next() {,0,7,0.26,0.13,0.0,0.0,1,162
post := Post{},0,7,0.26,0.13,0.0,0.0,1,162
"err = rows.Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.13,0.0,0.0,1,162
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,162
return,0,7,0.26,0.13,0.0,0.0,1,162
},0,7,0.17,0.13,0.0,0.0,0,162
"posts = append(posts, post)",0,7,0.26,0.13,0.0,0.0,1,162
},0,7,0.17,0.13,0.0,0.0,0,162
rows.Close(),0,7,0.26,0.13,0.0,0.0,1,162
143,1,9,0.3,0.82,0.0,0.0,0,163
Go and SQL relationships,1,9,0.39,0.37,0.0,0.03,1,163
return,0,7,0.26,0.14,0.03,0.0,1,163
},0,7,0.17,0.14,0.0,0.02,0,163
You use the Query method on the,0,9,0.3,0.14,0.02,0.0,1,163
"sql.DB struct, which returns a",0,9,0.21,0.43,0.0,0.0,1,163
Rows interface. The,0,9,0.21,0.68,0.0,0.0,1,163
Rows interface is an iterator. You can call a,0,9,0.3,0.14,0.0,0.0,1,163
Next method on it repeatedly and it’ll,0,9,0.21,0.52,0.0,0.0,1,163
"return sql.Row until it runs out of rows, when it returns",0,9,0.3,0.14,0.0,0.0,1,163
io.EOF .,0,9,0.21,0.6,0.0,0.0,1,163
"Post struct and scan the row into the struct, and",0,9,0.21,0.44,0.0,0.0,1,163
"For each iteration, you create a",0,9,0.3,0.17,0.0,0.0,1,163
then append it to the slice that you’ll be returning to the caller.,0,9,0.3,0.14,0.0,0.02,1,163
6.4 Go and SQL relationships,1,12,0.54,0.07,0.02,0.01,1,163
One of the reasons relational databases are so popular for storing data is because,0,9,0.21,0.14,0.01,0.0,0,163
tables can be related. This allows pieces of data to be related to each other in a consis-,0,9,0.21,0.14,0.0,0.0,0,163
tent and easy-to-understand way. There are essentially four ways of relating a record to,0,9,0.21,0.14,0.0,0.0,0,163
other records.,0,9,0.3,0.14,0.0,0.01,1,163
"One to one (has one)—A user has one profile, for example.",1,9,0.48,0.19,0.01,0.0,1,163
■,0,4,0.11,0.17,0.0,0.01,0,163
"One to many (has many)—A user has many forum posts, for example.",1,9,0.48,0.19,0.01,0.0,1,163
■,0,4,0.11,0.17,0.0,0.01,0,163
"Many to one (belongs to)—Many forum posts belong to one user, for example.",1,9,0.39,0.19,0.01,0.0,0,163
■,0,4,0.11,0.17,0.0,0.01,0,163
"Many to many —A user can participate in many forum threads, while a forum",1,9,0.39,0.19,0.01,0.0,0,163
■,0,4,0.11,0.17,0.0,0.01,0,163
"thread can also have many users contributing to it, for example.",0,9,0.3,0.19,0.01,0.01,1,163
We’ve discussed the standard,0,9,0.3,0.14,0.01,0.0,1,163
"CRUD for a single database table, but now let’s look at",0,9,0.21,0.39,0.0,0.0,1,163
"how we can do the same for two related tables. For this example, we’ll use a one-to-",0,9,0.21,0.14,0.0,0.0,0,163
"many relationship where a forum post has many comments. As you may realize, many-",0,9,0.21,0.14,0.0,0.0,0,163
"to-one is the inverse of one-to-many, so we’ll see how that works as well.",0,9,0.21,0.14,0.0,0.02,0,163
6.4.1 Setting up the databases,1,10,0.5,0.07,0.02,0.01,1,163
"Before we start, let’s set up our database again, this time with two tables. You’ll use the",0,9,0.21,0.14,0.01,0.0,0,163
"same commands on the console as before, but with a slightly different setup.sql script,",0,9,0.21,0.14,0.0,0.0,0,163
shown in this listing.,0,9,0.3,0.14,0.0,0.03,1,163
Listing 6.13 Setting up two related tables,1,9,0.48,0.17,0.03,0.02,1,163
drop table posts cascade if exists;,0,7,0.26,0.14,0.02,0.0,1,163
drop table comments if exists;,0,7,0.26,0.14,0.0,0.02,1,163
create table posts (,0,7,0.26,0.14,0.02,0.0,1,163
"id     serial primary key,",0,7,0.26,0.14,0.0,0.0,1,163
"content text,",0,7,0.26,0.14,0.0,0.0,1,163
author  varchar(255),0,7,0.26,0.14,0.0,0.0,1,163
);,0,7,0.17,0.14,0.0,0.02,0,163
create table comments (,0,7,0.26,0.14,0.02,0.0,1,163
"id     serial primary key,",0,7,0.26,0.14,0.0,0.0,1,163
"content text,",0,7,0.26,0.14,0.0,0.0,1,163
"author  varchar(255),",0,7,0.26,0.14,0.0,0.0,1,163
post_id integer references posts(id),0,7,0.26,0.14,0.0,0.0,1,163
);,0,7,0.17,0.14,0.0,0.0,0,163
144,1,9,0.39,0.06,0.0,0.0,0,164
Storing data,1,9,0.39,0.44,0.0,0.0,1,164
C 6,1,7,0.26,0.36,0.0,0.0,0,164
HAPTER,1,6,0.33,0.37,0.0,0.03,1,164
"First, you’ll see that because the tables are related, when you drop the posts table you",0,9,0.21,0.13,0.03,0.0,0,164
need to cascade it; otherwise you won’t be able to drop posts because the comments,0,9,0.21,0.13,0.0,0.0,0,164
"table depends on it. We’ve added the table comments, which has the same columns as",0,9,0.21,0.13,0.0,0.0,0,164
"posts but with an additional column, post_id, that references the column id in the",0,9,0.21,0.13,0.0,0.0,0,164
id,0,9,0.12,0.81,0.0,0.0,0,164
posts table. This will set up post_id as a foreign key that references the primary key,0,9,0.21,0.13,0.0,0.0,0,164
in the posts table.,0,9,0.3,0.13,0.0,0.0,1,164
"With the tables set up, let’s look at the code in a single listing. The code in the fol-",0,9,0.21,0.15,0.0,0.0,0,164
lowing listing is found in a file named store.go.,0,9,0.3,0.13,0.0,0.03,1,164
Listing 6.14 One-to-many and many-to-one with Go,1,9,0.48,0.15,0.03,0.02,1,164
package main,0,7,0.26,0.13,0.02,0.02,1,164
import (,0,7,0.26,0.13,0.02,0.0,1,164
"""database/sql""",0,7,0.26,0.13,0.0,0.0,1,164
"""errors""",0,7,0.26,0.13,0.0,0.0,1,164
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,164
"_ ""github.com/lib/pq""",0,7,0.26,0.13,0.0,0.0,1,164
),0,7,0.17,0.13,0.0,0.02,0,164
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,164
Id     int,0,7,0.26,0.13,0.0,0.0,1,164
Content string,0,7,0.26,0.13,0.0,0.0,1,164
Author  string,0,7,0.26,0.13,0.0,0.0,1,164
Comments []Comment,0,7,0.26,0.13,0.0,0.0,1,164
},0,7,0.17,0.13,0.0,0.02,0,164
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,164
Id     int,0,7,0.26,0.13,0.0,0.0,1,164
Content string,0,7,0.26,0.13,0.0,0.0,1,164
Author  string,0,7,0.26,0.13,0.0,0.0,1,164
Post    *Post,0,7,0.26,0.13,0.0,0.0,1,164
},0,7,0.17,0.13,0.0,0.02,0,164
var Db *sql.DB,0,7,0.26,0.13,0.02,0.02,1,164
func init() {,0,7,0.26,0.13,0.02,0.0,1,164
var err error,0,7,0.26,0.13,0.0,0.0,1,164
"Db, err = sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.13,0.0,0.0,1,164
➥,0,10,0.23,0.16,0.0,0.0,0,164
"sslmode=disable"")",0,7,0.26,0.19,0.0,0.0,1,164
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,164
panic(err),0,7,0.26,0.13,0.0,0.0,1,164
},0,7,0.17,0.13,0.0,0.0,0,164
},0,7,0.17,0.13,0.0,0.0,0,164
comment Creates a single,1,9,0.39,0.63,0.0,0.0,1,164
func (comment *Comment) Create() (err error) {,0,7,0.26,0.13,0.0,0.0,1,164
if comment.Post == nil {,0,7,0.26,0.13,0.0,0.0,1,164
"err = errors.New(""Post not found"")",0,7,0.26,0.13,0.0,0.0,1,164
return,0,7,0.26,0.13,0.0,0.0,1,164
},0,7,0.17,0.13,0.0,0.0,0,164
"err = Db.QueryRow(""insert into comments (content, author, post_id)",0,7,0.26,0.13,0.0,0.0,1,164
➥,0,10,0.23,0.16,0.0,0.0,0,164
"values ($1, $2, $3) returning id"", comment.Content, comment.Author,",0,7,0.26,0.19,0.0,0.0,1,164
➥,0,10,0.23,0.16,0.0,0.0,0,164
comment.Post.Id).Scan(&comment.Id),0,7,0.26,0.19,0.0,0.0,1,164
145,1,9,0.3,0.82,0.0,0.0,0,165
Go and SQL relationships,1,9,0.39,0.37,0.0,0.03,1,165
return,0,7,0.26,0.14,0.03,0.0,1,165
},0,7,0.17,0.14,0.0,0.02,0,165
"func GetPost(id int) (post Post, err error) {",0,7,0.26,0.14,0.02,0.0,1,165
post = Post{},0,7,0.26,0.14,0.0,0.0,1,165
post.Comments = []Comment{},0,7,0.26,0.14,0.0,0.0,1,165
"err = Db.QueryRow(""select id, content, author from posts where id =",0,7,0.26,0.14,0.0,0.0,1,165
➥,0,10,0.23,0.18,0.0,0.0,0,165
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.2,0.0,0.02,1,165
"rows, err := Db.Query(""select id, content, author from comments"")",0,7,0.26,0.14,0.02,0.0,1,165
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,165
return,0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.0,0,165
for rows.Next() {,0,7,0.26,0.14,0.0,0.0,1,165
comment := Comment{Post: &post},0,7,0.26,0.14,0.0,0.0,1,165
"err = rows.Scan(&comment.Id, &comment.Content, &comment.Author)",0,7,0.26,0.14,0.0,0.0,1,165
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,165
return,0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.0,0,165
"post.Comments = append(post.Comments, comment)",0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.0,0,165
rows.Close(),0,7,0.26,0.14,0.0,0.0,1,165
return,0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.02,0,165
func (post *Post) Create() (err error) {,0,7,0.26,0.14,0.02,0.0,1,165
"err = Db.QueryRow(""insert into posts (content, author) values ($1, $2)",0,7,0.26,0.14,0.0,0.0,1,165
➥,0,10,0.23,0.18,0.0,0.0,0,165
"returning id"", post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.2,0.0,0.0,1,165
return,0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.02,0,165
func main() {,0,7,0.26,0.14,0.02,0.0,1,165
"post := Post{Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.0,0.0,1,165
post.Create(),0,7,0.26,0.14,0.0,0.02,1,165
"comment := Comment{Content: ""Good post!"", Author: ""Joe"", Post: &post}",0,7,0.26,0.14,0.02,0.0,1,165
comment.Create(),0,7,0.26,0.14,0.0,0.0,1,165
"readPost, _ := GetPost(post.Id)",0,7,0.26,0.14,0.0,0.0,1,165
[{ 1 Good,1,9,0.48,0.04,0.0,0.0,1,165
{ 1 Hello World! Sau Sheong,1,9,0.39,0.61,0.0,0.0,1,165
[{ 1 Good post! Joe 0xc20802a 1,1,9,0.39,0.61,0.0,0.0,1,165
post! Joe,1,9,0.48,0.04,0.0,0.0,1,165
c0}]},1,9,0.39,0.82,0.0,0.0,1,165
fmt.Println(readPost),0,7,0.26,0.14,0.0,0.0,1,165
0xc20802a1c0}],1,9,0.48,0.0,0.0,0.0,1,165
fmt.Println(readPost.Comments),0,7,0.26,0.14,0.0,0.0,1,165
fmt.Println(readPost.Comments[0].Post),0,7,0.26,0.14,0.0,0.0,1,165
&{ 1 Hello World! Sau Sheong,1,9,0.39,0.58,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.0,0,165
[{ 1 Good post! Joe 0xc20802a 1,1,9,0.39,0.58,0.0,0.0,1,165
c0}]},1,9,0.39,0.79,0.0,0.01,1,165
6.4.2 One-to-many relationship,1,10,0.5,0.07,0.01,0.01,1,165
Post and,0,9,0.21,0.77,0.01,0.0,1,165
"As before, let’s decide how to establish the relationships. First, look at the",0,9,0.21,0.14,0.0,0.0,0,165
Comment structs:,0,9,0.3,0.14,0.0,0.01,1,165
type   Post  struct {,0,7,0.26,0.14,0.01,0.0,1,165
Id       int,0,7,0.26,0.14,0.0,0.0,1,165
Content  string,0,7,0.26,0.14,0.0,0.0,1,165
Author   string,0,7,0.26,0.14,0.0,0.0,1,165
Comments []Comment,0,7,0.26,0.14,0.0,0.0,1,165
},0,7,0.17,0.14,0.0,0.0,0,165
146,1,9,0.39,0.06,0.0,0.0,0,166
Storing data,1,9,0.39,0.44,0.0,0.0,1,166
C 6,1,7,0.26,0.36,0.0,0.0,0,166
HAPTER,1,6,0.33,0.37,0.0,0.03,1,166
type Comment struct {,0,7,0.26,0.13,0.03,0.0,1,166
Id      int,0,7,0.26,0.13,0.0,0.0,1,166
Content string,0,7,0.26,0.13,0.0,0.0,1,166
Author  string,0,7,0.26,0.13,0.0,0.0,1,166
Post    *Post,0,7,0.26,0.13,0.0,0.0,1,166
},0,7,0.17,0.13,0.0,0.02,0,166
"Notice that Post has an additional field named Comments, which is a slice of",0,9,0.21,0.13,0.02,0.0,0,166
Comment,0,9,0.21,0.76,0.0,0.01,1,166
structs. Comment has a field named Post that’s a pointer to a,0,9,0.3,0.13,0.01,0.0,1,166
Post struct. An astute,0,9,0.21,0.64,0.0,0.0,1,166
Comment while we have a,0,9,0.21,0.63,0.0,0.0,1,166
"reader might ask, why are we using a field that’s a pointer in",0,9,0.3,0.13,0.0,0.0,1,166
Post ? We don’t. The Comments field in the,0,9,0.21,0.37,0.0,0.0,1,166
Post struct,0,9,0.21,0.74,0.0,0.0,1,166
field that’s an actual struct in,0,9,0.3,0.13,0.0,0.0,1,166
"is a slice, which is really a pointer to an array, so both are pointers. You can see why",0,9,0.21,0.13,0.0,0.0,0,166
you’d want to store the relationship in the struct as a pointer; you don’t really want,0,9,0.21,0.13,0.0,0.0,0,166
Post —you want to point to the same,0,9,0.21,0.34,0.0,0.0,1,166
Post .,0,9,0.21,0.64,0.0,0.0,1,166
another copy of the same,0,9,0.3,0.13,0.0,0.0,1,166
"Now that you’ve built the relationship, let’s determine how you can use it. As men-",0,9,0.21,0.15,0.0,0.0,0,166
"tioned earlier, this is a one-to-many as well as a many-to-one relationship. When you",0,9,0.21,0.13,0.0,0.0,0,166
"create a comment, you also want to create the relationship between the comment and",0,9,0.21,0.13,0.0,0.0,0,166
the post it’s meant for:,0,9,0.3,0.13,0.0,0.01,1,166
"comment := Comment{Content: ""Good post!"", Author: ""Joe"", Post: &post}",0,7,0.26,0.13,0.01,0.0,1,166
comment.Create(),0,7,0.26,0.13,0.0,0.02,1,166
"As before, you create a Comment",0,9,0.3,0.13,0.02,0.0,1,166
Create method on it. The,0,9,0.21,0.61,0.0,0.0,1,166
"struct, and then call the",0,9,0.21,0.4,0.0,0.0,1,166
relationship should be built upon creation of the comment. This means if you retrieve,0,9,0.21,0.13,0.0,0.0,0,166
"the post now, the relationship should be established.",0,9,0.3,0.13,0.0,0.01,1,166
"readPost, _ := GetPost(post.Id)",0,7,0.26,0.13,0.01,0.01,1,166
The readPost variable should now have your newly minted comment in its Comments,0,9,0.21,0.13,0.01,0.0,0,166
"Comment struct’s Create method, shown in this listing.",0,9,0.21,0.35,0.0,0.0,1,166
field. Next let’s look at the,0,9,0.3,0.13,0.0,0.03,1,166
Listing 6.15 Creating the relationship,1,9,0.48,0.15,0.03,0.02,1,166
func (comment *Comment) Create() (err error) {,0,7,0.26,0.13,0.02,0.0,1,166
if comment.Post == nil {,0,7,0.26,0.13,0.0,0.0,1,166
"err = errors.New(""Post not found"")",0,7,0.26,0.13,0.0,0.0,1,166
return,0,7,0.26,0.13,0.0,0.0,1,166
},0,7,0.17,0.13,0.0,0.0,0,166
"err = Db.QueryRow(""insert into comments (content, author, post_id)",0,7,0.26,0.13,0.0,0.0,1,166
➥,0,10,0.23,0.16,0.0,0.0,0,166
"values ($1, $2, $3) returning id"", comment.Content, comment.Author,",0,7,0.26,0.19,0.0,0.0,1,166
➥,0,10,0.23,0.16,0.0,0.0,0,166
comment.Post.Id).Scan(&comment.Id),0,7,0.26,0.19,0.0,0.0,1,166
return,0,7,0.26,0.13,0.0,0.0,1,166
},0,7,0.17,0.13,0.0,0.02,0,166
"Before you create the relationship between the comment and the post, you need to",0,9,0.21,0.13,0.02,0.0,0,166
make sure that the Post,0,9,0.3,0.13,0.0,0.0,1,166
"exists! If it doesn’t, you’ll return an error. The rest of the",0,9,0.21,0.34,0.0,0.0,1,166
"code repeats what we discussed earlier, except that now you also have to include",0,9,0.21,0.13,0.0,0.0,0,166
post_id. Adding post_id will create the relationship.,0,9,0.3,0.13,0.0,0.0,1,166
147,1,9,0.3,0.82,0.0,0.0,0,167
Go relational mappers,1,9,0.39,0.38,0.0,0.03,1,167
"With the relationship established, you want to be able to retrieve the post and be",0,9,0.21,0.17,0.03,0.0,0,167
Get-,0,9,0.21,0.8,0.0,0.0,1,167
"able to see the comments associated with the post. To do this, you’ll modify the",0,9,0.21,0.14,0.0,0.0,0,167
Post function as shown here.,0,9,0.3,0.14,0.0,0.03,1,167
Listing 6.16 Retrieving the relationship,1,9,0.48,0.17,0.03,0.02,1,167
"func GetPost(id int) (post Post, err error) {",0,7,0.26,0.14,0.02,0.0,1,167
post = Post{},0,7,0.26,0.14,0.0,0.0,1,167
post.Comments = []Comment{},0,7,0.26,0.14,0.0,0.0,1,167
"err = Db.QueryRow(""select id, content, author from posts where id =",0,7,0.26,0.14,0.0,0.0,1,167
➥,0,10,0.23,0.18,0.0,0.0,0,167
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.2,0.0,0.02,1,167
"rows, err := Db.Query(""select id, content, author from comments where",0,7,0.26,0.14,0.02,0.0,1,167
➥,0,10,0.23,0.18,0.0,0.0,0,167
"post_id = $1"", id)",0,7,0.26,0.2,0.0,0.0,1,167
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,167
return,0,7,0.26,0.14,0.0,0.0,1,167
},0,7,0.17,0.14,0.0,0.0,0,167
for rows.Next() {,0,7,0.26,0.14,0.0,0.0,1,167
comment := Comment{Post: &post},0,7,0.26,0.14,0.0,0.0,1,167
"err = rows.Scan(&comment.Id, &comment.Content, &comment.Author)",0,7,0.26,0.14,0.0,0.0,1,167
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,167
return,0,7,0.26,0.14,0.0,0.0,1,167
},0,7,0.17,0.14,0.0,0.0,0,167
"post.Comments = append(post.Comments, comment)",0,7,0.26,0.14,0.0,0.0,1,167
},0,7,0.17,0.14,0.0,0.0,0,167
rows.Close(),0,7,0.26,0.14,0.0,0.0,1,167
return,0,7,0.26,0.14,0.0,0.0,1,167
},0,7,0.17,0.14,0.0,0.02,0,167
Post struct and retrieve the post.,0,9,0.21,0.58,0.02,0.0,1,167
"First, we need to initialize the Comments field in the",0,9,0.3,0.14,0.0,0.0,1,167
Comment,0,9,0.21,0.78,0.0,0.0,1,167
"We get all the comments related to this post and iterate through it, creating a",0,9,0.21,0.14,0.0,0.0,0,167
"struct for each comment and appending it to the Comments field, and then return",0,9,0.21,0.14,0.0,0.0,0,167
"the post. As you can see, building up the relationships is not that difficult, though it",0,9,0.21,0.14,0.0,0.0,0,167
"can be a bit tedious if the web application becomes larger. In the next section, you’ll",0,9,0.21,0.14,0.0,0.0,0,167
see how relational mappers can be used to simplify establishing relationships.,0,9,0.21,0.14,0.0,0.0,0,167
Although we discussed the usual,0,9,0.3,0.17,0.0,0.0,1,167
"CRUD functions of any database application here,",0,9,0.21,0.44,0.0,0.0,1,167
we’ve only scratched the surface of accessing an,0,9,0.3,0.14,0.0,0.0,1,167
SQL database using Go. I encourage,0,9,0.21,0.54,0.0,0.0,1,167
you to read the official Go documentation.,0,9,0.3,0.14,0.0,0.02,1,167
6.5 Go relational mappers,1,12,0.54,0.07,0.02,0.01,1,167
You’ve probably come to the conclusion that it’s a lot of work storing data into the,0,9,0.21,0.14,0.01,0.0,0,167
"relational database. This is true in most programming languages; however, there’s",0,9,0.21,0.14,0.0,0.0,0,167
usually a number of third-party libraries that will come between the actual,0,9,0.21,0.14,0.0,0.0,0,167
SQL and,0,9,0.21,0.77,0.0,0.0,1,167
the calling application. In object-oriented programming,0,9,0.3,0.14,0.0,0.0,1,167
"(OOP) languages, these are",0,9,0.21,0.62,0.0,0.0,1,167
often called object-relational mappers (,0,9,0.3,0.14,0.0,0.0,1,167
ORM s). ORM s such as Hibernate (Java) and,0,9,0.21,0.48,0.0,0.0,1,167
ActiveRecord (Ruby) map relational database tables and the objects in the program-,0,9,0.21,0.14,0.0,0.0,0,167
ming language. But this isn’t unique to object-oriented languages. Such mappers are,0,9,0.21,0.14,0.0,0.0,0,167
148,1,9,0.39,0.06,0.0,0.0,0,168
Storing data,1,9,0.39,0.44,0.0,0.0,1,168
C 6,1,7,0.26,0.36,0.0,0.0,0,168
HAPTER,1,6,0.33,0.37,0.0,0.03,1,168
"found in many other programming languages, too; for example, Scala has the Activate",0,9,0.21,0.13,0.03,0.0,0,168
framework and Haskell has Groundhog.,0,9,0.3,0.13,0.0,0.0,1,168
"In Go, there are a number of such relational mappers (",0,9,0.3,0.15,0.0,0.0,1,168
ORM s doesn’t sound as,0,9,0.21,0.63,0.0,0.0,1,168
"accurate to me). In this section, we’ll discuss a couple of them.",0,9,0.3,0.13,0.0,0.02,1,168
6.5.1 Sqlx,1,10,0.5,0.06,0.02,0.01,1,168
database/,0,9,0.21,0.74,0.01,0.0,1,168
Sqlx is a third-party library that provides a set of useful extensions to the,0,9,0.21,0.13,0.0,0.0,0,168
sql package. Sqlx plays well with the,0,9,0.3,0.13,0.0,0.0,1,168
database/sql package because it uses the same,0,9,0.21,0.43,0.0,0.0,1,168
interfaces and provides additional capabilities such as:,0,9,0.3,0.13,0.0,0.01,1,168
"Marshaling database records (rows) into structs, maps, and slices using struct",0,9,0.21,0.18,0.01,0.0,0,168
■,0,4,0.11,0.15,0.0,0.01,0,168
tags,0,9,0.3,0.18,0.01,0.01,1,168
Providing named parameter support for prepared statements,0,9,0.3,0.18,0.01,0.0,1,168
■,0,4,0.11,0.15,0.0,0.02,0,168
StructScan method.,0,9,0.21,0.66,0.02,0.0,1,168
The following listing shows how Sqlx makes life easier using the,0,9,0.3,0.13,0.0,0.0,1,168
Remember to get the library before starting on the code by issuing the following com-,0,9,0.21,0.13,0.0,0.0,0,168
mand on the console:,0,9,0.3,0.13,0.0,0.01,1,168
"go get ""github.com/jmoiron/sqlx""",0,7,0.26,0.13,0.01,0.03,1,168
Listing 6.17 Using Sqlx,1,9,0.48,0.15,0.03,0.02,1,168
package main,0,7,0.26,0.13,0.02,0.02,1,168
import (,0,7,0.26,0.13,0.02,0.0,1,168
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,168
"""github.com/jmoiron/sqlx""",1,7,0.44,0.13,0.0,0.0,1,168
"_ ""github.com/lib/pq""",0,7,0.26,0.13,0.0,0.0,1,168
),0,7,0.17,0.13,0.0,0.02,0,168
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,168
Id     int,0,7,0.26,0.13,0.0,0.0,1,168
Content string,0,7,0.26,0.13,0.0,0.0,1,168
AuthorName string `db: author`,1,7,0.44,0.13,0.0,0.0,1,168
},0,7,0.17,0.13,0.0,0.02,0,168
var Db *sqlx.DB,1,7,0.44,0.13,0.02,0.02,1,168
func init() {,0,7,0.26,0.13,0.02,0.0,1,168
var err error,0,7,0.26,0.13,0.0,0.0,1,168
"Db, err = sqlx.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",1,7,0.44,0.13,0.0,0.0,1,168
"➥ sslmode=disable"")",1,10,0.5,0.16,0.0,0.0,1,168
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,168
panic(err),0,7,0.26,0.13,0.0,0.0,1,168
},0,7,0.17,0.13,0.0,0.0,0,168
},0,7,0.17,0.13,0.0,0.02,0,168
"func GetPost(id int) (post Post, err error) {",0,7,0.26,0.13,0.02,0.0,1,168
post = Post{},0,7,0.26,0.13,0.0,0.0,1,168
"err = Db.QueryRowx(""select id, content, author from posts where id =",1,7,0.44,0.13,0.0,0.0,1,168
➥,0,10,0.23,0.16,0.0,0.0,0,168
"$1"", id).StructScan(&post)",1,7,0.44,0.19,0.0,0.0,1,168
149,1,9,0.3,0.82,0.0,0.0,0,169
Go relational mappers,1,9,0.39,0.38,0.0,0.03,1,169
if err != nil {,0,7,0.26,0.14,0.03,0.0,1,169
return,0,7,0.26,0.14,0.0,0.0,1,169
},0,7,0.17,0.14,0.0,0.0,0,169
return,0,7,0.26,0.14,0.0,0.0,1,169
},0,7,0.17,0.14,0.0,0.02,0,169
func (post *Post) Create() (err error) {,0,7,0.26,0.14,0.02,0.0,1,169
"err = Db.QueryRow(""insert into posts (content, author) values ($1, $2)",0,7,0.26,0.14,0.0,0.0,1,169
➥,0,10,0.23,0.18,0.0,0.0,0,169
"returning id"", post.Content, post.AuthorName).Scan(&post.Id)",0,7,0.26,0.2,0.0,0.0,1,169
return,0,7,0.26,0.14,0.0,0.0,1,169
},0,7,0.17,0.14,0.0,0.02,0,169
func main() {,0,7,0.26,0.14,0.02,0.0,1,169
"post := Post{Content: ""Hello World!"", AuthorName: ""Sau Sheong""}",0,7,0.26,0.14,0.0,0.0,1,169
post.Create(),0,7,0.26,0.14,0.0,0.0,1,169
{ 1 Hello World! Sau Sheong}},1,9,0.39,0.53,0.0,0.0,1,169
fmt.Println(post),0,7,0.26,0.14,0.0,0.0,1,169
},0,7,0.17,0.14,0.0,0.02,0,169
database/sql is marked in,0,9,0.21,0.63,0.02,0.0,1,169
The code illustrating the difference between using Sqlx and,0,9,0.3,0.14,0.0,0.0,1,169
database/,0,9,0.21,0.76,0.0,0.0,1,169
"bold; the other code should be familiar to you. First, instead of importing",0,9,0.21,0.14,0.0,0.0,0,169
"sql , you import github.com/jmoiron/sqlx",0,9,0.3,0.14,0.0,0.0,1,169
". Normally, StructScan",0,9,0.21,0.51,0.0,0.0,1,169
maps the struct,0,9,0.21,0.71,0.0,0.0,1,169
field names to the corresponding lowercase table columns. To show how you can tell,0,9,0.21,0.14,0.0,0.0,0,169
"Sqlx to automatically map the correct table column to the struct field, listing 6.17",0,9,0.21,0.14,0.0,0.0,0,169
changed Author to AuthorName,0,9,0.3,0.14,0.0,0.0,1,169
and used a struct tag (struct tags will be explained in,0,9,0.21,0.41,0.0,0.0,1,169
further detail in chapter 7) to instruct Sqlx to get data from the correct column.,0,9,0.21,0.14,0.0,0.0,0,169
Instead of using sql.DB,0,9,0.3,0.17,0.0,0.0,1,169
", you now use sqlx.DB . Both are similar, except",0,9,0.21,0.37,0.0,0.0,1,169
sqlx.DB,0,9,0.21,0.78,0.0,0.01,1,169
Queryx and QueryRowx .,0,9,0.21,0.37,0.01,0.0,1,169
has additional methods like,0,9,0.3,0.14,0.0,0.0,1,169
"In the GetPost function, instead of using",0,9,0.3,0.17,0.0,0.0,1,169
"QueryRow , you use QueryRowx",0,9,0.21,0.53,0.0,0.0,1,169
", which",0,9,0.21,0.78,0.0,0.0,1,169
returns Rowx . Rowx is the struct that has the,0,9,0.3,0.14,0.0,0.0,1,169
"StructScan method, and as you can see, it",0,9,0.21,0.5,0.0,0.0,1,169
Create method you’re still,0,9,0.21,0.62,0.0,0.0,1,169
maps the table columns to the respective fields. In the,0,9,0.3,0.14,0.0,0.0,1,169
"using QueryRow , which isn’t modified.",0,9,0.3,0.14,0.0,0.0,1,169
There are a few other features in Sqlx that are interesting but that I don’t cover,0,9,0.21,0.17,0.0,0.0,0,169
"here. To learn more, visit the GitHub repository at",0,9,0.3,0.14,0.0,0.0,1,169
https://github.com/jmoiron/sqlx,0,9,0.21,0.56,0.0,0.0,1,169
.,0,9,0.12,0.84,0.0,0.0,0,169
database/sql but it doesn’t add too,0,9,0.21,0.54,0.0,0.0,1,169
Sqlx is an interesting and useful extension to,0,9,0.3,0.17,0.0,0.0,1,169
database/sql,0,9,0.21,0.73,0.0,0.0,1,169
"many features. Conversely, the next library we’ll explore hides the",0,9,0.3,0.14,0.0,0.0,1,169
package and uses an ORM,0,9,0.3,0.14,0.0,0.0,1,169
mechanism instead.,0,9,0.21,0.35,0.0,0.02,1,169
6.5.2 Gorm,1,10,0.5,0.07,0.02,0.01,1,169
The developer for Gorm delightfully calls it “the fantastic,0,9,0.3,0.14,0.01,0.0,1,169
"ORM for Go(lang),” and it’s",0,9,0.21,0.62,0.0,0.0,1,169
certainly an apt description. Gorm (Go-,0,9,0.3,0.14,0.0,0.0,1,169
ORM ) is an ORM for Go that follows the path,0,9,0.21,0.47,0.0,0.0,1,169
"of Ruby’s ActiveRecord or Java’s Hibernate. To be specific, Gorm follows the Data-",0,9,0.21,0.14,0.0,0.0,0,169
Mapper pattern in providing mappers to map data in the database with structs. (In the,0,9,0.21,0.14,0.0,0.0,0,169
relational database section earlier I used the ActiveRecord pattern.),0,9,0.3,0.14,0.0,0.0,1,169
Gorm’s capabilities are quite extensive. It allows programmers to define relation-,0,9,0.21,0.17,0.0,0.0,0,169
"ships, perform data migration, chain queries, and many other advanced features. It",0,9,0.21,0.14,0.0,0.0,0,169
"even has callbacks, which are functions that are triggered when a particular data event",0,9,0.21,0.14,0.0,0.0,0,169
"occurs, such as when data is updated or deleted. Describing the features would take",0,9,0.21,0.14,0.0,0.0,0,169
150,1,9,0.39,0.06,0.0,0.0,0,170
Storing data,1,9,0.39,0.44,0.0,0.0,1,170
C 6,1,7,0.26,0.36,0.0,0.0,0,170
HAPTER,1,6,0.33,0.37,0.0,0.03,1,170
"another chapter, so we’ll discuss only basic features. The following listing explores",0,9,0.21,0.13,0.03,0.0,0,170
code using Gorm. Our simple application is again in store.go.,0,9,0.3,0.13,0.0,0.03,1,170
Listing 6.18 Using Gorm,1,9,0.48,0.15,0.03,0.02,1,170
package main,0,7,0.26,0.13,0.02,0.02,1,170
import (,0,7,0.26,0.13,0.02,0.0,1,170
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,170
"""github.com/jinzhu/gorm""",0,7,0.26,0.13,0.0,0.0,1,170
"_ ""github.com/lib/pq""",0,7,0.26,0.13,0.0,0.0,1,170
"""time""",0,7,0.26,0.13,0.0,0.0,1,170
),0,7,0.17,0.13,0.0,0.02,0,170
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,170
Id       int,0,7,0.26,0.13,0.0,0.0,1,170
Content   string,0,7,0.26,0.13,0.0,0.0,1,170
"Author    string `sql:""not null""`",0,7,0.26,0.13,0.0,0.0,1,170
Comments  []Comment,0,7,0.26,0.13,0.0,0.0,1,170
CreatedAt time.Time,0,7,0.26,0.13,0.0,0.0,1,170
},0,7,0.17,0.13,0.0,0.02,0,170
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,170
Id       int,0,7,0.26,0.13,0.0,0.0,1,170
Content   string,0,7,0.26,0.13,0.0,0.0,1,170
"Author    string `sql:""not null""`",0,7,0.26,0.13,0.0,0.0,1,170
"PostId    int    `sql:""index""`",0,7,0.26,0.13,0.0,0.0,1,170
CreatedAt time.Time,0,7,0.26,0.13,0.0,0.0,1,170
},0,7,0.17,0.13,0.0,0.02,0,170
var Db gorm.DB,0,7,0.26,0.13,0.02,0.02,1,170
func init() {,0,7,0.26,0.13,0.02,0.0,1,170
var err error,0,7,0.26,0.13,0.0,0.0,1,170
"Db, err = gorm.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.13,0.0,0.0,1,170
➥,0,10,0.23,0.16,0.0,0.0,0,170
"sslmode=disable"")",0,7,0.26,0.19,0.0,0.0,1,170
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,170
panic(err),0,7,0.26,0.13,0.0,0.0,1,170
},0,7,0.17,0.13,0.0,0.0,0,170
"Db.AutoMigrate(&Post{}, &Comment{})",0,7,0.26,0.13,0.0,0.0,1,170
},0,7,0.17,0.13,0.0,0.0,0,170
{0 Hello World! Sau Sheong [],1,9,0.39,0.62,0.0,0.0,1,170
000 1 -0 1 -0 1 00:00:00 +0000 UTC},1,9,0.39,0.58,0.0,0.0,1,170
func main() {,0,7,0.26,0.13,0.0,0.0,1,170
"post := Post{Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.13,0.0,0.0,1,170
fmt.Println(post),0,7,0.26,0.13,0.0,0.01,1,170
{ 1 Hello World! Sau Sheong [],1,9,0.39,0.51,0.01,0.0,1,170
Db.Create(&post),0,7,0.26,0.13,0.0,0.0,1,170
Creates,1,9,0.48,0.04,0.0,0.0,1,170
20 1 5-04- 1 2 11 :38:50.9 1 8 1 5604 +0800 SGT},1,9,0.39,0.51,0.0,0.0,1,170
fmt.Println(post),0,7,0.26,0.13,0.0,0.0,1,170
a post,1,9,0.48,0.05,0.0,0.01,1,170
"comment := Comment{Content: ""Good post!"", Author: ""Joe""}",0,7,0.26,0.13,0.01,0.0,1,170
Adds a comment,1,9,0.39,0.72,0.0,0.0,1,170
"Db.Model(&post).Association(""Comments"").Append(comment)",0,7,0.26,0.13,0.0,0.02,1,170
var readPost Post,0,7,0.26,0.13,0.02,0.0,1,170
"Db.Where(""author = $1"", ""Sau Sheong"").First(&readPost)",0,7,0.26,0.13,0.0,0.0,1,170
Gets comments,1,9,0.39,0.72,0.0,0.0,1,170
var comments []Comment,0,7,0.26,0.13,0.0,0.0,1,170
from a post,1,9,0.39,0.72,0.0,0.0,1,170
151,1,9,0.3,0.82,0.0,0.0,0,171
Go relational mappers,1,9,0.39,0.38,0.0,0.03,1,171
Db.Model(&readPost).Related(&comments),0,7,0.26,0.14,0.03,0.0,1,171
fmt.Println(comments[0]),0,7,0.26,0.14,0.0,0.0,1,171
{ 1 Good post! Joe 1 20 1 5-04- 1,1,9,0.39,0.58,0.0,0.0,1,171
3,1,9,0.3,0.78,0.0,0.0,0,171
},0,7,0.17,0.14,0.0,0.0,0,171
11 :38:50.920377 +0800 SGT},1,9,0.39,0.58,0.0,0.02,1,171
Note that the way that you create the database handler is similar to what you’ve been,0,9,0.21,0.14,0.02,0.0,0,171
doing all along. Also note that we no longer need to set up the database tables sepa-,0,9,0.21,0.14,0.0,0.0,0,171
rately using a setup.sql file. This is because Gorm has an automatic migration capabil-,0,9,0.21,0.14,0.0,0.0,0,171
ity that creates the database tables and keeps them updated whenever you change the,0,9,0.21,0.14,0.0,0.0,0,171
"corresponding struct. When you run the program, the database tables that are needed",0,9,0.21,0.14,0.0,0.0,0,171
will be created accordingly. To run this properly you should drop the database alto-,0,9,0.21,0.14,0.0,0.0,0,171
gether and re-create it:,0,9,0.3,0.14,0.0,0.01,1,171
func init() {,0,7,0.26,0.14,0.01,0.0,1,171
var err error,0,7,0.26,0.14,0.0,0.0,1,171
"Db, err = gorm.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.14,0.0,0.0,1,171
"sslmode=disable"")",0,7,0.26,0.17,0.0,0.0,1,171
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,171
panic(err),0,7,0.26,0.14,0.0,0.0,1,171
},0,7,0.17,0.14,0.0,0.0,0,171
"Db.AutoMigrate(&Post{}, &Comment{})",0,7,0.26,0.14,0.0,0.0,1,171
},0,7,0.17,0.14,0.0,0.02,0,171
The AutoMigrate method is a variadic method. A variadic method or function is a,0,9,0.21,0.14,0.02,0.0,0,171
method or function that can take one or more parameters. Here it’s called with refer-,0,9,0.21,0.14,0.0,0.0,0,171
ences to the Post and Comment,0,9,0.3,0.14,0.0,0.0,1,171
"structs. If you change the structs to add in a new field,",0,9,0.21,0.4,0.0,0.0,1,171
a corresponding table column will be created.,0,9,0.3,0.14,0.0,0.0,1,171
Comment :,0,9,0.21,0.48,0.0,0.0,1,171
"Let’s take a look at one of the structs,",0,9,0.3,0.17,0.0,0.01,1,171
type Comment  struct {,0,7,0.26,0.14,0.01,0.0,1,171
Id        int,0,7,0.26,0.14,0.0,0.0,1,171
Content   string,0,7,0.26,0.14,0.0,0.0,1,171
"Author    string `sql:""not null""`",0,7,0.26,0.14,0.0,0.0,1,171
PostId    int,0,7,0.26,0.14,0.0,0.0,1,171
CreatedAt time.Time,0,7,0.26,0.14,0.0,0.0,1,171
},0,7,0.17,0.14,0.0,0.02,0,171
time.Time . If you place this field in,0,9,0.21,0.55,0.02,0.0,1,171
"There’s a field called CreatedAt, which is of type",0,9,0.3,0.14,0.0,0.0,1,171
"any struct, whenever a new record is created in the database it’ll be automatically pop-",0,9,0.21,0.14,0.0,0.0,0,171
"ulated. In this case, this is when the record is created.",0,9,0.3,0.14,0.0,0.0,1,171
You’ll also notice that some of the fields have struct tags which instruct Gorm to,0,9,0.21,0.17,0.0,0.0,0,171
"create and map to the correct fields. In the case of the Author field, the struct tag",0,9,0.21,0.14,0.0,0.0,0,171
"`sql: ""not null""` tells Gorm to create a column that’s not",0,9,0.3,0.14,0.0,0.0,1,171
null .,0,9,0.21,0.64,0.0,0.0,1,171
"Also notice that unlike our previous example, you didn’t add a Post field in the",0,9,0.21,0.17,0.0,0.0,0,171
"Comments struct. Instead, you placed a PostId field. Gorm automatically assumes that a",0,9,0.21,0.14,0.0,0.0,0,171
field in this form will be a foreign key and creates the necessary relationships.,0,9,0.21,0.14,0.0,0.0,0,171
"So much for the setup. Now let’s take a look at creating, and retrieving, posts and",0,9,0.21,0.17,0.0,0.0,0,171
"comments. First, create a post:",0,9,0.3,0.14,0.0,0.01,1,171
"post := Post{Content: ""Hello World!"", Author: ""Sau Sheong""}",0,7,0.26,0.14,0.01,0.0,1,171
Db.Create(&post),0,7,0.26,0.14,0.0,0.0,1,171
152,1,9,0.39,0.06,0.0,0.0,0,172
Storing data,1,9,0.39,0.44,0.0,0.0,1,172
C 6,1,7,0.26,0.36,0.0,0.0,0,172
HAPTER,1,6,0.33,0.37,0.0,0.03,1,172
"Nothing surprising here. But as you can see you’re using another construct, in this",0,9,0.21,0.13,0.03,0.0,0,172
"gorm.DB , to create the",0,9,0.21,0.36,0.0,0.0,1,172
"Post struct, following the Data-",0,9,0.21,0.56,0.0,0.0,1,172
case the database handler,0,9,0.3,0.13,0.0,0.0,1,172
Create,0,9,0.21,0.77,0.0,0.0,1,172
"Mapper pattern. This is unlike our previous example, when you called a",0,9,0.3,0.13,0.0,0.0,1,172
"method on the Post struct, following the ActiveRecord pattern.",0,9,0.3,0.13,0.0,0.0,1,172
"If you inspect the database, you’ll see that a timestamp column, created_at, will be",0,9,0.21,0.15,0.0,0.0,0,172
populated with the date and time it was created.,0,9,0.3,0.13,0.0,0.0,1,172
"Next, you want to add a comment to the post:",0,9,0.3,0.15,0.0,0.01,1,172
"comment := Comment{Content: ""Good post!"", Author: ""Joe""}",0,7,0.26,0.13,0.01,0.0,1,172
"Db.Model(&post).Association(""Comments"").Append(comment)",0,7,0.26,0.13,0.0,0.02,1,172
"Model method,",0,9,0.21,0.7,0.02,0.0,1,172
"You create a comment first, and then use a combination of the",0,9,0.3,0.13,0.0,0.0,1,172
together with the Association,0,9,0.3,0.13,0.0,0.0,1,172
"and Append methods, to add the comment to the post.",0,9,0.21,0.38,0.0,0.0,1,172
Notice that at no time are you manually accessing the PostId.,0,9,0.3,0.13,0.0,0.0,1,172
"Finally, let’s look at how you can retrieve the post and the comment you created:",0,9,0.21,0.15,0.0,0.01,0,172
var readPost Post,0,7,0.26,0.13,0.01,0.0,1,172
"Db.Where(""author = $1"", ""Sau Sheong"").First(&readPost)",0,7,0.26,0.13,0.0,0.0,1,172
var comments []Comment,0,7,0.26,0.13,0.0,0.0,1,172
Db.Model(&readPost).Related(&comments),0,7,0.26,0.13,0.0,0.02,1,172
"Again, you use the Where",0,9,0.3,0.13,0.02,0.0,1,172
method on gorm.DB to look for the first record that has the,0,9,0.21,0.34,0.0,0.0,1,172
"author name ""Sau Sheong""",0,9,0.3,0.13,0.0,0.0,1,172
and push it into the readPost,0,9,0.21,0.36,0.0,0.0,1,172
variable. This will give you,0,9,0.21,0.61,0.0,0.0,1,172
"Model method, and",0,9,0.21,0.67,0.0,0.0,1,172
"the post. To get the comments, you get the post model using the",0,9,0.3,0.13,0.0,0.0,1,172
comments variable using the,0,9,0.21,0.5,0.0,0.0,1,172
Related,0,9,0.21,0.76,0.0,0.0,1,172
then get the related comments into your,0,9,0.3,0.13,0.0,0.0,1,172
method.,0,9,0.3,0.13,0.0,0.0,1,172
"As mentioned earlier, what we’ve covered briefly in this section on Gorm is only a",0,9,0.21,0.15,0.0,0.0,0,172
small portion of the rich features provided by this,0,9,0.3,0.13,0.0,0.0,1,172
"ORM library. If you’re interested,",0,9,0.21,0.55,0.0,0.0,1,172
learn more at https://github.com/jinzhu/gorm,0,9,0.3,0.13,0.0,0.0,1,172
.,0,9,0.12,0.52,0.0,0.0,0,172
Gorm is not the only ORM,0,9,0.3,0.15,0.0,0.0,1,172
library in Go. A number of equally feature-rich libraries,0,9,0.21,0.37,0.0,0.0,1,172
"are available, including Beego’s",0,9,0.3,0.13,0.0,0.0,1,172
ORM library and GORP (which isn’t exactly an,0,9,0.21,0.39,0.0,0.0,1,172
ORM,0,9,0.12,0.79,0.0,0.0,0,172
but close enough).,0,9,0.3,0.13,0.0,0.0,1,172
In this chapter we’ve covered the basic building blocks of writing a web applica-,0,9,0.21,0.15,0.0,0.0,0,172
"tion. In the next chapter, we switch gears and discuss how we can build web services.",0,9,0.21,0.13,0.0,0.02,0,172
6.6 Summary,1,12,0.54,0.06,0.02,0.01,1,172
"Caching data in memory using structs, which allows you to cache data for",0,9,0.21,0.18,0.01,0.0,0,172
■,0,4,0.11,0.15,0.0,0.01,0,172
quicker response,0,9,0.3,0.18,0.01,0.01,1,172
"Storing and retrieving data in files, in both",0,9,0.3,0.18,0.01,0.0,1,172
"CSV as well as gob binary format, which",0,9,0.21,0.52,0.0,0.0,1,172
■,0,4,0.11,0.15,0.0,0.01,0,172
allows you to process user-uploaded data or provide backup for cached data,0,9,0.21,0.18,0.01,0.01,0,172
database/sql and establishing,0,9,0.21,0.57,0.01,0.0,1,172
Performing CRUD on relational databases using,0,9,0.3,0.18,0.0,0.0,1,172
■,0,4,0.11,0.15,0.0,0.01,0,172
relationships between data,0,9,0.3,0.18,0.01,0.01,1,172
"Using third-party data-accessing libraries, including Sqlx and Gorm, which give",0,9,0.21,0.18,0.01,0.0,0,172
■,0,4,0.11,0.15,0.0,0.01,0,172
you more powerful tools to manipulate data in the database,0,9,0.3,0.18,0.01,0.0,1,172
Part 3,1,30,0.79,0.68,0.0,0.05,1,173
Being real,1,30,0.79,0.62,0.05,0.07,1,173
W,0,48,0.96,0.19,0.07,0.0,0,173
"riting code for basic server-side web applications, which you learned in",0,9,0.12,0.25,0.0,0.0,0,173
"the previous part, is only one of the many pieces of the web application puzzle.",0,9,0.21,0.19,0.0,0.0,0,173
Most modern web applications have gone beyond a basic request-response,0,9,0.3,0.19,0.0,0.0,1,173
model and evolved in many ways. Single Page Applications,0,9,0.3,0.19,0.0,0.0,1,173
(SPA) provide speedy,0,9,0.21,0.67,0.0,0.0,1,173
"interactivity for users while getting data from web services. Mobile applications,",0,9,0.21,0.19,0.0,0.0,0,173
"native or hybrid both, do the same.",0,9,0.3,0.19,0.0,0.0,1,173
"In this final part of the book, you will learn how to write web services using",0,9,0.12,0.21,0.0,0.0,0,173
"Go, that will serve SPA , mobile applications, and other web applications. You will",0,9,0.21,0.19,0.0,0.0,0,173
also learn about using one of the most powerful features of Go—concurrency.,0,9,0.21,0.19,0.0,0.0,0,173
You will learn how to add concurrency to your web applications to enhance its,0,9,0.21,0.19,0.0,0.0,0,173
performance. You will also learn about testing web applications and all the ways,0,9,0.21,0.19,0.0,0.0,0,173
Go provides support for your testing needs.,0,9,0.3,0.19,0.0,0.0,1,173
"The book wraps up with showing you ways of deploying your web application,",0,9,0.12,0.21,0.0,0.0,0,173
"from copying the executable binaries to the intended server, to pushing your",0,9,0.21,0.19,0.0,0.0,0,173
web applications to the cloud.,0,9,0.3,0.19,0.0,0.0,1,173
154,1,9,0.39,0.06,0.0,0.0,0,174
C,1,7,0.26,0.4,0.0,0.0,0,174
HAPTER,1,6,0.33,0.41,0.0,0.0,1,174
Go web services,1,30,0.93,0.51,0.0,0.22,1,175
This chapter covers,1,12,0.67,0.13,0.22,0.01,1,175
Using RESTful web services,0,9,0.3,0.15,0.01,0.0,1,175
■,0,4,0.11,0.13,0.0,0.01,0,175
Creating and parsing XML with Go,0,9,0.3,0.15,0.01,0.0,1,175
■,0,4,0.11,0.13,0.0,0.01,0,175
Creating and parsing JSON with Go,0,9,0.3,0.15,0.01,0.0,1,175
■,0,4,0.11,0.13,0.0,0.01,0,175
Writing Go web services,0,9,0.3,0.15,0.01,0.0,1,175
■,0,4,0.11,0.13,0.0,0.08,0,175
"Web services, as you’ll recall from our brief discussion in chapter 1, provide a ser-",0,9,0.21,0.17,0.08,0.0,0,175
vice to other software programs. This chapter expands on this and shows how you,0,9,0.21,0.17,0.0,0.0,0,175
can use Go to write or consume web services. You’ll learn how to create and parse,0,9,0.21,0.17,0.0,0.0,0,175
"and first, because these are the most frequently used data formats with",0,9,0.21,0.2,0.0,0.0,0,175
XML JSON,0,9,0.3,0.17,0.0,0.01,1,175
web services. We’ll also discuss,0,9,0.3,0.17,0.01,0.0,1,175
SOAP and REST ful services before going through the,0,9,0.21,0.42,0.0,0.0,1,175
steps for creating a simple web service in,0,9,0.3,0.17,0.0,0.0,1,175
JSON .,0,9,0.21,0.5,0.0,0.02,1,175
7.1 Introducing web services,1,12,0.54,0.1,0.02,0.01,1,175
One of the more popular uses of Go is in writing web services that provide services,0,9,0.21,0.17,0.01,0.0,0,175
"and data to other web services or applications. Web services, at a basic level, are",0,9,0.21,0.17,0.0,0.0,0,175
"software programs that interact with other software programs. In other words,",0,9,0.21,0.17,0.0,0.0,0,175
"instead of having a human being as the end user, a web service has a software",0,9,0.21,0.17,0.0,0.0,0,175
156,1,9,0.39,0.06,0.0,0.0,0,176
Go web services,1,9,0.39,0.43,0.0,0.0,1,176
C 7,1,7,0.26,0.35,0.0,0.0,0,176
HAPTER,1,6,0.33,0.36,0.0,0.03,1,176
Web,0,7,0.08,0.43,0.03,0.0,0,176
User Browser,0,7,0.26,0.14,0.0,0.0,1,176
application,0,7,0.17,0.41,0.0,0.02,1,176
HTTP,0,7,0.17,0.35,0.02,0.09,1,176
Web Web,0,7,0.17,0.28,0.09,0.0,1,176
application service,0,7,0.17,0.26,0.0,0.02,1,176
HTTP,0,7,0.17,0.35,0.02,0.03,1,176
Figure 7.1 Comparing a web application,1,7,0.35,0.5,0.03,0.0,1,176
with a web service,1,7,0.35,0.5,0.0,0.06,1,176
"program as the end user. Web services, as the name suggests, communicate over",0,9,0.21,0.13,0.06,0.0,0,176
HTTP,0,9,0.21,0.78,0.0,0.01,1,176
(see figure 7.1).,0,9,0.3,0.13,0.01,0.0,1,176
"Interestingly, though web applications are generally not solidly defined, you can",0,9,0.21,0.15,0.0,0.0,0,176
find a definition of web services in a Web Services Architecture document by a,0,9,0.21,0.13,0.0,0.0,0,176
W3C,0,9,0.12,0.79,0.0,0.01,0,176
working group:,0,9,0.3,0.13,0.01,0.02,1,176
A Web service is a software system designed to support interoperable machine-to-machine,1,9,0.39,0.15,0.02,0.0,0,176
interaction over a network. It has an interface described in a machine-processable for-,1,9,0.39,0.15,0.0,0.0,0,176
mat (specifically WSDL ). Other systems interact with the Web service in a manner pre-,1,9,0.39,0.15,0.0,0.0,0,176
scribed by its description using,1,9,0.48,0.15,0.0,0.0,1,176
"SOAP messages, typically conveyed using",1,9,0.39,0.37,0.0,0.0,1,176
HTTP with an,1,9,0.39,0.67,0.0,0.0,1,176
XML serialization in conjunction with other Web-related standards.,1,9,0.48,0.15,0.0,0.01,1,176
"Web Service Architecture, February 11, 2004",0,9,0.21,0.42,0.01,0.03,1,176
From this description it appears as if all web services are,0,9,0.3,0.13,0.03,0.0,1,176
"SOAP -based. In reality, there",0,9,0.21,0.59,0.0,0.0,1,176
"are different types of web services, including",0,9,0.3,0.13,0.0,0.0,1,176
"SOAP -based, REST -based, and",0,9,0.21,0.5,0.0,0.0,1,176
XML-RPC -,0,9,0.21,0.75,0.0,0.0,1,176
based. The two most popular types are,0,9,0.3,0.13,0.0,0.0,1,176
REST -based and SOAP -based.,0,9,0.21,0.45,0.0,0.0,1,176
SOAP -based web,0,9,0.21,0.69,0.0,0.0,1,176
services are mostly being used in enterprise systems;,0,9,0.3,0.13,0.0,0.0,1,176
REST -based web services are more,0,9,0.21,0.55,0.0,0.0,1,176
popular in publicly available web services. (We’ll discuss them later in this chapter.),0,9,0.21,0.13,0.0,0.0,0,176
"SOAP -based and REST -based web services perform the same function, but each has",0,9,0.21,0.15,0.0,0.0,0,176
"its own strengths. SOAP -based web services have been around for a while, have been",0,9,0.21,0.13,0.0,0.0,0,176
"standardized by a W3C working group, and are very well documented. They’re well",0,9,0.21,0.13,0.0,0.0,0,176
supported by the enterprise and have a large number of extensions (collectively,0,9,0.21,0.13,0.0,0.0,0,176
known as the WS-* because they mostly start with,0,9,0.3,0.13,0.0,0.0,1,176
"WS ; for example, WS - S ecurity and",0,9,0.21,0.55,0.0,0.0,1,176
"WS - A ddressing). SOAP -based services are robust, are explicitly described using",0,9,0.21,0.13,0.0,0.0,0,176
WSDL,0,9,0.21,0.78,0.0,0.01,1,176
"(Web Service Definition Language), and have built-in error handling. Together with",0,9,0.21,0.13,0.01,0.0,0,176
157,1,9,0.3,0.82,0.0,0.0,0,177
Introducing SOAP-based web services,1,9,0.39,0.33,0.0,0.03,1,177
"UDDI (Universal Description, Discovery, and Integration—a directory service),",0,9,0.21,0.14,0.03,0.0,0,177
SOAP -,0,9,0.21,0.79,0.0,0.0,1,177
based services can also be discovered.,0,9,0.3,0.14,0.0,0.0,1,177
SOAP is known to be cumbersome and unnecessarily complex. The,0,9,0.3,0.17,0.0,0.0,1,177
SOAP XML,0,9,0.21,0.75,0.0,0.0,1,177
"messages can grow to be verbose and difficult to troubleshoot, and you may often",0,9,0.21,0.14,0.0,0.0,0,177
need other tools to manage them.,0,9,0.3,0.14,0.0,0.0,1,177
SOAP -based web services also can be heavy to pro-,0,9,0.21,0.43,0.0,0.0,1,177
cess because of the additional overhead.,0,9,0.3,0.14,0.0,0.0,1,177
"WSDL , while providing a solid contract",0,9,0.21,0.5,0.0,0.0,1,177
"between the client and server, can become burdensome because every change in the",0,9,0.21,0.14,0.0,0.0,0,177
web service requires the,0,9,0.3,0.14,0.0,0.0,1,177
WSDL and therefore the,0,9,0.21,0.35,0.0,0.0,1,177
SOAP clients to be changed. This,0,9,0.21,0.56,0.0,0.0,1,177
often results in version lock-in as the developers of the web service are wary of making,0,9,0.21,0.14,0.0,0.0,0,177
even the smallest changes.,0,9,0.3,0.14,0.0,0.0,1,177
REST -based web services are a lot more flexible.,0,9,0.3,0.17,0.0,0.0,1,177
REST isn’t an architecture in itself,0,9,0.21,0.57,0.0,0.0,1,177
but a design philosophy. It doesn’t require,0,9,0.3,0.14,0.0,0.0,1,177
"XML , and very often REST",0,9,0.21,0.5,0.0,0.0,1,177
-based web ser-,0,9,0.21,0.72,0.0,0.0,1,177
vices use simpler data formats like,0,9,0.3,0.14,0.0,0.0,1,177
"JSON , resulting in speedier web services.",0,9,0.21,0.45,0.0,0.0,1,177
REST -,0,9,0.21,0.8,0.0,0.0,1,177
based web services are often much simpler than,0,9,0.3,0.14,0.0,0.0,1,177
-based ones.,0,9,0.21,0.58,0.0,0.0,1,177
SOAP,0,9,0.21,0.54,0.0,0.0,1,177
Another difference between the two is that,0,9,0.3,0.17,0.0,0.0,1,177
SOAP -based web services are function-,0,9,0.21,0.53,0.0,0.0,1,177
driven; REST -based web services are data-driven.,0,9,0.3,0.14,0.0,0.0,1,177
SOAP -based web services tend to be,0,9,0.21,0.55,0.0,0.0,1,177
RPC (Remote Procedure Call) styled;,0,9,0.3,0.14,0.0,0.0,1,177
"REST -based web services, as described earlier,",0,9,0.21,0.46,0.0,0.0,1,177
"focus on resources, and HTTP",0,9,0.3,0.14,0.0,0.0,1,177
methods are the verbs working on those resources.,0,9,0.21,0.39,0.0,0.0,1,177
ProgrammableWeb is a popular site that tracks,0,9,0.3,0.17,0.0,0.0,1,177
API s that are available publicly over,0,9,0.21,0.56,0.0,0.0,1,177
"the internet. As of this writing, its database contains 12,987 publicly available",0,9,0.21,0.14,0.0,0.0,0,177
"API s, of",0,9,0.21,0.78,0.0,0.0,1,177
1,0,6,0.06,0.71,0.0,0.0,0,177
which 2061 (or 16%) are,0,9,0.3,0.14,0.0,0.0,1,177
SOAP -based and 6967 (54%) are,0,9,0.21,0.35,0.0,0.0,1,177
"REST -based. Unfortunately,",0,9,0.21,0.62,0.0,0.0,1,177
"enterprises rarely publish the number of internal web services, so that figure is diffi-",0,9,0.21,0.14,0.0,0.0,0,177
cult to confirm.,0,9,0.3,0.14,0.0,0.0,1,177
Many developers and companies end up using both,0,9,0.3,0.17,0.0,0.0,1,177
SOAP - and REST -based web ser-,0,9,0.21,0.59,0.0,0.0,1,177
"vices at the same time but for different purposes. In these cases,",0,9,0.3,0.14,0.0,0.0,1,177
is used in internal,0,9,0.21,0.7,0.0,0.0,1,177
SOAP,0,9,0.21,0.65,0.0,0.0,1,177
applications for enterprise integration and,0,9,0.3,0.14,0.0,0.0,1,177
"REST is used for external, third-party devel-",0,9,0.21,0.49,0.0,0.0,1,177
opers. The advantage of this strategy is that both the strengths of,0,9,0.3,0.14,0.0,0.0,1,177
REST (speed and sim-,0,9,0.21,0.67,0.0,0.0,1,177
plicity) and SOAP (security and robustness) can be used where they’re most effective.,0,9,0.21,0.14,0.0,0.02,0,177
7.2 Introducing SOAP-based web services,1,12,0.54,0.07,0.02,0.01,1,177
SOAP is a protocol for exchanging structured data that’s defined in,0,9,0.3,0.14,0.01,0.0,1,177
XML . SOAP was,0,9,0.21,0.72,0.0,0.0,1,177
"originally an acronym for Simple Object Access Protocol, terminology that is a misno-",0,9,0.21,0.14,0.0,0.0,0,177
"mer today, as it’s no longer considered simple and it doesn’t deal with objects either.",0,9,0.21,0.14,0.0,0.0,0,177
"In the latest version, the",0,9,0.3,0.14,0.0,0.0,1,177
"SOAP 1.2 specification, the protocol officially became simply",0,9,0.21,0.35,0.0,0.0,1,177
SOAP . SOAP is usable across different networking protocols and is independent of pro-,0,9,0.21,0.14,0.0,0.0,0,177
gramming models.,0,9,0.3,0.14,0.0,0.0,1,177
"SOAP is highly structured and heavily defined, and the",0,9,0.3,0.17,0.0,0.0,1,177
XML used for the transpor-,0,9,0.21,0.62,0.0,0.0,1,177
tation of the data can be complex. Every operation and input or output of the service,0,9,0.21,0.14,0.0,0.0,0,177
is clearly defined in the,0,9,0.3,0.14,0.0,0.0,1,177
WSDL . The WSDL is the contract between the client and the,0,9,0.21,0.34,0.0,0.0,1,177
"server, defining what the service provides and how it’s provided.",0,9,0.3,0.14,0.0,0.02,1,177
Refer to,0,8,0.28,0.08,0.02,0.0,1,177
1,0,5,0.13,0.07,0.0,0.0,0,177
www.programmableweb.com/category/all/apis?data_format=21176,0,8,0.28,0.17,0.0,0.0,1,177
for SOAP-based APIs and,0,8,0.19,0.65,0.0,0.0,1,177
www.programmableweb.com/category/all/apis?data_format=21190,0,8,0.28,0.09,0.0,0.0,1,177
for REST-based APIs.,0,8,0.19,0.57,0.0,0.0,1,177
158,1,9,0.39,0.06,0.0,0.0,0,178
Go web services,1,9,0.39,0.43,0.0,0.0,1,178
C 7,1,7,0.26,0.35,0.0,0.0,0,178
HAPTER,1,6,0.33,0.36,0.0,0.03,1,178
In this chapter we’ll focus more on,0,9,0.3,0.15,0.03,0.0,1,178
"REST -based web services, but you should under-",0,9,0.21,0.44,0.0,0.0,1,178
stand how SOAP -based web services work for comparison purposes.,0,9,0.3,0.13,0.0,0.0,1,178
"SOAP places its message content into an envelope, like a shipping container, and",0,9,0.21,0.15,0.0,0.0,0,178
it’s independent of the actual means of transporting the data from one place to,0,9,0.21,0.13,0.0,0.0,0,178
"another. In this book, we’re only looking at",0,9,0.3,0.13,0.0,0.0,1,178
"SOAP web services, so we’re referring to",0,9,0.21,0.49,0.0,0.0,1,178
SOAP messages being moved around using,0,9,0.3,0.13,0.0,0.0,1,178
HTTP .,0,9,0.21,0.48,0.0,0.0,1,178
Here’s a simplified example of a,0,9,0.3,0.15,0.0,0.0,1,178
SOAP request message:,0,9,0.21,0.42,0.0,0.01,1,178
POST /GetComment HTTP/1.1,0,7,0.26,0.13,0.01,0.0,1,178
Host: www.chitchat.com,0,7,0.26,0.13,0.0,0.0,1,178
Content-Type: application/soap+xml; charset=utf-8,0,7,0.26,0.13,0.0,0.01,1,178
"<?xml version=""1.0""?>",0,7,0.26,0.13,0.01,0.0,1,178
<soap:Envelope,0,7,0.26,0.13,0.0,0.0,1,178
"xmlns:soap=""http://www.w3.org/2001/12/soap-envelope""",0,7,0.26,0.13,0.0,0.0,1,178
"soap:encodingStyle=""http://www.w3.org/2001/12/soap-encoding"">",0,7,0.26,0.13,0.0,0.0,1,178
"<soap:Body xmlns:m=""http://www.chitchat.com/forum"">",0,7,0.26,0.13,0.0,0.0,1,178
<m:GetCommentRequest>,0,7,0.26,0.13,0.0,0.0,1,178
<m:CommentId>123</m:CommentId>,0,7,0.26,0.13,0.0,0.0,1,178
</m:GetCommentRequest >,0,7,0.26,0.13,0.0,0.0,1,178
</soap:Body>,0,7,0.26,0.13,0.0,0.0,1,178
</soap:Envelope>,0,7,0.26,0.13,0.0,0.02,1,178
Content-Type is set to,0,9,0.21,0.62,0.02,0.0,1,178
The headers should be familiar by now. Note,0,9,0.3,0.13,0.0,0.0,1,178
HTTP,0,9,0.3,0.17,0.0,0.0,1,178
application/soap+xml . The request body is the,0,9,0.3,0.13,0.0,0.0,1,178
SOAP message. The SOAP,0,9,0.21,0.53,0.0,0.0,1,178
body con-,0,9,0.21,0.74,0.0,0.0,1,178
ID 123 .,0,9,0.21,0.77,0.0,0.0,1,178
"tains the request message. In the example, this is a request for a comment with the",0,9,0.21,0.13,0.0,0.01,0,178
<m:GetCommentRequest>,0,7,0.26,0.13,0.01,0.0,1,178
<m:CommentId>123</m:CommentId>,0,7,0.26,0.13,0.0,0.0,1,178
</m:GetCommentRequest >,0,7,0.26,0.13,0.0,0.02,1,178
This example is simplified—the actual,0,9,0.3,0.13,0.02,0.0,1,178
SOAP requests are often a lot more complex.,0,9,0.21,0.45,0.0,0.0,1,178
Here’s a simplified example of a,0,9,0.3,0.13,0.0,0.0,1,178
response message:,0,9,0.21,0.44,0.0,0.0,1,178
SOAP,0,9,0.21,0.39,0.0,0.01,1,178
HTTP/1.1 200 OK,0,7,0.26,0.13,0.01,0.0,1,178
Content-Type: application/soap+xml; charset=utf-8,0,7,0.26,0.13,0.0,0.01,1,178
"<?xml version=""1.0""?>",0,7,0.26,0.13,0.01,0.0,1,178
<soap:Envelope,0,7,0.26,0.13,0.0,0.0,1,178
"xmlns:soap=""http://www.w3.org/2001/12/soap-envelope""",0,7,0.26,0.13,0.0,0.0,1,178
"soap:encodingStyle=""http://www.w3.org/2001/12/soap-encoding"">",0,7,0.26,0.13,0.0,0.0,1,178
"<soap:Body xmlns:m=""http://www.example.org/stock"">",0,7,0.26,0.13,0.0,0.0,1,178
<m:GetCommentResponse>,0,7,0.26,0.13,0.0,0.0,1,178
<m:Text>Hello World!</m:Text>,0,7,0.26,0.13,0.0,0.0,1,178
</m:GetCommentResponse>,0,7,0.26,0.13,0.0,0.0,1,178
</soap:Body>,0,7,0.26,0.13,0.0,0.0,1,178
</soap:Envelope>,0,7,0.26,0.13,0.0,0.02,1,178
"As before, the response message is within the",0,9,0.3,0.13,0.02,0.0,1,178
SOAP body and is a response with the,0,9,0.21,0.51,0.0,0.0,1,178
text “Hello World!”,0,9,0.3,0.13,0.0,0.01,1,178
<m:GetCommentResponse>,0,7,0.26,0.13,0.01,0.0,1,178
<m:Text>Hello World!</m:Text>,0,7,0.26,0.13,0.0,0.0,1,178
159,1,9,0.3,0.82,0.0,0.0,0,179
Introducing SOAP-based web services,1,9,0.39,0.33,0.0,0.03,1,179
"As you may realize by now, all the data about the message is contained in the enve-",0,9,0.21,0.14,0.03,0.0,0,179
"lope. For SOAP -based web services, this means that the information sent through",0,9,0.21,0.14,0.0,0.0,0,179
HTTP is almost entirely in the,0,9,0.3,0.14,0.0,0.0,1,179
"SOAP envelope. Also, SOAP",0,9,0.21,0.39,0.0,0.0,1,179
mostly uses the HTTP POST,0,9,0.21,0.61,0.0,0.0,1,179
"method, although SOAP 1.2 allows",0,9,0.3,0.14,0.0,0.0,1,179
HTTP GET as well.,0,9,0.21,0.43,0.0,0.0,1,179
Here’s what a simple WSDL,0,9,0.3,0.17,0.0,0.0,1,179
message looks like. You might notice that,0,9,0.21,0.4,0.0,0.0,1,179
WSDL mes-,0,9,0.21,0.75,0.0,0.0,1,179
sages can be detailed and the message can get long even for a simple service. That’s,0,9,0.21,0.14,0.0,0.0,0,179
part of the reason why SOAP,0,9,0.3,0.14,0.0,0.0,1,179
-based web services aren’t as popular as,0,9,0.21,0.38,0.0,0.0,1,179
REST -based web,0,9,0.21,0.71,0.0,0.0,1,179
"services —in more complex web services, the",0,9,0.3,0.14,0.0,0.0,1,179
WSDL messages can be complicated.,0,9,0.21,0.51,0.0,0.01,1,179
"<?xml version=""1.0"" encoding=""UTF-8""?>",0,7,0.26,0.14,0.01,0.0,1,179
"<definitions  name =""ChitChat""",0,7,0.26,0.14,0.0,0.0,1,179
"targetNamespace=""http://www.chitchat.com/forum.wsdl""",0,7,0.26,0.14,0.0,0.0,1,179
"xmlns:tns=""http://www.chitchat.com/forum.wsdl""",0,7,0.26,0.14,0.0,0.0,1,179
"xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""",0,7,0.26,0.14,0.0,0.0,1,179
"xmlns:xsd=""http://www.w3.org/2001/XMLSchema""",0,7,0.26,0.14,0.0,0.0,1,179
"xmlns=""http://schemas.xmlsoap.org/wsdl/"">",0,7,0.26,0.14,0.0,0.0,1,179
"<message name=""GetCommentRequest"">",0,7,0.26,0.14,0.0,0.0,1,179
"<part name=""CommentId"" type=""xsd:string""/>",0,7,0.26,0.14,0.0,0.0,1,179
</message>,0,7,0.26,0.14,0.0,0.0,1,179
"<message name=""GetCommentResponse"">",0,7,0.26,0.14,0.0,0.0,1,179
"<part name=""Text"" type=""xsd:string""/>",0,7,0.26,0.14,0.0,0.0,1,179
</message>,0,7,0.26,0.14,0.0,0.0,1,179
"<portType name=""GetCommentPortType"">",0,7,0.26,0.14,0.0,0.0,1,179
"<operation name=""GetComment"">",0,7,0.26,0.14,0.0,0.0,1,179
"<input message=""tns:GetCommentRequest""/>",0,7,0.26,0.14,0.0,0.0,1,179
"<output message=""tns:GetCommentResponse""/>",0,7,0.26,0.14,0.0,0.0,1,179
</operation>,0,7,0.26,0.14,0.0,0.0,1,179
</portType>,0,7,0.26,0.14,0.0,0.0,1,179
"<binding name=""GetCommentBinding"" type=""tns:GetCommentPortType"">",0,7,0.26,0.14,0.0,0.0,1,179
"<soap:binding style=""rpc""",0,7,0.26,0.14,0.0,0.0,1,179
"transport=""http://schemas.xmlsoap.org/soap/http""/>",0,7,0.26,0.14,0.0,0.0,1,179
"<operation name=""GetComment"">",0,7,0.26,0.14,0.0,0.0,1,179
"<soap:operation soapAction=""getComment""/>",0,7,0.26,0.14,0.0,0.0,1,179
<input>,0,7,0.26,0.14,0.0,0.0,1,179
"<soap:body use=""literal""/>",0,7,0.26,0.14,0.0,0.0,1,179
</input>,0,7,0.26,0.14,0.0,0.0,1,179
<output>,0,7,0.26,0.14,0.0,0.0,1,179
"<soap:body use=""literal""/>",0,7,0.26,0.14,0.0,0.0,1,179
</output>,0,7,0.26,0.14,0.0,0.0,1,179
</operation>,0,7,0.26,0.14,0.0,0.0,1,179
</binding>,0,7,0.26,0.14,0.0,0.0,1,179
"<service name=""GetCommentService"" >",0,7,0.26,0.14,0.0,0.0,1,179
<documentation>,0,7,0.26,0.14,0.0,0.0,1,179
Returns a comment,0,7,0.26,0.14,0.0,0.0,1,179
</documentation>,0,7,0.26,0.14,0.0,0.0,1,179
"<port name=""GetCommentPortType"" binding=""tns:GetCommentBinding"">",0,7,0.26,0.14,0.0,0.0,1,179
"<soap:address location=""http://localhost:8080/GetComment""/>",0,7,0.26,0.14,0.0,0.0,1,179
</port>,0,7,0.26,0.14,0.0,0.0,1,179
</service>,0,7,0.26,0.14,0.0,0.0,1,179
</definitions>,0,7,0.26,0.14,0.0,0.02,1,179
"GetCommentService , with a port named",0,9,0.21,0.51,0.02,0.0,1,179
The WSDL message defines a service named,0,9,0.3,0.14,0.0,0.0,1,179
GetCommentPortType that’s bound to the binding,0,9,0.3,0.14,0.0,0.0,1,179
GetCommentsBinding . The service is,0,9,0.21,0.55,0.0,0.0,1,179
defined at the location http://localhost:8080/GetComment.,0,9,0.3,0.14,0.0,0.0,1,179
160,1,9,0.39,0.06,0.0,0.0,0,180
Go web services,1,9,0.39,0.43,0.0,0.0,1,180
C 7,1,7,0.26,0.35,0.0,0.0,0,180
HAPTER,1,6,0.33,0.36,0.0,0.03,1,180
"<service name=""GetCommentService"" >",0,7,0.26,0.13,0.03,0.0,1,180
<documentation>,0,7,0.26,0.13,0.0,0.0,1,180
Returns a comment,0,7,0.26,0.13,0.0,0.0,1,180
</documentation>,0,7,0.26,0.13,0.0,0.0,1,180
"<port name=""GetCommentPortType"" binding=""tns:GetCommentBinding"">",0,7,0.26,0.13,0.0,0.0,1,180
"<soap:address location=""http://localhost:8080/GetComment""/>",0,7,0.26,0.13,0.0,0.0,1,180
</port>,0,7,0.26,0.13,0.0,0.0,1,180
</service>,0,7,0.26,0.13,0.0,0.02,1,180
GetCommentPortType,0,9,0.21,0.65,0.02,0.0,1,180
The rest of the message gets into the details of service. The port,0,9,0.3,0.13,0.0,0.0,1,180
"GetComment that has an input message,",0,9,0.21,0.49,0.0,0.0,1,180
is defined with a single operation called,0,9,0.3,0.13,0.0,0.0,1,180
"GetCommentRequest , and an output message,",0,9,0.3,0.13,0.0,0.0,1,180
GetCommentResponse .,0,9,0.21,0.5,0.0,0.01,1,180
"<portType name=""GetCommentPortType"">",0,7,0.26,0.13,0.01,0.0,1,180
"<operation name=""GetComment"">",0,7,0.26,0.13,0.0,0.0,1,180
"<input message=""tns:GetCommentRequest""/>",0,7,0.26,0.13,0.0,0.0,1,180
"<output message=""tns:GetCommentResponse""/>",0,7,0.26,0.13,0.0,0.0,1,180
</operation>,0,7,0.26,0.13,0.0,0.0,1,180
</portType>,0,7,0.26,0.13,0.0,0.02,1,180
This is followed by a definition of the messages themselves. The definition names the,0,9,0.21,0.13,0.02,0.0,0,180
message and the parts of the message and their types.,0,9,0.3,0.13,0.0,0.01,1,180
"<message name=""GetCommentRequest"">",0,7,0.26,0.13,0.01,0.0,1,180
"<part name=""CommentId"" type=""xsd:string""/>",0,7,0.26,0.13,0.0,0.0,1,180
</message>,0,7,0.26,0.13,0.0,0.0,1,180
"<message name=""GetCommentResponse"">",0,7,0.26,0.13,0.0,0.0,1,180
"<part name=""Text"" type=""xsd:string""/>",0,7,0.26,0.13,0.0,0.0,1,180
</message>,0,7,0.26,0.13,0.0,0.02,1,180
"In practice, SOAP request messages are often generated by a",0,9,0.3,0.13,0.02,0.0,1,180
SOAP client that’s gener-,0,9,0.21,0.63,0.0,0.0,1,180
"ated from the WSDL . Similarly,",0,9,0.3,0.13,0.0,0.0,1,180
SOAP response messages are often generated by a,0,9,0.21,0.38,0.0,0.0,1,180
SOAP,0,9,0.21,0.78,0.0,0.01,1,180
server that’s also generated from the,0,9,0.3,0.13,0.01,0.0,1,180
WSDL . What often happens is a language-specific,0,9,0.21,0.43,0.0,0.0,1,180
"client (for example, a Go",0,9,0.3,0.13,0.0,0.0,1,180
SOAP client) is generated from the,0,9,0.21,0.34,0.0,0.0,1,180
"WSDL , and this client is",0,9,0.21,0.63,0.0,0.0,1,180
"used by the rest of the code to interact with the server. As a result, as long as the",0,9,0.21,0.13,0.0,0.0,0,180
WSDL,0,9,0.21,0.78,0.0,0.01,1,180
"is well defined, the SOAP",0,9,0.3,0.13,0.01,0.0,1,180
client is usually robust. The drawback is that each time we,0,9,0.21,0.33,0.0,0.0,1,180
"change the service, even for a small matter like changing the type of the return value,",0,9,0.21,0.13,0.0,0.0,0,180
the client needs to be regenerated. This can get tedious and explains why you won’t,0,9,0.21,0.13,0.0,0.0,0,180
see too many SOAP web service revisions (revisions can be a nightmare if it’s a large,0,9,0.21,0.13,0.0,0.0,0,180
web service).,0,9,0.3,0.13,0.0,0.0,1,180
"I won’t discuss SOAP -based web services in further detail in the rest of this chapter,",0,9,0.21,0.15,0.0,0.0,0,180
although I’ll show you how Go can be used to create or parse,0,9,0.3,0.13,0.0,0.0,1,180
XML .,0,9,0.21,0.63,0.0,0.02,1,180
7.3 Introducing REST-based web services,1,12,0.54,0.06,0.02,0.01,1,180
REST (Representational State Transfer) is a design philosophy used in designing pro-,0,9,0.21,0.13,0.01,0.0,0,180
grams that talk to each other by manipulating resources using a standard few actions,0,9,0.21,0.13,0.0,0.0,0,180
"(or verbs, as many REST people like to call them).",0,9,0.3,0.13,0.0,0.0,1,180
"In most programming paradigms, you often get work done by defining functions",0,9,0.21,0.15,0.0,0.0,0,180
that are subsequently triggered by a main program sequentially. In,0,9,0.3,0.13,0.0,0.0,1,180
"OOP , you do much",0,9,0.21,0.67,0.0,0.0,1,180
161,1,9,0.3,0.82,0.0,0.0,0,181
Introducing REST-based web services,1,9,0.39,0.33,0.0,0.03,1,181
"the same thing, except that you create models (called",0,9,0.3,0.14,0.03,0.0,1,181
objects ) to represent things and,1,9,0.39,0.59,0.0,0.0,1,181
you define functions (called,0,9,0.3,0.14,0.0,0.0,1,181
"methods ) and attach them to those models, which you can",1,9,0.39,0.38,0.0,0.0,1,181
subsequently call. REST is an evolution of the same line of thought where instead of,0,9,0.21,0.14,0.0,0.0,0,181
"exposing functions as services to be called, you expose the models, called",0,9,0.21,0.14,0.0,0.0,0,181
"resources , and",1,9,0.39,0.74,0.0,0.0,1,181
only allow a few actions (called,0,9,0.3,0.14,0.0,0.0,1,181
verbs ) on them.,1,9,0.39,0.4,0.0,0.0,1,181
"When used over HTTP , a",0,9,0.3,0.17,0.0,0.0,1,181
URL is used to represent a resource.,0,9,0.21,0.38,0.0,0.0,1,181
HTTP methods are,0,9,0.21,0.69,0.0,0.0,1,181
"used as verbs to manipulate them, as listed in table 7.1.",0,9,0.3,0.14,0.0,0.02,1,181
Table 7.1 HTTP methods and corresponding web services,1,7,0.44,0.14,0.02,0.02,1,181
HTTP method,1,7,0.44,0.16,0.02,0.0,1,181
What to use it for,1,7,0.35,0.39,0.0,0.0,1,181
Example,1,7,0.35,0.71,0.0,0.02,1,181
POST Creates a resource (where one doesn’t exist),0,7,0.26,0.15,0.02,0.0,1,181
POST /users,0,7,0.17,0.65,0.0,0.01,1,181
GET Retrieves a resource,0,7,0.26,0.15,0.01,0.0,1,181
GET /users/1,0,7,0.17,0.65,0.0,0.01,1,181
PUT Updates  a resource with the given URL,0,7,0.26,0.15,0.01,0.0,1,181
PUT /users/1,0,7,0.17,0.65,0.0,0.01,1,181
DELETE Deletes a resource,0,7,0.26,0.15,0.01,0.0,1,181
DELETE /users/1,0,7,0.17,0.65,0.0,0.04,1,181
The aha! moment that often comes to programmers who first read about,0,9,0.3,0.14,0.04,0.0,1,181
REST is,0,9,0.21,0.78,0.0,0.0,1,181
when they see the mapping between the use of,0,9,0.3,0.14,0.0,0.0,1,181
HTTP methods for REST with the data-,0,9,0.21,0.53,0.0,0.0,1,181
base CRUD operations. It’s important to understand that this mapping is not a 1-to-1,0,9,0.21,0.14,0.0,0.0,0,181
"mapping, nor is it the only mapping. For example, you can use both",0,9,0.3,0.14,0.0,0.0,1,181
POST and PUT to,0,9,0.21,0.7,0.0,0.0,1,181
create a new resource and either will be correctly,0,9,0.3,0.14,0.0,0.0,1,181
REST ful.,0,9,0.21,0.55,0.0,0.0,1,181
The main difference between,0,9,0.3,0.17,0.0,0.0,1,181
POST and PUT is that for,0,9,0.21,0.43,0.0,0.0,1,181
"PUT , you need to know",0,9,0.21,0.65,0.0,0.0,1,181
"exactly which resource it will replace, whereas a",0,9,0.3,0.14,0.0,0.0,1,181
POST will create a new resource alto-,0,9,0.21,0.54,0.0,0.0,1,181
"gether, with a new . In other words, to create a new resource without knowing the",0,9,0.21,0.14,0.0,0.0,0,181
URL,0,9,0.12,0.3,0.0,0.01,0,181
"URL , you’ll use POST but if you want to replace an existing resource, you’ll use",0,9,0.21,0.14,0.01,0.0,0,181
PUT .,0,9,0.21,0.79,0.0,0.0,1,181
"As mentioned in chapter 1,",0,9,0.3,0.17,0.0,0.0,1,181
PUT is idempotent and the state of the server doesn’t,0,9,0.21,0.4,0.0,0.0,1,181
change regardless of the number of times you repeat your call. If you’re using,0,9,0.21,0.14,0.0,0.0,0,181
PUT to,0,9,0.21,0.79,0.0,0.0,1,181
"create a resource or to modify an existing resource, only one resource is being created",0,9,0.21,0.14,0.0,0.0,0,181
at the provided URL . But,0,9,0.3,0.14,0.0,0.0,1,181
"POST isn’t idempotent; every time you call it,",0,9,0.21,0.35,0.0,0.0,1,181
POST will cre-,0,9,0.21,0.73,0.0,0.0,1,181
"ate a resource, with a new",0,9,0.3,0.14,0.0,0.0,1,181
URL .,0,9,0.21,0.36,0.0,0.0,1,181
The second aha! moment for programmers new to,0,9,0.3,0.17,0.0,0.0,1,181
REST comes when they realize,0,9,0.21,0.6,0.0,0.0,1,181
that these four HTTP methods aren’t the only ones that can be used. A lesser-known,0,9,0.21,0.14,0.0,0.0,0,181
method called is often used to partially update a resource.,0,9,0.3,0.14,0.0,0.0,1,181
PATCH,0,9,0.21,0.27,0.0,0.01,1,181
This is an example of a REST,0,9,0.3,0.17,0.01,0.0,1,181
request:,0,9,0.21,0.4,0.0,0.01,1,181
GET /comment/123 HTTP/1.1,0,7,0.26,0.14,0.01,0.01,1,181
Note that there’s no body associated in the,0,9,0.3,0.14,0.01,0.0,1,181
"GET , unlike in the corresponding",0,9,0.21,0.51,0.0,0.0,1,181
SOAP,0,9,0.21,0.8,0.0,0.0,1,181
request shown here:,0,9,0.3,0.14,0.0,0.01,1,181
POST /GetComment HTTP/1.1,0,7,0.26,0.14,0.01,0.0,1,181
Host: www.chitchat.com,0,7,0.26,0.14,0.0,0.0,1,181
Content-Type: application/soap+xml; charset=utf-8,0,7,0.26,0.14,0.0,0.0,1,181
162,1,9,0.39,0.06,0.0,0.0,0,182
Go web services,1,9,0.39,0.43,0.0,0.0,1,182
C 7,1,7,0.26,0.35,0.0,0.0,0,182
HAPTER,1,6,0.33,0.36,0.0,0.03,1,182
"<?xml version=""1.0""?>",0,7,0.26,0.13,0.03,0.0,1,182
<soap:Envelope,0,7,0.26,0.13,0.0,0.0,1,182
"xmlns:soap=""http://www.w3.org/2001/12/soap-envelope""",0,7,0.26,0.13,0.0,0.0,1,182
"soap:encodingStyle=""http://www.w3.org/2001/12/soap-encoding"">",0,7,0.26,0.13,0.0,0.0,1,182
"<soap:Body xmlns:m=""http://www.chitchat.com/forum"">",0,7,0.26,0.13,0.0,0.0,1,182
<m:GetCommentRequest>,0,7,0.26,0.13,0.0,0.0,1,182
<m:CommentId>123</m:CommentId>,0,7,0.26,0.13,0.0,0.0,1,182
</m:GetCommentRequest >,0,7,0.26,0.13,0.0,0.0,1,182
</soap:Body>,0,7,0.26,0.13,0.0,0.0,1,182
</soap:Envelope>,0,7,0.26,0.13,0.0,0.02,1,182
That’s because you’re using the,0,9,0.3,0.13,0.02,0.0,1,182
GET HTTP method as the verb to get the resource (in,0,9,0.21,0.39,0.0,0.0,1,182
"this case, a blog post comment). You can return the same",0,9,0.3,0.13,0.0,0.0,1,182
SOAP response earlier and,0,9,0.21,0.61,0.0,0.0,1,182
it can still be considered a,0,9,0.3,0.13,0.0,0.0,1,182
REST ful response because,0,9,0.21,0.35,0.0,0.0,1,182
REST is concerned only about,0,9,0.21,0.58,0.0,0.0,1,182
the design of the API and not the message that’s sent.,0,9,0.3,0.13,0.0,0.0,1,182
SOAP is all about the format of,0,9,0.21,0.57,0.0,0.0,1,182
the messages. It’s much more common to have,0,9,0.3,0.13,0.0,0.0,1,182
REST API s return JSON or at least a,0,9,0.21,0.53,0.0,0.0,1,182
much simpler XML than,0,9,0.3,0.13,0.0,0.0,1,182
SOAP messages. SOAP messages are so much more onerous,0,9,0.21,0.33,0.0,0.0,1,182
to construct!,0,9,0.3,0.13,0.0,0.0,1,182
"Like WSDL for SOAP ,",0,9,0.3,0.15,0.0,0.0,1,182
REST -based web services have,0,9,0.21,0.35,0.0,0.0,1,182
WADL (Web Application,0,9,0.21,0.62,0.0,0.0,1,182
Description Language) that describes,0,9,0.3,0.13,0.0,0.0,1,182
"REST -based web services, and even generate cli-",0,9,0.21,0.44,0.0,0.0,1,182
ents to access those services. But unlike,0,9,0.3,0.13,0.0,0.0,1,182
"WSDL , WADL isn’t widely used, nor is it stan-",0,9,0.21,0.46,0.0,0.0,1,182
"dardized. Also, WADL has competition in other tools like Swagger,",0,9,0.3,0.13,0.0,0.0,1,182
RAML (Restful API,0,9,0.21,0.67,0.0,0.0,1,182
"Modeling Language), and",0,9,0.3,0.13,0.0,0.0,1,182
JSON -home.,0,9,0.21,0.34,0.0,0.0,1,182
If you’re looking at,0,9,0.3,0.15,0.0,0.0,1,182
"for the first time, you might be thinking that it’s all well",0,9,0.21,0.36,0.0,0.0,1,182
REST,0,9,0.21,0.32,0.0,0.0,1,182
and good if we’re only talking about a simple,0,9,0.3,0.13,0.0,0.0,1,182
CRUD application. What about more,0,9,0.21,0.52,0.0,0.0,1,182
"complex services, or where you have to model some process or action?",0,9,0.3,0.13,0.0,0.0,1,182
How do you activate a customer account?,0,9,0.3,0.15,0.0,0.0,1,182
REST doesn’t allow you to have arbitrary,0,9,0.21,0.5,0.0,0.0,1,182
"actions on the resources, and you’re more or less restricted to the list of available",0,9,0.21,0.13,0.0,0.0,0,182
"HTTP methods, so you can’t have a request that looks like this:",0,9,0.3,0.13,0.0,0.01,1,182
ACTIVATE /user/456 HTTP/1.1,0,7,0.26,0.13,0.01,0.01,1,182
There are ways of getting around this problem; here are the two most common:,0,9,0.21,0.13,0.01,0.01,0,182
Reify the process or convert the action to a noun and make it a resource.,0,9,0.21,0.18,0.01,0.0,0,182
1,1,6,0.33,0.15,0.0,0.01,0,182
Make the action a property of the resource.,0,9,0.3,0.18,0.01,0.0,1,182
2,1,6,0.33,0.15,0.0,0.02,0,182
7.3.1 Convert action to a resource,1,10,0.5,0.06,0.02,0.01,1,182
"Using the same example, you can convert the activate action to a resource activation.",0,9,0.21,0.13,0.01,0.0,0,182
"Once you do that, you can apply your",0,9,0.3,0.13,0.0,0.0,1,182
"HTTP methods to this resource. For example, to",0,9,0.21,0.43,0.0,0.0,1,182
activate a user you can use this:,0,9,0.3,0.13,0.0,0.01,1,182
POST /user/456/activation HTTP/1.1,0,7,0.26,0.13,0.01,0.01,1,182
"{ ""date"": ""2015-05-15T13:05:05Z"" }",0,7,0.26,0.13,0.01,0.02,1,182
This code will create an activation resource that represents the activation state of the,0,9,0.21,0.13,0.02,0.0,0,182
user. Doing this also gives the added advantage of giving the activation resource addi-,0,9,0.21,0.13,0.0,0.0,0,182
tional properties. In our example you’ve added a date to the activation resource.,0,9,0.21,0.13,0.0,0.0,0,182
163,1,9,0.3,0.82,0.0,0.0,0,183
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,183
7.3.2 Make the action a property of the resource,1,10,0.5,0.07,0.03,0.01,1,183
"If activation is a simple state of the customer account, you can simply make the action",0,9,0.21,0.14,0.01,0.0,0,183
"a property of the resource, and then use the",0,9,0.3,0.14,0.0,0.0,1,183
PATCH HTTP method to do a partial,0,9,0.21,0.53,0.0,0.0,1,183
"update to the resource. For example, you can do this:",0,9,0.3,0.14,0.0,0.01,1,183
PATCH /user/456 HTTP/1.1,0,7,0.26,0.14,0.01,0.02,1,183
"{ ""active"" : ""true"" }",0,7,0.26,0.14,0.02,0.02,1,183
active property of the user resource to,0,9,0.21,0.36,0.02,0.0,1,183
true .,0,9,0.21,0.68,0.0,0.0,1,183
This code will change the,0,9,0.3,0.14,0.0,0.02,1,183
7.4 Parsing and creating XML with Go,1,12,0.54,0.07,0.02,0.01,1,183
Now that you’re armed with background knowledge of,0,9,0.3,0.14,0.01,0.0,1,183
SOAP and REST ful web ser-,0,9,0.21,0.61,0.0,0.0,1,183
"vices, let’s look at how Go can be used to create and consume them. We’ll start with",0,9,0.21,0.14,0.0,0.0,0,183
in this section and move on to,0,9,0.3,0.18,0.0,0.0,1,183
in the next.,0,9,0.21,0.48,0.0,0.0,1,183
XML,0,9,0.21,0.14,0.0,0.0,0,183
JSON,0,9,0.21,0.44,0.0,0.01,1,183
XML is a popular markup language (,0,9,0.3,0.17,0.01,0.0,1,183
HTML is another example of a markup lan-,0,9,0.21,0.48,0.0,0.0,1,183
guage) that’s used to represent data in a structured way. It’s probably the most widely,0,9,0.21,0.14,0.0,0.0,0,183
used format for representing structured data as well as for sending and receiving,0,9,0.21,0.14,0.0,0.0,0,183
structured data. XML is a formal recommendation from the,0,9,0.3,0.14,0.0,0.0,1,183
"W3C , and it’s defined by",0,9,0.21,0.64,0.0,0.0,1,183
W3C ’s XML 1.0 specification.,0,9,0.3,0.14,0.0,0.0,1,183
"Regardless of whether you end up writing or consuming web services, knowing",0,9,0.21,0.17,0.0,0.0,0,183
how to create and parse,0,9,0.3,0.14,0.0,0.0,1,183
XML is a critical part of your arsenal. One frequent use is to,0,9,0.21,0.35,0.0,0.0,1,183
consume web services from other providers or,0,9,0.3,0.14,0.0,0.0,1,183
XML -based feeds like RSS,0,9,0.21,0.52,0.0,0.0,1,183
. Even if you’d,0,9,0.21,0.73,0.0,0.0,1,183
"never write an web service yourself, learning how to interact with",0,9,0.3,0.14,0.0,0.0,1,183
using Go,0,9,0.21,0.76,0.0,0.0,1,183
XML,0,9,0.12,0.26,0.0,0.0,0,183
XML,0,9,0.12,0.73,0.0,0.01,0,183
"will be useful to you. For example, you might need to get data from an",0,9,0.3,0.14,0.01,0.0,1,183
RSS newsfeed,0,9,0.21,0.73,0.0,0.0,1,183
"and use the data as part of your data source. In this case, you’d have to know how to",0,9,0.21,0.14,0.0,0.0,0,183
parse XML and extract the information you need from it.,0,9,0.3,0.14,0.0,0.0,1,183
"Parsing structured data in Go is quite similar, whether it’s",0,9,0.3,0.17,0.0,0.0,1,183
XML or JSON or any,0,9,0.21,0.67,0.0,0.0,1,183
other format. To manipulate,0,9,0.3,0.14,0.0,0.0,1,183
"XML or JSON , you can use the corresponding",0,9,0.21,0.39,0.0,0.0,1,183
XML or,0,9,0.21,0.78,0.0,0.0,1,183
JSON subpackages of the encoding library. For,0,9,0.3,0.14,0.0,0.0,1,183
"XML , it’s in the encoding/xml library.",0,9,0.21,0.53,0.0,0.02,1,183
7.4.1 Parsing XML,1,10,0.5,0.07,0.02,0.01,1,183
Let’s start with parsing XML,0,9,0.3,0.14,0.01,0.0,1,183
", which is most likely what you’ll start doing first. In Go,",0,9,0.21,0.37,0.0,0.0,1,183
"you parse the XML into structs, which you can subsequently extract the data from.",0,9,0.21,0.14,0.0,0.0,0,183
This is normally how you parse,0,9,0.3,0.14,0.0,0.0,1,183
XML :,0,9,0.21,0.4,0.0,0.01,1,183
Create structs to contain the,0,9,0.3,0.19,0.01,0.0,1,183
data.,0,9,0.21,0.47,0.0,0.0,1,183
XML,0,9,0.12,0.43,0.0,0.0,0,183
1,1,6,0.33,0.17,0.0,0.01,0,183
Use xml.Unmarshal to unmarshal the,0,9,0.3,0.19,0.01,0.0,1,183
"XML data into the structs, illustrated in",0,9,0.21,0.51,0.0,0.0,1,183
2,1,6,0.33,0.17,0.0,0.01,0,183
figure 7.2.,0,9,0.3,0.19,0.01,0.06,1,183
Create structs Unmarshal XML,0,7,0.17,0.22,0.06,0.0,1,183
Figure 7.2 Parse XML with Go by,1,7,0.35,0.53,0.0,0.0,1,183
to store XML into structs,0,7,0.17,0.22,0.0,0.0,1,183
unmarshaling XML into structs,1,7,0.35,0.53,0.0,0.0,1,183
164,1,9,0.39,0.06,0.0,0.0,0,184
Go web services,1,9,0.39,0.43,0.0,0.0,1,184
C 7,1,7,0.26,0.35,0.0,0.0,0,184
HAPTER,1,6,0.33,0.36,0.0,0.03,1,184
Say you want to parse the post.xml file shown in this listing with Go.,0,9,0.3,0.13,0.03,0.03,1,184
"Listing 7.1 A simple XML file, post.xml",1,9,0.48,0.15,0.03,0.02,1,184
"<?xml version=""1.0"" encoding=""utf-8""?>",0,7,0.26,0.13,0.02,0.0,1,184
"<post id=""1"">",0,7,0.26,0.13,0.0,0.0,1,184
<content>Hello World!</content>,0,7,0.26,0.13,0.0,0.0,1,184
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.13,0.0,0.0,1,184
</post>,0,7,0.26,0.13,0.0,0.02,1,184
This listing shows the code to parse the simple,0,9,0.3,0.13,0.02,0.0,1,184
XML file in the code file xml.go.,0,9,0.21,0.51,0.0,0.03,1,184
Listing 7.2 Processing XML,1,9,0.48,0.15,0.03,0.02,1,184
package main,0,7,0.26,0.13,0.02,0.02,1,184
import (,0,7,0.26,0.13,0.02,0.0,1,184
"""encoding/xml""",0,7,0.26,0.13,0.0,0.0,1,184
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,184
"""io/ioutil""",0,7,0.26,0.13,0.0,0.0,1,184
"""os""",0,7,0.26,0.13,0.0,0.0,1,184
),0,7,0.17,0.13,0.0,0.02,0,184
type Post struct {    //#A,0,7,0.26,0.13,0.02,0.0,1,184
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.13,0.0,0.0,1,184
"Id      string   `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,184
"Content string   `xml:""content""`",0,7,0.26,0.13,0.0,0.0,1,184
"Author  Author   `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,184
"Xml     string   `xml:"",innerxml""`",0,7,0.26,0.13,0.0,0.0,1,184
},0,7,0.17,0.13,0.0,0.0,0,184
Defines structs to,1,9,0.39,0.53,0.0,0.0,1,184
represent the data,1,9,0.39,0.53,0.0,0.0,1,184
type Author struct {,0,7,0.26,0.13,0.0,0.0,1,184
"Id   string `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,184
"Name string `xml:"",chardata""`",0,7,0.26,0.13,0.0,0.0,1,184
},0,7,0.17,0.13,0.0,0.02,0,184
func main() {,0,7,0.26,0.13,0.02,0.0,1,184
"xmlFile, err := os.Open(""post.xml"")",0,7,0.26,0.13,0.0,0.0,1,184
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,184
"fmt.Println(""Error opening XML file:"", err)",0,7,0.26,0.13,0.0,0.0,1,184
return,0,7,0.26,0.13,0.0,0.0,1,184
},0,7,0.17,0.13,0.0,0.0,0,184
defer xmlFile.Close(),0,7,0.26,0.13,0.0,0.0,1,184
"xmlData, err := ioutil.ReadAll(xmlFile)",0,7,0.26,0.13,0.0,0.0,1,184
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,184
"fmt.Println(""Error reading XML data:"", err)",0,7,0.26,0.13,0.0,0.0,1,184
return,0,7,0.26,0.13,0.0,0.0,1,184
},0,7,0.17,0.13,0.0,0.02,0,184
Unmarshals XML data,1,9,0.39,0.55,0.02,0.0,1,184
var post Post,0,7,0.26,0.13,0.0,0.0,1,184
into the struct,1,9,0.39,0.55,0.0,0.0,1,184
"xml.Unmarshal(xmlData, &post)",0,7,0.26,0.13,0.0,0.0,1,184
fmt.Println(post),0,7,0.26,0.13,0.0,0.0,1,184
},0,7,0.17,0.13,0.0,0.0,0,184
165,1,9,0.3,0.82,0.0,0.0,0,185
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,185
"Post and Author , to represent the data. Here you’ve",0,9,0.21,0.41,0.03,0.0,1,185
"You need to define two structs,",0,9,0.3,0.14,0.0,0.0,1,185
used an Author struct to represent an author but you didn’t use a separate,0,9,0.21,0.14,0.0,0.0,0,185
Content,0,9,0.21,0.78,0.0,0.01,1,185
Author you want to capture the,0,9,0.21,0.51,0.01,0.0,1,185
id attri-,0,9,0.21,0.78,0.0,0.0,1,185
struct to represent the content because for,0,9,0.3,0.14,0.0,0.0,1,185
"id attribute, you could define",0,9,0.21,0.47,0.0,0.0,1,185
Post as shown,0,9,0.21,0.72,0.0,0.0,1,185
bute. If you didn’t have to capture the,0,9,0.3,0.14,0.0,0.0,1,185
Author (in bold):,0,9,0.21,0.43,0.0,0.0,1,185
"next, with a string representing an",0,9,0.3,0.14,0.0,0.01,1,185
type Post struct {,0,7,0.26,0.14,0.01,0.0,1,185
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.14,0.0,0.0,1,185
"Id      string   `xml:""id,attr""`",0,7,0.26,0.14,0.0,0.0,1,185
"Content string   `xml:""content""`",0,7,0.26,0.14,0.0,0.0,1,185
"Author  string   `xml:""author""`",1,7,0.44,0.14,0.0,0.0,1,185
"Xml     string   `xml:"",innerxml""`",0,7,0.26,0.14,0.0,0.0,1,185
},0,7,0.17,0.14,0.0,0.02,0,185
So what are those curious-looking things after the definition of each field in the Post,0,9,0.21,0.14,0.02,0.0,0,185
struct? They are called struct tags,1,9,0.48,0.14,0.0,0.0,1,185
and Go determines the mapping between the struct,0,9,0.21,0.41,0.0,0.0,1,185
"and the XML elements using them, shown in figure 7.3.",0,9,0.3,0.14,0.0,0.03,1,185
Struct tag,1,9,0.39,0.31,0.03,0.03,1,185
type Post struct {,0,7,0.26,0.15,0.03,0.0,1,185
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.16,0.0,0.0,1,185
"Id      string   `xml:""id,attr""`",0,7,0.26,0.16,0.0,0.0,1,185
"Content string   `xml:""content""`",0,7,0.26,0.16,0.0,0.0,1,185
"Author  Author   `xml:""author""`",0,7,0.26,0.16,0.0,0.0,1,185
"Xml     string   `xml:"",innerxml""`",0,7,0.26,0.16,0.0,0.0,1,185
},0,7,0.17,0.15,0.0,0.02,0,185
Figure 7.3 Struct tags are used to define the mapping,1,7,0.35,0.45,0.02,0.0,1,185
Key Value,1,9,0.39,0.3,0.0,0.0,1,185
between XML and a struct.,1,7,0.35,0.45,0.0,0.04,1,185
Struct tags are strings after each field that are a key-value pair. The key is a string and,0,9,0.21,0.14,0.04,0.0,0,185
"must not have a space, a quote (""), or a colon (:). The value must be a string between",0,9,0.21,0.14,0.0,0.0,0,185
", the key must always be xml",0,9,0.21,0.38,0.0,0.0,1,185
"double quotes (""""). For XML",0,9,0.3,0.14,0.0,0.0,1,185
.,0,9,0.12,0.6,0.0,0.03,0,185
Why use backticks (`) in struct tags?,1,10,0.5,0.17,0.03,0.01,1,185
"If you’re wondering why backticks (`) are used to wrap around the struct tag, remember",0,9,0.21,0.17,0.01,0.0,0,185
"that strings in Go are created using the double quotes ("") and backticks (`). Single",0,9,0.21,0.17,0.0,0.0,0,185
quotes (') are used for runes (an,0,9,0.3,0.17,0.0,0.0,1,185
int32 that represents a Unicode code point) only.,0,9,0.21,0.43,0.0,0.0,1,185
"You’re already using double quotes inside the struct tag, so if you don’t want to escape",0,9,0.21,0.17,0.0,0.0,0,185
"those quotes, you’ll have to use something else—hence the backticks.",0,9,0.3,0.17,0.0,0.04,1,185
"Note that because of the way Go does the mapping, the struct and all the fields in the",0,9,0.21,0.14,0.04,0.0,0,185
"struct that you create must be public, which means the names need to be capitalized.",0,9,0.21,0.14,0.0,0.0,0,185
Post can’t be just post and,0,9,0.21,0.4,0.0,0.0,1,185
Content can’t be content,0,9,0.21,0.63,0.0,0.0,1,185
"In the previous code, the struct",0,9,0.3,0.14,0.0,0.0,1,185
.,0,9,0.12,0.83,0.0,0.0,0,185
166,1,9,0.39,0.06,0.0,0.0,0,186
Go web services,1,9,0.39,0.43,0.0,0.0,1,186
C 7,1,7,0.26,0.35,0.0,0.0,0,186
HAPTER,1,6,0.33,0.36,0.0,0.03,1,186
Here are some rules for the,0,9,0.3,0.15,0.03,0.0,1,186
XML struct tags:,0,9,0.21,0.38,0.0,0.01,1,186
To store the name of the,0,9,0.3,0.18,0.01,0.0,1,186
XML element itself (normally the name of the struct is,0,9,0.21,0.38,0.0,0.0,1,186
1,1,6,0.33,0.15,0.0,0.01,0,186
XMLName with the type xml.Name,0,9,0.21,0.56,0.01,0.0,1,186
"the name of the element), add a field named",0,9,0.3,0.18,0.0,0.0,1,186
.,0,9,0.12,0.82,0.0,0.0,0,186
The name of the element will be stored in that field.,0,9,0.3,0.18,0.0,0.01,1,186
To store the attribute of an,0,9,0.3,0.18,0.01,0.0,1,186
"XML element, define a field with the same name as",0,9,0.21,0.41,0.0,0.0,1,186
2,1,6,0.33,0.15,0.0,0.01,0,186
"`xml:"" <name> ,attr""` , where",1,9,0.39,0.47,0.01,0.0,1,186
<name> is the,1,9,0.39,0.72,0.0,0.0,1,186
that attribute and use the struct tag,0,9,0.3,0.18,0.0,0.0,1,186
name of the XML attribute.,0,9,0.3,0.18,0.0,0.01,1,186
To store the character data value of the,0,9,0.3,0.18,0.01,0.0,1,186
"XML element, define a field with the",0,9,0.21,0.52,0.0,0.0,1,186
3,1,6,0.33,0.15,0.0,0.01,0,186
"`xml:"",chardata""`.",0,9,0.21,0.65,0.01,0.0,1,186
"same name as the XML element tag, and use the struct tag",0,9,0.3,0.18,0.0,0.01,1,186
To get the raw XML from the,0,9,0.3,0.18,0.01,0.0,1,186
"XML element, define a field (using any name) and",0,9,0.21,0.42,0.0,0.0,1,186
4,1,6,0.33,0.15,0.0,0.01,0,186
"use the struct tag `xml:"",innerxml""`",0,9,0.3,0.18,0.01,0.0,1,186
.,0,9,0.12,0.49,0.0,0.01,0,186
",attr or ,chardata or ,innerxml",0,9,0.21,0.45,0.01,0.0,1,186
If there are no mode flags (like,0,9,0.3,0.18,0.0,0.0,1,186
) the struct,0,9,0.21,0.73,0.0,0.0,1,186
5,1,6,0.33,0.15,0.0,0.01,0,186
field will be matched with an,0,9,0.3,0.18,0.01,0.0,1,186
XML element that has the same name as the,0,9,0.21,0.44,0.0,0.0,1,186
struct’s name.,0,9,0.3,0.18,0.0,0.01,1,186
To get to an XML element directly without specifying the tree structure to get to,0,9,0.21,0.18,0.01,0.0,0,186
6,1,6,0.33,0.15,0.0,0.01,0,186
"`xml:""a>b>c""` , where a",0,9,0.21,0.44,0.01,0.0,1,186
and b are the interme-,0,9,0.21,0.64,0.0,0.0,1,186
"that element, use the struct tag",0,9,0.3,0.18,0.0,0.0,1,186
diate elements and c is the node that you want to get to.,0,9,0.3,0.18,0.0,0.01,1,186
"Admittedly the rules can be a bit difficult to understand, especially the last couple. So",0,9,0.21,0.13,0.01,0.0,0,186
let’s look at some examples.,0,9,0.3,0.13,0.0,0.0,1,186
element post and the corresponding struct,0,9,0.21,0.36,0.0,0.0,1,186
Post :,0,9,0.21,0.73,0.0,0.0,1,186
First let’s look at the XML,0,9,0.3,0.15,0.0,0.03,1,186
Post,1,9,0.39,0.52,0.03,0.0,1,186
Listing 7.3 Simple XML element representing a,1,9,0.48,0.15,0.0,0.02,1,186
"<post id=""1"">",0,7,0.26,0.13,0.02,0.0,1,186
<content>Hello World!</content>,0,7,0.26,0.13,0.0,0.0,1,186
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.13,0.0,0.0,1,186
</post>,0,7,0.26,0.13,0.0,0.02,1,186
Compare it with this:,0,9,0.3,0.13,0.02,0.01,1,186
type Post struct {,0,7,0.26,0.13,0.01,0.0,1,186
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.13,0.0,0.0,1,186
"Id      string   `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,186
"Content string   `xml:""content""`",0,7,0.26,0.13,0.0,0.0,1,186
"Author  Author   `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,186
"Xml     string   `xml:"",innerxml""`",0,7,0.26,0.13,0.0,0.0,1,186
},0,7,0.17,0.13,0.0,0.02,0,186
Post with the same name,0,9,0.21,0.34,0.02,0.0,1,186
XML element post . Although this,0,9,0.21,0.55,0.0,0.0,1,186
Here you defined a struct,0,9,0.3,0.13,0.0,0.0,1,186
"is fine, if you wanted to know the name of the",0,9,0.3,0.13,0.0,0.0,1,186
"XML element, you’d be lost. Fortu-",0,9,0.21,0.53,0.0,0.0,1,186
"nately, the xml library provides a mechanism to get the",0,9,0.3,0.13,0.0,0.0,1,186
XML element name by defin-,0,9,0.21,0.59,0.0,0.0,1,186
XMLName with the type xml.Name,0,9,0.21,0.33,0.0,0.0,1,186
ing a struct field named,0,9,0.3,0.13,0.0,0.0,1,186
. You’d also need to map this,0,9,0.21,0.59,0.0,0.0,1,186
"`xml:""post""` . Doing so stores the name",0,9,0.21,0.49,0.0,0.0,1,186
"struct field to the element itself, in this case",0,9,0.3,0.13,0.0,0.0,1,186
"of the element, post , into the field according to rule 1 in our list: to store the name of",0,9,0.21,0.13,0.0,0.0,0,186
XMLName with the type xml.Name,0,9,0.21,0.51,0.0,0.0,1,186
"the XML element itself, you add a field named",0,9,0.3,0.13,0.0,0.0,1,186
.,0,9,0.12,0.77,0.0,0.0,0,186
167,1,9,0.3,0.82,0.0,0.0,0,187
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,187
The post XML element also has an attribute named,0,9,0.3,0.17,0.03,0.0,1,187
"id , which is mapped to the",0,9,0.21,0.61,0.0,0.0,1,187
struct field Id by the struct tag,0,9,0.3,0.14,0.0,0.0,1,187
"`xml:""id,attr""` . This corresponds to our second rule:",0,9,0.21,0.39,0.0,0.0,1,187
"`xml:""<name>,attr""` .",0,9,0.21,0.65,0.0,0.0,1,187
to store the attribute of an,0,9,0.3,0.14,0.0,0.0,1,187
"XML element, you use the struct tag",0,9,0.21,0.36,0.0,0.0,1,187
"content , with no attributes, but character data",0,9,0.21,0.42,0.0,0.0,1,187
You have the XML subelement,0,9,0.3,0.17,0.0,0.0,1,187
Hello,1,9,0.39,0.8,0.0,0.0,1,187
Content struct field in the,0,9,0.21,0.37,0.0,0.0,1,187
Post struct using the struct tag,0,9,0.21,0.59,0.0,0.0,1,187
World! You map this to the,1,9,0.48,0.14,0.0,0.0,1,187
"`xml:""content""` . This corresponds to rule 5: if there are no mode flags the struct field",0,9,0.21,0.14,0.0,0.0,0,187
will be matched with an XML,0,9,0.3,0.14,0.0,0.0,1,187
element that has the same name as the struct’s name.,0,9,0.21,0.38,0.0,0.0,1,187
If you want to have the raw,0,9,0.3,0.17,0.0,0.0,1,187
"XML within the XML element post, you can define a",0,9,0.21,0.41,0.0,0.0,1,187
"struct field, Xml , and use the struct tag",0,9,0.3,0.14,0.0,0.0,1,187
"`xml:"",innerxml""` to map it to the raw",0,9,0.21,0.47,0.0,0.0,1,187
XML,0,9,0.12,0.81,0.0,0.0,0,187
within the post XML element:,0,9,0.3,0.14,0.0,0.01,1,187
<content>Hello World!</content>,0,7,0.26,0.14,0.01,0.0,1,187
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.14,0.0,0.02,1,187
This corresponds to rule 4: to get the raw,0,9,0.3,0.14,0.02,0.0,1,187
"XML from the XML element, use the struct",0,9,0.21,0.49,0.0,0.0,1,187
"tag `xml:"",innerxml""` . You also have the",0,9,0.3,0.14,0.0,0.0,1,187
"subelement author , which has an",0,9,0.21,0.55,0.0,0.0,1,187
XML,0,9,0.12,0.51,0.0,0.0,0,187
"attribute id , and its subelement consists of character data",0,9,0.3,0.14,0.0,0.0,1,187
Sau Sheong . To map this,1,9,0.39,0.64,0.0,0.0,1,187
Author :,0,9,0.21,0.49,0.0,0.0,1,187
"properly, you need to have another struct,",0,9,0.3,0.14,0.0,0.01,1,187
type Author struct {,0,7,0.26,0.14,0.01,0.0,1,187
"Id    string `xml:""id,attr""`",0,7,0.26,0.14,0.0,0.0,1,187
"Name  string `xml:"",chardata""`",0,7,0.26,0.14,0.0,0.0,1,187
},0,7,0.17,0.14,0.0,0.02,0,187
"`xml:""author""` , as described",0,9,0.21,0.6,0.02,0.0,1,187
Map the subelement to this struct using the struct tag,0,9,0.3,0.14,0.0,0.0,1,187
in rule 5. In the Author,0,9,0.3,0.14,0.0,0.0,1,187
id to the struct field Id,0,9,0.21,0.59,0.0,0.0,1,187
"struct, map the attribute",0,9,0.21,0.37,0.0,0.0,1,187
with,0,9,0.21,0.81,0.0,0.0,1,187
"`xml:""id,attr""` and the character data",0,9,0.3,0.14,0.0,0.0,1,187
Name with,0,9,0.21,0.76,0.0,0.0,1,187
Sau Sheong to the struct field,1,9,0.39,0.5,0.0,0.0,1,187
"`xml:"",chardata""` using rule 3.",0,9,0.3,0.14,0.0,0.0,1,187
We’ve discussed the program but nothing beats running it and seeing the results.,0,9,0.21,0.17,0.0,0.0,0,187
So let’s give it a spin and run the following command on the console:,0,9,0.3,0.14,0.0,0.01,1,187
go run xml.go,0,7,0.26,0.14,0.01,0.01,1,187
You should see the following result:,0,9,0.3,0.14,0.01,0.01,1,187
{{ post} 1 Hello World! {2 Sau Sheong},0,7,0.26,0.14,0.01,0.0,1,187
<content>Hello World!</content>,0,7,0.26,0.14,0.0,0.0,1,187
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.14,0.0,0.0,1,187
},0,7,0.17,0.14,0.0,0.02,0,187
{} ),0,9,0.21,0.82,0.02,0.0,1,187
Let’s break down these results. The results are wrapped with a pair of braces (,0,9,0.21,0.14,0.0,0.0,0,187
because post is a struct. The first field in the,0,9,0.3,0.14,0.0,0.0,1,187
post struct is another struct of type,0,9,0.21,0.54,0.0,0.0,1,187
"xml.Name , represented as",0,9,0.3,0.14,0.0,0.0,1,187
"{ post } . Next, the number",0,9,0.21,0.37,0.0,0.0,1,187
"1 is the Id , and ""Hello",0,9,0.21,0.64,0.0,0.0,1,187
"World!"" is the content. After that is the",0,9,0.3,0.14,0.0,0.0,1,187
"Author , which is again another struct,",0,9,0.21,0.47,0.0,0.0,1,187
{2 Sau,0,9,0.21,0.79,0.0,0.01,1,187
"Sheong} . Finally, the rest of the output is simply the inner",0,9,0.3,0.14,0.01,0.0,1,187
XML .,0,9,0.21,0.62,0.0,0.0,1,187
We’ve covered rules 1–5. Now let’s look at how rule 6 works. Rule 6 states that to,0,9,0.21,0.17,0.0,0.0,0,187
"get to an XML element directly without specifying the tree structure, use the struct tag",0,9,0.21,0.14,0.0,0.0,0,187
"`xml:""a>b>c""` , where a",0,9,0.3,0.14,0.0,0.0,1,187
and b are the intermediate elements and,0,9,0.21,0.35,0.0,0.0,1,187
c is the node that,0,9,0.21,0.7,0.0,0.0,1,187
you want to get to.,0,9,0.3,0.14,0.0,0.0,1,187
168,1,9,0.39,0.06,0.0,0.0,0,188
Go web services,1,9,0.39,0.43,0.0,0.0,1,188
C 7,1,7,0.26,0.35,0.0,0.0,0,188
HAPTER,1,6,0.33,0.36,0.0,0.03,1,188
The next listing is another example,0,9,0.3,0.15,0.03,0.0,1,188
"XML file, with the same name post.xml, show-",0,9,0.21,0.45,0.0,0.0,1,188
ing how you can parse it.,0,9,0.3,0.13,0.0,0.03,1,188
Listing 7.4 XML file with nested elements,1,9,0.48,0.15,0.03,0.02,1,188
"<?xml version=""1.0"" encoding=""utf-8""?>",0,7,0.26,0.13,0.02,0.0,1,188
"<post id=""1"">",0,7,0.26,0.13,0.0,0.0,1,188
<content>Hello World!</content>,0,7,0.26,0.13,0.0,0.0,1,188
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.13,0.0,0.0,1,188
<comments>,1,7,0.44,0.13,0.0,0.0,1,188
"<comment id=""1"">",1,7,0.44,0.13,0.0,0.0,1,188
<content>Have a great day!</content>,1,7,0.44,0.13,0.0,0.0,1,188
"<author id=""3"">Adam</author>",1,7,0.44,0.13,0.0,0.0,1,188
</comment>,1,7,0.44,0.13,0.0,0.0,1,188
"<comment id=""2"">",1,7,0.44,0.13,0.0,0.0,1,188
<content>How are you today?</content>,1,7,0.44,0.13,0.0,0.0,1,188
"<author id=""4"">Betty</author>",1,7,0.44,0.13,0.0,0.0,1,188
</comment>,1,7,0.44,0.13,0.0,0.0,1,188
</comments>,1,7,0.44,0.13,0.0,0.0,1,188
</post>,0,7,0.26,0.13,0.0,0.02,1,188
"Most of the XML file is similar to listing 7.3, except now you have an",0,9,0.3,0.13,0.02,0.0,1,188
"XML subelement,",0,9,0.21,0.68,0.0,0.0,1,188
"comments (in bold), which is a container of multiple",0,9,0.3,0.13,0.0,0.0,1,188
XML subelements comment,0,9,0.21,0.57,0.0,0.0,1,188
. In,0,9,0.21,0.8,0.0,0.0,1,188
"this case, you want to get the list of comments in the post, but creating a struct",0,9,0.21,0.13,0.0,0.0,0,188
"Comments to contain the list of comments seems like overkill. To simplify, you’ll use",0,9,0.21,0.13,0.0,0.0,0,188
comments XML subelement. Rule 6 states that to get to an,0,9,0.21,0.35,0.0,0.0,1,188
rule 6 to leap-frog over the,0,9,0.3,0.13,0.0,0.0,1,188
"XML element directly without specifying the tree structure, you can use the struct tag",0,9,0.21,0.13,0.0,0.0,0,188
"`xml:""a>b>c""` . The next listing shows the modified",0,9,0.3,0.13,0.0,0.0,1,188
Post struct with the new struct,0,9,0.21,0.57,0.0,0.0,1,188
field and the corresponding mapping struct tag.,0,9,0.3,0.13,0.0,0.03,1,188
Listing 7.5 Post struct with,1,9,0.48,0.15,0.03,0.0,1,188
comments struct field,1,9,0.39,0.38,0.0,0.02,1,188
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,188
"XMLName  xml.Name  `xml:""post""`",0,7,0.26,0.13,0.0,0.0,1,188
"Id       string    `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,188
"Content  string    `xml:""content""`",0,7,0.26,0.13,0.0,0.0,1,188
"Author   Author    `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,188
"Xml      string    `xml:"",innerxml""`",0,7,0.26,0.13,0.0,0.0,1,188
"Comments []Comment `xml:""comments>comment""`",1,7,0.44,0.13,0.0,0.0,1,188
},0,7,0.17,0.13,0.0,0.02,0,188
Comments struct field to be a,0,9,0.21,0.6,0.02,0.0,1,188
"To get a list of comments, you’ve specified the type of the",0,9,0.3,0.13,0.0,0.0,1,188
slice of Comment structs (shown in bold). You also map this field to the,0,9,0.21,0.13,0.0,0.0,0,188
comment XML,0,9,0.21,0.71,0.0,0.0,1,188
"`xml:""comments>comment""`",0,9,0.21,0.39,0.0,0.0,1,188
subelement using the struct tag,0,9,0.3,0.13,0.0,0.0,1,188
". According to rule 6, this",0,9,0.21,0.62,0.0,0.0,1,188
comment subelement and bypass the,0,9,0.21,0.44,0.0,0.0,1,188
comments,0,9,0.21,0.75,0.0,0.0,1,188
will allow you to jump right into the,0,9,0.3,0.13,0.0,0.0,1,188
XML element.,0,9,0.3,0.13,0.0,0.0,1,188
Here’s the code for the Comment,0,9,0.3,0.15,0.0,0.0,1,188
Post struct:,0,9,0.21,0.66,0.0,0.0,1,188
"struct, which is similar to the",0,9,0.21,0.42,0.0,0.01,1,188
type Comment struct {,0,7,0.26,0.13,0.01,0.0,1,188
"Id      string `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,188
169,1,9,0.3,0.82,0.0,0.0,0,189
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,189
"Content string `xml:""content""`",0,7,0.26,0.14,0.03,0.0,1,189
"Author  Author `xml:""author""`",0,7,0.26,0.14,0.0,0.0,1,189
},0,7,0.17,0.14,0.0,0.02,0,189
"Now that you’ve defined the structs and the mapping, you can unmarshal the",0,9,0.21,0.14,0.02,0.0,0,189
XML file,0,9,0.21,0.77,0.0,0.0,1,189
Unmarshal function is a slice of bytes (better known,0,9,0.21,0.42,0.0,0.0,1,189
into your structs. The input to the,0,9,0.3,0.14,0.0,0.0,1,189
"as a string), so you need to convert the",0,9,0.3,0.14,0.0,0.0,1,189
XML file to a string first. Remember that the,0,9,0.21,0.47,0.0,0.0,1,189
XML file should be in the same directory as your Go file.,0,9,0.3,0.14,0.0,0.01,1,189
"xmlFile, err := os.Open(""post.xml"")",0,7,0.26,0.14,0.01,0.0,1,189
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,189
"fmt.Println(""Error opening XML file:"", err)",0,7,0.26,0.14,0.0,0.0,1,189
return,0,7,0.26,0.14,0.0,0.0,1,189
},0,7,0.17,0.14,0.0,0.0,0,189
defer xmlFile.Close(),0,7,0.26,0.14,0.0,0.0,1,189
"xmlData, err := ioutil.ReadAll(xmlFile)",0,7,0.26,0.14,0.0,0.0,1,189
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,189
"fmt.Println(""Error reading XML data:"", err)",0,7,0.26,0.14,0.0,0.0,1,189
return,0,7,0.26,0.14,0.0,0.0,1,189
},0,7,0.17,0.14,0.0,0.02,0,189
"Unmarshaling XML data can be a simple one-liner (two lines, if you consider defining",0,9,0.21,0.14,0.02,0.0,0,189
the variable a line of its own):,0,9,0.3,0.14,0.0,0.01,1,189
var post Post,0,7,0.26,0.14,0.01,0.0,1,189
"xml.Unmarshal(xmlData, &post)",0,7,0.26,0.14,0.0,0.02,1,189
If you have experience in parsing,0,9,0.3,0.14,0.02,0.0,1,189
"XML in other programming languages, you know that",0,9,0.21,0.41,0.0,0.0,1,189
this works well for smaller,0,9,0.3,0.14,0.0,0.0,1,189
XML files but that it’s not efficient for processing,0,9,0.21,0.36,0.0,0.0,1,189
XML that’s,0,9,0.21,0.76,0.0,0.0,1,189
Unmarshal func-,0,9,0.21,0.71,0.0,0.0,1,189
streaming in or even in large,0,9,0.3,0.14,0.0,0.0,1,189
"XML files. In this case, you don’t use the",0,9,0.21,0.38,0.0,0.0,1,189
Decoder struct (see figure 7.4) to manually decode the,0,9,0.21,0.35,0.0,0.0,1,189
tion and instead use the,0,9,0.3,0.14,0.0,0.0,1,189
XML,0,9,0.12,0.81,0.0,0.0,0,189
Decoder .,0,9,0.21,0.65,0.0,0.0,1,189
"elements. Listing 7.6 is a look at the same example, but using",0,9,0.3,0.14,0.0,0.05,1,189
Iterate through,0,7,0.17,0.52,0.05,0.0,1,189
Create structs Create decoder,0,7,0.26,0.17,0.0,0.0,1,189
XML and decode,0,7,0.17,0.51,0.0,0.0,1,189
to store XML for decoding XML,0,7,0.26,0.17,0.0,0.0,1,189
into structs,0,7,0.17,0.53,0.0,0.03,1,189
Figure 7.4 Parsing XML with Go by decoding XML into structs,1,7,0.44,0.14,0.03,0.04,1,189
Decoder,1,9,0.39,0.4,0.04,0.0,1,189
Listing 7.6 Parsing XML with,1,9,0.48,0.17,0.0,0.02,1,189
package main,0,7,0.26,0.14,0.02,0.01,1,189
import (,0,7,0.26,0.14,0.01,0.0,1,189
"""encoding/xml""",0,7,0.26,0.14,0.0,0.0,1,189
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,189
"""io""",0,7,0.26,0.14,0.0,0.0,1,189
"""os""",0,7,0.26,0.14,0.0,0.0,1,189
),0,7,0.17,0.14,0.0,0.0,0,189
170,1,9,0.39,0.06,0.0,0.0,0,190
Go web services,1,9,0.39,0.43,0.0,0.0,1,190
C 7,1,7,0.26,0.35,0.0,0.0,0,190
HAPTER,1,6,0.33,0.36,0.0,0.03,1,190
type Post struct {,0,7,0.26,0.13,0.03,0.0,1,190
"XMLName  xml.Name  `xml:""post""`",0,7,0.26,0.13,0.0,0.0,1,190
"Id       string    `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,190
"Content  string    `xml:""content""`",0,7,0.26,0.13,0.0,0.0,1,190
"Author   Author    `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,190
"Xml      string    `xml:"",innerxml""`",0,7,0.26,0.13,0.0,0.0,1,190
"Comments []Comment `xml:""comments>comment""`",0,7,0.26,0.13,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.01,0,190
type Author struct {,0,7,0.26,0.13,0.01,0.0,1,190
"Id   string `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,190
"Name string `xml:"",chardata""`",0,7,0.26,0.13,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.01,0,190
type Comment struct {,0,7,0.26,0.13,0.01,0.0,1,190
"Id      string `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,190
"Content string `xml:""content""`",0,7,0.26,0.13,0.0,0.0,1,190
"Author  Author `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.01,0,190
func main() {,0,7,0.26,0.13,0.01,0.0,1,190
"xmlFile, err := os.Open(""post.xml"")",0,7,0.26,0.13,0.0,0.0,1,190
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,190
"fmt.Println(""Error opening XML file:"", err)",0,7,0.26,0.13,0.0,0.0,1,190
return,0,7,0.26,0.13,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.0,0,190
defer xmlFile.Close(),0,7,0.26,0.13,0.0,0.0,1,190
Creates decoder,1,9,0.39,0.6,0.0,0.0,1,190
from XML data,1,9,0.39,0.6,0.0,0.0,1,190
decoder := xml.NewDecoder(xmlFile),0,7,0.26,0.13,0.0,0.0,1,190
for {,0,7,0.26,0.13,0.0,0.0,1,190
Iterates,1,9,0.48,0.03,0.0,0.0,1,190
"t, err := decoder.Token()",0,7,0.26,0.13,0.0,0.0,1,190
through,1,9,0.48,0.03,0.0,0.0,1,190
Gets token from decoder,1,9,0.39,0.55,0.0,0.0,1,190
if err == io.EOF {,0,7,0.26,0.13,0.0,0.0,1,190
XML data,1,9,0.48,0.02,0.0,0.0,1,190
at each iteration,1,9,0.39,0.55,0.0,0.0,1,190
break,0,7,0.26,0.13,0.0,0.0,1,190
in decoder,1,9,0.48,0.01,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.0,0,190
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,190
"fmt.Println(""Error decoding XML into tokens:"", err)",0,7,0.26,0.13,0.0,0.0,1,190
return,0,7,0.26,0.13,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.01,0,190
switch se := t.(type) {,0,7,0.26,0.13,0.01,0.0,1,190
Checks type,1,9,0.39,0.55,0.0,0.0,1,190
case xml.StartElement:,0,7,0.26,0.13,0.0,0.0,1,190
of token,1,9,0.39,0.55,0.0,0.0,1,190
"if se.Name.Local == ""comment"" {",0,7,0.26,0.13,0.0,0.0,1,190
var comment Comment,0,7,0.26,0.13,0.0,0.0,1,190
"decoder.DecodeElement(&comment, &se)",0,7,0.26,0.13,0.0,0.0,1,190
Decodes XML data,1,9,0.39,0.61,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.0,0,190
into struct,1,9,0.39,0.61,0.0,0.0,1,190
},0,7,0.17,0.13,0.0,0.0,0,190
},0,7,0.17,0.13,0.0,0.0,0,190
},0,7,0.17,0.13,0.0,0.02,0,190
The various structs and their respective mappings remain the same. The difference is,0,9,0.21,0.13,0.02,0.0,0,190
Decoder struct to decode the,0,9,0.21,0.34,0.0,0.0,1,190
that you’ll be using the,0,9,0.3,0.13,0.0,0.0,1,190
"XML , element by element,",0,9,0.21,0.6,0.0,0.0,1,190
instead of unmarshaling the entire,0,9,0.3,0.13,0.0,0.0,1,190
as a string.,0,9,0.21,0.45,0.0,0.0,1,190
XML,0,9,0.12,0.41,0.0,0.0,0,190
"Decoder , which you can do by using the",0,9,0.21,0.38,0.0,0.0,1,190
NewDecoder,0,9,0.21,0.73,0.0,0.0,1,190
"First, you need to create a",0,9,0.3,0.15,0.0,0.0,1,190
io.Reader . In this case use the,0,9,0.21,0.36,0.0,0.0,1,190
xmlFile you got using,0,9,0.21,0.64,0.0,0.0,1,190
function and passing in an,0,9,0.3,0.13,0.0,0.0,1,190
os.Open earlier on.,0,9,0.3,0.13,0.0,0.0,1,190
171,1,9,0.3,0.82,0.0,0.0,0,191
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,191
Token method to get the next token in the,0,9,0.21,0.48,0.03,0.0,1,191
"Once you have the decoder, use the",0,9,0.3,0.17,0.0,0.0,1,191
XML stream. A token in this context is an interface that represents an,0,9,0.3,0.14,0.0,0.0,1,191
XML element.,0,9,0.21,0.73,0.0,0.0,1,191
What you want to do is to continually take tokens from the decoder until you run out.,0,9,0.21,0.14,0.0,0.0,0,191
for loop that,0,9,0.21,0.73,0.0,0.0,1,191
So let’s wrap the action of taking tokens from the decoder in an infinite,0,9,0.21,0.14,0.0,0.0,0,191
err will not be nil .,0,9,0.21,0.67,0.0,0.0,1,191
"breaks only when you run out of tokens. When that happens,",0,9,0.3,0.14,0.0,0.0,1,191
"io.EOF struct, signifying that it ran out of data from the file",0,9,0.21,0.36,0.0,0.0,1,191
Instead it will contain the,0,9,0.3,0.14,0.0,0.0,1,191
(or data stream).,0,9,0.3,0.14,0.0,0.0,1,191
"As you’re taking the tokens from the decoder, you’ll inspect them and check",0,9,0.21,0.17,0.0,0.0,0,191
whether they’re StartElement,0,9,0.3,0.14,0.0,0.0,1,191
s. A StartElement represents the start tag of an,0,9,0.21,0.39,0.0,0.0,1,191
XML ele-,0,9,0.21,0.77,0.0,0.0,1,191
ment. If the token is a StartElement,0,9,0.3,0.14,0.0,0.0,1,191
", check if it’s a comment",0,9,0.21,0.44,0.0,0.0,1,191
"XML element. If it is, you",0,9,0.21,0.64,0.0,0.0,1,191
Comment struct and get the same results as before.,0,9,0.21,0.43,0.0,0.0,1,191
can decode the entire token into a,0,9,0.3,0.14,0.0,0.0,1,191
Decoding the XML file manually takes more effort and isn’t worth it if it’s a small,0,9,0.21,0.17,0.0,0.0,0,191
XML file. But if you get,0,9,0.3,0.14,0.0,0.0,1,191
"XML streamed to you, or if it’s a very large",0,9,0.21,0.34,0.0,0.0,1,191
"XML file, it’s the",0,9,0.21,0.71,0.0,0.0,1,191
only way of extracting data from the,0,9,0.3,0.14,0.0,0.0,1,191
XML .,0,9,0.21,0.44,0.0,0.0,1,191
A final note before we discuss creating,0,9,0.3,0.17,0.0,0.0,1,191
XML : the rules described in this section are,0,9,0.21,0.49,0.0,0.0,1,191
xml library documen-,0,9,0.21,0.67,0.0,0.0,1,191
"only a portion of the list. For details on all the rules, refer to the",0,9,0.3,0.14,0.0,0.0,1,191
xml library source code.,0,9,0.21,0.44,0.0,0.0,1,191
"tation, or better yet, read the source",0,9,0.3,0.14,0.0,0.02,1,191
7.4.2 Creating XML,1,10,0.5,0.07,0.02,0.01,1,191
The previous section on parsing,0,9,0.3,0.14,0.01,0.0,1,191
"XML was a lengthy one. Fortunately, most of what you",0,9,0.21,0.41,0.0,0.0,1,191
learned there is directly applicable to this section. Creating,0,9,0.3,0.14,0.0,0.0,1,191
XML is the reverse of pars-,0,9,0.21,0.63,0.0,0.0,1,191
ing XML . Where you unmarshal,0,9,0.3,0.14,0.0,0.0,1,191
"XML into Go structs, you now marshal Go structs into",0,9,0.21,0.41,0.0,0.0,1,191
". Similarly, where you decode",0,9,0.3,0.18,0.0,0.0,1,191
"into Go structs, you now encode Go structs",0,9,0.21,0.47,0.0,0.0,1,191
XML,0,9,0.21,0.14,0.0,0.0,0,191
XML,0,9,0.12,0.43,0.0,0.0,0,191
"into XML , shown in figure 7.5.",0,9,0.3,0.14,0.0,0.0,1,191
"Let’s start with marshaling. The code in the file xml.go, shown in listing 7.7, will",0,9,0.21,0.17,0.0,0.0,0,191
generate an XML file named post.xml.,0,9,0.3,0.14,0.0,0.04,1,191
Create structs Marshal structs,0,7,0.26,0.16,0.04,0.0,1,191
and populate into XML data,0,7,0.26,0.17,0.0,0.0,1,191
Figure 7.5 Create XML with Go by creating,1,7,0.35,0.47,0.0,0.0,1,191
with data,0,7,0.26,0.18,0.0,0.0,1,191
structs and marshaling them into XML,1,7,0.35,0.47,0.0,0.04,1,191
Listing 7.7 Using the Marshal,1,9,0.48,0.17,0.04,0.0,1,191
function to generate an XML file,1,9,0.39,0.42,0.0,0.02,1,191
package main,0,7,0.26,0.14,0.02,0.02,1,191
import (,0,7,0.26,0.14,0.02,0.0,1,191
"""encoding/xml""",0,7,0.26,0.14,0.0,0.0,1,191
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,191
"""io/ioutil""",0,7,0.26,0.14,0.0,0.0,1,191
),0,7,0.17,0.14,0.0,0.02,0,191
type Post struct {,0,7,0.26,0.14,0.02,0.0,1,191
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.14,0.0,0.0,1,191
"Id      string   `xml:""id,attr""`",0,7,0.26,0.14,0.0,0.0,1,191
172,1,9,0.39,0.06,0.0,0.0,0,192
Go web services,1,9,0.39,0.43,0.0,0.0,1,192
C 7,1,7,0.26,0.35,0.0,0.0,0,192
HAPTER,1,6,0.33,0.36,0.0,0.03,1,192
"Content string   `xml:""content""`",0,7,0.26,0.13,0.03,0.0,1,192
"Author  Author   `xml:""author""`",0,7,0.26,0.13,0.0,0.0,1,192
},0,7,0.17,0.13,0.0,0.02,0,192
type Author struct {,0,7,0.26,0.13,0.02,0.0,1,192
"Id   string `xml:""id,attr""`",0,7,0.26,0.13,0.0,0.0,1,192
"Name string `xml:"",chardata""`",0,7,0.26,0.13,0.0,0.0,1,192
},0,7,0.17,0.13,0.0,0.02,0,192
func main() {,0,7,0.26,0.13,0.02,0.0,1,192
post := Post{,0,7,0.26,0.13,0.0,0.0,1,192
Creates struct with data,1,9,0.39,0.49,0.0,0.0,1,192
"Id:      ""1"",",0,7,0.26,0.13,0.0,0.0,1,192
"Content: "" Hello World!"",",0,7,0.26,0.13,0.0,0.0,1,192
Author: Author{,0,7,0.26,0.13,0.0,0.0,1,192
"Id:   ""2"",",0,7,0.26,0.13,0.0,0.0,1,192
"Name: ""Sau Sheong"",",0,7,0.26,0.13,0.0,0.0,1,192
"},",0,7,0.17,0.13,0.0,0.0,0,192
},0,7,0.17,0.13,0.0,0.0,0,192
"output, err := xml.Marshal(&post)",0,7,0.26,0.13,0.0,0.0,1,192
Marshals struct to a,1,9,0.39,0.61,0.0,0.0,1,192
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,192
byte slice of XML data,1,9,0.39,0.61,0.0,0.0,1,192
"fmt.Println(""Error marshalling to XML:"", err)",0,7,0.26,0.13,0.0,0.0,1,192
return,0,7,0.26,0.13,0.0,0.0,1,192
},0,7,0.17,0.13,0.0,0.0,0,192
"err = ioutil.WriteFile(""post.xml"", output, 0644)",0,7,0.26,0.13,0.0,0.0,1,192
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,192
"fmt.Println(""Error writing XML to file:"", err)",0,7,0.26,0.13,0.0,0.0,1,192
return,0,7,0.26,0.13,0.0,0.0,1,192
},0,7,0.17,0.13,0.0,0.02,0,192
},0,7,0.17,0.13,0.02,0.02,0,192
"As you can see, the structs and the struct tags are the same as those you used when",0,9,0.21,0.13,0.02,0.0,0,192
unmarshaling the XML . Marshaling simply reverses the process and creates,0,9,0.21,0.13,0.0,0.0,0,192
XML from,0,9,0.21,0.74,0.0,0.0,1,192
Marshal function,0,9,0.21,0.68,0.0,0.0,1,192
"a struct. First, you populate the struct with data. Then, using the",0,9,0.3,0.13,0.0,0.0,1,192
Post struct. Here’s the content of the post.xml file,0,9,0.21,0.39,0.0,0.0,1,192
you create the XML from the,0,9,0.3,0.13,0.0,0.0,1,192
that’s created:,0,9,0.3,0.13,0.0,0.01,1,192
"<post id=""1""><content>Hello World!</content><author id=""2"">Sau Sheong",0,7,0.26,0.13,0.01,0.0,1,192
</author></post>,0,7,0.26,0.17,0.0,0.01,1,192
"It’s not the prettiest, but it’s correctly formed",0,9,0.3,0.13,0.01,0.0,1,192
XML . If you want to make it look pret-,0,9,0.21,0.51,0.0,0.0,1,192
"tier, use the MarshalIndent",0,9,0.3,0.13,0.0,0.0,1,192
function:,0,9,0.21,0.36,0.0,0.01,1,192
"output, err := xml.MarshalIndent(&post, """", ""\t"")",0,7,0.26,0.13,0.01,0.01,1,192
"MarshalIndent is still the same, but you have two addi-",0,9,0.21,0.38,0.01,0.0,1,192
The first parameter you pass to,0,9,0.3,0.13,0.0,0.0,1,192
tional parameters. The second parameter is the prefix to every line and the third,0,9,0.21,0.13,0.0,0.0,0,192
"parameter is the indent, and every level of indentation will be prefixed with this.",0,9,0.21,0.13,0.0,0.0,0,192
"Using MarshalIndent , you can produce prettier output:",0,9,0.3,0.13,0.0,0.01,1,192
"<post id=""1"">",0,7,0.26,0.13,0.01,0.0,1,192
<content>Hello World!</content>,0,7,0.26,0.13,0.0,0.0,1,192
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.13,0.0,0.0,1,192
</post>,0,7,0.26,0.13,0.0,0.0,1,192
173,1,9,0.3,0.82,0.0,0.0,0,193
Parsing and creating XML with Go,1,9,0.39,0.34,0.0,0.03,1,193
"Still, it doesn’t look right. We don’t have the",0,9,0.3,0.14,0.03,0.0,1,193
XML declaration. Although Go doesn’t,0,9,0.21,0.52,0.0,0.0,1,193
"create the XML declaration for you automatically, it does provide a constant",0,9,0.21,0.14,0.0,0.0,0,193
xml.Header that you can use to attach to the marshaled output:,0,9,0.3,0.14,0.0,0.01,1,193
"err = ioutil.WriteFile(""post.xml"", []byte(xml.Header + string(output)), 0644)",0,7,0.17,0.14,0.01,0.01,0,193
Prefix the output with xml.Header,0,9,0.3,0.14,0.01,0.0,1,193
"and then write it to post.xml, and you’ll have the",0,9,0.21,0.43,0.0,0.0,1,193
XML declaration:,0,9,0.3,0.14,0.0,0.01,1,193
"<?xml version=""1.0"" encoding=""UTF-8""?>",0,7,0.26,0.14,0.01,0.0,1,193
"<post id=""1"">",0,7,0.26,0.14,0.0,0.0,1,193
<content>Hello World!</content>,0,7,0.26,0.14,0.0,0.0,1,193
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.14,0.0,0.0,1,193
</post>,0,7,0.26,0.14,0.0,0.02,1,193
Just as you manually decoded the,0,9,0.3,0.14,0.02,0.0,1,193
"XML into Go structs, you can also manually encode",0,9,0.21,0.42,0.0,0.0,1,193
Go structs into XML (see figure 7.6). Listing 7.8 shows a simple example.,0,9,0.21,0.14,0.0,0.04,0,193
Create structs Create XML file to,0,7,0.26,0.17,0.04,0.0,1,193
Create encoder to Encode structs,0,7,0.17,0.51,0.0,0.0,1,193
and populate store XML data,0,7,0.26,0.17,0.0,0.0,1,193
encode structs into the XML file,0,7,0.17,0.52,0.0,0.0,1,193
with data,0,7,0.26,0.18,0.0,0.0,1,193
using encoder,0,7,0.17,0.7,0.0,0.03,1,193
Figure 7.6 Create XML with Go by creating structs and encoding them into XML using an encoder,1,7,0.35,0.14,0.03,0.05,0,193
Listing 7.8 Manually encoding Go structs to XML,1,9,0.48,0.17,0.05,0.02,1,193
package main,0,7,0.26,0.14,0.02,0.02,1,193
import (,0,7,0.26,0.14,0.02,0.0,1,193
"""encoding/xml""",0,7,0.26,0.14,0.0,0.0,1,193
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,193
"""os""",0,7,0.26,0.14,0.0,0.0,1,193
),0,7,0.17,0.14,0.0,0.02,0,193
type Post struct {,0,7,0.26,0.14,0.02,0.0,1,193
"XMLName xml.Name `xml:""post""`",0,7,0.26,0.14,0.0,0.0,1,193
"Id      string   `xml:""id,attr""`",0,7,0.26,0.14,0.0,0.0,1,193
"Content string   `xml:""content""`",0,7,0.26,0.14,0.0,0.0,1,193
"Author  Author   `xml:""author""`",0,7,0.26,0.14,0.0,0.0,1,193
},0,7,0.17,0.14,0.0,0.02,0,193
type Author struct {,0,7,0.26,0.14,0.02,0.0,1,193
"Id   string `xml:""id,attr""`",0,7,0.26,0.14,0.0,0.0,1,193
"Name string `xml:"",chardata""`",0,7,0.26,0.14,0.0,0.0,1,193
},0,7,0.17,0.14,0.0,0.01,0,193
Creates struct with data,1,9,0.39,0.52,0.01,0.0,1,193
func main() {,0,7,0.26,0.14,0.0,0.0,1,193
post := Post{,0,7,0.26,0.14,0.0,0.0,1,193
"Id:      ""1"",",0,7,0.26,0.14,0.0,0.0,1,193
"Content: ""Hello World!"",",0,7,0.26,0.14,0.0,0.0,1,193
174,1,9,0.39,0.06,0.0,0.0,0,194
Go web services,1,9,0.39,0.43,0.0,0.0,1,194
C 7,1,7,0.26,0.35,0.0,0.0,0,194
HAPTER,1,6,0.33,0.36,0.0,0.03,1,194
Author: Author{,0,7,0.26,0.13,0.03,0.0,1,194
"Id:   ""2"",",0,7,0.26,0.13,0.0,0.0,1,194
"Name: ""Sau Sheong"",",0,7,0.26,0.13,0.0,0.0,1,194
"},",0,7,0.17,0.13,0.0,0.0,0,194
},0,7,0.17,0.13,0.0,0.0,0,194
Creates XML file,1,9,0.39,0.56,0.0,0.0,1,194
to store data,1,9,0.39,0.56,0.0,0.0,1,194
"xmlFile, err := os.Create(""post.xml"")",0,7,0.26,0.13,0.0,0.0,1,194
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,194
"fmt.Println(""Error creating XML file:"", err)",0,7,0.26,0.13,0.0,0.0,1,194
return,0,7,0.26,0.13,0.0,0.0,1,194
Creates encoder,1,9,0.39,0.56,0.0,0.0,1,194
},0,7,0.17,0.13,0.0,0.0,0,194
with XML file,1,9,0.39,0.56,0.0,0.0,1,194
encoder := xml.NewEncoder(xmlFile),0,7,0.26,0.13,0.0,0.0,1,194
"encoder.Indent("""", ""\t"")",0,7,0.26,0.13,0.0,0.0,1,194
err = encoder.Encode(&post),0,7,0.26,0.13,0.0,0.0,1,194
Encodes struct into file,1,9,0.39,0.6,0.0,0.0,1,194
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,194
"fmt.Println(""Error encoding XML to file:"", err)",0,7,0.26,0.13,0.0,0.0,1,194
return,0,7,0.26,0.13,0.0,0.0,1,194
},0,7,0.17,0.13,0.0,0.0,0,194
},0,7,0.17,0.13,0.0,0.02,0,194
"post struct to be encoded. To write to a file, you need to",0,9,0.21,0.37,0.02,0.0,1,194
"As before, you first create the",0,9,0.3,0.13,0.0,0.0,1,194
create the file using os.Create,0,9,0.3,0.13,0.0,0.0,1,194
. The NewEncoder function creates a new encoder that,0,9,0.21,0.38,0.0,0.0,1,194
"wraps around your file. After setting up the indentation you want, use the encoder’s",0,9,0.21,0.13,0.0,0.0,0,194
"Encode method, passing a reference to the",0,9,0.3,0.13,0.0,0.0,1,194
post struct. This will create the,0,9,0.21,0.49,0.0,0.0,1,194
XML file,0,9,0.21,0.76,0.0,0.0,1,194
post.xml:,0,9,0.3,0.13,0.0,0.01,1,194
"<post id=""1"">",0,7,0.26,0.13,0.01,0.0,1,194
<content>Hello World!</content>,0,7,0.26,0.13,0.0,0.0,1,194
"<author id=""2"">Sau Sheong</author>",0,7,0.26,0.13,0.0,0.0,1,194
</post>,0,7,0.26,0.13,0.0,0.02,1,194
You’re done with parsing and creating,0,9,0.3,0.13,0.02,0.0,1,194
"XML , but note that this chapter discussed only",0,9,0.21,0.45,0.0,0.0,1,194
the basics of parsing and creating,0,9,0.3,0.13,0.0,0.0,1,194
"XML . For more detailed information, see the docu-",0,9,0.21,0.41,0.0,0.0,1,194
mentation or the source code. (It’s not as daunting as it sounds.),0,9,0.3,0.13,0.0,0.02,1,194
7.5 Parsing and creating JSON with Go,1,12,0.54,0.06,0.02,0.01,1,194
JavaScript Serialized Object Notation,0,9,0.3,0.13,0.01,0.0,1,194
"(JSON) is a lightweight, text-based data format",0,9,0.21,0.44,0.0,0.0,1,194
based on JavaScript. The main idea behind,0,9,0.3,0.13,0.0,0.0,1,194
JSON is that it’s easily read by both humans,0,9,0.21,0.48,0.0,0.0,1,194
"and machines. JSON was originally defined by Douglas Crockford, but is currently",0,9,0.21,0.13,0.0,0.0,0,194
"described by RFC 7159 , as well as",0,9,0.3,0.13,0.0,0.0,1,194
ECMA-404 . JSON is popularly used in,0,9,0.21,0.4,0.0,0.0,1,194
REST -based web,0,9,0.21,0.7,0.0,0.0,1,194
"services, although they don’t necessarily need to accept or return",0,9,0.3,0.13,0.0,0.0,1,194
JSON data.,0,9,0.21,0.66,0.0,0.0,1,194
If you’re dealing with REST,0,9,0.3,0.15,0.0,0.0,1,194
"ful web services, you’ll likely encounter",0,9,0.21,0.39,0.0,0.0,1,194
JSON in one,0,9,0.21,0.72,0.0,0.0,1,194
"form or another, either creating or consuming",0,9,0.3,0.13,0.0,0.0,1,194
JSON . Consuming JSON is common-,0,9,0.21,0.53,0.0,0.0,1,194
"place in many web applications, from getting data from a web service, to authenticat-",0,9,0.21,0.13,0.0,0.0,0,194
"ing your web application through a third-party authentication service, to controlling",0,9,0.21,0.13,0.0,0.0,0,194
other services.,0,9,0.3,0.13,0.0,0.0,1,194
Creating JSON is equally common. Go is used in many cases to create web service,0,9,0.21,0.15,0.0,0.0,0,194
"backends for frontend applications, including JavaScript-based frontend applications",0,9,0.21,0.13,0.0,0.0,0,194
running on JavaScript libraries such as React.js and Angular.js. Go is also used to,0,9,0.21,0.13,0.0,0.0,0,194
175,1,9,0.3,0.82,0.0,0.0,0,195
Parsing and creating JSON with Go,1,9,0.39,0.34,0.0,0.03,1,195
create web services for Internet of Things (IoT) and wearables such as smart watches.,0,9,0.21,0.14,0.03,0.0,0,195
"In many of these cases, these frontend applications are developed using",0,9,0.21,0.14,0.0,0.0,0,195
"JSON , and the",0,9,0.21,0.73,0.0,0.0,1,195
most natural way to interact with a backend application is through,0,9,0.3,0.14,0.0,0.0,1,195
JSON .,0,9,0.21,0.69,0.0,0.0,1,195
is from the encoding / json,0,9,0.21,0.61,0.0,0.0,1,195
As with Go’s support for,0,9,0.3,0.17,0.0,0.0,1,195
"XML , Go’s support for JSON",0,9,0.21,0.38,0.0,0.0,1,195
library. As before we’ll look into parsing,0,9,0.3,0.14,0.0,0.0,1,195
"JSON first, and then we’ll see how to create",0,9,0.21,0.48,0.0,0.0,1,195
JSON data.,0,9,0.3,0.14,0.0,0.02,1,195
7.5.1 Parsing JSON,1,10,0.5,0.07,0.02,0.01,1,195
The steps for parsing JSON,0,9,0.3,0.14,0.01,0.0,1,195
data are similar to those for parsing,0,9,0.21,0.37,0.0,0.0,1,195
XML . You parse the,0,9,0.21,0.68,0.0,0.0,1,195
"JSON into structs, from which you can subsequently extract the data. This is normally",0,9,0.21,0.14,0.0,0.0,0,195
how you parse JSON :,0,9,0.3,0.14,0.0,0.01,1,195
Create structs to contain the,0,9,0.3,0.19,0.01,0.0,1,195
JSON data.,0,9,0.21,0.43,0.0,0.0,1,195
1,1,6,0.33,0.17,0.0,0.01,0,195
Use json.Unmarshal to unmarshal the,0,9,0.3,0.19,0.01,0.0,1,195
JSON data into the structs (see,0,9,0.21,0.56,0.0,0.0,1,195
2,1,6,0.33,0.17,0.0,0.01,0,195
figure 7.7).,0,9,0.3,0.19,0.01,0.05,1,195
Figure 7.7 Parse JSON with Go by,1,7,0.35,0.52,0.05,0.0,1,195
Create structs to Unmarshal JSON,0,7,0.17,0.21,0.0,0.0,1,195
store JSON into structs,0,7,0.17,0.23,0.0,0.0,1,195
creating structs and unmarshaling,1,7,0.35,0.52,0.0,0.0,1,195
JSON into the structs.,1,7,0.35,0.52,0.0,0.04,1,195
The rules for mapping the structs to,0,9,0.3,0.14,0.04,0.0,1,195
JSON using struct tags are easier than with,0,9,0.21,0.45,0.0,0.0,1,195
XML .,0,9,0.21,0.8,0.0,0.0,1,195
There is only one common rule for mapping. If you want to store the,0,9,0.3,0.14,0.0,0.0,1,195
"JSON value,",0,9,0.21,0.75,0.0,0.0,1,195
"given the JSON key, you create a field in the struct (with any name) and map it with",0,9,0.21,0.14,0.0,0.0,0,195
"the struct tag `json:"" <name>",1,9,0.48,0.14,0.0,0.0,1,195
"""` , where <name> is the name of the",1,9,0.39,0.38,0.0,0.0,1,195
JSON key. Let’s see,0,9,0.21,0.69,0.0,0.0,1,195
in action.,0,9,0.3,0.14,0.0,0.0,1,195
The following listing shows the,0,9,0.3,0.17,0.0,0.0,1,195
"JSON file, post.json, that you’ll be parsing. The data",0,9,0.21,0.43,0.0,0.0,1,195
in this file should be familiar to you—it’s the same data you used for the,0,9,0.21,0.14,0.0,0.0,0,195
XML parsing.,0,9,0.21,0.73,0.0,0.03,1,195
Listing 7.9 JSON file for parsing,1,9,0.48,0.17,0.03,0.02,1,195
{,0,7,0.17,0.14,0.02,0.0,0,195
"""id"" : 1,",0,7,0.26,0.14,0.0,0.0,1,195
"""content"" : ""Hello World!"",",0,7,0.26,0.14,0.0,0.0,1,195
"""author"" : {",0,7,0.26,0.14,0.0,0.0,1,195
"""id"" : 2,",0,7,0.26,0.14,0.0,0.0,1,195
"""name"" : ""Sau Sheong""",0,7,0.26,0.14,0.0,0.0,1,195
"},",0,7,0.17,0.14,0.0,0.0,0,195
"""comments"" : [",0,7,0.26,0.14,0.0,0.0,1,195
{,0,7,0.17,0.14,0.0,0.0,0,195
"""id"" : 3,",0,7,0.26,0.14,0.0,0.0,1,195
"""content"" : ""Have a great day!"",",0,7,0.26,0.14,0.0,0.0,1,195
"""author"" : ""Adam""",0,7,0.26,0.14,0.0,0.0,1,195
"},",0,7,0.17,0.14,0.0,0.0,0,195
{,0,7,0.17,0.14,0.0,0.0,0,195
"""id"" : 4,",0,7,0.26,0.14,0.0,0.0,1,195
176,1,9,0.39,0.06,0.0,0.0,0,196
Go web services,1,9,0.39,0.43,0.0,0.0,1,196
C 7,1,7,0.26,0.35,0.0,0.0,0,196
HAPTER,1,6,0.33,0.36,0.0,0.03,1,196
"""content"" : ""How are you today?"",",0,7,0.26,0.13,0.03,0.0,1,196
"""author"" : ""Betty""",0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.0,0,196
],0,7,0.17,0.13,0.0,0.0,0,196
},0,7,0.17,0.13,0.0,0.02,0,196
The next listing contains the code that will parse the,0,9,0.3,0.13,0.02,0.0,1,196
"JSON into the respective structs,",0,9,0.21,0.56,0.0,0.0,1,196
in a json.go file. Notice that the structs themselves aren’t different.,0,9,0.21,0.13,0.0,0.03,0,196
Listing 7.10 JSON file for parsing,1,9,0.48,0.15,0.03,0.02,1,196
package main,0,7,0.26,0.13,0.02,0.02,1,196
import (,0,7,0.26,0.13,0.02,0.0,1,196
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,196
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,196
"""io/ioutil""",0,7,0.26,0.13,0.0,0.0,1,196
"""os""",0,7,0.26,0.13,0.0,0.0,1,196
),0,7,0.17,0.13,0.0,0.0,0,196
Defines structs to,1,9,0.39,0.54,0.0,0.0,1,196
represent the data,1,9,0.39,0.54,0.0,0.0,1,196
type Post struct {,0,7,0.26,0.13,0.0,0.0,1,196
"Id       int       `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,196
"Content  string    `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,196
"Author   Author    `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,196
"Comments []Comment `json:""comments""`",0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.02,0,196
type Author struct {,0,7,0.26,0.13,0.02,0.0,1,196
"Id   int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,196
"Name string `json:""name""`",0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.02,0,196
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,196
"Id      int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,196
"Content string `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,196
"Author  string `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.02,0,196
func main() {,0,7,0.26,0.13,0.02,0.0,1,196
"jsonFile, err := os.Open(""post.json"")",0,7,0.26,0.13,0.0,0.0,1,196
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,196
"fmt.Println(""Error opening JSON file:"", err)",0,7,0.26,0.13,0.0,0.0,1,196
return,0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.0,0,196
defer jsonFile.Close(),0,7,0.26,0.13,0.0,0.0,1,196
"jsonData, err := ioutil.ReadAll(jsonFile)",0,7,0.26,0.13,0.0,0.0,1,196
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,196
"fmt.Println(""Error reading JSON data:"", err)",0,7,0.26,0.13,0.0,0.0,1,196
return,0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.01,0,196
Unmarshals JSON data,1,9,0.39,0.54,0.01,0.0,1,196
var post Post,0,7,0.26,0.13,0.0,0.0,1,196
into the struct,1,9,0.39,0.54,0.0,0.0,1,196
"json.Unmarshal(jsonData, &post)",0,7,0.26,0.13,0.0,0.0,1,196
fmt.Println(post),0,7,0.26,0.13,0.0,0.0,1,196
},0,7,0.17,0.13,0.0,0.0,0,196
177,1,9,0.3,0.82,0.0,0.0,0,197
Parsing and creating JSON with Go,1,9,0.39,0.34,0.0,0.03,1,197
id to the Post struct’s Id,0,9,0.21,0.45,0.03,0.0,1,197
You want to map the value of the key,0,9,0.3,0.14,0.0,0.0,1,197
"field, so we append the",0,9,0.21,0.65,0.0,0.0,1,197
"struct tag `json:""id""` after the field. This is pretty much what you need to do to map",0,9,0.21,0.14,0.0,0.0,0,197
the structs to the JSON data. Notice that you nest the structs (a post can have zero or,0,9,0.21,0.14,0.0,0.0,0,197
more comments) through slices. As before in,0,9,0.3,0.14,0.0,0.0,1,197
"XML parsing, unmarshaling is done with",0,9,0.21,0.51,0.0,0.0,1,197
a single line of code—simply a function call.,0,9,0.3,0.14,0.0,0.0,1,197
Let’s run our JSON parsing code and see the results. Run this at the console:,0,9,0.21,0.17,0.0,0.01,0,197
go run json.go,0,7,0.26,0.14,0.01,0.01,1,197
You should see the following results:,0,9,0.3,0.14,0.01,0.01,1,197
{1 Hello World! {2 Sau Sheong} [{3 Have a great day! Adam} {4 How are you,0,7,0.17,0.14,0.01,0.0,0,197
today? Betty}]},0,7,0.26,0.19,0.0,0.01,1,197
Unmarshal function. As in,0,9,0.21,0.45,0.01,0.0,1,197
We looked at unmarshaling using the,0,9,0.3,0.14,0.0,0.0,1,197
"XML parsing, you can",0,9,0.21,0.67,0.0,0.0,1,197
also use Decoder to manually decode,0,9,0.3,0.14,0.0,0.0,1,197
JSON into the structs for streaming,0,9,0.21,0.46,0.0,0.0,1,197
JSON data.,0,9,0.21,0.76,0.0,0.0,1,197
This is shown in figure 7.8 and listing 7.11.,0,9,0.3,0.14,0.0,0.04,1,197
Create decoder Iterate through,0,7,0.17,0.34,0.04,0.0,1,197
Create structs to for decoding,0,7,0.26,0.16,0.0,0.0,1,197
JSON and decode,0,7,0.17,0.51,0.0,0.0,1,197
store JSON JSON,0,7,0.26,0.17,0.0,0.0,1,197
into structs,0,7,0.17,0.53,0.0,0.03,1,197
Figure 7.8 Parse XML with Go by decoding JSON into structs,1,7,0.44,0.14,0.03,0.04,1,197
Decoder,1,9,0.39,0.43,0.04,0.0,1,197
Listing 7.11 Parsing JSON using,1,9,0.48,0.17,0.0,0.02,1,197
"jsonFile, err := os.Open(""post.json"")",0,7,0.26,0.14,0.02,0.0,1,197
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,197
"fmt.Println(""Error opening JSON file:"", err)",0,7,0.26,0.14,0.0,0.0,1,197
return,0,7,0.26,0.14,0.0,0.0,1,197
},0,7,0.17,0.14,0.0,0.0,0,197
defer jsonFile.Close(),0,7,0.26,0.14,0.0,0.0,1,197
Creates decoder from JSON data,1,9,0.39,0.67,0.0,0.0,1,197
decoder := json.NewDecoder(jsonFile),0,7,0.26,0.14,0.0,0.0,1,197
for {,0,7,0.26,0.14,0.0,0.0,1,197
Iterates until EOF,1,9,0.39,0.54,0.0,0.0,1,197
var post Post,0,7,0.26,0.14,0.0,0.0,1,197
is detected,1,9,0.39,0.54,0.0,0.0,1,197
err := decoder.Decode(&post),0,7,0.26,0.14,0.0,0.0,1,197
Decodes,1,9,0.48,0.04,0.0,0.0,1,197
if err == io.EOF {,0,7,0.26,0.14,0.0,0.0,1,197
JSON data,1,9,0.48,0.03,0.0,0.0,1,197
break,0,7,0.26,0.14,0.0,0.0,1,197
into struct,1,9,0.48,0.02,0.0,0.0,1,197
},0,7,0.17,0.14,0.0,0.0,0,197
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,197
"fmt.Println(""Error decoding JSON:"", err)",0,7,0.26,0.14,0.0,0.0,1,197
return,0,7,0.26,0.14,0.0,0.0,1,197
},0,7,0.17,0.14,0.0,0.0,0,197
fmt.Println(post),0,7,0.26,0.14,0.0,0.0,1,197
},0,7,0.17,0.14,0.0,0.02,0,197
Here you use NewDecoder,0,9,0.3,0.14,0.02,0.0,1,197
", passing in an io.Reader",0,9,0.21,0.35,0.0,0.0,1,197
"containing the JSON data, to cre-",0,9,0.21,0.57,0.0,0.0,1,197
Decode,0,9,0.21,0.79,0.0,0.0,1,197
ate a new decoder. When a reference to the post struct is passed into the,0,9,0.21,0.14,0.0,0.0,0,197
"method, the struct will be populated with the data and will be ready for use. Once the",0,9,0.21,0.14,0.0,0.0,0,197
178,1,9,0.39,0.06,0.0,0.0,0,198
Go web services,1,9,0.39,0.43,0.0,0.0,1,198
C 7,1,7,0.26,0.35,0.0,0.0,0,198
HAPTER,1,6,0.33,0.36,0.0,0.03,1,198
"data runs out, the Decode",0,9,0.3,0.13,0.03,0.0,1,198
"method returns an EOF , which you can check and then exit",0,9,0.21,0.34,0.0,0.0,1,198
the loop.,0,9,0.3,0.13,0.0,0.0,1,198
Let’s run our JSON decoder and see the results. Run this at the console:,0,9,0.21,0.15,0.0,0.01,0,198
go run json.go,0,7,0.26,0.13,0.01,0.01,1,198
You should see the following results.,0,9,0.3,0.13,0.01,0.01,1,198
{1 Hello World! {2 Sau Sheong} [{1 Have a great day! Adam} {2 How are you,0,7,0.17,0.13,0.01,0.0,0,198
➥,0,10,0.23,0.13,0.0,0.0,0,198
today? Betty}]},0,7,0.26,0.15,0.0,0.02,1,198
So when do we use Decoder,0,9,0.3,0.13,0.02,0.0,1,198
versus Unmarshal ? That depends on the input. If your,0,9,0.21,0.37,0.0,0.0,1,198
"io.Reader stream, like the",0,9,0.21,0.34,0.0,0.0,1,198
Body of an http.Request,0,9,0.21,0.57,0.0,0.0,1,198
data is coming from an,0,9,0.3,0.13,0.0,0.0,1,198
", use",0,9,0.21,0.79,0.0,0.0,1,198
"Decoder . If you have the data in a string or somewhere in memory, use",0,9,0.3,0.13,0.0,0.0,1,198
Unmarshal .,0,9,0.21,0.7,0.0,0.02,1,198
7.5.2 Creating JSON,1,10,0.5,0.06,0.02,0.01,1,198
We just went through parsing,0,9,0.3,0.13,0.01,0.0,1,198
"JSON , which as you can see, is very similar to parsing",0,9,0.21,0.38,0.0,0.0,1,198
XML . Creating JSON is also is similar to creating,0,9,0.3,0.13,0.0,0.0,1,198
XML (see figure 7.9).,0,9,0.21,0.52,0.0,0.05,1,198
Create structs Marshall structs,0,7,0.26,0.15,0.05,0.0,1,198
and populate into JSON data,0,7,0.26,0.15,0.0,0.0,1,198
Figure 7.9 Create JSON with Go by creating structs,1,7,0.35,0.46,0.0,0.0,1,198
with data,0,7,0.26,0.16,0.0,0.0,1,198
and marshaling them into JSON data.,1,7,0.35,0.46,0.0,0.04,1,198
This listing contains the code for marshaling the Go structs to,0,9,0.3,0.13,0.04,0.0,1,198
JSON .,0,9,0.21,0.64,0.0,0.03,1,198
Listing 7.12 Marshaling structs to JSON,1,9,0.48,0.15,0.03,0.02,1,198
package main,0,7,0.26,0.13,0.02,0.02,1,198
import (,0,7,0.26,0.13,0.02,0.0,1,198
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,198
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,198
"""io/ioutil""",0,7,0.26,0.13,0.0,0.0,1,198
),0,7,0.17,0.13,0.0,0.0,0,198
Creates struct,1,9,0.39,0.54,0.0,0.0,1,198
with data,1,9,0.39,0.54,0.0,0.0,1,198
type Post struct {,0,7,0.26,0.13,0.0,0.0,1,198
"Id       int       `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,198
"Content  string    `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,198
"Author   Author    `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,198
"Comments []Comment `json:""comments""`",0,7,0.26,0.13,0.0,0.0,1,198
},0,7,0.17,0.13,0.0,0.02,0,198
type Author struct {,0,7,0.26,0.13,0.02,0.0,1,198
"Id   int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,198
"Name string `json:""name""`",0,7,0.26,0.13,0.0,0.0,1,198
},0,7,0.17,0.13,0.0,0.02,0,198
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,198
"Id      int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,198
179,1,9,0.3,0.82,0.0,0.0,0,199
Parsing and creating JSON with Go,1,9,0.39,0.34,0.0,0.03,1,199
"Content string `json:""content""`",0,7,0.26,0.14,0.03,0.0,1,199
"Author  string `json:""author""`",0,7,0.26,0.14,0.0,0.0,1,199
},0,7,0.17,0.14,0.0,0.02,0,199
func main() {,0,7,0.26,0.14,0.02,0.0,1,199
post := Post{,0,7,0.26,0.14,0.0,0.0,1,199
"Id:      1,",0,7,0.26,0.14,0.0,0.0,1,199
"Content: ""Hello World!"",",0,7,0.26,0.14,0.0,0.0,1,199
Author: Author{,0,7,0.26,0.14,0.0,0.0,1,199
"Id:   2,",0,7,0.26,0.14,0.0,0.0,1,199
"Name: ""Sau Sheong"",",0,7,0.26,0.14,0.0,0.0,1,199
"},",0,7,0.17,0.14,0.0,0.0,0,199
Comments: []Comment{,0,7,0.26,0.14,0.0,0.0,1,199
Comment{,0,7,0.26,0.14,0.0,0.0,1,199
"Id:      3,",0,7,0.26,0.14,0.0,0.0,1,199
"Content: ""Have a great day!"",",0,7,0.26,0.14,0.0,0.0,1,199
"Author:  ""Adam"",",0,7,0.26,0.14,0.0,0.0,1,199
"},",0,7,0.17,0.14,0.0,0.0,0,199
Comment{,0,7,0.26,0.14,0.0,0.0,1,199
"Id:      4,",0,7,0.26,0.14,0.0,0.0,1,199
"Content: ""How are you today?"",",0,7,0.26,0.14,0.0,0.0,1,199
"Author:  ""Betty"",",0,7,0.26,0.14,0.0,0.0,1,199
"},",0,7,0.17,0.14,0.0,0.0,0,199
"},",0,7,0.17,0.14,0.0,0.0,0,199
},0,7,0.17,0.14,0.0,0.0,0,199
Marshals struct to byte,1,9,0.39,0.71,0.0,0.0,1,199
slice of JSON data,1,9,0.39,0.71,0.0,0.0,1,199
"output, err := json.MarshalIndent(&post, """", ""\t\t"")",0,7,0.26,0.14,0.0,0.0,1,199
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,199
"fmt.Println(""Error marshalling to JSON:"", err)",0,7,0.26,0.14,0.0,0.0,1,199
return,0,7,0.26,0.14,0.0,0.0,1,199
},0,7,0.17,0.14,0.0,0.0,0,199
"err = ioutil.WriteFile(""post.json"", output, 0644)",0,7,0.26,0.14,0.0,0.0,1,199
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,199
"fmt.Println(""Error writing JSON to file:"", err)",0,7,0.26,0.14,0.0,0.0,1,199
return,0,7,0.26,0.14,0.0,0.0,1,199
},0,7,0.17,0.14,0.0,0.0,0,199
},0,7,0.17,0.14,0.0,0.02,0,199
"As before, the structs are the same as when you’re parsing",0,9,0.3,0.14,0.02,0.0,1,199
"JSON . First, you create the",0,9,0.21,0.63,0.0,0.0,1,199
MarshalIndent function (which works the same way as the,0,9,0.21,0.35,0.0,0.0,1,199
struct. Then you call the,0,9,0.3,0.14,0.0,0.0,1,199
one in the xml library) to create the,0,9,0.3,0.14,0.0,0.0,1,199
JSON data in a slice of bytes. You can then save the,0,9,0.21,0.44,0.0,0.0,1,199
output to file if you want to.,0,9,0.3,0.14,0.0,0.0,1,199
"Finally, as in creating XML",0,9,0.3,0.17,0.0,0.0,1,199
", you can create JSON manually from the Go structs",0,9,0.21,0.4,0.0,0.0,1,199
"using an encoder, shown in figure 7.10.",0,9,0.3,0.14,0.0,0.05,1,199
Create structs Create JSON,0,7,0.26,0.16,0.05,0.0,1,199
Create encoder Encode structs,0,7,0.17,0.51,0.0,0.0,1,199
and populate file to store,0,7,0.26,0.17,0.0,0.0,1,199
to encode into the XML file,0,7,0.17,0.53,0.0,0.0,1,199
with data JSON data,0,7,0.26,0.18,0.0,0.0,1,199
JSON using encoder,0,7,0.17,0.54,0.0,0.03,1,199
Figure 7.10 Create JSON with Go by creating structs and encoding them into JSON using an,1,7,0.35,0.14,0.03,0.0,0,199
encoder.,1,7,0.44,0.14,0.0,0.0,1,199
180,1,9,0.39,0.06,0.0,0.0,0,200
Go web services,1,9,0.39,0.43,0.0,0.0,1,200
C 7,1,7,0.26,0.35,0.0,0.0,0,200
HAPTER,1,6,0.33,0.36,0.0,0.03,1,200
"The code in this listing, also in json.go, will generate",0,9,0.3,0.13,0.03,0.0,1,200
JSON from the Go structs.,0,9,0.21,0.56,0.0,0.03,1,200
Encoder,1,9,0.39,0.51,0.03,0.0,1,200
Listing 7.13 Creating JSON from structs using,1,9,0.48,0.15,0.0,0.02,1,200
package main,0,7,0.26,0.13,0.02,0.02,1,200
import (,0,7,0.26,0.13,0.02,0.0,1,200
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,200
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,200
"""io""",0,7,0.26,0.13,0.0,0.0,1,200
"""os""",0,7,0.26,0.13,0.0,0.0,1,200
),0,7,0.17,0.13,0.0,0.0,0,200
Creates struct with data,1,9,0.39,0.51,0.0,0.0,1,200
type Post struct {,0,7,0.26,0.13,0.0,0.0,1,200
"Id       int       `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,200
"Content  string    `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,200
"Author   Author    `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,200
"Comments []Comment `json:""comments""`",0,7,0.26,0.13,0.0,0.0,1,200
},0,7,0.17,0.13,0.0,0.02,0,200
type Author struct {,0,7,0.26,0.13,0.02,0.0,1,200
"Id   int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,200
"Name string `json:""name""`",0,7,0.26,0.13,0.0,0.0,1,200
},0,7,0.17,0.13,0.0,0.02,0,200
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,200
"Id      int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,200
"Content string `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,200
"Author  string `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,200
},0,7,0.17,0.13,0.0,0.02,0,200
func main() {,0,7,0.26,0.13,0.02,0.02,1,200
post := Post{,0,7,0.26,0.13,0.02,0.0,1,200
"Id:      1,",0,7,0.26,0.13,0.0,0.0,1,200
"Content: ""Hello World!"",",0,7,0.26,0.13,0.0,0.0,1,200
Author: Author{,0,7,0.26,0.13,0.0,0.0,1,200
"Id:   2,",0,7,0.26,0.13,0.0,0.0,1,200
"Name: ""Sau Sheong"",",0,7,0.26,0.13,0.0,0.0,1,200
"},",0,7,0.17,0.13,0.0,0.0,0,200
Comments: []Comment{,0,7,0.26,0.13,0.0,0.0,1,200
Comment{,0,7,0.26,0.13,0.0,0.0,1,200
"Id:      3,",0,7,0.26,0.13,0.0,0.0,1,200
"Content: ""Have a great day!"",",0,7,0.26,0.13,0.0,0.0,1,200
"Author:  ""Adam"",",0,7,0.26,0.13,0.0,0.0,1,200
"},",0,7,0.17,0.13,0.0,0.0,0,200
Comment{,0,7,0.26,0.13,0.0,0.0,1,200
"Id:      4,",0,7,0.26,0.13,0.0,0.0,1,200
"Content: ""How are you today?"",",0,7,0.26,0.13,0.0,0.0,1,200
"Author:  ""Betty"",",0,7,0.26,0.13,0.0,0.0,1,200
"},",0,7,0.17,0.13,0.0,0.0,0,200
"},",0,7,0.17,0.13,0.0,0.0,0,200
},0,7,0.17,0.13,0.0,0.0,0,200
181,1,9,0.3,0.82,0.0,0.0,0,201
Creating Go web services,1,9,0.39,0.37,0.0,0.03,1,201
"jsonFile, err := os.Create(""post.json"")",0,7,0.26,0.14,0.03,0.0,1,201
Creates JSON file,1,9,0.39,0.67,0.0,0.0,1,201
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,201
to store data,1,9,0.39,0.67,0.0,0.0,1,201
"fmt.Println(""Error creating JSON file:"", err)",0,7,0.26,0.14,0.0,0.0,1,201
return,0,7,0.26,0.14,0.0,0.0,1,201
},0,7,0.17,0.14,0.0,0.0,0,201
encoder := json.NewEncoder(jsonFile),0,7,0.26,0.14,0.0,0.0,1,201
Creates encoder,1,9,0.39,0.67,0.0,0.0,1,201
err = encoder.Encode(&post),0,7,0.26,0.14,0.0,0.0,1,201
with JSON file,1,9,0.39,0.67,0.0,0.0,1,201
Encodes,1,9,0.48,0.04,0.0,0.0,1,201
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,201
struct,1,9,0.48,0.05,0.0,0.0,1,201
"fmt.Println(""Error encoding JSON to file:"", err)",0,7,0.26,0.14,0.0,0.0,1,201
into file,1,9,0.48,0.04,0.0,0.0,1,201
return,0,7,0.26,0.14,0.0,0.0,1,201
},0,7,0.17,0.14,0.0,0.0,0,201
},0,7,0.17,0.14,0.0,0.02,0,201
"As before, you create a JSON",0,9,0.3,0.14,0.02,0.0,1,201
file to store the JSON that’s generated. You use this file to,0,9,0.21,0.37,0.0,0.0,1,201
NewEncoder function. Then you call the,0,9,0.21,0.38,0.0,0.0,1,201
Encode method,0,9,0.21,0.71,0.0,0.0,1,201
create an encoder using the,0,9,0.3,0.14,0.0,0.0,1,201
post struct. This will extract the data,0,9,0.21,0.53,0.0,0.0,1,201
on the encoder and pass it a reference to the,0,9,0.3,0.14,0.0,0.0,1,201
from the struct and create,0,9,0.3,0.14,0.0,0.0,1,201
"JSON data, which is then written to the writer you passed in",0,9,0.21,0.36,0.0,0.0,1,201
earlier.,0,9,0.3,0.14,0.0,0.0,1,201
This wraps up the sections on parsing and creating,0,9,0.3,0.17,0.0,0.0,1,201
XML and JSON . Going through,0,9,0.21,0.59,0.0,0.0,1,201
"these sections seems like plodding through similar patterns, but it provides you with",0,9,0.21,0.14,0.0,0.0,0,201
"the grounding you need for the next section, where you’ll create a Go web service.",0,9,0.21,0.14,0.0,0.02,0,201
7.6 Creating Go web services,1,12,0.54,0.07,0.02,0.01,1,201
Creating a Go web service is relatively pain-free. If you’ve arrived here after going,0,9,0.21,0.14,0.01,0.0,0,201
"through the earlier chapters and the earlier sections in this chapter, the rest should",0,9,0.21,0.14,0.0,0.0,0,201
just click and lightbulbs should start flickering on.,0,9,0.3,0.14,0.0,0.0,1,201
You’re going to build a simple,0,9,0.3,0.17,0.0,0.0,1,201
"REST -based web service that allows you to create,",0,9,0.21,0.43,0.0,0.0,1,201
"retrieve, update, and retrieve forum posts. Another way of looking at it is you’re wrap-",0,9,0.21,0.14,0.0,0.0,0,201
ping a web service interface over the,0,9,0.3,0.14,0.0,0.0,1,201
CRUD functions you built in chapter 6. You’ll be,0,9,0.21,0.45,0.0,0.0,1,201
using JSON as the data transport format. This simple web service will be reused to,0,9,0.21,0.14,0.0,0.0,0,201
explain other concepts in the following chapters.,0,9,0.3,0.14,0.0,0.0,1,201
"First, let’s look at the database operations that you’ll need. Essentially you’re going",0,9,0.21,0.17,0.0,0.0,0,201
to reuse—but simplify—the code from section 6.4. The code you need is placed in a,0,9,0.21,0.14,0.0,0.0,0,201
with the package name main,0,9,0.21,0.56,0.0,0.0,1,201
"file named data.go, shown in the following listing,",0,9,0.3,0.14,0.0,0.0,1,201
. The,0,9,0.21,0.8,0.0,0.0,1,201
code isolates what you need to do with the database.,0,9,0.3,0.14,0.0,0.03,1,201
Listing 7.14 Accessing the database with data.go,1,9,0.48,0.17,0.03,0.02,1,201
package main,0,7,0.26,0.14,0.02,0.02,1,201
import (,0,7,0.26,0.14,0.02,0.0,1,201
"""database/sql""",0,7,0.26,0.14,0.0,0.0,1,201
"_ ""github.com/lib/pq""",0,7,0.26,0.14,0.0,0.0,1,201
),0,7,0.17,0.14,0.0,0.02,0,201
var Db *sql.DB,0,7,0.26,0.14,0.02,0.01,1,201
Connects to the Db,1,9,0.39,0.53,0.01,0.0,1,201
func init() {,0,7,0.26,0.14,0.0,0.0,1,201
182,1,9,0.39,0.06,0.0,0.0,0,202
Go web services,1,9,0.39,0.43,0.0,0.0,1,202
C 7,1,7,0.26,0.35,0.0,0.0,0,202
HAPTER,1,6,0.33,0.36,0.0,0.03,1,202
var err error,0,7,0.26,0.13,0.03,0.0,1,202
"Db, err = sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp ssl-",0,7,0.26,0.13,0.0,0.0,1,202
"mode=disable"")",0,7,0.26,0.15,0.0,0.0,1,202
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,202
panic(err),0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.0,0,202
},0,7,0.17,0.13,0.0,0.01,0,202
Gets a single post,1,9,0.39,0.63,0.01,0.0,1,202
"func retrieve(id int) (post Post, err error) {",0,7,0.26,0.13,0.0,0.0,1,202
post = Post{},0,7,0.26,0.13,0.0,0.0,1,202
"err = Db.QueryRow(""select id, content, author from posts where id = $1"",",0,7,0.17,0.13,0.0,0.0,0,202
"id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.15,0.0,0.0,1,202
return,0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.0,0,202
Creates a new post,1,9,0.39,0.63,0.0,0.01,1,202
func (post *Post) create() (err error) {,0,7,0.26,0.13,0.01,0.0,1,202
"statement := ""insert into posts (content, author) values ($1, $2) return-",0,7,0.17,0.13,0.0,0.0,0,202
"ing id""",0,7,0.26,0.15,0.0,0.0,1,202
"stmt, err := Db.Prepare(statement)",0,7,0.26,0.13,0.0,0.0,1,202
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,202
return,0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.0,0,202
defer stmt.Close(),0,7,0.26,0.13,0.0,0.0,1,202
"err = stmt.QueryRow(post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.13,0.0,0.0,1,202
return,0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.02,0,202
func (post *Post) update() (err error) {,0,7,0.26,0.13,0.02,0.0,1,202
Updates,1,9,0.48,0.02,0.0,0.0,1,202
"_, err = Db.Exec(""update posts set content = $2, author = $3 where id =",0,7,0.17,0.13,0.0,0.0,0,202
a post,1,9,0.48,0.04,0.0,0.0,1,202
"$1"", post.Id, post.Content, post.Author)",0,7,0.26,0.15,0.0,0.0,1,202
return,0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.0,0,202
Deletes a post,1,9,0.39,0.7,0.0,0.01,1,202
func (post *Post) delete() (err error) {,0,7,0.26,0.13,0.01,0.0,1,202
"_, err = Db.Exec(""delete from posts where id = $1"", post.Id)",0,7,0.26,0.13,0.0,0.0,1,202
return,0,7,0.26,0.13,0.0,0.0,1,202
},0,7,0.17,0.13,0.0,0.02,0,202
"As you can see, the code is similar to that of listing 6.6, with slightly different function",0,9,0.21,0.13,0.02,0.0,0,202
"and method names, so we won’t go through it again. If you need a refresher, please",0,9,0.21,0.13,0.0,0.0,0,202
flip back to section 6.4.,0,9,0.3,0.13,0.0,0.0,1,202
Now that you can do CRUD,0,9,0.3,0.15,0.0,0.0,1,202
"on the database, let’s turn to the actual web service.",0,9,0.21,0.38,0.0,0.0,1,202
The next listing shows the entire web service in a server.go file.,0,9,0.3,0.13,0.0,0.03,1,202
Listing 7.15 Go web service in server.go,1,9,0.48,0.15,0.03,0.02,1,202
package main,0,7,0.26,0.13,0.02,0.02,1,202
import (,0,7,0.26,0.13,0.02,0.0,1,202
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,202
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,202
"""path""",0,7,0.26,0.13,0.0,0.0,1,202
"""strconv""",0,7,0.26,0.13,0.0,0.0,1,202
),0,7,0.17,0.13,0.0,0.0,0,202
183,1,9,0.3,0.82,0.0,0.0,0,203
Creating Go web services,1,9,0.39,0.37,0.0,0.03,1,203
type Post struct {,0,7,0.26,0.14,0.03,0.0,1,203
"Id      int    `json:""id""`",0,7,0.26,0.14,0.0,0.0,1,203
"Content string `json:""content""`",0,7,0.26,0.14,0.0,0.0,1,203
"Author  string `json:""author""`",0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.02,0,203
func main() {,0,7,0.26,0.14,0.02,0.0,1,203
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,203
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
"http.HandleFunc(""/post/"", handleRequest)",0,7,0.26,0.14,0.0,0.0,1,203
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,203
Handler function to,1,9,0.39,0.75,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
multiplex request to,1,9,0.39,0.75,0.0,0.0,1,203
the correct function,1,9,0.39,0.75,0.0,0.0,1,203
"func handleRequest(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.0,0.0,1,203
var err error,0,7,0.26,0.14,0.0,0.0,1,203
switch r.Method {,0,7,0.26,0.14,0.0,0.0,1,203
"case ""GET"":",0,7,0.26,0.14,0.0,0.0,1,203
"err = handleGet(w, r)",0,7,0.26,0.14,0.0,0.0,1,203
"case ""POST"":",0,7,0.26,0.14,0.0,0.0,1,203
"err = handlePost(w, r)",0,7,0.26,0.14,0.0,0.0,1,203
"case ""PUT"":",0,7,0.26,0.14,0.0,0.0,1,203
"err = handlePut(w, r)",0,7,0.26,0.14,0.0,0.0,1,203
"case ""DELETE"":",0,7,0.26,0.14,0.0,0.0,1,203
"err = handleDelete(w, r)",0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,203
"http.Error(w, err.Error(), http.StatusInternalServerError)",0,7,0.26,0.14,0.0,0.0,1,203
return,0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
},0,7,0.17,0.14,0.0,0.02,0,203
"func handleGet(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.14,0.02,0.0,1,203
Retrieves,1,9,0.48,0.03,0.0,0.0,1,203
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.14,0.0,0.0,1,203
post,1,9,0.48,0.06,0.0,0.0,1,203
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,203
return,0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
"post, err := retrieve(id)",0,7,0.26,0.14,0.0,0.0,1,203
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,203
return,0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
"output, err := json.MarshalIndent(&post, """", ""\t\t"")",0,7,0.26,0.14,0.0,0.0,1,203
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,203
return,0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.0,0,203
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.14,0.0,0.0,1,203
w.Write(output),0,7,0.26,0.14,0.0,0.0,1,203
return,0,7,0.26,0.14,0.0,0.0,1,203
},0,7,0.17,0.14,0.0,0.02,0,203
"func handlePost(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.14,0.02,0.0,1,203
Creates,1,9,0.48,0.04,0.0,0.0,1,203
len := r.ContentLength,0,7,0.26,0.14,0.0,0.0,1,203
post,1,9,0.48,0.06,0.0,0.0,1,203
"body := make([]byte, len)",0,7,0.26,0.14,0.0,0.0,1,203
r.Body.Read(body),0,7,0.26,0.14,0.0,0.0,1,203
var post Post,0,7,0.26,0.14,0.0,0.0,1,203
184,1,9,0.39,0.06,0.0,0.0,0,204
Go web services,1,9,0.39,0.43,0.0,0.0,1,204
C 7,1,7,0.26,0.35,0.0,0.0,0,204
HAPTER,1,6,0.33,0.36,0.0,0.03,1,204
"json.Unmarshal(body, &post)",0,7,0.26,0.13,0.03,0.0,1,204
err = post.create(),0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
w.WriteHeader(200),0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.02,0,204
"func handlePut(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.02,0.0,1,204
Updates post,1,9,0.39,0.8,0.0,0.0,1,204
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
len := r.ContentLength,0,7,0.26,0.13,0.0,0.0,1,204
"body := make([]byte, len)",0,7,0.26,0.13,0.0,0.0,1,204
r.Body.Read(body),0,7,0.26,0.13,0.0,0.0,1,204
"json.Unmarshal(body, &post)",0,7,0.26,0.13,0.0,0.0,1,204
err = post.update(),0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
w.WriteHeader(200),0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.02,0,204
"func handleDelete(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.17,0.13,0.02,0.0,0,204
Deletes,1,9,0.48,0.02,0.0,0.0,1,204
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,204
post,1,9,0.48,0.04,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
err = post.delete(),0,7,0.26,0.13,0.0,0.0,1,204
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.0,0,204
w.WriteHeader(200),0,7,0.26,0.13,0.0,0.0,1,204
return,0,7,0.26,0.13,0.0,0.0,1,204
},0,7,0.17,0.13,0.0,0.02,0,204
The structure of the code is straightforward. You use a single handler function called,0,9,0.21,0.13,0.02,0.0,0,204
handleRequest that will multiplex to different,0,9,0.3,0.13,0.0,0.0,1,204
CRUD functions according to the,0,9,0.21,0.54,0.0,0.0,1,204
ResponseWriter and a,0,9,0.21,0.64,0.0,0.0,1,204
method that was used. Each of the called functions takes in a,0,9,0.3,0.13,0.0,0.0,1,204
"Request while returning an error, if any. The",0,9,0.3,0.13,0.0,0.0,1,204
handleRequest handler function will,0,9,0.21,0.52,0.0,0.0,1,204
"also take care of any errors that are floated up from the request, and throw a 500 sta-",0,9,0.21,0.13,0.0,0.0,0,204
tus code ( StatusInternalServerError,0,9,0.3,0.13,0.0,0.0,1,204
") with the error description, if there’s an error.",0,9,0.21,0.45,0.0,0.0,1,204
185,1,9,0.3,0.82,0.0,0.0,0,205
Creating Go web services,1,9,0.39,0.37,0.0,0.03,1,205
"Let’s delve into the details and start by creating a post, shown in this listing.",0,9,0.21,0.17,0.03,0.03,0,205
Listing 7.16 Function that creates a post,1,9,0.48,0.17,0.03,0.02,1,205
"func handlePost(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.14,0.02,0.0,1,205
len := r.ContentLength,0,7,0.26,0.14,0.0,0.0,1,205
Reads request,1,9,0.39,0.49,0.0,0.0,1,205
"body := make([]byte, len)",0,7,0.26,0.14,0.0,0.0,1,205
Creates,1,9,0.48,0.04,0.0,0.0,1,205
body into slice,1,9,0.39,0.49,0.0,0.0,1,205
r.Body.Read(body),0,7,0.26,0.14,0.0,0.0,1,205
slice,1,9,0.48,0.06,0.0,0.0,1,205
Unmarshals slice,1,9,0.39,0.63,0.0,0.0,1,205
var post Post,0,7,0.26,0.14,0.0,0.0,1,205
of bytes,1,9,0.48,0.04,0.0,0.0,1,205
into Post struct,1,9,0.39,0.63,0.0,0.0,1,205
"json.Unmarshal(body, &post)",0,7,0.26,0.14,0.0,0.0,1,205
err = post.create(),0,7,0.26,0.14,0.0,0.0,1,205
Creates database,1,9,0.39,0.47,0.0,0.0,1,205
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,205
record,1,9,0.39,0.47,0.0,0.0,1,205
return,0,7,0.26,0.14,0.0,0.0,1,205
},0,7,0.17,0.14,0.0,0.0,0,205
w.WriteHeader(200),0,7,0.26,0.14,0.0,0.0,1,205
return,0,7,0.26,0.14,0.0,0.0,1,205
},0,7,0.17,0.14,0.0,0.02,0,205
"First, you create a slice of bytes with the correct content length size, and read the con-",0,9,0.21,0.14,0.02,0.0,0,205
Post struct and,0,9,0.21,0.72,0.0,0.0,1,205
tents of the body (which is a,0,9,0.3,0.14,0.0,0.0,1,205
"JSON string) into it. Next, you declare a",0,9,0.21,0.38,0.0,0.0,1,205
Post struct with the fields popu-,0,9,0.21,0.58,0.0,0.0,1,205
unmarshal the content into it. Now that you have a,0,9,0.3,0.14,0.0,0.0,1,205
"lated, you call the create",0,9,0.3,0.14,0.0,0.0,1,205
method on it to save it to the database.,0,9,0.21,0.35,0.0,0.0,1,205
"To call the web service, you’ll be using c",0,9,0.3,0.17,0.0,0.0,1,205
URL (see chapter 3). Run this command,0,9,0.21,0.51,0.0,0.0,1,205
on the console:,0,9,0.3,0.14,0.0,0.01,1,205
"curl -i -X POST -H ""Content-Type: application/json""  -d '{""content"":""My",0,7,0.17,0.14,0.01,0.0,0,205
"[CA} first post"",""author"":""Sau Sheong""}' http://127.0.0.1:8080/post/",0,7,0.26,0.14,0.0,0.02,1,205
You’re using the POST method and setting the,0,9,0.3,0.14,0.02,0.0,1,205
Content-Type header to,0,9,0.21,0.52,0.0,0.0,1,205
application/,0,9,0.21,0.73,0.0,0.01,1,205
json . A JSON string request body is sent to the,0,9,0.3,0.14,0.01,0.0,1,205
URL http://127.0.0.1/post/,0,9,0.21,0.57,0.0,0.0,1,205
. You,0,9,0.21,0.8,0.0,0.0,1,205
should see something like this:,0,9,0.3,0.14,0.0,0.01,1,205
HTTP/1.1 200 OK,0,7,0.26,0.14,0.01,0.0,1,205
"Date: Sun, 12 Apr 2015 13:32:14 GMT",0,7,0.26,0.14,0.0,0.0,1,205
Content-Length: 0,0,7,0.26,0.14,0.0,0.0,1,205
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.14,0.0,0.02,1,205
This doesn’t tell us anything except that the handler function didn’t encounter any,0,9,0.21,0.14,0.02,0.0,0,205
errors. Let’s peek into the database by running this single line,0,9,0.3,0.14,0.0,0.0,1,205
SQL query from the,0,9,0.21,0.68,0.0,0.0,1,205
console:,0,9,0.3,0.14,0.0,0.01,1,205
"psql -U gwp -d gwp -c ""select * from posts;""",0,7,0.26,0.14,0.01,0.01,1,205
You should see this:,0,9,0.3,0.14,0.01,0.01,1,205
id |    content    |   author,0,7,0.26,0.14,0.01,0.0,1,205
----+---------------+------------,0,7,0.26,0.14,0.0,0.0,1,205
1 | My first post | Sau Sheong,0,7,0.26,0.14,0.0,0.0,1,205
(1 row),0,7,0.26,0.14,0.0,0.02,1,205
"postPost ),",0,9,0.21,0.75,0.02,0.0,1,205
"In each of the handler functions (except for the create handler function,",0,9,0.21,0.14,0.0,0.0,0,205
"id to the targeted post. For example, when",0,9,0.21,0.47,0.0,0.0,1,205
you assume the URL will contain the,0,9,0.3,0.14,0.0,0.0,1,205
186,1,9,0.39,0.06,0.0,0.0,0,206
Go web services,1,9,0.39,0.43,0.0,0.0,1,206
C 7,1,7,0.26,0.35,0.0,0.0,0,206
HAPTER,1,6,0.33,0.36,0.0,0.03,1,206
"you want to retrieve a post, you assume the web service will be called by a request to",0,9,0.21,0.13,0.03,0.0,0,206
a URL :,0,9,0.3,0.13,0.0,0.01,1,206
/post/<id>,0,7,0.26,0.13,0.01,0.01,1,206
where <id> is the id of the post. The next listing shows how this works in retrieving,0,9,0.21,0.13,0.01,0.0,0,206
the post.,0,9,0.3,0.13,0.0,0.03,1,206
Listing 7.17 Function that retrieves a post,1,9,0.48,0.15,0.03,0.02,1,206
"func handleGet(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.02,0.0,1,206
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,206
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,206
return,0,7,0.26,0.13,0.0,0.0,1,206
},0,7,0.17,0.13,0.0,0.0,0,206
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,206
Gets data from database,1,9,0.39,0.45,0.0,0.0,1,206
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,206
into Post struct,1,9,0.39,0.45,0.0,0.0,1,206
return,0,7,0.26,0.13,0.0,0.0,1,206
},0,7,0.17,0.13,0.0,0.0,0,206
"output, err := json.MarshalIndent(&post, """", ""\t\t"")",0,7,0.26,0.13,0.0,0.0,1,206
Marshals the Post,1,9,0.39,0.68,0.0,0.0,1,206
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,206
struct into JSON string,1,9,0.39,0.68,0.0,0.0,1,206
return,0,7,0.26,0.13,0.0,0.0,1,206
},0,7,0.17,0.13,0.0,0.0,0,206
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.13,0.0,0.0,1,206
Writes JSON to,1,9,0.39,0.68,0.0,0.0,1,206
w.Write(output),0,7,0.26,0.13,0.0,0.0,1,206
ResponseWriter,1,9,0.39,0.68,0.0,0.0,1,206
return,0,7,0.26,0.13,0.0,0.0,1,206
},0,7,0.17,0.13,0.0,0.02,0,206
id using the path.Base function. The,0,9,0.21,0.49,0.02,0.0,1,206
id,0,9,0.12,0.81,0.0,0.0,0,206
"You extract the URL ’s path, and then get the",0,9,0.3,0.13,0.0,0.0,1,206
"is a string, but you need an integer to retrieve the post, so you convert it into an inte-",0,9,0.21,0.13,0.0,0.0,0,206
ger using strconv.Atoi . Once you have the,0,9,0.3,0.13,0.0,0.0,1,206
"id , you can use the retrievePost",0,9,0.21,0.5,0.0,0.0,1,206
func-,0,9,0.21,0.78,0.0,0.0,1,206
"tion, which gives you a Post",0,9,0.3,0.13,0.0,0.0,1,206
struct that’s filled with data.,0,9,0.21,0.36,0.0,0.0,1,206
Post struct into a,0,9,0.21,0.36,0.0,0.0,1,206
"Next, you convert the",0,9,0.3,0.15,0.0,0.0,1,206
-formatted slice of bytes using,0,9,0.21,0.56,0.0,0.0,1,206
JSON,0,9,0.21,0.52,0.0,0.0,1,206
the json.MarshalIndent,0,9,0.3,0.13,0.0,0.0,1,206
Content-Type header to,0,9,0.21,0.61,0.0,0.0,1,206
function. Then you set the,0,9,0.21,0.35,0.0,0.0,1,206
application/json and write the bytes to the,0,9,0.3,0.13,0.0,0.0,1,206
ResponseWriter to be returned to the,0,9,0.21,0.51,0.0,0.0,1,206
calling program.,0,9,0.3,0.13,0.0,0.0,1,206
"To see how this works, run this command on the console:",0,9,0.3,0.15,0.0,0.01,1,206
curl -i -X GET http://127.0.0.1:8080/post/1,0,7,0.26,0.13,0.01,0.01,1,206
id 1. The results would be,0,9,0.21,0.61,0.01,0.0,1,206
This tells you to use the GET,0,9,0.3,0.13,0.0,0.0,1,206
"method on the URL , with the",0,9,0.21,0.36,0.0,0.0,1,206
something like this:,0,9,0.3,0.13,0.0,0.01,1,206
HTTP/1.1 200 OK,0,7,0.26,0.13,0.01,0.0,1,206
Content-Type: application/json,0,7,0.26,0.13,0.0,0.0,1,206
"Date: Sun, 12 Apr 2015 13:32:18 GMT",0,7,0.26,0.13,0.0,0.0,1,206
Content-Length: 69,0,7,0.26,0.13,0.0,0.01,1,206
{,0,7,0.17,0.13,0.01,0.0,0,206
"""id"": 1,",0,7,0.26,0.13,0.0,0.0,1,206
"""content"": ""My first post"",",0,7,0.26,0.13,0.0,0.0,1,206
"""author"": ""Sau Sheong""",0,7,0.26,0.13,0.0,0.0,1,206
},0,7,0.17,0.13,0.0,0.0,0,206
187,1,9,0.3,0.82,0.0,0.0,0,207
Creating Go web services,1,9,0.39,0.37,0.0,0.03,1,207
"You need the results when updating the post too, shown in this listing.",0,9,0.21,0.14,0.03,0.03,0,207
Listing 7.18 Function that updates a post,1,9,0.48,0.17,0.03,0.02,1,207
"func handlePut(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.14,0.02,0.0,1,207
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.14,0.0,0.0,1,207
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,207
return,0,7,0.26,0.14,0.0,0.0,1,207
},0,7,0.17,0.14,0.0,0.0,0,207
"post, err := retrieve(id)",0,7,0.26,0.14,0.0,0.0,1,207
Gets data from the database,1,9,0.39,0.47,0.0,0.0,1,207
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,207
into Post struct,1,9,0.39,0.47,0.0,0.0,1,207
return,0,7,0.26,0.14,0.0,0.0,1,207
},0,7,0.17,0.14,0.0,0.0,0,207
len := r.ContentLength,0,7,0.26,0.14,0.0,0.0,1,207
Reads JSON data,1,9,0.39,0.49,0.0,0.0,1,207
"body := make([]byte, len)",0,7,0.26,0.14,0.0,0.0,1,207
from request body Unmarshals JSON data,1,9,0.39,0.49,0.0,0.0,1,207
r.Body.Read(body),0,7,0.26,0.14,0.0,0.0,1,207
into Post struct,1,9,0.39,0.68,0.0,0.0,1,207
"json.Unmarshal(body, &post)",0,7,0.26,0.14,0.0,0.0,1,207
err = post.update(),0,7,0.26,0.14,0.0,0.0,1,207
Updates the,1,9,0.39,0.47,0.0,0.0,1,207
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,207
database,1,9,0.39,0.47,0.0,0.0,1,207
return,0,7,0.26,0.14,0.0,0.0,1,207
},0,7,0.17,0.14,0.0,0.0,0,207
w.WriteHeader(200),0,7,0.26,0.14,0.0,0.0,1,207
return,0,7,0.26,0.14,0.0,0.0,1,207
},0,7,0.17,0.14,0.0,0.02,0,207
Updating the post involves retrieving the post and then updating its information with,0,9,0.21,0.14,0.02,0.0,0,207
the information sent through the,0,9,0.3,0.14,0.0,0.0,1,207
"PUT request. Once you’ve retrieved the post, you",0,9,0.21,0.43,0.0,0.0,1,207
"read the body of the request, and then unmarshal the contents into the retrieved post",0,9,0.21,0.14,0.0,0.0,0,207
and call the update method on it.,0,9,0.3,0.14,0.0,0.0,1,207
"To see this in action, run this command through the console:",0,9,0.3,0.17,0.0,0.01,1,207
"curl -i -X PUT -H ""Content-Type: application/json""  -d '{""content"":""Updated",0,7,0.17,0.14,0.01,0.0,0,207
➥,0,10,0.23,0.14,0.0,0.0,0,207
"post"",""author"":""Sau Sheong""}' http://127.0.0.1:8080/post/1",0,7,0.26,0.17,0.0,0.02,1,207
id,0,9,0.12,0.82,0.02,0.0,0,207
Note that unlike when you’re creating the post using,0,9,0.3,0.14,0.0,0.0,1,207
"POST , you need to send in the",0,9,0.21,0.58,0.0,0.0,1,207
of the post you want to update through the,0,9,0.3,0.14,0.0,0.0,1,207
URL . You should see something like this:,0,9,0.21,0.5,0.0,0.01,1,207
HTTP/1.1 200 OK,0,7,0.26,0.14,0.01,0.0,1,207
"Date: Sun, 12 Apr 2015 14:29:39 GMT",0,7,0.26,0.14,0.0,0.0,1,207
Content-Length: 0,0,7,0.26,0.14,0.0,0.0,1,207
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.14,0.0,0.02,1,207
Now check the database and see what you have. Run this single line,0,9,0.3,0.14,0.02,0.0,1,207
SQL query from,0,9,0.21,0.71,0.0,0.0,1,207
the console again:,0,9,0.3,0.14,0.0,0.01,1,207
"psql -U gwp -d gwp -c ""select * from posts;""",0,7,0.26,0.14,0.01,0.01,1,207
You should see this:,0,9,0.3,0.14,0.01,0.01,1,207
id |   content    |   author,0,7,0.26,0.14,0.01,0.0,1,207
----+--------------+------------,0,7,0.26,0.14,0.0,0.0,1,207
1 | Updated post | Sau Sheong,0,7,0.26,0.14,0.0,0.0,1,207
(1 row),0,7,0.26,0.14,0.0,0.0,1,207
188,1,9,0.39,0.06,0.0,0.0,0,208
Go web services,1,9,0.39,0.43,0.0,0.0,1,208
C 7,1,7,0.26,0.35,0.0,0.0,0,208
HAPTER,1,6,0.33,0.36,0.0,0.03,1,208
"Deleting the post through the web service, shown in the following listing, involves sim-",0,9,0.21,0.13,0.03,0.0,0,208
delete method on it.,0,9,0.21,0.44,0.0,0.0,1,208
ply retrieving the post and calling the,0,9,0.3,0.13,0.0,0.03,1,208
Listing 7.19 Function that deletes a post,1,9,0.48,0.15,0.03,0.02,1,208
"func handleDelete(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.17,0.13,0.02,0.0,0,208
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,208
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,208
return,0,7,0.26,0.13,0.0,0.0,1,208
},0,7,0.17,0.13,0.0,0.0,0,208
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,208
Gets data from database,1,9,0.39,0.48,0.0,0.0,1,208
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,208
into Post struct,1,9,0.39,0.48,0.0,0.0,1,208
return,0,7,0.26,0.13,0.0,0.0,1,208
},0,7,0.17,0.13,0.0,0.0,0,208
err = post.delete(),0,7,0.26,0.13,0.0,0.0,1,208
Deletes post data,1,9,0.39,0.45,0.0,0.0,1,208
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,208
in database,1,9,0.39,0.45,0.0,0.0,1,208
return,0,7,0.26,0.13,0.0,0.0,1,208
},0,7,0.17,0.13,0.0,0.0,0,208
w.WriteHeader(200),0,7,0.26,0.13,0.0,0.0,1,208
return,0,7,0.26,0.13,0.0,0.0,1,208
},0,7,0.17,0.13,0.0,0.02,0,208
"Notice that in both updating and deleting the post, you write the 200 status code to",0,9,0.21,0.13,0.02,0.0,0,208
"indicate all is well. If there was an error along the way, it would’ve been returned to",0,9,0.21,0.13,0.0,0.0,0,208
handlePost ) and a 500 status code,0,9,0.21,0.51,0.0,0.0,1,208
the calling function (the handler function,0,9,0.3,0.13,0.0,0.0,1,208
would’ve been sent back.,0,9,0.3,0.13,0.0,0.0,1,208
Let’s make a final call to c,0,9,0.3,0.15,0.0,0.0,1,208
URL to delete the post record:,0,9,0.21,0.36,0.0,0.01,1,208
curl -i -X DELETE http://127.0.0.1:8080/post/1,0,7,0.26,0.13,0.01,0.01,1,208
You should see something like this:,0,9,0.3,0.13,0.01,0.01,1,208
HTTP/1.1 200 OK,0,7,0.26,0.13,0.01,0.0,1,208
"Date: Sun, 12 Apr 2015 14:38:59 GMT",0,7,0.26,0.13,0.0,0.0,1,208
Content-Length: 0,0,7,0.26,0.13,0.0,0.0,1,208
Content-Type: text/plain; charset=utf-8,0,7,0.26,0.13,0.0,0.02,1,208
Don’t forget to run the single line,0,9,0.3,0.13,0.02,0.0,1,208
"SQL query again, and this time you should see noth-",0,9,0.21,0.41,0.0,0.0,1,208
ing in the table:,0,9,0.3,0.13,0.0,0.01,1,208
id | content | author,0,7,0.26,0.13,0.01,0.0,1,208
----+---------+--------,0,7,0.26,0.13,0.0,0.0,1,208
(0 rows),0,7,0.26,0.13,0.0,0.01,1,208
7.7 Summary,1,12,0.54,0.06,0.01,0.01,1,208
"A major use of Go today is to write web services, so being able to at least under-",0,9,0.21,0.18,0.01,0.0,0,208
■,0,4,0.11,0.15,0.0,0.01,0,208
stand how to build web services is a valuable skill.,0,9,0.3,0.18,0.01,0.01,1,208
There are mainly two types of web services:,0,9,0.3,0.18,0.01,0.0,1,208
SOAP -based and REST -based web,0,9,0.21,0.55,0.0,0.0,1,208
■,0,4,0.11,0.15,0.0,0.01,0,208
services:,0,9,0.3,0.18,0.01,0.01,1,208
– SOAP is a protocol for exchanging structured data that’s defined in,0,9,0.3,0.18,0.01,0.0,1,208
XML .,0,9,0.21,0.78,0.0,0.0,1,208
"Because their messages can become quite complicated,",0,9,0.3,0.2,0.0,0.0,1,208
-based,0,9,0.21,0.77,0.0,0.0,1,208
WSDL,0,9,0.21,0.32,0.0,0.0,1,208
SOAP,0,9,0.21,0.73,0.0,0.0,1,208
189,1,9,0.3,0.82,0.0,0.0,0,209
Summary,1,9,0.39,0.43,0.0,0.03,1,209
– REST -based web services expose resources over,0,9,0.3,0.19,0.03,0.0,1,209
HTTP and allow specific,0,9,0.21,0.63,0.0,0.0,1,209
actions on them.,0,9,0.21,0.22,0.0,0.01,1,209
Creating and parsing,0,9,0.3,0.19,0.01,0.0,1,209
and are similar and involve creating a struct,0,9,0.21,0.42,0.0,0.0,1,209
XML JSON,0,9,0.21,0.38,0.0,0.0,1,209
■,0,4,0.11,0.17,0.0,0.01,0,209
and either generating (unmarshaling),0,9,0.3,0.19,0.01,0.0,1,209
"XML or JSON from it, or creating a struct",0,9,0.21,0.51,0.0,0.0,1,209
and extracting (marshaling),0,9,0.3,0.19,0.0,0.0,1,209
XML or JSON into it.,0,9,0.21,0.43,0.0,0.0,1,209
Testing your application,1,30,0.93,0.29,0.0,0.22,1,210
This chapter covers,1,12,0.67,0.11,0.22,0.01,1,210
The Go testing libraries,0,9,0.3,0.13,0.01,0.0,1,210
■,0,4,0.11,0.11,0.0,0.01,0,210
Unit testing,0,9,0.3,0.13,0.01,0.0,1,210
■,0,4,0.11,0.11,0.0,0.01,0,210
HTTP testing,0,9,0.3,0.13,0.01,0.0,1,210
■,0,4,0.11,0.11,0.0,0.01,0,210
Testing with dependency injection,0,9,0.3,0.13,0.01,0.0,1,210
■,0,4,0.11,0.11,0.0,0.01,0,210
Using third-party testing libraries,0,9,0.3,0.13,0.01,0.0,1,210
■,0,4,0.11,0.11,0.0,0.08,0,210
"Testing is one of the main critical activities in programming, but often it’s",0,9,0.21,0.14,0.08,0.0,0,210
neglected or left as an afterthought. Go provides basic testing capabilities that look,0,9,0.21,0.14,0.0,0.0,0,210
"surprisingly primitive, but as you’ll learn in this chapter, Go supplies the tools to",0,9,0.21,0.14,0.0,0.0,0,210
create the automated tests you need as a programmer. This chapter also covers the,0,9,0.21,0.14,0.0,0.0,0,210
"check and Ginkgo packages, popular Go testing libraries that extend the built-in",0,9,0.21,0.14,0.0,0.0,0,210
testing package.,0,9,0.3,0.14,0.0,0.0,1,210
As with the web application programming libraries we’ve explored in the previ-,0,9,0.21,0.17,0.0,0.0,0,210
"ous few chapters, Go provides only the fundamental tools. As a programmer you’ll",0,9,0.21,0.14,0.0,0.0,0,210
need to build on them to deliver the kind of tests that you need.,0,9,0.3,0.14,0.0,0.0,1,210
191,1,9,0.3,0.82,0.0,0.0,0,211
Unit testing with Go,1,9,0.39,0.39,0.0,0.02,1,211
8.1 Go and testing,1,12,0.54,0.07,0.02,0.01,1,211
Go offers a few testing-focused libraries in the standard library. The main test library is,0,9,0.21,0.14,0.01,0.0,0,211
"the testing package, which contains most of the functions you’ll see in this chapter.",0,9,0.21,0.14,0.0,0.0,0,211
net/http/,0,9,0.21,0.76,0.0,0.0,1,211
Another library that’s interesting for web application programming is the,0,9,0.21,0.14,0.0,0.0,0,211
httptest package. The httptest,0,9,0.3,0.14,0.0,0.0,1,211
"package, as the name suggests, is a library for testing",0,9,0.21,0.42,0.0,0.0,1,211
testing package.,0,9,0.21,0.43,0.0,0.0,1,211
web applications; it is based on the,0,9,0.3,0.14,0.0,0.0,1,211
Let’s look at the main testing,0,9,0.3,0.17,0.0,0.0,1,211
package first. It’s important to start here because,0,9,0.21,0.43,0.0,0.0,1,211
this package provides basic automated testing capabilities in Go. Once you under-,0,9,0.21,0.14,0.0,0.0,0,211
"stand the testing package, the",0,9,0.3,0.14,0.0,0.0,1,211
httptest package will make a whole lot more sense.,0,9,0.21,0.4,0.0,0.0,1,211
The testing package is used with the,0,9,0.3,0.17,0.0,0.0,1,211
go test command which is used on any Go,0,9,0.21,0.48,0.0,0.0,1,211
source files that end with,0,9,0.3,0.14,0.0,0.0,1,211
_test.go . Usually this corresponds with the name of the source,1,9,0.39,0.35,0.0,0.0,1,211
"code file you’re testing, although that’s not strictly necessary.",0,9,0.3,0.14,0.0,0.0,1,211
"If you have a server.go file, you should also have a server_test.go file that contains",0,9,0.21,0.17,0.0,0.0,0,211
all the tests you want to run on the server.go file. The server_test.go file must be in the,0,9,0.21,0.14,0.0,0.0,0,211
same package as the server.go file.,0,9,0.3,0.14,0.0,0.0,1,211
In the test file you create functions with the following form:,0,9,0.3,0.17,0.0,0.01,1,211
func Test Xxx (*testing.T) { … },1,7,0.44,0.14,0.01,0.01,1,211
where is any alphanumeric string in which the first letter is capitalized. When you,0,9,0.21,0.14,0.01,0.0,0,211
Xxx,1,7,0.35,0.2,0.0,0.01,0,211
"run the go test command in the console, this and other similar functions will be exe-",0,9,0.21,0.14,0.01,0.0,0,211
"Error , Fail , and other methods to indicate",0,9,0.21,0.49,0.0,0.0,1,211
cuted. Within these functions you can use,0,9,0.3,0.14,0.0,0.0,1,211
"test failure. If there’s no failure, the test for the function is considered to have passed.",0,9,0.21,0.14,0.0,0.0,0,211
Let’s take a closer look.,0,9,0.3,0.14,0.0,0.02,1,211
8.2 Unit testing with Go,1,12,0.54,0.07,0.02,0.01,1,211
"Unit testing, as the name indicates, is a kind of automated testing that provides confi-",0,9,0.21,0.14,0.01,0.0,0,211
dence that a unit (a modular part of a program) is correct. Although a unit often cor-,0,9,0.21,0.14,0.0,0.0,0,211
"responds to a function or a method, it doesn’t necessarily need to. A good gauge of",0,9,0.21,0.14,0.0,0.0,0,211
whether a part of a program is a unit is if it can be tested independently. A unit typi-,0,9,0.21,0.14,0.0,0.0,0,211
"cally takes in data and returns an output, and unit test cases correspondingly pass data",0,9,0.21,0.14,0.0,0.0,0,211
into the unit and check the resultant output to see if they meet the expectations. Unit,0,9,0.21,0.14,0.0,0.0,0,211
"tests are usually run in suites, which are groups of unit test cases to validate a particu-",0,9,0.21,0.14,0.0,0.0,0,211
lar behavior.,0,9,0.3,0.14,0.0,0.0,1,211
"In Go, unit test cases are written in _test.go files, grouped according to their func-",0,9,0.21,0.17,0.0,0.0,0,211
"tionality. Let’s take a look at a basic example in main.go, where you have a function",0,9,0.21,0.14,0.0,0.0,0,211
"that needs to be tested, shown in the following listing. You’ll reuse the code from the",0,9,0.21,0.14,0.0,0.0,0,211
JSON decoding example in listings 7.8 and 7.9.,0,9,0.3,0.14,0.0,0.0,1,211
192,1,9,0.39,0.06,0.0,0.0,0,212
Testing your application,1,9,0.39,0.4,0.0,0.0,1,212
C 8,1,7,0.26,0.32,0.0,0.0,0,212
HAPTER,1,6,0.33,0.33,0.0,0.03,1,212
Listing 8.1 Example JSON decoding,1,9,0.48,0.15,0.03,0.02,1,212
package main,0,7,0.26,0.13,0.02,0.02,1,212
import (,0,7,0.26,0.13,0.02,0.0,1,212
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,212
"""fmt""",0,7,0.26,0.13,0.0,0.0,1,212
"""os""",0,7,0.26,0.13,0.0,0.0,1,212
),0,7,0.17,0.13,0.0,0.02,0,212
type Post struct {,0,7,0.26,0.13,0.02,0.0,1,212
"Id       int       `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,212
"Content  string    `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,212
"Author   Author    `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,212
"Comments []Comment `json:""comments""`",0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.02,0,212
type Author struct {,0,7,0.26,0.13,0.02,0.0,1,212
"Id   int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,212
"Name string `json:""name""`",0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.02,0,212
type Comment struct {,0,7,0.26,0.13,0.02,0.0,1,212
"Id      int    `json:""id""`",0,7,0.26,0.13,0.0,0.0,1,212
"Content string `json:""content""`",0,7,0.26,0.13,0.0,0.0,1,212
"Author  string `json:""author""`",0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.02,0,212
"func decode(filename string) (post Post, err error) {",0,7,0.26,0.13,0.02,0.0,1,212
"jsonFile, err := os.Open(filename)",0,7,0.26,0.13,0.0,0.0,1,212
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,212
"fmt.Println(""Error opening JSON file:"", err)",0,7,0.26,0.13,0.0,0.0,1,212
return,0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.0,0,212
defer jsonFile.Close(),0,7,0.26,0.13,0.0,0.02,1,212
Refactored decoding code into a separate,1,9,0.39,0.66,0.02,0.0,1,212
decoder := json.NewDecoder(jsonFile),0,7,0.26,0.13,0.0,0.0,1,212
err = decoder.Decode(&post),0,7,0.26,0.13,0.0,0.0,1,212
decode function,1,9,0.39,0.66,0.0,0.0,1,212
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,212
"fmt.Println(""Error decoding JSON:"", err)",0,7,0.26,0.13,0.0,0.0,1,212
return,0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.0,0,212
return,0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.02,0,212
func main() {,0,7,0.26,0.13,0.02,0.0,1,212
"_, err := decode(""post.json"")",0,7,0.26,0.13,0.0,0.0,1,212
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,212
"fmt.Println(""Error:"", err)",0,7,0.26,0.13,0.0,0.0,1,212
},0,7,0.17,0.13,0.0,0.0,0,212
},0,7,0.17,0.13,0.0,0.02,0,212
decode function and moved the logic of opening the file,0,9,0.21,0.35,0.02,0.0,1,212
Here you refactored out a,0,9,0.3,0.13,0.0,0.0,1,212
decode from the main,0,9,0.21,0.63,0.0,0.0,1,212
and decoding it into a separate function. You then called,0,9,0.3,0.13,0.0,0.0,1,212
"function, rather than placing all of the logic inside the main function. This is an",0,9,0.21,0.13,0.0,0.0,0,212
193,1,9,0.3,0.82,0.0,0.0,0,213
Unit testing with Go,1,9,0.39,0.39,0.0,0.03,1,213
important point: although most of the time you focus on writing code that imple-,0,9,0.21,0.14,0.03,0.0,0,213
"ments features and delivery functionality, it’s equally important that the code be test-",0,9,0.21,0.14,0.0,0.0,0,213
able. This often requires some form of design thinking before writing the program.,0,9,0.21,0.14,0.0,0.0,0,213
Keep in mind that testing is a critical part of writing software programs. I’ll come back,0,9,0.21,0.14,0.0,0.0,0,213
to this point later in this chapter.,0,9,0.3,0.14,0.0,0.0,1,213
"As a reminder, the following listing is the",0,9,0.3,0.17,0.0,0.0,1,213
JSON file you parsed in chapter 7.,0,9,0.21,0.51,0.0,0.03,1,213
Listing 8.2 The post.json file that you parsed,1,9,0.48,0.17,0.03,0.02,1,213
{,0,7,0.17,0.14,0.02,0.0,0,213
"""id"" : 1,",0,7,0.26,0.14,0.0,0.0,1,213
"""content"" : ""Hello World!"",",0,7,0.26,0.14,0.0,0.0,1,213
"""author"" : {",0,7,0.26,0.14,0.0,0.0,1,213
"""id"" : 2,",0,7,0.26,0.14,0.0,0.0,1,213
"""name"" : ""Sau Sheong""",0,7,0.26,0.14,0.0,0.0,1,213
"},",0,7,0.17,0.14,0.0,0.0,0,213
"""comments"" : [",0,7,0.26,0.14,0.0,0.0,1,213
{,0,7,0.17,0.14,0.0,0.0,0,213
"""id"" : 3,",0,7,0.26,0.14,0.0,0.0,1,213
"""content"" : ""Have a great day!"",",0,7,0.26,0.14,0.0,0.0,1,213
"""author"" : ""Adam""",0,7,0.26,0.14,0.0,0.0,1,213
"},",0,7,0.17,0.14,0.0,0.0,0,213
{,0,7,0.17,0.14,0.0,0.0,0,213
"""id"" : 4,",0,7,0.26,0.14,0.0,0.0,1,213
"""content"" : ""How are you today?"",",0,7,0.26,0.14,0.0,0.0,1,213
"""author"" : ""Betty""",0,7,0.26,0.14,0.0,0.0,1,213
},0,7,0.17,0.14,0.0,0.0,0,213
],0,7,0.17,0.14,0.0,0.0,0,213
},0,7,0.17,0.14,0.0,0.02,0,213
Now let’s look at the main_test.go file.,0,9,0.3,0.14,0.02,0.03,1,213
Listing 8.3 Test file for main.go,1,9,0.48,0.17,0.03,0.02,1,213
package main,0,7,0.26,0.14,0.02,0.0,1,213
Tests files are in same,1,9,0.39,0.47,0.0,0.0,1,213
package as tested functions,1,9,0.39,0.47,0.0,0.0,1,213
import (,0,7,0.26,0.14,0.0,0.0,1,213
"""testing""",0,7,0.26,0.14,0.0,0.0,1,213
),0,7,0.17,0.14,0.0,0.01,0,213
Calls the function,1,9,0.39,0.61,0.01,0.0,1,213
func TestDecode(t *testing.T) {,0,7,0.26,0.14,0.0,0.0,1,213
that’s tested,1,9,0.39,0.61,0.0,0.0,1,213
"post, err := decode(""post.json"")",0,7,0.26,0.14,0.0,0.0,1,213
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,213
t.Error(err),0,7,0.26,0.14,0.0,0.0,1,213
},0,7,0.17,0.14,0.0,0.0,0,213
if post.Id != 1 {,0,7,0.26,0.14,0.0,0.0,1,213
"Checks if results are expected; if not, flag",1,9,0.39,0.72,0.0,0.0,1,213
"t.Error(""Wrong id, was expecting 1 but got"", post.Id)",0,7,0.26,0.14,0.0,0.0,1,213
},0,7,0.17,0.14,0.0,0.0,0,213
error messages.,1,9,0.39,0.72,0.0,0.0,1,213
"if post.Content != ""Hello World!"" {",0,7,0.26,0.14,0.0,0.0,1,213
"t.Error(""Wrong content, was expecting 'Hello World!' but got"",",0,7,0.26,0.14,0.0,0.0,1,213
➥,0,10,0.23,0.18,0.0,0.0,0,213
post.Content),0,7,0.26,0.2,0.0,0.0,1,213
},0,7,0.17,0.14,0.0,0.0,0,213
},0,7,0.17,0.14,0.0,0.0,0,213
194,1,9,0.39,0.06,0.0,0.0,0,214
Testing your application,1,9,0.39,0.4,0.0,0.0,1,214
C 8,1,7,0.26,0.32,0.0,0.0,0,214
HAPTER,1,6,0.33,0.33,0.0,0.02,1,214
Skips the test altogether,1,9,0.39,0.6,0.02,0.0,1,214
func TestEncode(t *testing.T) {,0,7,0.26,0.13,0.0,0.0,1,214
"t.Skip(""Skipping encoding for now"")",0,7,0.26,0.13,0.0,0.0,1,214
},0,7,0.17,0.13,0.0,0.02,0,214
Notice that the test file is in the same package as the program file. In this example,0,9,0.21,0.13,0.02,0.0,0,214
you’ll only use the testing,0,9,0.3,0.13,0.0,0.0,1,214
"package, so that’s the only package you’ll be importing.",0,9,0.21,0.36,0.0,0.0,1,214
The function TestDecode,0,9,0.3,0.13,0.0,0.0,1,214
"takes in a parameter, t , that’s a pointer to a",0,9,0.21,0.35,0.0,0.0,1,214
testing.T,0,9,0.21,0.74,0.0,0.01,1,214
decode function. The,0,9,0.21,0.65,0.01,0.0,1,214
struct. This is a test case that represents the unit testing of the,0,9,0.3,0.13,0.0,0.0,1,214
"testing.T struct is one of the two main structs in the package, and it’s the main struct",0,9,0.21,0.13,0.0,0.0,0,214
that you’ll be using to call out any failures or errors.,0,9,0.3,0.13,0.0,0.0,1,214
The testing.T struct has a number of useful functions:,0,9,0.3,0.15,0.0,0.01,1,214
Log —Similar to fmt.Println,0,9,0.3,0.18,0.01,0.0,1,214
; records the text in the error log.,0,9,0.21,0.42,0.0,0.0,1,214
■,0,4,0.11,0.15,0.0,0.01,0,214
Logf —Similar to fmt.Printf,0,9,0.3,0.18,0.01,0.0,1,214
. It formats its arguments according to the given,0,9,0.21,0.42,0.0,0.0,1,214
■,0,4,0.11,0.15,0.0,0.01,0,214
format and records the text in the error log.,0,9,0.3,0.18,0.01,0.01,1,214
Fail —Marks the test function as having failed but allows the execution to,0,9,0.21,0.18,0.01,0.0,0,214
■,0,4,0.11,0.15,0.0,0.01,0,214
continue.,0,9,0.3,0.18,0.01,0.01,1,214
FailNow —Marks the test function as having failed and stops its execution.,0,9,0.21,0.18,0.01,0.0,0,214
■,0,4,0.11,0.15,0.0,0.02,0,214
"There are also a few convenience functions that combine these functions, as shown in",0,9,0.21,0.13,0.02,0.0,0,214
figure 8.1.,0,9,0.3,0.13,0.0,0.03,1,214
testing.T,1,8,0.37,0.7,0.03,0.0,1,214
Log Logf Figure 8.1,1,7,0.35,0.26,0.0,0.0,1,214
Convenience functions in,1,7,0.35,0.52,0.0,0.0,1,214
", with",1,7,0.35,0.78,0.0,0.0,1,214
each cell representing a single function. The functions in,1,7,0.35,0.44,0.0,0.0,1,214
Fail Error Errorf,0,7,0.26,0.16,0.0,0.0,1,214
"the white cells are combination functions. For example,",1,7,0.35,0.44,0.0,0.0,1,214
Error,1,8,0.37,0.47,0.0,0.0,1,214
Fail,1,8,0.37,0.78,0.0,0.0,1,214
the function is a combination of calling the,1,7,0.35,0.44,0.0,0.0,1,214
FailNow Fatal Fatalf,0,7,0.26,0.15,0.0,0.0,1,214
Log,1,8,0.28,0.61,0.0,0.0,0,214
"function, followed by the function.",1,7,0.35,0.44,0.0,0.03,1,214
"In figure 8.1, the Error function is a combination of calling the",0,9,0.3,0.13,0.03,0.0,1,214
"Log function, followed",0,9,0.21,0.64,0.0,0.0,1,214
by the Fail function. The,0,9,0.3,0.13,0.0,0.0,1,214
Fatal function is a combination of calling the,0,9,0.21,0.34,0.0,0.0,1,214
Log function,0,9,0.21,0.72,0.0,0.0,1,214
followed by the FailNow,0,9,0.3,0.13,0.0,0.0,1,214
function.,0,9,0.21,0.33,0.0,0.0,1,214
"decode function normally, and then test the",0,9,0.21,0.45,0.0,0.0,1,214
In the test function you call the,0,9,0.3,0.15,0.0,0.0,1,214
"Fail , FailNow ,",0,9,0.21,0.7,0.0,0.0,1,214
"results. If the results aren’t what you expect, you can call any of the",0,9,0.21,0.13,0.0,0.0,0,214
"Error, Errorf, Fatal",0,9,0.3,0.13,0.0,0.0,1,214
", or Fatalf functions accordingly. The",0,9,0.21,0.33,0.0,0.0,1,214
"Fail function, as",0,9,0.21,0.68,0.0,0.0,1,214
"you’ve probably guessed, tells you that the test case has failed but allows you to con-",0,9,0.21,0.13,0.0,0.0,0,214
FailNow function is stricter and,0,9,0.21,0.56,0.0,0.0,1,214
tinue the execution of the rest of the test case. The,0,9,0.3,0.13,0.0,0.0,1,214
Fail and FailNow only affect the test case,0,9,0.21,0.47,0.0,0.0,1,214
exits the test case once it’s encountered.,0,9,0.3,0.13,0.0,0.0,1,214
"they’re in—in this case, the TestDecode test case.",0,9,0.3,0.13,0.0,0.0,1,214
"Run the TestDecode test case now. In the console, run this command in the direc-",0,9,0.21,0.15,0.0,0.0,0,214
tory where the main_test.go file is:,0,9,0.3,0.13,0.0,0.01,1,214
go test,0,7,0.26,0.13,0.01,0.01,1,214
"This will execute all _test.go files in the same directory, and you should see something",0,9,0.21,0.13,0.01,0.0,0,214
like this (assuming the files are in a directory named unit_testing):,0,9,0.3,0.13,0.0,0.01,1,214
PASS,0,7,0.26,0.13,0.01,0.0,1,214
ok    unit_testing  0.004s,0,7,0.26,0.13,0.0,0.0,1,214
195,1,9,0.3,0.82,0.0,0.0,0,215
Unit testing with Go,1,9,0.39,0.39,0.0,0.03,1,215
-v ),0,9,0.21,0.82,0.03,0.0,1,215
"It’s not very descriptive, so if you want more information, you can use the verbose (",0,9,0.21,0.14,0.0,0.0,0,215
"flag, and if you want to know the coverage of the test case against your code, you can",0,9,0.21,0.14,0.0,0.0,0,215
give it the coverage ( -cover,0,9,0.3,0.14,0.0,0.0,1,215
) flag.,0,9,0.21,0.37,0.0,0.01,1,215
go test –v -cover,0,7,0.26,0.14,0.01,0.01,1,215
which will give more information:,0,9,0.3,0.14,0.01,0.01,1,215
=== RUN TestDecode,0,7,0.26,0.14,0.01,0.0,1,215
--- PASS: TestDecode (0.00s),0,7,0.26,0.14,0.0,0.0,1,215
=== RUN TestEncode,0,7,0.26,0.14,0.0,0.0,1,215
--- SKIP: TestEncode (0.00s),0,7,0.26,0.14,0.0,0.0,1,215
main_test.go:23: Skipping encoding for now,0,7,0.26,0.14,0.0,0.0,1,215
PASS,0,7,0.26,0.14,0.0,0.0,1,215
coverage: 46.7% of statements,0,7,0.26,0.14,0.0,0.0,1,215
ok    unit_testing  0.004s,0,7,0.26,0.14,0.0,0.02,1,215
8.2.1 Skipping test cases,1,10,0.5,0.07,0.02,0.01,1,215
Notice that you have two test cases in the same file—the second test case is Test-,0,9,0.21,0.14,0.01,0.0,0,215
"Encode. But this test case doesn’t do anything, because you don’t have an encode",0,9,0.21,0.14,0.0,0.0,0,215
function to test. If you’re doing test-driven development,0,9,0.3,0.14,0.0,0.0,1,215
"(TDD) , you might want to let",0,9,0.21,0.61,0.0,0.0,1,215
"the test case continue failing until you’ve written the function. If that is too irritating,",0,9,0.21,0.14,0.0,0.0,0,215
Go provides a Skip function in,0,9,0.3,0.14,0.0,0.0,1,215
testing.T that allows you to skip test cases if you’re,0,9,0.21,0.41,0.0,0.0,1,215
Skip function is also useful if you have test cases that run,0,9,0.21,0.38,0.0,0.0,1,215
not ready to write them. The,0,9,0.3,0.14,0.0,0.0,1,215
a very long time and you want to skip them if you only want to run a sanity check.,0,9,0.21,0.14,0.0,0.0,0,215
-short ) flag to the go test,0,9,0.21,0.61,0.0,0.0,1,215
"In addition to skipping tests, you can pass in a short (",0,9,0.3,0.17,0.0,0.0,1,215
"command, and using some conditional logic in the test case, you can skip the running",0,9,0.21,0.14,0.0,0.0,0,215
"of parts of a test. Note that this is different from selective running of a specific test,",0,9,0.21,0.14,0.0,0.0,0,215
go test command. The selective running,0,9,0.21,0.5,0.0,0.0,1,215
which you can specify with an option in the,0,9,0.3,0.14,0.0,0.0,1,215
-short flag skips parts,0,9,0.21,0.66,0.0,0.0,1,215
of specific tests runs certain tests and skips others whereas the,0,9,0.3,0.14,0.0,0.0,1,215
"of a test (or the entire test case), depending on the way you write the test code.",0,9,0.21,0.14,0.0,0.0,0,215
Let’s see how this works for the use case where you want to avoid executing a long-,0,9,0.21,0.17,0.0,0.0,0,215
"running test case. First, create a new test case (in the same main_test.go file). Remem-",0,9,0.21,0.14,0.0,0.0,0,215
ber to import the time package first:,0,9,0.3,0.14,0.0,0.01,1,215
func TestLongRunningTest(t *testing.T) {,0,7,0.26,0.14,0.01,0.0,1,215
if testing.Short() {,0,7,0.26,0.14,0.0,0.0,1,215
"t.Skip(""Skipping long-running test in short mode"")",0,7,0.26,0.14,0.0,0.0,1,215
},0,7,0.17,0.14,0.0,0.0,0,215
time.Sleep(10 * time.Second),0,7,0.26,0.14,0.0,0.0,1,215
},0,7,0.17,0.14,0.0,0.02,0,215
"-short flag is set, you’ll skip this test case. Otherwise",0,9,0.21,0.41,0.02,0.0,1,215
You set the condition that if the,0,9,0.3,0.14,0.0,0.0,1,215
you’ll sleep for 10 seconds. Now let’s run this normally and see what happens:,0,9,0.21,0.14,0.0,0.01,0,215
=== RUN TestDecode,0,7,0.26,0.14,0.01,0.0,1,215
--- PASS: TestDecode (0.00s),0,7,0.26,0.14,0.0,0.0,1,215
=== RUN TestEncode,0,7,0.26,0.14,0.0,0.0,1,215
--- SKIP: TestEncode (0.00s),0,7,0.26,0.14,0.0,0.0,1,215
main_test.go:24: Skipping encoding for now,0,7,0.26,0.14,0.0,0.0,1,215
196,1,9,0.39,0.06,0.0,0.0,0,216
Testing your application,1,9,0.39,0.4,0.0,0.0,1,216
C 8,1,7,0.26,0.32,0.0,0.0,0,216
HAPTER,1,6,0.33,0.33,0.0,0.03,1,216
=== RUN TestLongRunningTest,0,7,0.26,0.13,0.03,0.0,1,216
--- PASS: TestLongRunningTest (10.00s),0,7,0.26,0.13,0.0,0.0,1,216
PASS,0,7,0.26,0.13,0.0,0.0,1,216
coverage: 46.7% of statements,0,7,0.26,0.13,0.0,0.0,1,216
ok    unit_testing  10.004s,0,7,0.26,0.13,0.0,0.02,1,216
Notice that the TestLongRunningTest,0,9,0.3,0.13,0.02,0.0,1,216
"test case runs for 10 seconds, as expected. Now",0,9,0.21,0.44,0.0,0.0,1,216
run this in the console,0,9,0.3,0.13,0.0,0.01,1,216
go test –v –cover -short,0,7,0.26,0.13,0.01,0.01,1,216
and run the tests again:,0,9,0.3,0.13,0.01,0.01,1,216
=== RUN TestDecode,0,7,0.26,0.13,0.01,0.0,1,216
--- PASS: TestDecode (0.00s),0,7,0.26,0.13,0.0,0.0,1,216
=== RUN TestEncode,0,7,0.26,0.13,0.0,0.0,1,216
--- SKIP: TestEncode (0.00s),0,7,0.26,0.13,0.0,0.0,1,216
main_test.go:24: Skipping encoding for now,0,7,0.26,0.13,0.0,0.0,1,216
=== RUN TestLongRunningTest,0,7,0.26,0.13,0.0,0.0,1,216
--- SKIP: TestLongRunningTest (0.00s),0,7,0.26,0.13,0.0,0.0,1,216
main_test.go:29: Skipping long-running test in short mode,0,7,0.26,0.13,0.0,0.0,1,216
PASS,0,7,0.26,0.13,0.0,0.0,1,216
coverage: 46.7% of statements,0,7,0.26,0.13,0.0,0.0,1,216
ok    unit_testing  0.004s,0,7,0.26,0.13,0.0,0.02,1,216
"As you can see, the long-running test case is now skipped.",0,9,0.3,0.13,0.02,0.02,1,216
8.2.2 Running tests in parallel,1,10,0.5,0.06,0.02,0.01,1,216
"As mentioned earlier, unit test cases are meant to be tested independently. Sometimes",0,9,0.21,0.13,0.01,0.0,0,216
"this isn’t possible because dependencies exist within a test suite. When it is possible,",0,9,0.21,0.13,0.0,0.0,0,216
you can run unit test cases in parallel in order to speed up the tests. Let’s see how to,0,9,0.21,0.13,0.0,0.0,0,216
do this in Go.,0,9,0.3,0.13,0.0,0.0,1,216
"Add a file named parallel_test.go, shown in this listing, in the same directory.",0,9,0.21,0.15,0.0,0.03,0,216
Listing 8.4 Parallel testing,1,9,0.48,0.15,0.03,0.02,1,216
package main,0,7,0.26,0.13,0.02,0.02,1,216
import (,0,7,0.26,0.13,0.02,0.0,1,216
"""testing""",0,7,0.26,0.13,0.0,0.0,1,216
"""time""",0,7,0.26,0.13,0.0,0.0,1,216
),0,7,0.17,0.13,0.0,0.01,0,216
Calls Parallel function to,1,9,0.39,0.6,0.01,0.0,1,216
func TestParallel_1(t *testing.T) {,0,7,0.26,0.13,0.0,0.0,1,216
Works for 1,1,9,0.48,0.01,0.0,0.0,1,216
run test cases in parallel,1,9,0.39,0.6,0.0,0.0,1,216
t.Parallel(),0,7,0.26,0.13,0.0,0.0,1,216
second time.Sleep(1 * time.Second),1,9,0.48,0.03,0.0,0.0,1,216
},0,7,0.17,0.13,0.0,0.02,0,216
func TestParallel_2(t *testing.T) {,0,7,0.26,0.13,0.02,0.0,1,216
Works for 2 seconds,1,9,0.39,0.62,0.0,0.0,1,216
t.Parallel(),0,7,0.26,0.13,0.0,0.0,1,216
time.Sleep(2 * time.Second),0,7,0.26,0.13,0.0,0.0,1,216
},0,7,0.17,0.13,0.0,0.0,0,216
197,1,9,0.3,0.82,0.0,0.0,0,217
Unit testing with Go,1,9,0.39,0.39,0.0,0.03,1,217
func TestParallel_3(t *testing.T) {,0,7,0.26,0.14,0.03,0.0,1,217
Works for 3 seconds,1,9,0.39,0.64,0.0,0.0,1,217
t.Parallel(),0,7,0.26,0.14,0.0,0.0,1,217
time.Sleep(3 * time.Second),0,7,0.26,0.14,0.0,0.0,1,217
},0,7,0.17,0.14,0.0,0.02,0,217
You can use the time.Sleep,0,9,0.3,0.14,0.02,0.0,1,217
"function to simulate processing, with three different test",0,9,0.21,0.38,0.0,0.0,1,217
"cases, working for 1, 2, and 3 seconds, respectively. To run the tests in parallel, you",0,9,0.21,0.14,0.0,0.0,0,217
need to call the Parallel,0,9,0.3,0.14,0.0,0.0,1,217
function on testing.T as the first statement in the test case.,0,9,0.21,0.35,0.0,0.0,1,217
Now run this in the console:,0,9,0.3,0.17,0.0,0.02,1,217
go test –v –short –parallel 3,0,7,0.26,0.14,0.02,0.02,1,217
The parallel ( -parallel,0,9,0.3,0.14,0.02,0.0,1,217
) flag indicates that you want to run a maximum of three test,0,9,0.21,0.34,0.0,0.0,1,217
-short flag because you don’t want to run the,0,9,0.21,0.46,0.0,0.0,1,217
cases in parallel. You’re still using the,0,9,0.3,0.14,0.0,0.0,1,217
long-running test case. Let’s see what happens.,0,9,0.3,0.14,0.0,0.01,1,217
=== RUN TestDecode,0,7,0.26,0.14,0.01,0.0,1,217
--- PASS: TestDecode (0.00s),0,7,0.26,0.14,0.0,0.0,1,217
=== RUN TestEncode,0,7,0.26,0.14,0.0,0.0,1,217
--- SKIP: TestEncode (0.00s),0,7,0.26,0.14,0.0,0.0,1,217
main_test.go:24: Skipping encoding for now,0,7,0.26,0.14,0.0,0.0,1,217
=== RUN TestLongRunningTest,0,7,0.26,0.14,0.0,0.0,1,217
--- SKIP: TestLongRunningTest (0.00s),0,7,0.26,0.14,0.0,0.0,1,217
main_test.go:30: Skipping long-running test in short mode,0,7,0.26,0.14,0.0,0.0,1,217
=== RUN TestParallel_1,0,7,0.26,0.14,0.0,0.0,1,217
=== RUN TestParallel_2,0,7,0.26,0.14,0.0,0.0,1,217
=== RUN TestParallel_3,0,7,0.26,0.14,0.0,0.0,1,217
--- PASS: TestParallel_1 (1.00s),0,7,0.26,0.14,0.0,0.0,1,217
--- PASS: TestParallel_2 (2.00s),0,7,0.26,0.14,0.0,0.0,1,217
--- PASS: TestParallel_3 (3.00s),0,7,0.26,0.14,0.0,0.0,1,217
PASS,0,7,0.26,0.14,0.0,0.0,1,217
ok    unit_testing  3.006s,0,7,0.26,0.14,0.0,0.02,1,217
"You can see that all test cases in main_test.go and parallel_test.go are executed. Also,",0,9,0.21,0.14,0.02,0.0,0,217
notice that all three parallel test cases are executed together. Even though each paral-,0,9,0.21,0.14,0.0,0.0,0,217
"lel case has a different execution time, because all three run at the same time and all",0,9,0.21,0.14,0.0,0.0,0,217
"finish within the timing of the longest running test, the final execution timing shows",0,9,0.21,0.14,0.0,0.0,0,217
"only 3.006 seconds (0.006 seconds for the first few test cases, and then 3 seconds for",0,9,0.21,0.14,0.0,0.0,0,217
"the longest running test case, TestParallel_3).",0,9,0.3,0.14,0.0,0.01,1,217
8.2.3 Benchmarking,1,10,0.5,0.07,0.01,0.01,1,217
The Go testing package provides two types of testing. You went through functional,0,9,0.21,0.14,0.01,0.0,0,217
"testing in the previous section, which tests the functionality of the program. The Go",0,9,0.21,0.14,0.0,0.0,0,217
"testing package also provides benchmarking, which is run to determine the perfor-",0,9,0.21,0.14,0.0,0.0,0,217
mance of a unit of work.,0,9,0.3,0.14,0.0,0.0,1,217
"Similar to unit testing, benchmark test cases are functions of the format:",0,9,0.21,0.17,0.0,0.01,0,217
func BenchmarkXxx(*testing.B) { … },0,7,0.26,0.14,0.01,0.01,1,217
inside the _test.go files. Let’s build some benchmark test cases in a new file named,0,9,0.21,0.14,0.01,0.0,0,217
"bench_test.go, shown in this listing.",0,9,0.3,0.14,0.0,0.0,1,217
198,1,9,0.39,0.06,0.0,0.0,0,218
Testing your application,1,9,0.39,0.4,0.0,0.0,1,218
C 8,1,7,0.26,0.32,0.0,0.0,0,218
HAPTER,1,6,0.33,0.33,0.0,0.03,1,218
Listing 8.5 Benchmark testing,1,9,0.48,0.15,0.03,0.02,1,218
package main,0,7,0.26,0.13,0.02,0.02,1,218
import (,0,7,0.26,0.13,0.02,0.0,1,218
"""testing""",0,7,0.26,0.13,0.0,0.0,1,218
),0,7,0.17,0.13,0.0,0.01,0,218
// benchmarking the decode function,0,7,0.26,0.13,0.01,0.0,1,218
Loops through function to,1,9,0.39,0.6,0.0,0.0,1,218
func BenchmarkDecode(b *testing.B) {,0,7,0.26,0.13,0.0,0.0,1,218
be benchmarked b.N times,1,9,0.39,0.6,0.0,0.0,1,218
for i := 0; i < b.N; i++ {,0,7,0.26,0.13,0.0,0.0,1,218
"decode(""post.json"")",0,7,0.26,0.13,0.0,0.0,1,218
},0,7,0.17,0.13,0.0,0.0,0,218
},0,7,0.17,0.13,0.0,0.02,0,218
"As you can see, benchmarking with Go is rather straightforward. You execute the code",0,9,0.21,0.13,0.02,0.0,0,218
decode function) b.N times in order to,0,9,0.21,0.51,0.0,0.0,1,218
"that you want to benchmark (in this case, the",0,9,0.3,0.13,0.0,0.0,1,218
b.N will change,0,9,0.21,0.7,0.0,0.0,1,218
"reliably benchmark its response time. As the code is being executed,",0,9,0.3,0.13,0.0,0.0,1,218
accordingly.,0,9,0.3,0.13,0.0,0.0,1,218
-bench ) flag when executing the,0,9,0.21,0.53,0.0,0.0,1,218
go,0,9,0.12,0.81,0.0,0.0,0,218
"To run benchmark test cases, use the bench (",0,9,0.3,0.15,0.0,0.0,1,218
test command. You need to indicate which benchmark files you want to run using,0,9,0.21,0.13,0.0,0.0,0,218
-bench flag. To run all benchmarks,0,9,0.21,0.53,0.0,0.0,1,218
regular expressions as the flag parameter for the,0,9,0.3,0.13,0.0,0.0,1,218
"files, just use the dot ( . ):",0,9,0.3,0.13,0.0,0.01,1,218
go test -v -cover -short –bench .,0,7,0.26,0.13,0.01,0.01,1,218
Here are the results:,0,9,0.3,0.13,0.01,0.01,1,218
=== RUN TestDecode,0,7,0.26,0.13,0.01,0.0,1,218
--- PASS: TestDecode (0.00s),0,7,0.26,0.13,0.0,0.0,1,218
=== RUN TestEncode,0,7,0.26,0.13,0.0,0.0,1,218
--- SKIP: TestEncode (0.00s),0,7,0.26,0.13,0.0,0.0,1,218
main_test.go:38: Skipping encoding for now,0,7,0.26,0.13,0.0,0.0,1,218
=== RUN TestLongRunningTest,0,7,0.26,0.13,0.0,0.0,1,218
--- SKIP: TestLongRunningTest (0.00s),0,7,0.26,0.13,0.0,0.0,1,218
main_test.go:44: Skipping long-running test in short mode,0,7,0.26,0.13,0.0,0.0,1,218
PASS,0,7,0.26,0.13,0.0,0.0,1,218
BenchmarkDecode  100000     19480 ns/op,0,7,0.26,0.13,0.0,0.0,1,218
coverage: 42.4% of statements,0,7,0.26,0.13,0.0,0.0,1,218
ok  unit_testing2.243s,0,7,0.26,0.13,0.0,0.02,1,218
The 100000 indicates how many loops were run (,0,9,0.3,0.13,0.02,0.0,1,218
"b.N ). In this example, 100,000 loops",0,9,0.21,0.53,0.0,0.0,1,218
"were run and each loop took 19,480 nanoseconds, or 0.01948 milliseconds. The num-",0,9,0.21,0.13,0.0,0.0,0,218
ber of times a benchmark runs is dictated by Go. This number can’t be specified,0,9,0.21,0.13,0.0,0.0,0,218
"directly by the user, although you can specify the amount of time it has to run",0,9,0.21,0.13,0.0,0.0,0,218
"in, therefore limiting the number of loops run. Go will run as many iterations as",0,9,0.21,0.13,0.0,0.0,0,218
test subcommand has a,0,9,0.21,0.62,0.0,0.0,1,218
"needed to get an accurate measurement. In Go 1.5, the",0,9,0.3,0.13,0.0,0.0,1,218
–test.count flag that lets you specify how many times to run each test and bench-,0,9,0.21,0.13,0.0,0.0,0,218
mark (the default is one time).,0,9,0.3,0.13,0.0,0.0,1,218
"Notice that you’re still running the functional tests. If you want to keep it simple,",0,9,0.21,0.15,0.0,0.0,0,218
-run ) flag. The -run flag,0,9,0.21,0.6,0.0,0.0,1,218
you can ignore the functional tests by using the run (,0,9,0.3,0.13,0.0,0.0,1,218
199,1,9,0.3,0.82,0.0,0.0,0,219
Unit testing with Go,1,9,0.39,0.39,0.0,0.03,1,219
indicates which functional tests to run; if you use any name that doesn’t match the,0,9,0.21,0.14,0.03,0.0,0,219
"functional tests, the corresponding tests will be ignored.",0,9,0.3,0.14,0.0,0.01,1,219
go test -run x -bench .,0,7,0.26,0.14,0.01,0.01,1,219
"There are no functional tests named x, so no functional tests are run. This will result",0,9,0.21,0.14,0.01,0.0,0,219
in the following:,0,9,0.3,0.14,0.0,0.01,1,219
PASS,0,7,0.26,0.14,0.01,0.0,1,219
BenchmarkDecode    100000       19714 ns/op,0,7,0.26,0.14,0.0,0.0,1,219
ok    unit_testing  2.150s,0,7,0.26,0.14,0.0,0.02,1,219
"Knowing how fast a function runs is pretty useful, but it’ll be more interesting if you",0,9,0.21,0.14,0.02,0.0,0,219
"can compare it with another function. In chapter 7, you learned two ways of unmar-",0,9,0.21,0.14,0.0,0.0,0,219
Decode function or using the,0,9,0.21,0.5,0.0,0.0,1,219
Unmarshal,0,9,0.21,0.76,0.0,0.0,1,219
shaling JSON data into a struct: using the,0,9,0.3,0.14,0.0,0.0,1,219
Decode function; let’s see how fast the,0,9,0.21,0.44,0.0,0.0,1,219
Unmarshal,0,9,0.21,0.76,0.0,0.0,1,219
function. You just benchmarked the,0,9,0.3,0.14,0.0,0.0,1,219
unmarshal,0,9,0.21,0.76,0.0,0.0,1,219
"function is. To do so, you need to refactor the unmarshaling code into an",0,9,0.21,0.14,0.0,0.0,0,219
"function in main.go, shown in the next listing.",0,9,0.3,0.14,0.0,0.03,1,219
Listing 8.6 Unmarshaling JSON data,1,9,0.48,0.17,0.03,0.02,1,219
"func unmarshal(filename string) (post Post, err error) {",0,7,0.26,0.14,0.02,0.0,1,219
"jsonFile, err := os.Open(filename)",0,7,0.26,0.14,0.0,0.0,1,219
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,219
"fmt.Println(""Error opening JSON file:"", err)",0,7,0.26,0.14,0.0,0.0,1,219
return,0,7,0.26,0.14,0.0,0.0,1,219
},0,7,0.17,0.14,0.0,0.0,0,219
defer jsonFile.Close(),0,7,0.26,0.14,0.0,0.01,1,219
"jsonData, err := ioutil.ReadAll(jsonFile)",0,7,0.26,0.14,0.01,0.0,1,219
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,219
"fmt.Println(""Error reading JSON data:"", err)",0,7,0.26,0.14,0.0,0.0,1,219
return,0,7,0.26,0.14,0.0,0.0,1,219
},0,7,0.17,0.14,0.0,0.0,0,219
"json.Unmarshal(jsonData, &post)",0,7,0.26,0.14,0.0,0.0,1,219
return,0,7,0.26,0.14,0.0,0.0,1,219
},0,7,0.17,0.14,0.0,0.02,0,219
Now that you have an unmarshal,0,9,0.3,0.14,0.02,0.0,1,219
"function, let’s benchmark it.",0,9,0.21,0.42,0.0,0.02,1,219
Unmarshal function,1,9,0.39,0.41,0.02,0.0,1,219
Listing 8.7 Benchmarking the,1,9,0.48,0.17,0.0,0.02,1,219
func BenchmarkUnmarshal(b *testing.B) {,0,7,0.26,0.14,0.02,0.0,1,219
for i := 0; i < b.N; i++ {,0,7,0.26,0.14,0.0,0.0,1,219
"unmarshal(""post.json"")",0,7,0.26,0.14,0.0,0.0,1,219
},0,7,0.17,0.14,0.0,0.0,0,219
},0,7,0.17,0.14,0.0,0.02,0,219
Now run the benchmark again to get the results:,0,9,0.3,0.14,0.02,0.01,1,219
PASS,0,7,0.26,0.14,0.01,0.0,1,219
BenchmarkDecode    100000       19577 ns/op,0,7,0.26,0.14,0.0,0.0,1,219
BenchmarkUnmarshal     50000       24532 ns/op,0,7,0.26,0.14,0.0,0.0,1,219
200,1,9,0.39,0.06,0.0,0.0,0,220
Testing your application,1,9,0.39,0.4,0.0,0.0,1,220
C 8,1,7,0.26,0.32,0.0,0.0,0,220
HAPTER,1,6,0.33,0.33,0.0,0.03,1,220
Decode takes 0.019577 ms whereas,0,9,0.21,0.54,0.03,0.0,1,220
You can see from the benchmarking results that,0,9,0.3,0.13,0.0,0.0,1,220
"Unmarshal takes 0.024532 ms, making",0,9,0.3,0.13,0.0,0.0,1,220
Unmarshal about 25 % slower than,0,9,0.21,0.44,0.0,0.0,1,220
Decode .,0,9,0.21,0.73,0.0,0.02,1,220
8.3 HTTP testing with Go,1,12,0.54,0.06,0.02,0.01,1,220
"This is a book on web programming, so naturally there’s a section on testing web",0,9,0.21,0.13,0.01,0.0,0,220
"applications. Although there are many ways to test web applications, I’ll focus on unit",0,9,0.21,0.13,0.0,0.0,0,220
testing the handlers with Go.,0,9,0.3,0.13,0.0,0.0,1,220
testing/httptest package.,0,9,0.21,0.6,0.0,0.0,1,220
Unit testing web applications in Go is handled by the,0,9,0.3,0.15,0.0,0.0,1,220
"The httptest package provides facilities to simulate a web server, allowing you to use",0,9,0.21,0.13,0.0,0.0,0,220
net/http package to send an,0,9,0.21,0.35,0.0,0.0,1,220
the client functions of the,0,9,0.3,0.13,0.0,0.0,1,220
HTTP request and capturing,0,9,0.21,0.59,0.0,0.0,1,220
the HTTP response that’s returned.,0,9,0.3,0.13,0.0,0.0,1,220
"You’ll reuse the simple web service you created in listing 7.14. As a recap, the sim-",0,9,0.21,0.15,0.0,0.0,0,220
"handleRequest , which in turn multi-",0,9,0.21,0.52,0.0,0.0,1,220
"ple web service has only one handler, named",0,9,0.3,0.13,0.0,0.0,1,220
plexes the request to a set of functions depending on the,0,9,0.3,0.13,0.0,0.0,1,220
HTTP method in the,0,9,0.21,0.64,0.0,0.0,1,220
handleRequest will multiplex the request,0,9,0.21,0.48,0.0,0.0,1,220
"request. If an HTTP GET request comes in,",0,9,0.3,0.13,0.0,0.0,1,220
"to a handleGet function, shown in this listing.",0,9,0.3,0.13,0.0,0.03,1,220
Listing 8.8 Multiplexing handler and GET handler function,1,9,0.48,0.15,0.03,0.02,1,220
"func handleRequest(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,220
var err error,0,7,0.26,0.13,0.0,0.0,1,220
switch r.Method {,0,7,0.26,0.13,0.0,0.0,1,220
"handleRequest, which",1,9,0.39,0.67,0.0,0.0,1,220
Switches,1,9,0.48,0.02,0.0,0.0,1,220
"case ""GET"":",0,7,0.26,0.13,0.0,0.0,1,220
multiplexes the request,1,9,0.39,0.66,0.0,0.0,1,220
to correct,1,9,0.48,0.01,0.0,0.0,1,220
"err = handleGet(w, r)",0,7,0.26,0.13,0.0,0.0,1,220
according to HTTP method,1,9,0.39,0.64,0.0,0.0,1,220
function,1,9,0.48,0.02,0.0,0.0,1,220
"case ""POST"":",0,7,0.26,0.13,0.0,0.0,1,220
"err = handlePost(w, r)",0,7,0.26,0.13,0.0,0.0,1,220
"case ""PUT"":",0,7,0.26,0.13,0.0,0.0,1,220
"err = handlePut(w, r)",0,7,0.26,0.13,0.0,0.0,1,220
"case ""DELETE"":",0,7,0.26,0.13,0.0,0.0,1,220
"err = handleDelete(w, r)",0,7,0.26,0.13,0.0,0.0,1,220
},0,7,0.17,0.13,0.0,0.0,0,220
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,220
"http.Error(w, err.Error(), http.StatusInternalServerError)",0,7,0.26,0.13,0.0,0.0,1,220
return,0,7,0.26,0.13,0.0,0.0,1,220
},0,7,0.17,0.13,0.0,0.0,0,220
},0,7,0.17,0.13,0.0,0.03,0,220
"func handleGet(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.03,0.0,1,220
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,220
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,220
return,0,7,0.26,0.13,0.0,0.0,1,220
},0,7,0.17,0.13,0.0,0.0,0,220
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,220
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,220
return,0,7,0.26,0.13,0.0,0.0,1,220
},0,7,0.17,0.13,0.0,0.0,0,220
"output, err := json.MarshalIndent(&post, """", ""\t\t"")",0,7,0.26,0.13,0.0,0.0,1,220
201,1,9,0.3,0.82,0.0,0.0,0,221
HTTP testing with Go,1,9,0.39,0.38,0.0,0.03,1,221
if err != nil {,0,7,0.26,0.14,0.03,0.0,1,221
return,0,7,0.26,0.14,0.0,0.0,1,221
},0,7,0.17,0.14,0.0,0.0,0,221
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.14,0.0,0.0,1,221
w.Write(output),0,7,0.26,0.14,0.0,0.0,1,221
return,0,7,0.26,0.14,0.0,0.0,1,221
},0,7,0.17,0.14,0.0,0.02,0,221
Let’s look at the unit test case (figure 8.2) to test the case where an,0,9,0.21,0.14,0.02,0.0,0,221
"HTTP GET request,",0,9,0.21,0.69,0.0,0.0,1,221
"shown in listing 8.9, comes in.",0,9,0.3,0.14,0.0,0.05,1,221
Create multiplexer,0,7,0.17,0.26,0.05,0.03,1,221
Attach tested handler to multiplexer,0,7,0.17,0.21,0.03,0.03,1,221
Create recorder,0,7,0.17,0.26,0.03,0.03,1,221
Create request,0,7,0.17,0.27,0.03,0.03,1,221
Send request to tested handler and write to recorder,0,7,0.26,0.16,0.03,0.03,1,221
Figure 8.2 Sequence for doing HTTP testing with,1,7,0.35,0.5,0.03,0.0,1,221
Check recorder for results,0,7,0.17,0.23,0.0,0.0,1,221
httptest,1,8,0.37,0.59,0.0,0.0,1,221
"Go, using the package",1,7,0.35,0.5,0.0,0.04,1,221
Listing 8.9 Testing GET requests,1,9,0.48,0.17,0.04,0.02,1,221
package main,0,7,0.26,0.14,0.02,0.02,1,221
import (,0,7,0.26,0.14,0.02,0.0,1,221
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,221
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,221
"""net/http/httptest""",0,7,0.26,0.14,0.0,0.0,1,221
"""testing""",0,7,0.26,0.14,0.0,0.0,1,221
),0,7,0.17,0.14,0.0,0.01,0,221
Creates a multiplexer,1,9,0.39,0.61,0.01,0.0,1,221
func TestHandleGet(t *testing.T) {,0,7,0.26,0.14,0.0,0.0,1,221
to run test on,1,9,0.39,0.61,0.0,0.0,1,221
mux := http.NewServeMux(),0,7,0.26,0.14,0.0,0.0,1,221
"mux.HandleFunc(""/post/"", handleRequest)",0,7,0.26,0.14,0.0,0.0,1,221
Attaches,1,9,0.48,0.04,0.0,0.0,1,221
Captures returned,1,9,0.39,0.61,0.0,0.0,1,221
handler you writer := httptest.NewRecorder(),1,9,0.48,0.02,0.0,0.0,1,221
HTTP response,1,9,0.39,0.61,0.0,0.0,1,221
want to test,1,9,0.48,0.01,0.0,0.0,1,221
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.14,0.0,0.0,1,221
Creates request to,1,9,0.39,0.7,0.0,0.0,1,221
"mux.ServeHTTP(writer, request)",0,7,0.26,0.14,0.0,0.0,1,221
handler you want to test,1,9,0.39,0.7,0.0,0.0,1,221
request to Sends,1,9,0.48,0.03,0.0,0.0,1,221
if writer.Code != 200 {,0,7,0.26,0.14,0.0,0.0,1,221
tested,1,9,0.48,0.05,0.0,0.0,1,221
Checks ResponseRecorder,1,9,0.39,0.64,0.0,0.0,1,221
"t.Errorf(""Response code is %v"", writer.Code)",0,7,0.26,0.14,0.0,0.0,1,221
handler,1,9,0.48,0.04,0.0,0.0,1,221
for results,1,9,0.39,0.64,0.0,0.0,1,221
},0,7,0.17,0.14,0.0,0.0,0,221
202,1,9,0.39,0.06,0.0,0.0,0,222
Testing your application,1,9,0.39,0.4,0.0,0.0,1,222
C 8,1,7,0.26,0.32,0.0,0.0,0,222
HAPTER,1,6,0.33,0.33,0.0,0.03,1,222
var post Post,0,7,0.26,0.13,0.03,0.0,1,222
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.13,0.0,0.0,1,222
if post.Id != 1 {,0,7,0.26,0.13,0.0,0.0,1,222
"t.Error(""Cannot retrieve JSON post"")",0,7,0.26,0.13,0.0,0.0,1,222
},0,7,0.17,0.13,0.0,0.0,0,222
},0,7,0.17,0.13,0.0,0.02,0,222
"Every test case runs independently and starts its own web server for testing, so you",0,9,0.21,0.13,0.02,0.0,0,222
handleRequest handler function to it. To,0,9,0.21,0.49,0.0,0.0,1,222
need to create a multiplexer and attach the,0,9,0.3,0.13,0.0,0.0,1,222
"response, use the httptest.NewRecorder",0,9,0.21,0.35,0.0,0.0,1,222
capture the returned HTTP,0,9,0.3,0.13,0.0,0.0,1,222
function to cre-,0,9,0.21,0.7,0.0,0.0,1,222
ate a ResponseRecorder,0,9,0.3,0.13,0.0,0.0,1,222
struct. This struct will be used to store the response for,0,9,0.21,0.34,0.0,0.0,1,222
inspection.,0,9,0.3,0.13,0.0,0.0,1,222
You also need to create an,0,9,0.3,0.15,0.0,0.0,1,222
"HTTP request (as opposed to parsing it, as discussed in",0,9,0.21,0.38,0.0,0.0,1,222
"http.NewRequest function, passing it the method you",0,9,0.21,0.39,0.0,0.0,1,222
chapters 3 and 4) by calling the,0,9,0.3,0.13,0.0,0.0,1,222
"want, the URL to send the request to, and an optional",0,9,0.3,0.13,0.0,0.0,1,222
HTTP request body.,0,9,0.21,0.57,0.0,0.0,1,222
"Once you have the response recorder and the request, send them to the multi-",0,9,0.21,0.15,0.0,0.0,0,222
"plexer using ServeHTTP . When this happens, the request is sent to the",0,9,0.3,0.13,0.0,0.0,1,222
handleRequest,0,9,0.21,0.7,0.0,0.01,1,222
"handleGet function, which will process it and return",0,9,0.21,0.4,0.01,0.0,1,222
handler function and then to the,0,9,0.3,0.13,0.0,0.0,1,222
"an HTTP response. But instead of sending it to the browser, the multiplexer pushes it",0,9,0.21,0.13,0.0,0.0,0,222
into the response recorder and you can inspect the response. The next few lines are,0,9,0.21,0.13,0.0,0.0,0,222
quite self-explanatory; you can inspect the response to see if it has the results you,0,9,0.21,0.13,0.0,0.0,0,222
"wanted. If it doesn’t, you can throw errors as per any unit test case,",0,9,0.3,0.13,0.0,0.0,1,222
HTTP or otherwise.,0,9,0.21,0.67,0.0,0.0,1,222
"All of these look simple, so let’s try another one. This listing shows how to create a",0,9,0.21,0.15,0.0,0.0,0,222
test case for a PUT request.,0,9,0.3,0.13,0.0,0.03,1,222
Listing 8.10 Testing PUT requests,1,9,0.48,0.15,0.03,0.02,1,222
func TestHandlePut(t *testing.T) {,0,7,0.26,0.13,0.02,0.0,1,222
mux := http.NewServeMux(),0,7,0.26,0.13,0.0,0.0,1,222
"mux.HandleFunc(""/post/"", handleRequest)",0,7,0.26,0.13,0.0,0.02,1,222
writer := httptest.NewRecorder(),0,7,0.26,0.13,0.02,0.0,1,222
"json := strings.NewReader(`{""content"":""Updated post"",""author"":""Sau",0,7,0.26,0.13,0.0,0.0,1,222
"Sheong""}`)",0,7,0.26,0.15,0.0,0.0,1,222
"request, _ := http.NewRequest(""PUT"", ""/post/1"", json)",0,7,0.26,0.13,0.0,0.0,1,222
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,222
if writer.Code != 200 {,0,7,0.26,0.13,0.02,0.0,1,222
"t.Errorf(""Response code is %v"", writer.Code)",0,7,0.26,0.13,0.0,0.0,1,222
},0,7,0.17,0.13,0.0,0.0,0,222
},0,7,0.17,0.13,0.0,0.02,0,222
"As you can see, there’s not much difference between this test case and the previous",0,9,0.21,0.13,0.02,0.0,0,222
"one, except you need to send in the",0,9,0.3,0.13,0.0,0.0,1,222
JSON content. You might notice that some code in,0,9,0.21,0.42,0.0,0.0,1,222
both test case functions is repeated. Such common test code (and other test fixtures),0,9,0.21,0.13,0.0,0.0,0,222
can be placed together in a setup function that prepares the test cases for execution.,0,9,0.21,0.13,0.0,0.0,0,222
203,1,9,0.3,0.82,0.0,0.0,0,223
HTTP testing with Go,1,9,0.39,0.38,0.0,0.03,1,223
Go’s testing package provides a,0,9,0.3,0.17,0.03,0.0,1,223
TestMain function that allows you to do whatever,0,9,0.21,0.44,0.0,0.0,1,223
TestMain function looks something like this:,0,9,0.21,0.47,0.0,0.0,1,223
setup or teardown is necessary. A typical,0,9,0.3,0.14,0.0,0.01,1,223
func TestMain(m *testing.M) {,0,7,0.26,0.14,0.01,0.0,1,223
setUp(),0,7,0.26,0.14,0.0,0.0,1,223
code := m.Run(),0,7,0.26,0.14,0.0,0.0,1,223
tearDown(),0,7,0.26,0.14,0.0,0.0,1,223
os.Exit(code),0,7,0.26,0.14,0.0,0.0,1,223
},0,7,0.17,0.14,0.0,0.02,0,223
where setUp and tearDown,0,9,0.3,0.14,0.02,0.0,1,223
are functions you can define to do setup and teardown for,0,9,0.21,0.37,0.0,0.0,1,223
setUp and tearDown are run only once for all test,0,9,0.21,0.45,0.0,0.0,1,223
all your test case functions. Note that,0,9,0.3,0.14,0.0,0.0,1,223
Run function on m . Call-,0,9,0.21,0.66,0.0,0.0,1,223
cases. The individual test case functions are called by calling the,0,9,0.3,0.14,0.0,0.0,1,223
"ing the Run function returns an exit code, which you can pass to the",0,9,0.3,0.14,0.0,0.0,1,223
os.Exit function.,0,9,0.21,0.7,0.0,0.0,1,223
This listing shows how this changes our test cases now.,0,9,0.3,0.17,0.0,0.03,1,223
Listing 8.11 Using TestMain,1,9,0.48,0.17,0.03,0.0,1,223
with httptest,1,9,0.39,0.41,0.0,0.02,1,223
package main,0,7,0.26,0.14,0.02,0.02,1,223
import (,0,7,0.26,0.14,0.02,0.0,1,223
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,223
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,223
"""net/http/httptest""",0,7,0.26,0.14,0.0,0.0,1,223
"""os""",0,7,0.26,0.14,0.0,0.0,1,223
"""strings""",0,7,0.26,0.14,0.0,0.0,1,223
"""testing""",0,7,0.26,0.14,0.0,0.0,1,223
),0,7,0.17,0.14,0.0,0.02,0,223
var mux *http.ServeMux,0,7,0.26,0.14,0.02,0.0,1,223
var writer *httptest.ResponseRecorder,0,7,0.26,0.14,0.0,0.02,1,223
func TestMain(m *testing.M) {,0,7,0.26,0.14,0.02,0.0,1,223
setUp(),0,7,0.26,0.14,0.0,0.0,1,223
code := m.Run(),0,7,0.26,0.14,0.0,0.0,1,223
os.Exit(code),0,7,0.26,0.14,0.0,0.0,1,223
},0,7,0.17,0.14,0.0,0.02,0,223
func setUp() {,0,7,0.26,0.14,0.02,0.0,1,223
mux = http.NewServeMux(),0,7,0.26,0.14,0.0,0.0,1,223
"mux.HandleFunc(""/post/"", handleRequest)",0,7,0.26,0.14,0.0,0.0,1,223
writer = httptest.NewRecorder(),0,7,0.26,0.14,0.0,0.0,1,223
},0,7,0.17,0.14,0.0,0.02,0,223
func TestHandleGet(t *testing.T) {,0,7,0.26,0.14,0.02,0.0,1,223
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.14,0.0,0.0,1,223
"mux.ServeHTTP(writer, request)",0,7,0.26,0.14,0.0,0.02,1,223
if writer.Code != 200 {,0,7,0.26,0.14,0.02,0.0,1,223
"t.Errorf(""Response code is %v"", writer.Code)",0,7,0.26,0.14,0.0,0.0,1,223
},0,7,0.17,0.14,0.0,0.0,0,223
var post Post,0,7,0.26,0.14,0.0,0.0,1,223
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.14,0.0,0.0,1,223
204,1,9,0.39,0.06,0.0,0.0,0,224
Testing your application,1,9,0.39,0.4,0.0,0.0,1,224
C 8,1,7,0.26,0.32,0.0,0.0,0,224
HAPTER,1,6,0.33,0.33,0.0,0.03,1,224
if post.Id != 1 {,0,7,0.26,0.13,0.03,0.0,1,224
"t.Errorf(""Cannot retrieve JSON post"")",0,7,0.26,0.13,0.0,0.0,1,224
},0,7,0.17,0.13,0.0,0.0,0,224
},0,7,0.17,0.13,0.0,0.02,0,224
func TestHandlePut(t *testing.T) {,0,7,0.26,0.13,0.02,0.0,1,224
"json := strings.NewReader(`{""content"":""Updated post"",""author"":""Sau",0,7,0.26,0.13,0.0,0.0,1,224
"Sheong""}`)",0,7,0.26,0.15,0.0,0.0,1,224
"request, _ := http.NewRequest(""PUT"", ""/post/1"", json)",0,7,0.26,0.13,0.0,0.0,1,224
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,224
if writer.Code != 200 {,0,7,0.26,0.13,0.02,0.0,1,224
"t.Errorf(""Response code is %v"", writer.Code)",0,7,0.26,0.13,0.0,0.0,1,224
},0,7,0.17,0.13,0.0,0.0,0,224
},0,7,0.17,0.13,0.0,0.02,0,224
Notice that the setUp function sets up the global variables that are used in each of the,0,9,0.21,0.13,0.02,0.0,0,224
"test case functions. This makes the test case functions more concise, and any changes",0,9,0.21,0.13,0.0,0.0,0,224
to how the test cases are set up are concentrated in a single place. There isn’t a need,0,9,0.21,0.13,0.0,0.0,0,224
for cleaning up after the tests so you simply exit after the test cases are run.,0,9,0.21,0.13,0.0,0.0,0,224
"But you didn’t test an important part of the web service. As you’ll recall, in chapter",0,9,0.21,0.15,0.0,0.0,0,224
7 you abstracted the data layer away from the web service and placed all the data,0,9,0.21,0.13,0.0,0.0,0,224
handleGet function calls a,0,9,0.21,0.48,0.0,0.0,1,224
retrieve func-,0,9,0.21,0.7,0.0,0.0,1,224
manipulation code in the data.go file. The,0,9,0.3,0.13,0.0,0.0,1,224
"tion, whereas the handlePut",0,9,0.3,0.13,0.0,0.0,1,224
function calls the retrieve,0,9,0.21,0.38,0.0,0.0,1,224
function and an update,0,9,0.21,0.62,0.0,0.0,1,224
"method on the Post struct. When you run the unit test cases, you’re actually getting",0,9,0.21,0.13,0.0,0.0,0,224
"and modifying data in the database. This is a dependency, and therefore the test cases",0,9,0.21,0.13,0.0,0.0,0,224
aren’t as independent as you’d like them to be.,0,9,0.3,0.13,0.0,0.0,1,224
How do you get around this?,0,9,0.3,0.15,0.0,0.02,1,224
8.4 Test doubles and dependency injection,1,12,0.54,0.06,0.02,0.01,1,224
One popular way of making the unit test cases more independent is using,0,9,0.21,0.13,0.01,0.0,0,224
test doubles .,1,9,0.39,0.74,0.0,0.0,1,224
"Test doubles are simulations of objects, structures, or functions that are used during",0,9,0.21,0.13,0.0,0.0,0,224
"testing when it’s inconvenient to use the actual object, structure, or function. It’s also",0,9,0.21,0.13,0.0,0.0,0,224
often used within the context of automated unit testing because it increases the inde-,0,9,0.21,0.13,0.0,0.0,0,224
pendency of the code being tested.,0,9,0.3,0.13,0.0,0.0,1,224
An example is when the code being tested involves sending of emails. Naturally,0,9,0.21,0.15,0.0,0.0,0,224
you don’t want to send out emails during unit testing. One way of getting around that,0,9,0.21,0.13,0.0,0.0,0,224
is to create test doubles that simulate sending emails. You’d create test doubles to,0,9,0.21,0.13,0.0,0.0,0,224
remove the dependency of your unit test cases on an actual database.,0,9,0.3,0.13,0.0,0.0,1,224
"The concept seems straightforward enough. During automated testing, you create",0,9,0.21,0.15,0.0,0.0,0,224
"test doubles and use them instead of using the actual functions or structs. However,",0,9,0.21,0.13,0.0,0.0,0,224
this approach requires design prior to coding the program. If you don’t have the idea,0,9,0.21,0.13,0.0,0.0,0,224
"of using test doubles in mind during design, you might not be able to do it at all. For",0,9,0.21,0.13,0.0,0.0,0,224
"example, in the previous section the design of the web service doesn’t allow you to cre-",0,9,0.21,0.13,0.0,0.0,0,224
ate test doubles for testing. This is because the dependency on the database is embed-,0,9,0.21,0.13,0.0,0.0,0,224
ded deep into the code.,0,9,0.3,0.13,0.0,0.0,1,224
205,1,9,0.3,0.82,0.0,0.0,0,225
Test doubles and dependency injection,1,9,0.39,0.33,0.0,0.03,1,225
One of the ways you can design for test doubles is to use the,0,9,0.3,0.17,0.03,0.0,1,225
dependency injection,1,9,0.39,0.69,0.0,0.0,1,225
design pattern. Dependency injection is a software design pattern that allows you to,0,9,0.21,0.14,0.0,0.0,0,225
decouple the dependencies between two or more layers of software. This is done,0,9,0.21,0.14,0.0,0.0,0,225
through passing a dependency,1,9,0.48,0.14,0.0,0.0,1,225
"to the called object, structure, or function. This depen-",0,9,0.21,0.38,0.0,0.0,1,225
"dency is used to perform the action instead of the object, structure, or function. In",0,9,0.21,0.14,0.0,0.0,0,225
"Go, this dependency is often an interface type. Let’s look at an example with the sim-",0,9,0.21,0.14,0.0,0.0,0,225
ple web service in chapter 7.,0,9,0.3,0.14,0.0,0.02,1,225
8.4.1 Dependency injection with Go,1,10,0.5,0.07,0.02,0.01,1,225
"In the web service, the handleRequest",0,9,0.3,0.14,0.01,0.0,1,225
handler function multiplexes,0,9,0.21,0.47,0.0,0.0,1,225
GET requests to,0,9,0.21,0.71,0.0,0.0,1,225
"the handleGet function, which extracts the id from the",0,9,0.3,0.14,0.0,0.0,1,225
URL and retrieves a Post,0,9,0.21,0.59,0.0,0.0,1,225
struct,0,9,0.21,0.8,0.0,0.0,1,225
using the retrieve function in,0,9,0.3,0.14,0.0,0.0,1,225
data.go . It uses a global,0,9,0.21,0.4,0.0,0.0,1,225
sql.DB struct to open a data-,0,9,0.21,0.61,0.0,0.0,1,225
posts table for the data.,0,9,0.21,0.62,0.0,0.0,1,225
base connection to a P ostgre,0,9,0.3,0.14,0.0,0.0,1,225
SQL database and queries the,0,9,0.21,0.38,0.0,0.0,1,225
Figure 8.3 shows the function calling flow in the web service in chapter 7. Access to,0,9,0.21,0.17,0.0,0.0,0,225
retrieve func-,0,9,0.21,0.72,0.0,0.0,1,225
the database is transparent to the rest of the functions except for the,0,9,0.21,0.14,0.0,0.0,0,225
sql.Db instance.,0,9,0.21,0.57,0.0,0.0,1,225
"tion, which will access the database through a global",0,9,0.3,0.14,0.0,0.0,1,225
"As you can see, handleRequest",0,9,0.3,0.17,0.0,0.0,1,225
and handleGet are dependent on,0,9,0.21,0.43,0.0,0.0,1,225
"retrieve , which",0,9,0.21,0.71,0.0,0.0,1,225
sql.DB . The dependency on,0,9,0.21,0.35,0.0,0.0,1,225
sql.DB is the root of the prob-,0,9,0.21,0.59,0.0,0.0,1,225
in turn is dependent on,0,9,0.3,0.14,0.0,0.0,1,225
"lem, so you need to remove it.",0,9,0.3,0.14,0.0,0.0,1,225
There are a few ways to decouple the dependencies (as with everything). You can,0,9,0.21,0.17,0.0,0.0,0,225
"start from the bottom and decouple the dependencies at the data abstraction layer,",0,9,0.21,0.14,0.0,0.0,0,225
where you can get the sql.DB,0,9,0.3,0.14,0.0,0.0,1,225
struct directly. You can also go from the top and inject,0,9,0.21,0.39,0.0,0.0,1,225
the sql.DB into handleRequest,0,9,0.3,0.14,0.0,0.0,1,225
"itself. In this section, I’ll show you how you can do it",0,9,0.21,0.41,0.0,0.0,1,225
from a top-down approach.,0,9,0.3,0.14,0.0,0.03,1,225
Called by main,0,7,0.26,0.17,0.03,0.03,1,225
handleRequest,0,7,0.26,0.17,0.03,0.03,1,225
handleGet,0,7,0.26,0.18,0.03,0.03,1,225
sql.Db PostgreSQL,0,7,0.17,0.4,0.03,0.0,1,225
retrieve,0,7,0.26,0.19,0.0,0.0,1,225
database,0,7,0.17,0.56,0.0,0.06,1,225
sql.Db is a global variable.,1,9,0.39,0.32,0.06,0.0,1,225
"Here, the retrieve function calls it directly.",1,9,0.39,0.32,0.0,0.02,1,225
Figure 8.3 The function calling flow of the web service in chapter 7.,1,7,0.44,0.14,0.02,0.0,1,225
Access to the database is transparent to the rest of the functions except,1,7,0.35,0.14,0.0,0.0,0,225
retrieve,1,8,0.46,0.19,0.0,0.0,1,225
"for the function, which will access the database through a",1,7,0.44,0.14,0.0,0.0,1,225
sql.Db,1,8,0.46,0.19,0.0,0.0,1,225
global instance.,1,7,0.44,0.14,0.0,0.0,1,225
206,1,9,0.39,0.06,0.0,0.0,0,226
Testing your application,1,9,0.39,0.4,0.0,0.0,1,226
C 8,1,7,0.26,0.32,0.0,0.0,0,226
HAPTER,1,6,0.33,0.33,0.0,0.03,1,226
Called by main,0,7,0.26,0.16,0.03,0.01,1,226
"Here, sql.Db is injected from",1,9,0.39,0.41,0.01,0.0,1,226
main as part of Post and is,1,9,0.39,0.41,0.0,0.0,1,226
Post,0,7,0.17,0.25,0.0,0.0,1,226
not visible to other functions.,1,9,0.39,0.41,0.0,0.01,1,226
sql.Db,0,7,0.17,0.24,0.01,0.04,1,226
handleRequest,0,7,0.26,0.15,0.04,0.03,1,226
Post,0,7,0.17,0.25,0.03,0.02,1,226
sql.Db,0,7,0.17,0.24,0.02,0.02,1,226
No function calls,1,9,0.39,0.41,0.02,0.0,1,226
handleGet,0,7,0.26,0.16,0.0,0.0,1,226
sql.Db directly.,1,9,0.39,0.41,0.0,0.02,1,226
Post,0,7,0.17,0.25,0.02,0.02,1,226
sql.Db,0,7,0.17,0.24,0.02,0.02,1,226
Post,0,7,0.17,0.38,0.02,0.01,1,226
retrieve,0,7,0.26,0.17,0.01,0.0,1,226
sql.Db PostgreSQL,0,7,0.17,0.37,0.0,0.0,1,226
database,0,7,0.17,0.52,0.0,0.04,1,226
Figure 8.4 Using the dependency injection pattern on the web service,1,7,0.44,0.12,0.04,0.0,1,226
Post,1,8,0.37,0.38,0.0,0.0,1,226
in chapter 7 by passing a pointer to a,1,7,0.44,0.12,0.0,0.0,1,226
"struct, which contains",1,7,0.35,0.42,0.0,0.0,1,226
sql.Db Post,1,8,0.46,0.12,0.0,0.0,1,226
sql.Db,1,8,0.37,0.48,0.0,0.0,1,226
", into the flow. The struct contains the",1,7,0.44,0.18,0.0,0.0,1,226
and so,1,7,0.35,0.54,0.0,0.0,1,226
sql.Db,1,8,0.37,0.47,0.0,0.0,1,226
none of the functions in the flow are dependent on,1,7,0.44,0.12,0.0,0.0,1,226
.,1,7,0.26,0.52,0.0,0.03,0,226
sql.Db can be removed and how it can be,0,9,0.21,0.47,0.03,0.0,1,226
Figure 8.4 shows how the dependency on,0,9,0.3,0.13,0.0,0.0,1,226
injected into the process flow from the main program. Note that the whole point of,0,9,0.21,0.13,0.0,0.0,0,226
"sql.Db but to avoid the direct dependency on it,",0,9,0.21,0.43,0.0,0.0,1,226
the exercise isn’t to reject the use of,0,9,0.3,0.13,0.0,0.0,1,226
in order for you to use test doubles during testing.,0,9,0.3,0.13,0.0,0.0,1,226
sql.DB into handleRequest,0,9,0.21,0.52,0.0,0.0,1,226
Earlier I mentioned that you can inject the,0,9,0.3,0.15,0.0,0.0,1,226
", but you",0,9,0.21,0.75,0.0,0.0,1,226
sql.DB as a parameter into,0,9,0.21,0.42,0.0,0.0,1,226
handleRequest . If you,0,9,0.21,0.65,0.0,0.0,1,226
can’t pass an instance or a pointer to,0,9,0.3,0.13,0.0,0.0,1,226
"do, you’re only pushing the problem upstream in the control flow. Instead you want to",0,9,0.21,0.13,0.0,0.0,0,226
Text ) into handleRequest,0,9,0.21,0.41,0.0,0.0,1,226
"pass an interface (in our example,",0,9,0.3,0.13,0.0,0.0,1,226
. To retrieve a post from,0,9,0.21,0.63,0.0,0.0,1,226
Text interface and you can assume it’ll know what,0,9,0.21,0.42,0.0,0.0,1,226
"the database, call a method on this",0,9,0.3,0.13,0.0,0.0,1,226
to do and return the necessary data you want. The next listing shows this interface.,0,9,0.21,0.13,0.0,0.03,0,226
handlePost,1,9,0.39,0.42,0.03,0.0,1,226
Listing 8.12 Interface to pass into,1,9,0.48,0.15,0.0,0.02,1,226
type Text interface {,0,7,0.26,0.13,0.02,0.0,1,226
fetch(id int) (err error),0,7,0.26,0.13,0.0,0.0,1,226
create() (err error),0,7,0.26,0.13,0.0,0.0,1,226
update() (err error),0,7,0.26,0.13,0.0,0.0,1,226
delete() (err error),0,7,0.26,0.13,0.0,0.0,1,226
207,1,9,0.3,0.82,0.0,0.0,0,227
Test doubles and dependency injection,1,9,0.39,0.33,0.0,0.03,1,227
"Next, let the Post struct implement the",0,9,0.3,0.14,0.03,0.0,1,227
Text interface and make one of the fields in,0,9,0.21,0.48,0.0,0.0,1,227
the Post struct a pointer to,0,9,0.3,0.14,0.0,0.0,1,227
sql.DB . Post will implement the,0,9,0.21,0.37,0.0,0.0,1,227
Text interface as long as,0,9,0.21,0.64,0.0,0.0,1,227
"Text has (which is already does, since you’re sim-",0,9,0.21,0.43,0.0,0.0,1,227
it implements all the methods that,0,9,0.3,0.14,0.0,0.0,1,227
ply reverse-engineering Text,0,9,0.3,0.14,0.0,0.0,1,227
"out of Post , shown in this listing).",0,9,0.21,0.38,0.0,0.03,1,227
Listing 8.13 The new Post,1,9,0.48,0.17,0.03,0.0,1,227
struct,1,9,0.39,0.38,0.0,0.02,1,227
type Post struct {,0,7,0.26,0.14,0.02,0.0,1,227
Db      *sql.DB,0,7,0.26,0.14,0.0,0.0,1,227
"Id      int    `json:""id""`",0,7,0.26,0.14,0.0,0.0,1,227
"Content string `json:""content""`",0,7,0.26,0.14,0.0,0.0,1,227
"Author  string `json:""author""`",0,7,0.26,0.14,0.0,0.0,1,227
},0,7,0.17,0.14,0.0,0.02,0,227
sql.DB directly into handleRequest,0,9,0.21,0.46,0.02,0.0,1,227
This solves the problem of passing the,0,9,0.3,0.14,0.0,0.0,1,227
. Instead of,0,9,0.21,0.75,0.0,0.0,1,227
"passing sql.DB , you can pass an instance of the",0,9,0.3,0.14,0.0,0.0,1,227
Post struct. The various Post,0,9,0.21,0.53,0.0,0.0,1,227
methods,0,9,0.21,0.77,0.0,0.0,1,227
will use the sql.DB that’s a field in the struct instead. Because you’re passing a,0,9,0.21,0.14,0.0,0.0,0,227
Post,0,9,0.21,0.8,0.0,0.01,1,227
struct into handleRequest,0,9,0.3,0.14,0.01,0.0,1,227
", the function signature needs to be changed. The next list-",0,9,0.21,0.36,0.0,0.0,1,227
handleRequest function.,0,9,0.21,0.38,0.0,0.0,1,227
ing shows the changes in the,0,9,0.3,0.14,0.0,0.03,1,227
Listing 8.14 The new handleRequest,1,9,0.48,0.17,0.03,0.0,1,227
function,1,9,0.39,0.48,0.0,0.02,1,227
func handleRequest(t Text) http.HandlerFunc {,0,7,0.26,0.14,0.02,0.0,1,227
Passes in Text,1,9,0.39,0.74,0.0,0.0,1,227
"return func(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.0,0.0,1,227
interface,1,9,0.39,0.74,0.0,0.0,1,227
Returns,1,9,0.48,0.04,0.0,0.0,1,227
var err error,0,7,0.26,0.14,0.0,0.0,1,227
function,1,9,0.48,0.04,0.0,0.0,1,227
switch r.Method {,0,7,0.26,0.14,0.0,0.0,1,227
with correct,1,9,0.48,0.01,0.0,0.0,1,227
"case ""GET"":",0,7,0.26,0.14,0.0,0.0,1,227
signature,1,9,0.48,0.03,0.0,0.0,1,227
"err = handleGet(w, r, t)",0,7,0.26,0.14,0.0,0.0,1,227
Passes on Text interface,1,9,0.39,0.62,0.0,0.0,1,227
"case ""POST"":",0,7,0.26,0.14,0.0,0.0,1,227
to actual handlers,1,9,0.39,0.62,0.0,0.0,1,227
"err = handlePost(w, r, t)",0,7,0.26,0.14,0.0,0.0,1,227
"case ""PUT"":",0,7,0.26,0.14,0.0,0.0,1,227
"err = handlePut(w, r, t)",0,7,0.26,0.14,0.0,0.0,1,227
"case ""DELETE"":",0,7,0.26,0.14,0.0,0.0,1,227
"err = handleDelete(w, r, t)",0,7,0.26,0.14,0.0,0.0,1,227
},0,7,0.17,0.14,0.0,0.0,0,227
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,227
"http.Error(w, err.Error(), http.StatusInternalServerError)",0,7,0.26,0.14,0.0,0.0,1,227
return,0,7,0.26,0.14,0.0,0.0,1,227
},0,7,0.17,0.14,0.0,0.0,0,227
},0,7,0.17,0.14,0.0,0.0,0,227
},0,7,0.17,0.14,0.0,0.02,0,227
"As you can see, handleRequest",0,9,0.3,0.14,0.02,0.0,1,227
no longer follows the ServeHTTP,0,9,0.21,0.41,0.0,0.0,1,227
method signature,0,9,0.21,0.7,0.0,0.0,1,227
and is no longer a handler function. This is a problem—you can no longer attach it to,0,9,0.21,0.14,0.0,0.0,0,227
a URL using the HandleFunc,0,9,0.3,0.14,0.0,0.0,1,227
function.,0,9,0.21,0.38,0.0,0.0,1,227
"To get around this, you can use the same technique first discussed in the section",0,9,0.21,0.17,0.0,0.0,0,227
handleRequest to return a,0,9,0.21,0.46,0.0,0.0,1,227
http.HandlerFunc,0,9,0.21,0.69,0.0,0.0,1,227
on handler chaining in chapter 3: get,0,9,0.3,0.14,0.0,0.0,1,227
function.,0,9,0.3,0.14,0.0,0.0,1,227
208,1,9,0.39,0.06,0.0,0.0,0,228
Testing your application,1,9,0.39,0.4,0.0,0.0,1,228
C 8,1,7,0.26,0.32,0.0,0.0,0,228
HAPTER,1,6,0.33,0.33,0.0,0.03,1,228
"Then, in the main function instead of attaching a handler function to the",0,9,0.21,0.15,0.03,0.0,0,228
"URL , you",0,9,0.21,0.75,0.0,0.0,1,228
can call the handleRequest,0,9,0.3,0.13,0.0,0.0,1,228
function. handleRequest,0,9,0.21,0.36,0.0,0.0,1,228
returns an http.HandlerFunc,0,9,0.21,0.58,0.0,0.0,1,228
"function, so it fits HandleFunc",0,9,0.3,0.13,0.0,0.0,1,228
’s method signature and you end up registering a handler,0,9,0.21,0.36,0.0,0.0,1,228
main function.,0,9,0.21,0.69,0.0,0.0,1,228
"function for the URL , as before. The next listing shows the modified",0,9,0.3,0.13,0.0,0.03,1,228
main function,1,9,0.39,0.36,0.03,0.0,1,228
Listing 8.15 The modified,1,9,0.48,0.15,0.0,0.02,1,228
func main() {,0,7,0.26,0.13,0.02,0.02,1,228
var err error,0,7,0.26,0.13,0.02,0.0,1,228
"db, err := sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp ssl-",0,7,0.26,0.13,0.0,0.0,1,228
"mode=disable"")",0,7,0.26,0.15,0.0,0.0,1,228
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,228
panic(err),0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.02,0,228
Registering,1,9,0.39,0.71,0.02,0.0,1,228
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,228
"handleRequest,",1,9,0.39,0.71,0.0,0.0,1,228
"Addr: "":8080"",",0,7,0.26,0.13,0.0,0.0,1,228
passing in,1,9,0.39,0.71,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.0,0,228
Post struct,1,9,0.39,0.71,0.0,0.0,1,228
"http.HandleFunc(""/post/"", handleRequest(&Post{Db: db}))",0,7,0.26,0.13,0.0,0.0,1,228
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.02,0,228
sql.DB into the handleRequest,0,9,0.21,0.47,0.02,0.0,1,228
Notice that you passed the pointer to,0,9,0.3,0.13,0.0,0.0,1,228
indirectly,0,9,0.21,0.75,0.0,0.0,1,228
through the Post struct. This is how a dependency can be injected into,0,9,0.3,0.13,0.0,0.0,1,228
handle-,0,9,0.21,0.76,0.0,0.01,1,228
Request . This listing shows how it can be done for,0,9,0.3,0.13,0.01,0.0,1,228
handleGet .,0,9,0.21,0.54,0.0,0.03,1,228
Listing 8.16 The new handleGet,1,9,0.48,0.15,0.03,0.0,1,228
function,1,9,0.39,0.42,0.0,0.02,1,228
"func handleGet(w http.ResponseWriter, r *http.Request, post Text) (err error) {",0,7,0.17,0.13,0.02,0.0,0,228
Accepts,1,9,0.48,0.02,0.0,0.0,1,228
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,228
Text,1,9,0.48,0.04,0.0,0.0,1,228
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,228
interface,1,9,0.48,0.01,0.0,0.0,1,228
return,0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.0,0,228
err = post.fetch(id),0,7,0.26,0.13,0.0,0.0,1,228
Retrieves data into,1,9,0.39,0.6,0.0,0.0,1,228
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,228
Post struct,1,9,0.39,0.6,0.0,0.0,1,228
return,0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.0,0,228
"output, err := json.MarshalIndent(post, """", ""\t\t"")",0,7,0.26,0.13,0.0,0.0,1,228
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,228
return,0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.0,0,228
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.13,0.0,0.0,1,228
w.Write(output),0,7,0.26,0.13,0.0,0.0,1,228
return,0,7,0.26,0.13,0.0,0.0,1,228
},0,7,0.17,0.13,0.0,0.02,0,228
Post struct is sent,0,9,0.21,0.68,0.02,0.0,1,228
"As you can see, there’s not a whole lot of difference, except that the",0,9,0.3,0.13,0.0,0.0,1,228
into the function instead of being created within the function. Now rather than call-,0,9,0.21,0.13,0.0,0.0,0,228
"ing the retrieve function, which requires a global",0,9,0.3,0.13,0.0,0.0,1,228
"sql.DB , you can call the",0,9,0.21,0.56,0.0,0.0,1,228
fetch,0,9,0.21,0.78,0.0,0.01,1,228
Post struct to retrieve the data.,0,9,0.21,0.51,0.01,0.0,1,228
"method, shown in the following listing, on the",0,9,0.3,0.13,0.0,0.0,1,228
209,1,9,0.3,0.82,0.0,0.0,0,229
Test doubles and dependency injection,1,9,0.39,0.33,0.0,0.03,1,229
Listing 8.17 The new fetch,1,9,0.48,0.17,0.03,0.0,1,229
method,1,9,0.39,0.39,0.0,0.02,1,229
func (post *Post) fetch(id int) (err error) {,0,7,0.26,0.14,0.02,0.0,1,229
"err = post.Db.QueryRow(""select id, content, author from posts where id =",0,7,0.17,0.14,0.0,0.0,0,229
➥,0,10,0.23,0.16,0.0,0.0,0,229
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.18,0.0,0.0,1,229
return,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.02,0,229
"sql.DB struct, you use the one passed to the method through",0,9,0.21,0.35,0.02,0.0,1,229
Instead of using a global,0,9,0.3,0.14,0.0,0.0,1,229
"the Post struct as a field. If you compile and run this web service now, it’ll work exactly",0,9,0.21,0.14,0.0,0.0,0,229
like how it worked previously. What you have done is remove a dependency (the,0,9,0.21,0.14,0.0,0.0,0,229
global sql.DB struct) from being embedded into the code.,0,9,0.3,0.14,0.0,0.0,1,229
Quite convoluted. So how is this helpful?,0,9,0.3,0.17,0.0,0.0,1,229
The purpose is to make the unit test cases independent. If the dependency on the,0,9,0.21,0.17,0.0,0.0,0,229
"database is embedded into the code, the code can’t be tested independently. But if",0,9,0.21,0.14,0.0,0.0,0,229
"you’re injecting the dependency from an external source, you can test the rest of the",0,9,0.21,0.14,0.0,0.0,0,229
code using a test double. Let’s see how to do this.,0,9,0.3,0.14,0.0,0.0,1,229
The handleRequest function takes in any struct that implements the,0,9,0.3,0.17,0.0,0.0,1,229
Text inter-,0,9,0.21,0.75,0.0,0.0,1,229
Text and pass it as a,0,9,0.21,0.67,0.0,0.0,1,229
face. This means you can create a test double that implements,0,9,0.3,0.14,0.0,0.0,1,229
parameter into the handleRequest,0,9,0.3,0.14,0.0,0.0,1,229
FakePost and,0,9,0.21,0.73,0.0,0.0,1,229
function. Create a test double called,0,9,0.21,0.43,0.0,0.0,1,229
"Text interface, shown in",0,9,0.21,0.64,0.0,0.0,1,229
that implements the few methods required to implement the,0,9,0.3,0.14,0.0,0.0,1,229
this listing.,0,9,0.3,0.14,0.0,0.03,1,229
Listing 8.18 The FakePost,1,9,0.48,0.17,0.03,0.0,1,229
test double,1,9,0.39,0.39,0.0,0.02,1,229
package main,0,7,0.26,0.14,0.02,0.01,1,229
type FakePost struct {,0,7,0.26,0.14,0.01,0.0,1,229
Id      int,0,7,0.26,0.14,0.0,0.0,1,229
Content string,0,7,0.26,0.14,0.0,0.0,1,229
Author  string,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.01,0,229
func (post *FakePost) fetch(id int) (err error) {,0,7,0.26,0.14,0.01,0.0,1,229
post.Id = id,0,7,0.26,0.14,0.0,0.0,1,229
return,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.01,0,229
func (post *FakePost) create() (err error) {,0,7,0.26,0.14,0.01,0.0,1,229
return,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.01,0,229
func (post *FakePost) update() (err error) {,0,7,0.26,0.14,0.01,0.0,1,229
return,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.01,0,229
func (post *FakePost) delete() (err error) {,0,7,0.26,0.14,0.01,0.0,1,229
return,0,7,0.26,0.14,0.0,0.0,1,229
},0,7,0.17,0.14,0.0,0.02,0,229
"fetch method, the id is set to whatever was passed in for",0,9,0.21,0.37,0.02,0.0,1,229
Note that in the case of the,0,9,0.3,0.14,0.0,0.0,1,229
testing purposes. The other methods can do nothing because they aren’t used. You’ll,0,9,0.21,0.14,0.0,0.0,0,229
210,1,9,0.39,0.06,0.0,0.0,0,230
Testing your application,1,9,0.39,0.4,0.0,0.0,1,230
C 8,1,7,0.26,0.32,0.0,0.0,0,230
HAPTER,1,6,0.33,0.33,0.0,0.03,1,230
"still need to implement them, though; otherwise it won’t be considered an implemen-",0,9,0.21,0.13,0.03,0.0,0,230
"tation of the Text interface. To keep the code clean, place the test double in a file",0,9,0.21,0.13,0.0,0.0,0,230
named doubles.go.,0,9,0.3,0.13,0.0,0.0,1,230
"handleGet in server_test.go, shown in the following listing.",0,9,0.21,0.36,0.0,0.0,1,230
Now create a test case for,0,9,0.3,0.15,0.0,0.03,1,230
handlePost,1,9,0.39,0.48,0.03,0.0,1,230
Listing 8.19 Test double dependency into,1,9,0.48,0.15,0.0,0.02,1,230
func TestHandleGet(t *testing.T) {,0,7,0.26,0.13,0.02,0.0,1,230
mux := http.NewServeMux(),0,7,0.26,0.13,0.0,0.0,1,230
handleRequest,0,9,0.21,0.37,0.0,0.0,1,230
"mux.HandleFunc(""/post/"",",0,7,0.26,0.13,0.0,0.0,1,230
(&FakePost{})),0,7,0.17,0.49,0.0,0.0,1,230
Passing a FakePost,1,9,0.39,0.69,0.0,0.0,1,230
instead of a Post,1,9,0.39,0.69,0.0,0.0,1,230
writer := httptest.NewRecorder(),0,7,0.26,0.13,0.0,0.0,1,230
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.13,0.0,0.0,1,230
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.01,1,230
if writer.Code != 200 {,0,7,0.26,0.13,0.01,0.0,1,230
"t.Errorf(""Response code is %v"", writer.Code)",0,7,0.26,0.13,0.0,0.0,1,230
},0,7,0.17,0.13,0.0,0.0,0,230
var post Post,0,7,0.26,0.13,0.0,0.0,1,230
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.13,0.0,0.0,1,230
if post.Id != 1 {,0,7,0.26,0.13,0.0,0.0,1,230
"t.Errorf(""Cannot retrieve JSON post"")",0,7,0.26,0.13,0.0,0.0,1,230
},0,7,0.17,0.13,0.0,0.0,0,230
},0,7,0.17,0.13,0.0,0.02,0,230
Instead of passing a Post,0,9,0.3,0.13,0.02,0.0,1,230
FakePost struct. That’s all,0,9,0.21,0.61,0.0,0.0,1,230
"struct, this time you pass in your",0,9,0.21,0.34,0.0,0.0,1,230
there is to it. The rest of the test case is no different from the earlier one.,0,9,0.21,0.13,0.0,0.0,0,230
"To verify that it works, shut down your database and try running the test case. Your",0,9,0.21,0.15,0.0,0.0,0,230
"earlier test cases will fail because they need to interact with a database, but with test",0,9,0.21,0.13,0.0,0.0,0,230
handleGet,0,9,0.21,0.74,0.0,0.0,1,230
"doubles, an actual database is no longer needed. You can now test the",0,9,0.3,0.13,0.0,0.0,1,230
independently.,0,9,0.3,0.13,0.0,0.0,1,230
If handleGet works properly the test case will pass; otherwise it’ll fail. Note that the,0,9,0.21,0.15,0.0,0.0,0,230
fetch method in the Post,0,9,0.21,0.4,0.0,0.0,1,230
test case doesn’t actually test the,0,9,0.3,0.13,0.0,0.0,1,230
"struct, which requires the",0,9,0.21,0.62,0.0,0.0,1,230
posts table. You don’t want to do,0,9,0.21,0.56,0.0,0.0,1,230
setting up (and possibly tearing down) of at least the,0,9,0.3,0.13,0.0,0.0,1,230
"so repeatedly, which would take a long time. Also, you want to isolate the different",0,9,0.21,0.13,0.0,0.0,0,230
parts of the web service and test them independently to make sure they work and that,0,9,0.21,0.13,0.0,0.0,0,230
you understand what went wrong. This is critical because the code continually evolves,0,9,0.21,0.13,0.0,0.0,0,230
"and changes. As code changes, you’ll want to ensure that whatever you add later won’t",0,9,0.21,0.13,0.0,0.0,0,230
break what has worked before.,0,9,0.3,0.13,0.0,0.02,1,230
8.5 Third-party Go testing libraries,1,12,0.54,0.06,0.02,0.01,1,230
"The testing package is a simple but effective library for testing Go programs, one",0,9,0.21,0.13,0.01,0.0,0,230
"that’s used by Go for verifying the standard library itself, but areas exist where more",0,9,0.21,0.13,0.0,0.0,0,230
capabilities would be welcome. A number of Go libraries are available that enhance,0,9,0.21,0.13,0.0,0.0,0,230
"the testing package. In this section we’ll explore two popular ones, gocheck and",0,9,0.21,0.13,0.0,0.0,0,230
testing package while,0,9,0.21,0.63,0.0,0.0,1,230
Ginkgo. Gocheck is simpler and more integrated with the,0,9,0.3,0.13,0.0,0.0,1,230
enhancing it. Ginkgo enables behavior-driven development in Go but is more com-,0,9,0.21,0.13,0.0,0.0,0,230
plex and has a steeper learning curve.,0,9,0.3,0.13,0.0,0.0,1,230
211,1,9,0.3,0.82,0.0,0.0,0,231
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,231
8.5.1 Introducing the gocheck testing package,1,10,0.5,0.07,0.03,0.01,1,231
"check package, a test framework that builds on top",0,9,0.21,0.42,0.01,0.0,1,231
The gocheck project provides the,0,9,0.3,0.14,0.0,0.0,1,231
of the testing package and provides a set of features that fills the feature gaps of the,0,9,0.21,0.14,0.0,0.0,0,231
standard Go testing package. Some of these features are:,0,9,0.3,0.14,0.0,0.01,1,231
Suite-based grouping of tests,0,9,0.3,0.19,0.01,0.0,1,231
■,0,4,0.11,0.17,0.0,0.01,0,231
Test fixtures per test suite or test case,0,9,0.3,0.19,0.01,0.0,1,231
■,0,4,0.11,0.17,0.0,0.01,0,231
"Assertions, with an extensible checker interface",0,9,0.3,0.19,0.01,0.0,1,231
■,0,4,0.11,0.17,0.0,0.01,0,231
More helpful error reporting,0,9,0.3,0.19,0.01,0.0,1,231
■,0,4,0.11,0.17,0.0,0.01,0,231
Tight integration with the testing package,0,9,0.3,0.19,0.01,0.0,1,231
■,0,4,0.11,0.17,0.0,0.02,0,231
Installing the package is extremely easy. Just run this command on the console to,0,9,0.21,0.14,0.02,0.0,0,231
download the package:,0,9,0.3,0.14,0.0,0.01,1,231
go get gopkg.in/check.v1,0,7,0.26,0.14,0.01,0.01,1,231
check package to the web service,0,9,0.21,0.57,0.01,0.0,1,231
The following listing shows how you can apply the,0,9,0.3,0.14,0.0,0.0,1,231
from chapter 7.,0,9,0.3,0.14,0.0,0.03,1,231
check package,1,9,0.39,0.46,0.03,0.0,1,231
Listing 8.20 server_test.go using the,1,9,0.48,0.17,0.0,0.02,1,231
package main,0,7,0.26,0.14,0.02,0.02,1,231
import (,0,7,0.26,0.14,0.02,0.0,1,231
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,231
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,231
"""net/http/httptest""",0,7,0.26,0.14,0.0,0.0,1,231
Exported identifiers can be,1,9,0.39,0.53,0.0,0.0,1,231
"""testing""",0,7,0.26,0.14,0.0,0.0,1,231
accessed without qualifier.,1,9,0.39,0.53,0.0,0.0,1,231
". ""gopkg.in/check.v1""",0,7,0.26,0.14,0.0,0.0,1,231
),0,7,0.17,0.14,0.0,0.02,0,231
type PostTestSuite struct {},0,7,0.26,0.14,0.02,0.0,1,231
Creates test suite,1,9,0.39,0.64,0.0,0.01,1,231
func init() {,0,7,0.26,0.14,0.01,0.0,1,231
Suite(&PostTestSuite{}),0,7,0.26,0.14,0.0,0.0,1,231
Registers test suite,1,9,0.39,0.51,0.0,0.0,1,231
},0,7,0.17,0.14,0.0,0.02,0,231
func Test(t *testing.T) { TestingT(t) },0,7,0.26,0.14,0.02,0.0,1,231
Integrates with,1,9,0.39,0.66,0.0,0.0,1,231
testing package,1,9,0.39,0.66,0.0,0.0,1,231
func (s *PostTestSuite) TestHandleGet(c *C) {,0,7,0.26,0.14,0.0,0.0,1,231
mux := http.NewServeMux(),0,7,0.26,0.14,0.0,0.0,1,231
"mux.HandleFunc(""/post/"", handleRequest(&FakePost{}))",0,7,0.26,0.14,0.0,0.0,1,231
writer := httptest.NewRecorder(),0,7,0.26,0.14,0.0,0.0,1,231
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.14,0.0,0.0,1,231
"mux.ServeHTTP(writer, request)",0,7,0.26,0.14,0.0,0.02,1,231
"c.Check(writer.Code, Equals, 200)",0,7,0.26,0.14,0.02,0.0,1,231
var post Post,0,7,0.26,0.14,0.0,0.0,1,231
Verifies values,1,9,0.39,0.66,0.0,0.0,1,231
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.14,0.0,0.0,1,231
"c.Check(post.Id, Equals, 1)",0,7,0.26,0.14,0.0,0.0,1,231
},0,7,0.17,0.14,0.0,0.0,0,231
212,1,9,0.39,0.06,0.0,0.0,0,232
Testing your application,1,9,0.39,0.4,0.0,0.0,1,232
C 8,1,7,0.26,0.32,0.0,0.0,0,232
HAPTER,1,6,0.33,0.33,0.0,0.03,1,232
"First, you need to import the package. Note that you’re importing the package as a",0,9,0.21,0.13,0.03,0.0,0,232
dot ( . ) so that all the exported identifiers in the package can be accessed without a,0,9,0.21,0.13,0.0,0.0,0,232
qualifier.,0,9,0.3,0.13,0.0,0.0,1,232
"Next, you need to create a test suite, which is simply a struct. It can be an empty",0,9,0.21,0.15,0.0,0.0,0,232
"struct (as shown in the listing) or one with fields, which we’ll discuss later. You must",0,9,0.21,0.13,0.0,0.0,0,232
also call the Suite function and pass it an instance of the test suite. This will register,0,9,0.21,0.13,0.0,0.0,0,232
the test suite you just created. Any method within the test suite that follows the format,0,9,0.21,0.13,0.0,0.0,0,232
TestXxx will be considered a test case and will be executed as such.,0,9,0.3,0.13,0.0,0.0,1,232
testing package. You do so by creat-,0,9,0.21,0.52,0.0,0.0,1,232
As a final step you need to integrate with the,0,9,0.3,0.15,0.0,0.0,1,232
"ing a normal testing package test case; that is, a function with the format",0,9,0.21,0.13,0.0,0.0,0,232
TestXxx,0,9,0.21,0.76,0.0,0.01,1,232
testing.T . In this function you call the,0,9,0.21,0.34,0.01,0.0,1,232
"TestingT function,",0,9,0.21,0.67,0.0,0.0,1,232
that takes in a pointer to a,0,9,0.3,0.13,0.0,0.0,1,232
passing it the pointer to testing.T,0,9,0.3,0.13,0.0,0.0,1,232
.,0,9,0.12,0.41,0.0,0.0,0,232
Suite function,0,9,0.21,0.7,0.0,0.0,1,232
This will run all the test suites that have been registered using the,0,9,0.3,0.15,0.0,0.0,1,232
"testing package. With the setup done, let’s",0,9,0.21,0.47,0.0,0.0,1,232
and the results will be passed back to the,0,9,0.3,0.13,0.0,0.0,1,232
TestHandleGet that is a method,0,9,0.21,0.56,0.0,0.0,1,232
look at a simple test case. We have a test case named,0,9,0.3,0.13,0.0,0.0,1,232
"on the test suite and takes in a pointer to C, which has a number of interesting meth-",0,9,0.21,0.13,0.0,0.0,0,232
"ods. Although we won’t cover all of them in this section, interesting methods include",0,9,0.21,0.13,0.0,0.0,0,232
"Check and Assert , which allow you to verify the results of the values.",0,9,0.21,0.13,0.0,0.0,0,232
"For example, in listing 8.20 the code checks whether the",0,9,0.3,0.15,0.0,0.0,1,232
HTTP code that’s returned,0,9,0.21,0.61,0.0,0.0,1,232
"is 200. If it’s not, the test case will fail but will continue executing until the end of the",0,9,0.21,0.13,0.0,0.0,0,232
test case. If you use Assert,0,9,0.3,0.13,0.0,0.0,1,232
"instead of Check , the test case will fail and return.",0,9,0.21,0.35,0.0,0.0,1,232
"go test command, but you can also",0,9,0.21,0.53,0.0,0.0,1,232
Let’s see how this works. You can use the same,0,9,0.3,0.15,0.0,0.0,1,232
use the check package-specific extra verbose flag (,0,9,0.3,0.13,0.0,0.0,1,232
-check.vv ) to provide more details:,0,9,0.21,0.53,0.0,0.01,1,232
go test -check.vv,0,7,0.26,0.13,0.01,0.01,1,232
This is what you get:,0,9,0.3,0.13,0.01,0.01,1,232
START: server_test.go:19: PostTestSuite.TestGetPost,0,7,0.26,0.13,0.01,0.0,1,232
PASS: server_test.go:19: PostTestSuite.TestGetPost  0.000s,0,7,0.26,0.13,0.0,0.02,1,232
OK: 1 passed,0,7,0.26,0.13,0.02,0.0,1,232
PASS,0,7,0.26,0.13,0.0,0.0,1,232
ok    gocheck    0.007s,0,7,0.26,0.13,0.0,0.02,1,232
"As you can see, the extra verbosity provided more information, especially on the start",0,9,0.21,0.13,0.02,0.0,0,232
"of the test run. This isn’t helpful in this specific test case, but you’ll see later how it can",0,9,0.21,0.13,0.0,0.0,0,232
be useful.,0,9,0.3,0.13,0.0,0.0,1,232
handleGet,0,9,0.21,0.74,0.0,0.0,1,232
What happens if you hit an error? Let’s make a slight change to the,0,9,0.3,0.15,0.0,0.0,1,232
function and add the following statement right before you return:,0,9,0.3,0.13,0.0,0.01,1,232
"http.NotFound(w, r)",0,7,0.26,0.13,0.01,0.01,1,232
go test command,0,9,0.21,0.67,0.01,0.0,1,232
This will throw an HTTP,0,9,0.3,0.13,0.0,0.0,1,232
404 status code. When you run the same,0,9,0.21,0.33,0.0,0.0,1,232
"again, you’ll get this:",0,9,0.3,0.13,0.0,0.01,1,232
START: server_test.go:19: PostTestSuite.TestGetPost,0,7,0.26,0.13,0.01,0.0,1,232
server_test.go:29:,0,7,0.26,0.13,0.0,0.0,1,232
213,1,9,0.3,0.82,0.0,0.0,0,233
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,233
"c.Check(post.Id, Equals, 1)",0,7,0.26,0.14,0.03,0.0,1,233
... obtained int = 0,0,7,0.26,0.14,0.0,0.0,1,233
... expected int = 1,0,7,0.26,0.14,0.0,0.02,1,233
FAIL: server_test.go:19: PostTestSuite.TestGetPost,0,7,0.26,0.14,0.02,0.02,1,233
"OOPS: 0 passed, 1 FAILED",0,7,0.26,0.14,0.02,0.0,1,233
--- FAIL: Test (0.00s),0,7,0.26,0.14,0.0,0.0,1,233
FAIL,0,7,0.26,0.14,0.0,0.0,1,233
exit status 1,0,7,0.26,0.14,0.0,0.01,1,233
FAIL  gocheck    0.007s,0,7,0.26,0.14,0.01,0.01,1,233
"As you can see, this gives a lot more valuable information.",0,9,0.3,0.14,0.01,0.0,1,233
check package is the ability to create test fix-,0,9,0.21,0.47,0.0,0.0,1,233
Another very useful feature in the,0,9,0.3,0.17,0.0,0.0,1,233
tures. A test fixture is a fixed state of the program before it’s being tested. You can set,1,9,0.39,0.14,0.0,0.0,0,233
"up test fixtures before a test is run, and then check for the expected state.",0,9,0.21,0.14,0.0,0.0,0,233
The check package provides a set of set-up and tear-down functions for an entire,0,9,0.21,0.17,0.0,0.0,0,233
SetupSuite function is run once when the suite,0,9,0.21,0.44,0.0,0.0,1,233
test suite or for every test case. The,0,9,0.3,0.14,0.0,0.0,1,233
starts running; the TearDownSuite,0,9,0.3,0.14,0.0,0.0,1,233
function is run once after all tests have finished,0,9,0.21,0.44,0.0,0.0,1,233
running. The SetupTest,0,9,0.3,0.14,0.0,0.0,1,233
function is run once before every test starts running; the,0,9,0.21,0.36,0.0,0.0,1,233
TearDownTest is run every time after each test has finished running.,0,9,0.3,0.14,0.0,0.0,1,233
This is how it works. You can use the same test case as before; just add a new test,0,9,0.21,0.17,0.0,0.0,0,233
"case for the case. If you notice from the earlier code, between the two test cases a",0,9,0.21,0.14,0.0,0.0,0,233
PUT,0,9,0.12,0.24,0.0,0.01,0,233
few common statements exist:,0,9,0.3,0.14,0.01,0.01,1,233
mux := http.NewServeMux(),0,7,0.26,0.14,0.01,0.0,1,233
"mux.HandleFunc(""/post/"", handlePost(&FakePost{}))",0,7,0.26,0.14,0.0,0.0,1,233
writer := httptest.NewRecorder(),0,7,0.26,0.14,0.0,0.02,1,233
HandleFunc method,0,9,0.21,0.68,0.02,0.0,1,233
Common to all the test cases is the multiplexer and a call to the,0,9,0.3,0.14,0.0,0.0,1,233
on the multiplexer. HandleFunc,0,9,0.3,0.14,0.0,0.0,1,233
"""/post/"" , and a call to",0,9,0.21,0.64,0.0,0.0,1,233
takes in a common URL,0,9,0.21,0.42,0.0,0.0,1,233
"handlePost , passing it an empty",0,9,0.3,0.14,0.0,0.0,1,233
"FakePost , and returns a",0,9,0.21,0.43,0.0,0.0,1,233
HandlerFunc function.,0,9,0.21,0.65,0.0,0.0,1,233
"Finally, there’s a ResponseRecorder",0,9,0.3,0.14,0.0,0.0,1,233
for recording the responses to the request. This,0,9,0.21,0.44,0.0,0.0,1,233
sets the stage for both test cases (and the rest of the test cases in the suite) and so can,0,9,0.21,0.14,0.0,0.0,0,233
be considered test fixtures for both test cases.,0,9,0.3,0.14,0.0,0.0,1,233
The following listing shows the new server_test.go.,0,9,0.3,0.17,0.0,0.03,1,233
check package,1,9,0.39,0.42,0.03,0.0,1,233
Listing 8.21 Fixtures using the,1,9,0.48,0.17,0.0,0.02,1,233
package main,0,7,0.26,0.14,0.02,0.02,1,233
import (,0,7,0.26,0.14,0.02,0.0,1,233
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,233
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,233
"""net/http/httptest""",0,7,0.26,0.14,0.0,0.0,1,233
"""testing""",0,7,0.26,0.14,0.0,0.0,1,233
"""strings""",0,7,0.26,0.14,0.0,0.0,1,233
". ""gopkg.in/check.v1""",0,7,0.26,0.14,0.0,0.0,1,233
),0,7,0.17,0.14,0.0,0.0,0,233
214,1,9,0.39,0.06,0.0,0.0,0,234
Testing your application,1,9,0.39,0.4,0.0,0.0,1,234
C 8,1,7,0.26,0.32,0.0,0.0,0,234
HAPTER,1,6,0.33,0.33,0.0,0.03,1,234
type PostTestSuite struct {,0,7,0.26,0.13,0.03,0.0,1,234
Test fixture data,1,9,0.39,0.56,0.0,0.0,1,234
mux  *http.ServeMux,0,7,0.26,0.13,0.0,0.0,1,234
stored in test suite,1,9,0.39,0.56,0.0,0.0,1,234
post *FakePost,0,7,0.26,0.13,0.0,0.0,1,234
writer *httptest.ResponseRecorder,0,7,0.26,0.13,0.0,0.0,1,234
},0,7,0.17,0.13,0.0,0.02,0,234
func init() {,0,7,0.26,0.13,0.02,0.0,1,234
Suite(&PostTestSuite{}),0,7,0.26,0.13,0.0,0.0,1,234
},0,7,0.17,0.13,0.0,0.02,0,234
func Test(t *testing.T) { TestingT(t) },0,7,0.26,0.13,0.02,0.02,1,234
func (s *PostTestSuite) SetUpTest(c *C) {,0,7,0.26,0.13,0.02,0.0,1,234
Creates test,1,9,0.39,0.6,0.0,0.0,1,234
s.post = &FakePost{},0,7,0.26,0.13,0.0,0.0,1,234
fixtures,1,9,0.39,0.6,0.0,0.0,1,234
s.mux = http.NewServeMux(),0,7,0.26,0.13,0.0,0.0,1,234
"s.mux.HandleFunc(""/post/"", handleRequest(s.post))",0,7,0.26,0.13,0.0,0.0,1,234
s.writer = httptest.NewRecorder(),0,7,0.26,0.13,0.0,0.0,1,234
},0,7,0.17,0.13,0.0,0.02,0,234
func (s *PostTestSuite) TestGetPost(c *C) {,0,7,0.26,0.13,0.02,0.0,1,234
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.13,0.0,0.0,1,234
"s.mux.ServeHTTP(s.writer, request)",0,7,0.26,0.13,0.0,0.02,1,234
"c.Check(s.writer.Code, Equals, 200)",0,7,0.26,0.13,0.02,0.0,1,234
var post Post,0,7,0.26,0.13,0.0,0.0,1,234
"json.Unmarshal(s.writer.Body.Bytes(), &post)",0,7,0.26,0.13,0.0,0.0,1,234
"c.Check(post.Id, Equals, 1)",0,7,0.26,0.13,0.0,0.0,1,234
},0,7,0.17,0.13,0.0,0.02,0,234
func (s *PostTestSuite) TestPutPost(c *C) {,0,7,0.26,0.13,0.02,0.0,1,234
"json := strings.NewReader(`{""content"":""Updated post"",""author"":""Sau",0,7,0.26,0.13,0.0,0.0,1,234
"Sheong""}`)",0,7,0.26,0.15,0.0,0.0,1,234
"request, _ := http.NewRequest(""PUT"", ""/post/1"", json)",0,7,0.26,0.13,0.0,0.0,1,234
"s.mux.ServeHTTP(s.writer, request)",0,7,0.26,0.13,0.0,0.02,1,234
"c.Check(s.writer.Code, Equals, 200)",0,7,0.26,0.13,0.02,0.0,1,234
"c.Check(s.post.Id, Equals, 1)",0,7,0.26,0.13,0.0,0.0,1,234
"c.Check(s.post.Content, Equals, ""Updated post"")",0,7,0.26,0.13,0.0,0.0,1,234
},0,7,0.17,0.13,0.0,0.02,0,234
"To set up test fixtures, you must be able to store data somewhere and persist it across",0,9,0.21,0.13,0.02,0.0,0,234
"function calls. To use text fixtures, add fields that you want to persist into the test",0,9,0.21,0.13,0.0,0.0,0,234
PostTestSuite . As every test case in the suite is effec-,0,9,0.21,0.38,0.0,0.0,1,234
"cases, into the test suite struct,",0,9,0.3,0.13,0.0,0.0,1,234
"tively a method on this struct, the text fixtures can be accessed easily. To create the",0,9,0.21,0.13,0.0,0.0,0,234
SetUpTest function.,0,9,0.21,0.45,0.0,0.0,1,234
"text fixtures for every test case, use the",0,9,0.3,0.13,0.0,0.0,1,234
"PostTestSuite , which has been defined",0,9,0.21,0.49,0.0,0.0,1,234
Notice that you’re using the fields in the,0,9,0.3,0.15,0.0,0.0,1,234
"earlier. With your test fixtures set up, you can now change your test cases accordingly.",0,9,0.21,0.13,0.0,0.0,0,234
"There’s nothing much to change, except to remove the extra statements and switch in",0,9,0.21,0.13,0.0,0.0,0,234
go test command:,0,9,0.21,0.67,0.0,0.0,1,234
the structs that were set up as test fixtures. Now let’s run it using the,0,9,0.21,0.13,0.0,0.02,0,234
START: server_test.go:31: PostTestSuite.TestGetPost,0,7,0.26,0.13,0.02,0.0,1,234
START: server_test.go:24: PostTestSuite.SetUpTest,0,7,0.26,0.13,0.0,0.0,1,234
PASS: server_test.go:24: PostTestSuite.SetUpTest  0.000s,0,7,0.26,0.13,0.0,0.0,1,234
215,1,9,0.3,0.82,0.0,0.0,0,235
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,235
PASS: server_test.go:31: PostTestSuite.TestGetPost  0.000s,0,7,0.26,0.14,0.03,0.02,1,235
START: server_test.go:41: PostTestSuite.TestPutPost,0,7,0.26,0.14,0.02,0.0,1,235
START: server_test.go:24: PostTestSuite.SetUpTest,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:24: PostTestSuite.SetUpTest  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
PASS: server_test.go:41: PostTestSuite.TestPutPost  0.000s,0,7,0.26,0.14,0.02,0.02,1,235
OK: 2 passed,0,7,0.26,0.14,0.02,0.0,1,235
PASS,0,7,0.26,0.14,0.0,0.0,1,235
ok    gocheck    0.007s,0,7,0.26,0.14,0.0,0.02,1,235
The extra verbose option allows you to see how the test suite ran. To see the sequence,0,9,0.21,0.14,0.02,0.0,0,235
"of the entire test suite, let’s add in the other test fixture functions:",0,9,0.21,0.14,0.0,0.01,0,235
func (s *PostTestSuite) TearDownTest(c *C) {,0,7,0.26,0.14,0.01,0.0,1,235
"c.Log(""Finished test - "", c.TestName())",0,7,0.26,0.14,0.0,0.0,1,235
},0,7,0.17,0.14,0.0,0.02,0,235
func (s *PostTestSuite) SetUpSuite(c *C) {,0,7,0.26,0.14,0.02,0.0,1,235
"c.Log(""Starting Post Test Suite"")",0,7,0.26,0.14,0.0,0.0,1,235
},0,7,0.17,0.14,0.0,0.02,0,235
func (s *PostTestSuite) TearDownSuite(c *C) {,0,7,0.26,0.14,0.02,0.0,1,235
"c.Log(""Finishing Post Test Suite"")",0,7,0.26,0.14,0.0,0.0,1,235
},0,7,0.17,0.14,0.0,0.02,0,235
Now rerun the test suite:,0,9,0.3,0.14,0.02,0.01,1,235
START: server_test.go:35: PostTestSuite.SetUpSuite,0,7,0.26,0.14,0.01,0.0,1,235
Starting Post Test Suite,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:35: PostTestSuite.SetUpSuite  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
START: server_test.go:44: PostTestSuite.TestGetPost,0,7,0.26,0.14,0.02,0.0,1,235
START: server_test.go:24: PostTestSuite.SetUpTest,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:24: PostTestSuite.SetUpTest  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
START: server_test.go:31: PostTestSuite.TearDownTest,0,7,0.26,0.14,0.02,0.0,1,235
Finished test - PostTestSuite.TestGetPost,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:31: PostTestSuite.TearDownTest  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
PASS: server_test.go:44: PostTestSuite.TestGetPost  0.000s,0,7,0.26,0.14,0.02,0.02,1,235
START: server_test.go:54: PostTestSuite.TestPutPost,0,7,0.26,0.14,0.02,0.0,1,235
START: server_test.go:24: PostTestSuite.SetUpTest,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:24: PostTestSuite.SetUpTest  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
START: server_test.go:31: PostTestSuite.TearDownTest,0,7,0.26,0.14,0.02,0.0,1,235
Finished test - PostTestSuite.TestPutPost,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:31: PostTestSuite.TearDownTest  0.000s,0,7,0.26,0.14,0.0,0.02,1,235
PASS: server_test.go:54: PostTestSuite.TestPutPost  0.000s,0,7,0.26,0.14,0.02,0.02,1,235
START: server_test.go:39: PostTestSuite.TearDownSuite,0,7,0.26,0.14,0.02,0.0,1,235
Finishing Post Test Suite,0,7,0.26,0.14,0.0,0.0,1,235
PASS: server_test.go:39: PostTestSuite.TearDownSuite  0.000s,0,7,0.26,0.14,0.0,0.0,1,235
216,1,9,0.39,0.06,0.0,0.0,0,236
Testing your application,1,9,0.39,0.4,0.0,0.0,1,236
C 8,1,7,0.26,0.32,0.0,0.0,0,236
HAPTER,1,6,0.33,0.33,0.0,0.03,1,236
OK: 2 passed,0,7,0.26,0.13,0.03,0.0,1,236
PASS,0,7,0.26,0.13,0.0,0.0,1,236
ok    gocheck    0.007s,0,7,0.26,0.13,0.0,0.02,1,236
Notice that the SetUpSuite,0,9,0.3,0.13,0.02,0.0,1,236
and TearDownSuite functions are run before and after all,0,9,0.21,0.36,0.0,0.0,1,236
SetUpTest and TearDownTest,0,9,0.21,0.34,0.0,0.0,1,236
"the test cases, whereas the",0,9,0.3,0.13,0.0,0.0,1,236
functions are run within the,0,9,0.21,0.59,0.0,0.0,1,236
test cases as the first and the last statements within the test case functions.,0,9,0.21,0.13,0.0,0.0,0,236
The check package is a simple but useful addition to your testing arsenal because it,0,9,0.21,0.15,0.0,0.0,0,236
enhances the basic testing,0,9,0.3,0.13,0.0,0.0,1,236
"package. If you want to do more, try the Ginkgo test",0,9,0.21,0.37,0.0,0.0,1,236
framework.,0,9,0.3,0.13,0.0,0.02,1,236
8.5.2 Introducing the Ginkgo testing framework,1,10,0.5,0.06,0.02,0.01,1,236
Ginkgo is behavior-driven development,1,9,0.48,0.13,0.01,0.0,1,236
(BDD) - style testing framework in Go. It’ll take a,1,9,0.39,0.43,0.0,0.0,1,236
much larger space than only this section to discuss,0,9,0.3,0.13,0.0,0.0,1,236
", but briefly, is an exten-",0,9,0.21,0.59,0.0,0.0,1,236
BDD BDD,0,9,0.21,0.55,0.0,0.0,1,236
sion of test-driven development,1,9,0.48,0.13,0.0,0.0,1,236
(TDD) and is a software development process (as opposed,0,9,0.21,0.36,0.0,0.0,1,236
to a testing process). In,0,9,0.3,0.13,0.0,0.0,1,236
"BDD , software is described by its desired behavior, usually set",0,9,0.21,0.33,0.0,0.0,1,236
by business requirements.,0,9,0.3,0.13,0.0,0.0,1,236
User stories (which are requirement definitions in the lan-,1,9,0.39,0.35,0.0,0.0,1,236
guage and perspective of the end user) in,0,9,0.3,0.13,0.0,0.0,1,236
BDD are written from a behavioral perspec-,0,9,0.21,0.47,0.0,0.0,1,236
tive. An example of this is in describing your web service is:,0,9,0.3,0.13,0.0,0.01,1,236
Story: Get a post,1,7,0.44,0.13,0.01,0.0,1,236
In order to display a post to the user,1,7,0.44,0.13,0.0,0.0,1,236
As a calling program,1,7,0.44,0.13,0.0,0.0,1,236
I want to get a post,1,7,0.44,0.13,0.0,0.01,1,236
Scenario 1: using an id,1,7,0.44,0.13,0.01,0.0,1,236
Given a post id 1,1,7,0.44,0.13,0.0,0.0,1,236
When I send a GET request with the id,1,7,0.44,0.13,0.0,0.0,1,236
Then I should get a post,1,7,0.44,0.13,0.0,0.01,1,236
Scenario 2: using a non-integer id,1,7,0.44,0.13,0.01,0.0,1,236
"Given a post id ""hello""",1,7,0.44,0.13,0.0,0.0,1,236
When I send a GET request with the id,1,7,0.44,0.13,0.0,0.0,1,236
Then I should get a HTTP 500 response,1,7,0.44,0.13,0.0,0.02,1,236
"Once the user story is defined, it can be converted into a test case. Test cases in",0,9,0.21,0.13,0.02,0.0,0,236
"BDD ,",0,9,0.21,0.79,0.0,0.0,1,236
"as in TDD , are written before the code is written, and the aim is to develop a program",0,9,0.21,0.13,0.0,0.0,0,236
"that can fulfill the behavior. Admittedly, the user story used as an illustration is con-",0,9,0.21,0.13,0.0,0.0,0,236
"trived; in a more realistic environment,",0,9,0.3,0.13,0.0,0.0,1,236
BDD user stories are written at a higher-level,0,9,0.21,0.46,0.0,0.0,1,236
"first, and then broken down into more specific user stories after a few levels of details.",0,9,0.21,0.13,0.0,0.0,0,236
The higher-level user stories are then mapped into hierarchical test suites.,0,9,0.21,0.13,0.0,0.0,0,236
Ginkgo is a feature-rich,0,9,0.3,0.15,0.0,0.0,1,236
BDD -style framework. It has constructs that allow you to,0,9,0.21,0.36,0.0,0.0,1,236
testing package.,0,9,0.21,0.68,0.0,0.0,1,236
map user stories to test cases and is well integrated into the Go,0,9,0.3,0.13,0.0,0.0,1,236
Ginkgo can be used to drive,0,9,0.3,0.13,0.0,0.0,1,236
"BDD in Go, but this section explores Ginkgo from the",0,9,0.21,0.37,0.0,0.0,1,236
perspective of it being a test framework in Go.,0,9,0.3,0.13,0.0,0.0,1,236
To install Ginkgo run these two commands on the console:,0,9,0.3,0.15,0.0,0.01,1,236
go get github.com/onsi/ginkgo/ginkgo,0,7,0.26,0.13,0.01,0.0,1,236
go get github.com/onsi/gomega,0,7,0.26,0.13,0.0,0.0,1,236
217,1,9,0.3,0.82,0.0,0.0,0,237
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,237
The first line downloads Ginkgo and installs the command-line interface program,0,9,0.21,0.14,0.03,0.0,0,237
ginkgo into $GOPATH/bin,0,9,0.3,0.14,0.0,0.0,1,237
". The second line downloads Gomega, which is the default",0,9,0.21,0.35,0.0,0.0,1,237
matcher library for Ginkgo (matchers are code that allows two different constructs,0,9,0.21,0.14,0.0,0.0,0,237
"like structs, maps, strings, and so on to be compared).",0,9,0.3,0.14,0.0,0.0,1,237
"Before jumping into writing Ginkgo test cases, let’s see how Ginkgo taps on your",0,9,0.21,0.17,0.0,0.0,0,237
"existing test cases. Ginkgo can convert your previous test cases into Ginkgo test cases,",0,9,0.21,0.14,0.0,0.0,0,237
literally rewriting your test cases for you.,0,9,0.3,0.14,0.0,0.0,1,237
"For this exercise, you’ll start from the test cases from the section on dependency",0,9,0.21,0.17,0.0,0.0,0,237
"injection. Make a copy of the test cases if you still want them intact, because they’ll be",0,9,0.21,0.14,0.0,0.0,0,237
"modified. After you’ve done that, run this in the console:",0,9,0.3,0.14,0.0,0.01,1,237
ginkgo convert .,0,7,0.26,0.14,0.01,0.01,1,237
This adds in a file xxx _suite_test.go where,1,9,0.48,0.14,0.01,0.0,1,237
"xxx is the name of the directory, shown in",1,9,0.39,0.5,0.0,0.0,1,237
this listing.,0,9,0.3,0.14,0.0,0.03,1,237
Listing 8.22 Ginkgo test suite file,1,9,0.48,0.17,0.03,0.02,1,237
package main_test,0,7,0.26,0.14,0.02,0.02,1,237
import (,0,7,0.26,0.14,0.02,0.0,1,237
". ""github.com/onsi/ginkgo""",0,7,0.26,0.14,0.0,0.0,1,237
". ""github.com/onsi/gomega""",0,7,0.26,0.14,0.0,0.02,1,237
"""testing""",0,7,0.26,0.14,0.02,0.0,1,237
),0,7,0.17,0.14,0.0,0.02,0,237
func TestGinkgo(t *testing.T) {,0,7,0.26,0.14,0.02,0.0,1,237
RegisterFailHandler(Fail),0,7,0.26,0.14,0.0,0.0,1,237
"RunSpecs(t, ""Ginkgo Suite"")",0,7,0.26,0.14,0.0,0.0,1,237
},0,7,0.17,0.14,0.0,0.02,0,237
It also changes your server_test.go file. The changed code is in bold in this listing.,0,9,0.21,0.14,0.02,0.03,0,237
Listing 8.23 Modified test file,1,9,0.48,0.17,0.03,0.02,1,237
package main,0,7,0.26,0.14,0.02,0.02,1,237
import (,0,7,0.26,0.14,0.02,0.0,1,237
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,237
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,237
"""net/http/httptest""",0,7,0.26,0.14,0.0,0.0,1,237
"""strings""",0,7,0.26,0.14,0.0,0.0,1,237
". ""github.com/onsi/ginkgo""",1,7,0.44,0.14,0.0,0.0,1,237
),0,7,0.17,0.14,0.0,0.01,0,237
"var _ = Describe(""Testing with Ginkgo"", func() {",1,7,0.44,0.14,0.01,0.0,1,237
"It(""get post"", func() {",1,7,0.44,0.14,0.0,0.02,1,237
mux := http.NewServeMux(),0,7,0.26,0.14,0.02,0.0,1,237
"mux.HandleFunc(""/post/"", handleRequest(&FakePost{}))",0,7,0.26,0.14,0.0,0.0,1,237
218,1,9,0.39,0.06,0.0,0.0,0,238
Testing your application,1,9,0.39,0.4,0.0,0.0,1,238
C 8,1,7,0.26,0.32,0.0,0.0,0,238
HAPTER,1,6,0.33,0.33,0.0,0.03,1,238
writer := httptest.NewRecorder(),0,7,0.26,0.13,0.03,0.0,1,238
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.13,0.0,0.0,1,238
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,238
if writer.Code != 200 {,0,7,0.26,0.13,0.02,0.0,1,238
"GinkgoT().Errorf(""Response code is %v"", writer.Code)",1,7,0.44,0.18,0.0,0.0,1,238
},0,7,0.17,0.13,0.0,0.0,0,238
var post Post,0,7,0.26,0.13,0.0,0.0,1,238
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.13,0.0,0.0,1,238
if post.Id != 1 {,0,7,0.26,0.13,0.0,0.0,1,238
"GinkgoT().Errorf(""Cannot retrieve JSON post"")",1,7,0.44,0.13,0.0,0.0,1,238
},0,7,0.17,0.13,0.0,0.0,0,238
}),1,7,0.35,0.13,0.0,0.0,0,238
"It(""put post"", func() {",1,7,0.44,0.13,0.0,0.02,1,238
mux := http.NewServeMux(),0,7,0.26,0.13,0.02,0.0,1,238
post := &FakePost{},0,7,0.26,0.13,0.0,0.0,1,238
"mux.HandleFunc(""/post/"", handleRequest(post))",0,7,0.26,0.13,0.0,0.02,1,238
writer := httptest.NewRecorder(),0,7,0.26,0.13,0.02,0.0,1,238
"json := strings.NewReader(`{""content"":""Updated post"",""author"":""Sau",0,7,0.26,0.13,0.0,0.0,1,238
"Sheong""}`)",0,7,0.26,0.15,0.0,0.0,1,238
"request, _ := http.NewRequest(""PUT"", ""/post/1"", json)",0,7,0.26,0.13,0.0,0.0,1,238
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,238
if writer.Code != 200 {,0,7,0.26,0.13,0.02,0.0,1,238
"GinkgoT().Error(""Response code is %v"", writer.Code)",1,7,0.44,0.13,0.0,0.0,1,238
},0,7,0.17,0.13,0.0,0.02,0,238
"if post.Content != ""Updated post"" {",0,7,0.26,0.13,0.02,0.0,1,238
"GinkgoT().Error(""Content is not correct"", post.Content)",1,7,0.44,0.13,0.0,0.0,1,238
},0,7,0.17,0.13,0.0,0.0,0,238
}),1,7,0.35,0.13,0.0,0.0,0,238
}),1,7,0.35,0.13,0.0,0.02,0,238
Error function that’s very,0,9,0.21,0.61,0.02,0.0,1,238
Notice that you aren’t using Gomega here but instead an,0,9,0.3,0.13,0.0,0.0,1,238
testing and check packages. When you,0,9,0.21,0.49,0.0,0.0,1,238
similar to the ones you’ve been using in the,0,9,0.3,0.13,0.0,0.0,1,238
run the test using the ginkgo,0,9,0.3,0.13,0.0,0.0,1,238
command:,0,9,0.21,0.37,0.0,0.01,1,238
ginkgo -v,0,7,0.26,0.13,0.01,0.01,1,238
you’ll get a nicely formatted output:,0,9,0.3,0.13,0.01,0.01,1,238
Running Suite: Ginkgo Suite,0,7,0.26,0.13,0.01,0.0,1,238
===========================,0,7,0.26,0.13,0.0,0.0,1,238
Random Seed: 1431743149,0,7,0.26,0.13,0.0,0.0,1,238
Will run 2 of 2 specs,0,7,0.26,0.13,0.0,0.02,1,238
Testing with Ginkgo,0,7,0.26,0.13,0.02,0.0,1,238
get post,0,7,0.26,0.13,0.0,0.0,1,238
server_test.go:29,0,7,0.26,0.13,0.0,0.0,1,238
•,0,7,0.17,0.13,0.0,0.0,0,238
------------------------------,0,7,0.26,0.13,0.0,0.0,1,238
219,1,9,0.3,0.82,0.0,0.0,0,239
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,239
Testing with Ginkgo,0,7,0.26,0.14,0.03,0.0,1,239
put post,0,7,0.26,0.14,0.0,0.0,1,239
server_test.go:48,0,7,0.26,0.14,0.0,0.0,1,239
•,0,7,0.17,0.14,0.0,0.0,0,239
Ran 2 of 2 Specs in 0.000 seconds,0,7,0.26,0.14,0.0,0.0,1,239
SUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 0 Skipped PASS,0,7,0.26,0.14,0.0,0.02,1,239
Ginkgo ran 1 suite in 577.104764ms,0,7,0.26,0.14,0.02,0.0,1,239
Test Suite Passed,0,7,0.26,0.14,0.0,0.02,1,239
"That’s pretty impressive! But if you’re starting from no test cases at all, it seems silly to",0,9,0.21,0.14,0.02,0.0,0,239
try to create the testing,0,9,0.3,0.14,0.0,0.0,1,239
package test cases and then convert them. Let’s see how to,0,9,0.21,0.35,0.0,0.0,1,239
write Ginkgo test cases from scratch.,0,9,0.3,0.14,0.0,0.0,1,239
"Ginkgo provides some utilities to get you started. First, clear off your previous test",0,9,0.21,0.17,0.0,0.0,0,239
"files, including the Ginkgo test suite file. Then run these two commands on the con-",0,9,0.21,0.14,0.0,0.0,0,239
"sole, in the directory of your program:",0,9,0.3,0.14,0.0,0.01,1,239
ginkgo bootstrap,0,7,0.26,0.14,0.01,0.0,1,239
ginkgo generate,0,7,0.26,0.14,0.0,0.02,1,239
The first line will create the Ginkgo test suite file; the second line generates the skele-,0,9,0.21,0.14,0.02,0.0,0,239
"ton for the test case file that you want to generate, shown in the following listing.",0,9,0.21,0.14,0.0,0.03,0,239
Listing 8.24 Ginkgo test file,1,9,0.48,0.17,0.03,0.02,1,239
package main_test,0,7,0.26,0.14,0.02,0.02,1,239
import (,0,7,0.26,0.14,0.02,0.0,1,239
". ""<path/to/your/go_files>/ginkgo""",0,7,0.26,0.14,0.0,0.02,1,239
". ""github.com/onsi/ginkgo""",0,7,0.26,0.14,0.02,0.0,1,239
". ""github.com/onsi/gomega""",0,7,0.26,0.14,0.0,0.0,1,239
),0,7,0.17,0.14,0.0,0.02,0,239
"var _ = Describe(""Ginkgo"", func() {",0,7,0.26,0.14,0.02,0.02,1,239
}),0,7,0.17,0.14,0.02,0.02,0,239
main package anymore because Ginkgo isolates test,0,9,0.21,0.41,0.02,0.0,1,239
Note that you aren’t using the,0,9,0.3,0.14,0.0,0.0,1,239
"cases from that package. Also, you’re importing a number of libraries into the top-",0,9,0.21,0.14,0.0,0.0,0,239
". ) import. This is optional, and Ginkgo documenta-",0,9,0.21,0.41,0.0,0.0,1,239
level namespace using the dot (,0,9,0.3,0.14,0.0,0.0,1,239
"tion provides details on how to opt out of doing this. If you’re doing this, you should",0,9,0.21,0.14,0.0,0.0,0,239
main package that need to be tested through,0,9,0.21,0.48,0.0,0.0,1,239
remember to export any functions in the,0,9,0.3,0.14,0.0,0.0,1,239
"HandleRequest function, so it must be exported;",0,9,0.21,0.44,0.0,0.0,1,239
Ginkgo. The next example tests the,0,9,0.3,0.14,0.0,0.0,1,239
"that is, the function name’s first character must be in upper case.",0,9,0.3,0.14,0.0,0.0,1,239
var _ = trick to call the,0,9,0.21,0.45,0.0,0.0,1,239
Describe function.,0,9,0.21,0.68,0.0,0.0,1,239
Also notice that Ginkgo uses the,0,9,0.3,0.17,0.0,0.0,1,239
init function (which you used earlier,0,9,0.21,0.53,0.0,0.0,1,239
This is a common trick to avoid requiring an,0,9,0.3,0.14,0.0,0.0,1,239
on) and calling the Describe,0,9,0.3,0.14,0.0,0.0,1,239
function in it.,0,9,0.21,0.39,0.0,0.0,1,239
220,1,9,0.39,0.06,0.0,0.0,0,240
Testing your application,1,9,0.39,0.4,0.0,0.0,1,240
C 8,1,7,0.26,0.32,0.0,0.0,0,240
HAPTER,1,6,0.33,0.33,0.0,0.03,1,240
The next listing shows how to write the code. You’ll be mapping your earlier user,0,9,0.21,0.15,0.03,0.0,0,240
story to Ginkgo code.,0,9,0.3,0.13,0.0,0.03,1,240
Listing 8.25 Ginkgo test case with Gomega matchers,1,9,0.48,0.15,0.03,0.02,1,240
package main_test,0,7,0.26,0.13,0.02,0.02,1,240
import (,0,7,0.26,0.13,0.02,0.0,1,240
"""encoding/json""",0,7,0.26,0.13,0.0,0.0,1,240
"""net/http""",0,7,0.26,0.13,0.0,0.0,1,240
"""net/http/httptest""",0,7,0.26,0.13,0.0,0.0,1,240
". ""github.com/onsi/ginkgo""",0,7,0.26,0.13,0.0,0.0,1,240
". ""github.com/onsi/gomega""",0,7,0.26,0.13,0.0,0.0,1,240
". ""gwp/Chapter_8_Testing_Web_Applications/test_ginkgo""",0,7,0.26,0.13,0.0,0.0,1,240
),0,7,0.17,0.13,0.0,0.03,0,240
"var _ = Describe(""Get a post"", func() {",0,7,0.26,0.13,0.03,0.0,1,240
User,1,9,0.48,0.04,0.0,0.0,1,240
var mux *http.ServeMux,0,7,0.26,0.13,0.0,0.0,1,240
story,1,9,0.48,0.03,0.0,0.0,1,240
var post *FakePost,0,7,0.26,0.13,0.0,0.0,1,240
var writer *httptest.ResponseRecorder,0,7,0.26,0.13,0.0,0.02,1,240
BeforeEach(func() {,0,7,0.26,0.13,0.02,0.0,1,240
post = &FakePost{},0,7,0.26,0.13,0.0,0.0,1,240
mux = http.NewServeMux(),0,7,0.26,0.13,0.0,0.0,1,240
"mux.HandleFunc(""/post/"", HandleRequest(post))",0,7,0.26,0.13,0.0,0.0,1,240
writer = httptest.NewRecorder(),0,7,0.26,0.13,0.0,0.0,1,240
}),0,7,0.17,0.13,0.0,0.01,0,240
Using Gomega,1,9,0.39,0.63,0.01,0.0,1,240
matcher,1,9,0.39,0.63,0.0,0.0,1,240
"Context(""Get a post using an id"", func() {",0,7,0.26,0.13,0.0,0.0,1,240
Scenario 1,1,9,0.48,0.01,0.0,0.0,1,240
"It(""should get a post"", func() {",0,7,0.26,0.13,0.0,0.0,1,240
"request, _ := http.NewRequest(""GET"", ""/post/1"", nil)",0,7,0.26,0.13,0.0,0.0,1,240
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,240
Expect(writer.Code).To(Equal(200)),0,7,0.26,0.13,0.02,0.0,1,240
Asserting correctness,1,9,0.39,0.62,0.0,0.0,1,240
with Gomega,1,9,0.39,0.62,0.0,0.0,1,240
var post Post,0,7,0.26,0.13,0.0,0.0,1,240
"json.Unmarshal(writer.Body.Bytes(), &post)",0,7,0.26,0.13,0.0,0.02,1,240
Expect(post.Id).To(Equal(1)),0,7,0.26,0.13,0.02,0.0,1,240
}),0,7,0.17,0.13,0.0,0.0,0,240
}),0,7,0.17,0.13,0.0,0.03,0,240
"Context(""Get an error if post id is not an integer"", func() {",0,7,0.26,0.13,0.03,0.0,1,240
Scenario 2,1,9,0.48,0.01,0.0,0.0,1,240
"It(""should get a HTTP 500 response"", func() {",0,7,0.26,0.13,0.0,0.0,1,240
"request, _ := http.NewRequest(""GET"", ""/post/hello"", nil)",0,7,0.26,0.13,0.0,0.0,1,240
"mux.ServeHTTP(writer, request)",0,7,0.26,0.13,0.0,0.02,1,240
Expect(writer.Code).To(Equal(500)),0,7,0.26,0.13,0.02,0.0,1,240
}),0,7,0.17,0.13,0.0,0.0,0,240
}),0,7,0.17,0.13,0.0,0.02,0,240
}),0,7,0.17,0.13,0.02,0.0,0,240
221,1,9,0.3,0.82,0.0,0.0,0,241
Third-party Go testing libraries,1,9,0.39,0.35,0.0,0.03,1,241
Note that you’re using the Gomega matchers in this example. (Gomega is an assertion,0,9,0.21,0.14,0.03,0.0,0,241
"library built by the same people who wrote Ginkgo, and matchers are test assertions.)",0,9,0.21,0.14,0.0,0.0,0,241
Context functions (and running the scenar-,0,9,0.21,0.49,0.0,0.0,1,241
The test fixtures are set before calling the,0,9,0.3,0.14,0.0,0.0,1,241
check package:,0,9,0.21,0.41,0.0,0.0,1,241
ios) just as in the section on the,0,9,0.3,0.14,0.0,0.01,1,241
var mux *http.ServeMux,0,7,0.26,0.14,0.01,0.0,1,241
var post *FakePost,0,7,0.26,0.14,0.0,0.0,1,241
var writer *httptest.ResponseRecorder,0,7,0.26,0.14,0.0,0.02,1,241
BeforeEach(func() {,0,7,0.26,0.14,0.02,0.0,1,241
post = &FakePost{},0,7,0.26,0.14,0.0,0.0,1,241
Exported from main to be tested here,1,9,0.39,0.64,0.0,0.0,1,241
mux = http.NewServeMux(),0,7,0.26,0.14,0.0,0.0,1,241
"mux.HandleFunc(""/post/"", HandleRequest(post))",0,7,0.26,0.14,0.0,0.0,1,241
writer = httptest.NewRecorder(),0,7,0.26,0.14,0.0,0.0,1,241
}),0,7,0.17,0.14,0.0,0.02,0,241
Note that HandleRequest,0,9,0.3,0.14,0.02,0.0,1,241
main package. The,0,9,0.21,0.69,0.0,0.0,1,241
is now capitalized and exported from the,0,9,0.21,0.35,0.0,0.0,1,241
"test scenarios are similar to the ones you had before, but now with Gomega assertion",0,9,0.21,0.14,0.0,0.0,0,241
and matchers. Making assertions with Gomega looks like this:,0,9,0.3,0.14,0.0,0.01,1,241
Expect(post.Id).To(Equal(1)),0,7,0.26,0.14,0.01,0.01,1,241
"where post.Id is what you want to test, the",0,9,0.3,0.14,0.01,0.0,1,241
"Equal function is a matcher, and",0,9,0.21,0.5,0.0,0.0,1,241
1 is the,0,9,0.21,0.78,0.0,0.0,1,241
"expected result. With your test scenarios written, let’s see how the results look like",0,9,0.21,0.14,0.0,0.0,0,241
when you run the ginkgo,0,9,0.3,0.14,0.0,0.0,1,241
command:,0,9,0.21,0.35,0.0,0.01,1,241
Running Suite: Post CRUD Suite,0,7,0.26,0.14,0.01,0.0,1,241
==============================,0,7,0.26,0.14,0.0,0.0,1,241
Random Seed: 1431753578,0,7,0.26,0.14,0.0,0.0,1,241
Will run 2 of 2 specs,0,7,0.26,0.14,0.0,0.02,1,241
Get a post using an id,0,7,0.26,0.14,0.02,0.0,1,241
should get a post,0,7,0.26,0.14,0.0,0.0,1,241
test_ginkgo_test.go:35,0,7,0.26,0.14,0.0,0.0,1,241
•,0,7,0.17,0.14,0.0,0.0,0,241
------------------------------,0,7,0.26,0.14,0.0,0.0,1,241
Get a post using a non-integer id,0,7,0.26,0.14,0.0,0.0,1,241
should get a HTTP 500 response,0,7,0.26,0.14,0.0,0.0,1,241
test_ginkgo_test.go:44,0,7,0.26,0.14,0.0,0.0,1,241
•,0,7,0.17,0.14,0.0,0.0,0,241
Ran 2 of 2 Specs in 0.000 seconds,0,7,0.26,0.14,0.0,0.0,1,241
SUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 0 Skipped PASS,0,7,0.26,0.14,0.0,0.02,1,241
Ginkgo ran 1 suite in 648.619232ms,0,7,0.26,0.14,0.02,0.0,1,241
Test Suite Passed,0,7,0.26,0.14,0.0,0.02,1,241
The next chapter discusses how you can use one of Go’s key strengths—concur-,0,9,0.21,0.14,0.02,0.0,0,241
rency—in a web application.,0,9,0.3,0.14,0.0,0.0,1,241
222,1,9,0.39,0.06,0.0,0.0,0,242
Testing your application,1,9,0.39,0.4,0.0,0.0,1,242
C 8,1,7,0.26,0.32,0.0,0.0,0,242
HAPTER,1,6,0.33,0.33,0.0,0.03,1,242
8.6 Summary,1,12,0.54,0.06,0.03,0.01,1,242
"go test , and the testing",0,9,0.21,0.48,0.01,0.0,1,242
Go provides a built-in test tool using,0,9,0.3,0.18,0.0,0.0,1,242
package for unit,0,9,0.21,0.69,0.0,0.0,1,242
■,0,4,0.11,0.15,0.0,0.01,0,242
testing.,0,9,0.3,0.18,0.01,0.01,1,242
The testing package provides basic testing and benchmarking capabilities.,0,9,0.21,0.18,0.01,0.0,0,242
■,0,4,0.11,0.15,0.0,0.01,0,242
testing/httptest,0,9,0.21,0.67,0.01,0.0,1,242
Unit testing web applications in Go is handled by the,0,9,0.3,0.18,0.0,0.0,1,242
■,0,4,0.11,0.15,0.0,0.01,0,242
package.,0,9,0.3,0.18,0.01,0.01,1,242
You can use test doubles to make test cases more independent.,0,9,0.3,0.18,0.01,0.0,1,242
■,0,4,0.11,0.15,0.0,0.01,0,242
One of the ways you can design for test doubles is to use the dependency injec-,0,9,0.21,0.18,0.01,0.0,0,242
■,0,4,0.11,0.15,0.0,0.01,0,242
tion design pattern.,0,9,0.3,0.18,0.01,0.01,1,242
"Gocheck package,",0,9,0.21,0.68,0.01,0.0,1,242
"There are many third-party test libraries in Go, including the",0,9,0.3,0.18,0.0,0.0,1,242
■,0,4,0.11,0.15,0.0,0.01,0,242
"which extends the basic Go testing capabilities, and Ginkgo, which implements",0,9,0.21,0.18,0.01,0.0,0,242
behavior-driven style testing.,0,9,0.3,0.18,0.0,0.0,1,242
Leveraging,1,30,0.79,0.6,0.0,0.0,1,243
Go concurrency,1,30,0.93,0.51,0.0,0.17,1,243
This chapter covers,1,12,0.67,0.13,0.17,0.01,1,243
Understanding concurrency and parallelism,0,9,0.3,0.15,0.01,0.0,1,243
■,0,4,0.11,0.13,0.0,0.01,0,243
principles,0,9,0.3,0.15,0.01,0.01,1,243
Introducing goroutines and channels,0,9,0.3,0.15,0.01,0.0,1,243
■,0,4,0.11,0.13,0.0,0.01,0,243
Using concurrency in web applications,0,9,0.3,0.15,0.01,0.0,1,243
■,0,4,0.11,0.13,0.0,0.08,0,243
One of the things that Go is well known for is its ability to make writing concurrent,0,9,0.21,0.17,0.08,0.0,0,243
programs easier and less susceptible to errors. This chapter introduces concur-,0,9,0.21,0.17,0.0,0.0,0,243
rency and discusses Go’s concurrency model and design. We’ll talk about the two,0,9,0.21,0.17,0.0,0.0,0,243
main features of Go that provide concurrency: goroutines and channels. You’ll see,0,9,0.21,0.17,0.0,0.0,0,243
an example of using Go concurrency in a web application to improve the app’s per-,0,9,0.21,0.17,0.0,0.0,0,243
formance.,0,9,0.3,0.17,0.0,0.02,1,243
9.1 Concurrency isn’t parallelism,1,12,0.54,0.1,0.02,0.01,1,243
"Concurrency is when two or more tasks start, run, and end within the same period of",1,9,0.39,0.17,0.01,0.0,0,243
time and these tasks can potentially interact with each other. The tasks are consid-,0,9,0.21,0.17,0.0,0.0,0,243
"ered to be concurrent to each other, as opposed to being sequential. Concurrency",0,9,0.21,0.17,0.0,0.0,0,243
"is a large and complex topic, and this chapter gives only a simple introduction.",0,9,0.21,0.17,0.0,0.0,0,243
224,1,9,0.39,0.06,0.0,0.0,0,244
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,244
C 9,1,7,0.26,0.31,0.0,0.0,0,244
HAPTER,1,6,0.33,0.32,0.0,0.03,1,244
A concept that’s similar but distinctly different is parallelism. It’s easy to get con-,0,9,0.21,0.15,0.03,0.0,0,244
fused because in both cases multiple tasks can be running at the same time. In concur-,0,9,0.21,0.13,0.0,0.0,0,244
"rency, the tasks don’t necessarily need to start or end together—their execution",0,9,0.21,0.13,0.0,0.0,0,244
overlaps. These tasks are scheduled and often (though not necessarily) communicate,0,9,0.21,0.13,0.0,0.0,0,244
to share data as well as coordinate the execution times.,0,9,0.3,0.13,0.0,0.0,1,244
"In parallelism , tasks start and are executed at the same time. Usually a larger prob-",1,9,0.39,0.15,0.0,0.0,0,244
lem is split into smaller chunks and processed simultaneously to improve perfor-,0,9,0.21,0.13,0.0,0.0,0,244
"mance. Parallelism usually requires independent resources (for example,",0,9,0.21,0.13,0.0,0.0,0,244
CPU s);,0,9,0.21,0.77,0.0,0.0,1,244
"concurrency uses and shares the same resources. Intuitively, parallelism is easier to",0,9,0.21,0.13,0.0,0.0,0,244
understand because we’re talking about starting and doing multiple tasks at the same,0,9,0.21,0.13,0.0,0.0,0,244
time. Parallelism is what the name indicates—parallel lines of processing that don’t,0,9,0.21,0.13,0.0,0.0,0,244
overlap.,0,9,0.3,0.13,0.0,0.02,1,244
Concurrency is about dealing with lots of things at once. Parallelism is about doing lots,1,9,0.39,0.15,0.02,0.0,0,244
of things at once.,1,9,0.48,0.15,0.0,0.01,1,244
"—Rob Pike, co-creator of Go",0,9,0.21,0.54,0.01,0.02,1,244
Another way to think of concurrency is by visualizing two checkout lanes at the super-,0,9,0.21,0.13,0.02,0.0,0,244
"market, lining up for just one checkout counter (figure 9.1). A person from each lane",0,9,0.21,0.13,0.0,0.0,0,244
takes a turn to pay for their purchases.,0,9,0.43,0.13,0.0,0.24,1,244
"Figure 9.1 Concurrency—two lines, one checkout counter",1,7,0.58,0.13,0.24,0.04,1,244
"With parallelism, we have the same two lanes, but now the customers are  queuing up",0,9,0.21,0.13,0.04,0.0,0,244
"for two checkout counters, separately (figure 9.2).",0,9,0.3,0.13,0.0,0.0,1,244
"Although these concepts aren’t the same, it doesn’t mean that they’re mutually",0,9,0.21,0.15,0.0,0.0,0,244
exclusive. Go can be used to create concurrent and parallel programs. Parallel pro-,0,9,0.21,0.13,0.0,0.0,0,244
GOMAX-,0,9,0.21,0.77,0.0,0.0,1,244
grams that have to run tasks at the same time will need the environment variable,0,9,0.21,0.13,0.0,0.0,0,244
"PROCS to be set to more than 1. Prior to Go 1.5,",0,9,0.3,0.13,0.0,0.0,1,244
GOMAXPROCS was set to 1 by default. Since,0,9,0.21,0.5,0.0,0.0,1,244
"Go 1.5, GOMAXPROCS is set to the number of",0,9,0.3,0.13,0.0,0.0,1,244
CPU s available in the system. Concurrent,0,9,0.21,0.5,0.0,0.0,1,244
programs can run within a single,0,9,0.3,0.13,0.0,0.0,1,244
CPU and tasks scheduled to run independently. You’ll,0,9,0.21,0.39,0.0,0.0,1,244
225,1,9,0.3,0.82,0.0,0.0,0,245
Goroutines,1,9,0.53,0.42,0.0,0.23,1,245
"Figure 9.2 Parallelism—two lines, two checkout counters",1,7,0.58,0.14,0.23,0.05,1,245
see an example of this later in this chapter. What’s important to note now is that,0,9,0.21,0.14,0.05,0.0,0,245
"although Go can be used to create parallel programs, it was created with concurrency",0,9,0.21,0.14,0.0,0.0,0,245
in mind and not parallelism.,0,9,0.3,0.14,0.0,0.0,1,245
Go’s support for concurrency is supported by two main constructs—,0,9,0.3,0.17,0.0,0.0,1,245
goroutines and,1,9,0.39,0.73,0.0,0.0,1,245
"channels . In the following sections, I’ll describe how goroutines and channels, along",1,9,0.39,0.14,0.0,0.0,0,245
"with some of the standard libraries, allow you to create concurrent programs.",0,9,0.21,0.14,0.0,0.02,0,245
9.2 Goroutines,1,12,0.54,0.07,0.02,0.01,1,245
Goroutines are functions that run independently with other goroutines. This might,0,9,0.21,0.14,0.01,0.0,0,245
"seem similar to threads—and in fact, goroutines are multiplexed on threads—but",0,9,0.21,0.14,0.0,0.0,0,245
"they aren’t threads. A lot more goroutines than threads can be running, because",0,9,0.21,0.14,0.0,0.0,0,245
goroutines are lightweight. A goroutine starts with a small stack (8 K as of Go 1.4) and,0,9,0.21,0.14,0.0,0.0,0,245
"it can grow (or shrink) as needed. Whenever a goroutine is blocked, it blocks the",0,9,0.21,0.14,0.0,0.0,0,245
OS,0,9,0.12,0.82,0.0,0.0,0,245
"thread it’s multiplexed on, but the runtime moves other goroutines on the same",0,9,0.21,0.14,0.0,0.0,0,245
blocked thread to another unblocked thread.,0,9,0.3,0.14,0.0,0.02,1,245
9.2.1 Using goroutines,1,10,0.5,0.07,0.02,0.01,1,245
go in front of any function (either,0,9,0.21,0.56,0.01,0.0,1,245
Using goroutines is pretty simple. Add the keyword,0,9,0.3,0.14,0.0,0.0,1,245
"named or anonymous) and the function becomes a goroutine. Let’s see, in the follow-",0,9,0.21,0.14,0.0,0.0,0,245
"ing listing, how this works in a file named goroutine.go.",0,9,0.3,0.14,0.0,0.03,1,245
Listing 9.1 Demonstrating goroutines,1,9,0.48,0.17,0.03,0.02,1,245
package main,0,7,0.26,0.14,0.02,0.03,1,245
func printNumbers1() {,0,7,0.26,0.14,0.03,0.0,1,245
for i := 0; i < 10; i++ {,0,7,0.26,0.14,0.0,0.0,1,245
"fmt.Printf(""%d "", i)",0,7,0.26,0.14,0.0,0.0,1,245
},0,7,0.17,0.14,0.0,0.0,0,245
},0,7,0.17,0.14,0.0,0.0,0,245
226,1,9,0.39,0.06,0.0,0.0,0,246
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,246
C 9,1,7,0.26,0.31,0.0,0.0,0,246
HAPTER,1,6,0.33,0.32,0.0,0.03,1,246
func printLetters1() {,0,7,0.26,0.13,0.03,0.0,1,246
for i := 'A'; i < 'A'+10; i++ {,0,7,0.26,0.13,0.0,0.0,1,246
"fmt.Printf(""%c "", i)",0,7,0.26,0.13,0.0,0.0,1,246
},0,7,0.17,0.13,0.0,0.0,0,246
},0,7,0.17,0.13,0.0,0.02,0,246
func print1() {,0,7,0.26,0.13,0.02,0.0,1,246
printNumbers1(),0,7,0.26,0.13,0.0,0.0,1,246
printLetters1(),0,7,0.26,0.13,0.0,0.0,1,246
},0,7,0.17,0.13,0.0,0.02,0,246
func goPrint1() {,0,7,0.26,0.13,0.02,0.0,1,246
go printNumbers1(),0,7,0.26,0.13,0.0,0.0,1,246
go printLetters1(),0,7,0.26,0.13,0.0,0.0,1,246
},0,7,0.17,0.13,0.0,0.02,0,246
func main() {,0,7,0.26,0.13,0.02,0.0,1,246
},0,7,0.17,0.13,0.0,0.02,0,246
printNumbers1 and printLetters1,0,9,0.21,0.45,0.02,0.0,1,246
"The previous listing has two functions,",0,9,0.3,0.13,0.0,0.0,1,246
. These do,0,9,0.21,0.74,0.0,0.0,1,246
printNumbers1 prints,0,9,0.21,0.65,0.0,0.0,1,246
nothing but loop and print numbers or letters. The function,0,9,0.3,0.13,0.0,0.0,1,246
from 0 to 9; printLetters1,0,9,0.3,0.13,0.0,0.0,1,246
print1 calls,0,9,0.21,0.72,0.0,0.0,1,246
prints from A to J. A function named,0,9,0.21,0.38,0.0,0.0,1,246
printNumbers1 and printLetters1,0,9,0.3,0.13,0.0,0.0,1,246
"consecutively, and another function named",0,9,0.21,0.44,0.0,0.0,1,246
goPrint1 calls printNumbers1,0,9,0.3,0.13,0.0,0.0,1,246
and printLetters1 as goroutines.,0,9,0.21,0.38,0.0,0.0,1,246
"For this example, the main",0,9,0.3,0.15,0.0,0.0,1,246
function doesn’t do anything because you’ll be running,0,9,0.21,0.37,0.0,0.0,1,246
"the code using test cases. This way, you can take advantage of the timing that’s cap-",0,9,0.21,0.13,0.0,0.0,0,246
tured and printed; otherwise you’d need to write the necessary code to find out how,0,9,0.21,0.13,0.0,0.0,0,246
"fast they run, and there’s no actual testing of the code.",0,9,0.3,0.13,0.0,0.0,1,246
"To run the test cases, shown in this listing, use a separate test file named",0,9,0.21,0.15,0.0,0.0,0,246
goroutine_test.go.,0,9,0.3,0.13,0.0,0.03,1,246
Listing 9.2 Test file for running goroutine examples,1,9,0.48,0.15,0.03,0.02,1,246
package main,0,7,0.26,0.13,0.02,0.01,1,246
"import ""testing""",0,7,0.26,0.13,0.01,0.01,1,246
Normal run,1,9,0.39,0.55,0.01,0.0,1,246
func TestPrint1(t *testing.T) {,0,7,0.26,0.13,0.0,0.0,1,246
print1(),0,7,0.26,0.13,0.0,0.0,1,246
},0,7,0.17,0.13,0.0,0.01,0,246
func TestGoPrint1(t *testing.T) {,0,7,0.26,0.13,0.01,0.0,1,246
Runs as,1,9,0.39,0.52,0.0,0.0,1,246
goPrint1(),0,7,0.26,0.13,0.0,0.0,1,246
goroutines,1,9,0.39,0.52,0.0,0.0,1,246
},0,7,0.17,0.13,0.0,0.02,0,246
When you run the test using the command,0,9,0.3,0.13,0.02,0.01,1,246
go test –v,0,7,0.26,0.13,0.01,0.01,1,246
this is what you’ll get:,0,9,0.3,0.13,0.01,0.01,1,246
=== RUN TestPrint1,0,7,0.26,0.13,0.01,0.0,1,246
0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J --- PASS: TestPrint1 (0.00s),0,7,0.26,0.13,0.0,0.0,1,246
227,1,9,0.3,0.82,0.0,0.0,0,247
Goroutines,1,9,0.39,0.42,0.0,0.03,1,247
=== RUN TestGoPrint1,0,7,0.26,0.14,0.03,0.0,1,247
--- PASS: TestGoPrint1 (0.00s),0,7,0.26,0.14,0.0,0.0,1,247
PASS,0,7,0.26,0.14,0.0,0.02,1,247
What happened to the second test case and why didn’t you get any output? The,0,9,0.21,0.14,0.02,0.0,0,247
answer is because the second test case ended before the goroutines could output any-,0,9,0.21,0.14,0.0,0.0,0,247
"thing. To see it run properly, you need to add a delay to the end of the second test",0,9,0.21,0.14,0.0,0.0,0,247
case:,0,9,0.3,0.14,0.0,0.01,1,247
func TestGoPrint1(t *testing.T) {,0,7,0.26,0.14,0.01,0.0,1,247
goPrint1(),0,7,0.26,0.14,0.0,0.0,1,247
time.Sleep(1 * time.Millisecond),0,7,0.26,0.14,0.0,0.0,1,247
},0,7,0.17,0.14,0.0,0.02,0,247
This time the second test case produces its output before the test case ends:,0,9,0.21,0.14,0.02,0.01,0,247
=== RUN TestPrint1,0,7,0.26,0.14,0.01,0.0,1,247
0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J --- PASS: TestPrint1 (0.00s),0,7,0.26,0.14,0.0,0.0,1,247
=== RUN TestGoPrint1,0,7,0.26,0.14,0.0,0.0,1,247
0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J --- PASS: TestGoPrint1 (0.00s),0,7,0.26,0.14,0.0,0.0,1,247
PASS,0,7,0.26,0.14,0.0,0.02,1,247
"Both run the same way with the same output, which doesn’t tell you much. The reason",0,9,0.21,0.14,0.02,0.0,0,247
printNumbers1 and printLetters1,0,9,0.21,0.41,0.0,0.0,1,247
you get the same results is that,0,9,0.3,0.14,0.0,0.0,1,247
"ran so quickly, it",0,9,0.21,0.71,0.0,0.0,1,247
made no difference whether or not the functions were running independently. To,0,9,0.21,0.14,0.0,0.0,0,247
Sleep function in the time,0,9,0.21,0.62,0.0,0.0,1,247
"simulate processing work, you’ll add a time delay using the",0,9,0.3,0.14,0.0,0.0,1,247
printNumbers2 and printLetters2,0,9,0.21,0.52,0.0,0.0,1,247
"package, and re-create the two functions as",0,9,0.3,0.14,0.0,0.0,1,247
in,0,9,0.12,0.83,0.0,0.0,0,247
"goroutine.go, as shown next.",0,9,0.3,0.14,0.0,0.03,1,247
Listing 9.3 Goroutines doing some work,1,9,0.48,0.17,0.03,0.02,1,247
func printNumbers2() {,0,7,0.26,0.14,0.02,0.0,1,247
for i := 0; i < 10; i++ {,0,7,0.26,0.14,0.0,0.0,1,247
time.Sleep(1 * time.Microsecond,0,7,0.26,0.14,0.0,0.0,1,247
"fmt.Printf(""%d "", i)",0,7,0.26,0.14,0.0,0.0,1,247
},0,7,0.17,0.14,0.0,0.0,0,247
Adding delay of 1 ms,1,9,0.39,0.62,0.0,0.0,1,247
},0,7,0.17,0.14,0.0,0.0,0,247
to simulate work,1,9,0.39,0.62,0.0,0.0,1,247
func printLetters2() {,0,7,0.26,0.14,0.0,0.0,1,247
for i := 'A'; i < 'A'+10; i++ {,0,7,0.26,0.14,0.0,0.0,1,247
time.Sleep(1 * time.Microsecond),0,7,0.26,0.14,0.0,0.0,1,247
"fmt.Printf(""%c "", i)",0,7,0.26,0.14,0.0,0.0,1,247
},0,7,0.17,0.14,0.0,0.0,0,247
},0,7,0.17,0.14,0.0,0.02,0,247
func goPrint2() {,0,7,0.26,0.14,0.02,0.0,1,247
go printNumbers2(),0,7,0.26,0.14,0.0,0.0,1,247
go printLetters2(),0,7,0.26,0.14,0.0,0.0,1,247
},0,7,0.17,0.14,0.0,0.02,0,247
Notice that you simulated processing work being done by adding a time delay of 1,0,9,0.21,0.14,0.02,0.0,0,247
microsecond every iteration of the loop. Correspondingly in the goroutine_test.go,0,9,0.21,0.14,0.0,0.0,0,247
228,1,9,0.39,0.06,0.0,0.0,0,248
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,248
C 9,1,7,0.26,0.31,0.0,0.0,0,248
HAPTER,1,6,0.33,0.32,0.0,0.03,1,248
"file, you add another test. As before, you add in 1 millisecond of delay in order to see",0,9,0.21,0.13,0.03,0.0,0,248
the output properly:,0,9,0.3,0.13,0.0,0.01,1,248
func TestGoPrint2(t *testing.T) {,0,7,0.26,0.13,0.01,0.0,1,248
goPrint2(),0,7,0.26,0.13,0.0,0.0,1,248
time.Sleep(1 * time.Millisecond),0,7,0.26,0.13,0.0,0.0,1,248
},0,7,0.17,0.13,0.0,0.02,0,248
Run the test again and you’ll get these results:,0,9,0.3,0.13,0.02,0.01,1,248
=== RUN TestPrint1,0,7,0.26,0.13,0.01,0.0,1,248
0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J --- PASS: TestPrint1 (0.00s),0,7,0.26,0.13,0.0,0.0,1,248
=== RUN TestGoPrint1,0,7,0.26,0.13,0.0,0.0,1,248
0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J --- PASS: TestGoPrint1 (0.00s),0,7,0.26,0.13,0.0,0.0,1,248
=== RUN TestGoPrint2,0,7,0.26,0.13,0.0,0.0,1,248
A 0 B 1 C D 2 E 3 F 4 G H 5 I 6 J 7 8 9 --- PASS: TestGoPrint2 (0.00s),0,7,0.26,0.13,0.0,0.0,1,248
PASS,0,7,0.26,0.13,0.0,0.02,1,248
"Look at the last line of output. Notice that this time around, instead of running the",0,9,0.21,0.13,0.02,0.0,0,248
printNumbers2 function first and then running,0,9,0.3,0.13,0.0,0.0,1,248
"printLetters2 , the printouts to the",0,9,0.21,0.53,0.0,0.0,1,248
screen are interlaced!,0,9,0.3,0.13,0.0,0.0,1,248
"If you run this code again, the last line produces a different result. In fact,",0,9,0.21,0.15,0.0,0.0,0,248
printNumbers2 and printLetters2,0,9,0.3,0.13,0.0,0.0,1,248
run independently and fight to print to the,0,9,0.21,0.44,0.0,0.0,1,248
screen. Running repeatedly will produce different results each time. If you’re using a,0,9,0.21,0.13,0.0,0.0,0,248
"Go version prior to Go 1.5, you might get the same results each time. Why?",0,9,0.21,0.13,0.0,0.0,0,248
This is because the default behavior in versions prior to Go 1.5 is to use just one,0,9,0.21,0.15,0.0,0.0,0,248
CPU (even though you might have more than one,0,9,0.3,0.13,0.0,0.0,1,248
"CPU in my computer), unless stated",0,9,0.21,0.54,0.0,0.0,1,248
"otherwise. Since Go 1.5, the default behavior is the reverse—the Go runtime uses as",0,9,0.21,0.13,0.0,0.0,0,248
many CPU s as the computer has. To use just one,0,9,0.3,0.13,0.0,0.0,1,248
"CPU , use this command:",0,9,0.21,0.52,0.0,0.01,1,248
go test –v –cpu 1,0,7,0.26,0.13,0.01,0.01,1,248
"If you do so, you’ll start to get the same results each time.",0,9,0.3,0.13,0.01,0.02,1,248
9.2.2 Goroutines and performance,1,10,0.5,0.06,0.02,0.01,1,248
"Now that you know how goroutines behave, let’s consider goroutine performance.",0,9,0.21,0.13,0.01,0.0,0,248
You’ll use the same functions but won’t print to the screen (because doing so would,0,9,0.21,0.13,0.0,0.0,0,248
fmt.Println code. The following listing,0,9,0.21,0.49,0.0,0.0,1,248
clutter the output) by commenting out the,0,9,0.3,0.13,0.0,0.0,1,248
print1 and goPrint1,0,9,0.21,0.47,0.0,0.0,1,248
shows the benchmark cases for the,0,9,0.3,0.13,0.0,0.0,1,248
functions in the,0,9,0.21,0.68,0.0,0.0,1,248
goroutine_test.go file.,0,9,0.3,0.13,0.0,0.03,1,248
Listing 9.4 Benchmarking functions with and without goroutines,1,9,0.48,0.15,0.03,0.02,1,248
func BenchmarkPrint1(b *testing.B) {,0,7,0.26,0.13,0.02,0.0,1,248
Normal run,1,9,0.39,0.62,0.0,0.0,1,248
for i := 0; i < b.N; i++ {,0,7,0.26,0.13,0.0,0.0,1,248
print1(),0,7,0.26,0.13,0.0,0.0,1,248
},0,7,0.17,0.13,0.0,0.0,0,248
},0,7,0.17,0.13,0.0,0.0,0,248
229,1,9,0.3,0.82,0.0,0.0,0,249
Goroutines,1,9,0.39,0.42,0.0,0.03,1,249
func BenchmarkGoPrint1(b *testing.B) {,0,7,0.26,0.14,0.03,0.0,1,249
Run as goroutines,1,9,0.39,0.64,0.0,0.0,1,249
for i := 0; i < b.N; i++ {,0,7,0.26,0.14,0.0,0.0,1,249
goPrint1(),0,7,0.26,0.14,0.0,0.0,1,249
},0,7,0.17,0.14,0.0,0.0,0,249
},0,7,0.17,0.14,0.0,0.02,0,249
When you run the benchmark (and skip the functional test cases):,0,9,0.3,0.14,0.02,0.01,1,249
go test -run x -bench . –cpu 1,0,7,0.26,0.14,0.01,0.01,1,249
this is what you see:,0,9,0.3,0.14,0.01,0.01,1,249
BenchmarkPrint1   100000000        13.9 ns/op,0,7,0.26,0.14,0.01,0.0,1,249
BenchmarkGoPrint1   1000000        1090 ns/op,0,7,0.26,0.14,0.0,0.02,1,249
"(For this example, I’m running the code on a single",0,9,0.3,0.14,0.02,0.0,1,249
first. I’ll explain why later in,0,9,0.21,0.61,0.0,0.0,1,249
CPU,0,9,0.12,0.57,0.0,0.0,0,249
print1 function runs quickly and completes in 13.9,0,9,0.21,0.42,0.0,0.0,1,249
"this chapter.) As you can see, the",0,9,0.3,0.14,0.0,0.0,1,249
"nanoseconds. What is surprising, though, is that if you run the same functions as",0,9,0.21,0.14,0.0,0.0,0,249
"goroutines, it’s almost 10 times slower, with 1,090 nanoseconds! Why? Remember,",0,9,0.21,0.14,0.0,0.0,0,249
there’s,1,9,0.39,0.8,0.0,0.0,1,249
. Starting up goroutines has a cost no matter how lightweight,0,9,0.21,0.35,0.0,0.0,1,249
no such thing as a free lunch,1,9,0.48,0.14,0.0,0.0,1,249
it is. The functions printNumbers1,0,9,0.3,0.14,0.0,0.0,1,249
and printLetters1 are so trivial and it ran so,0,9,0.21,0.45,0.0,0.0,1,249
quickly that the costs of using goroutines outweigh those of running them sequentially.,0,9,0.21,0.14,0.0,0.0,0,249
printNumbers2 and,0,9,0.21,0.68,0.0,0.0,1,249
What if you do some work in every iteration of the loop as in,0,9,0.3,0.17,0.0,0.0,1,249
"printLetters2 ? Let’s look at the benchmark cases in goroutine_test.go, in this listing.",0,9,0.21,0.14,0.0,0.03,0,249
Listing 9.5 Benchmarking functions that are doing work with and without goroutines,1,9,0.39,0.17,0.03,0.02,0,249
func BenchmarkPrint2(b *testing.B) {,0,7,0.26,0.14,0.02,0.0,1,249
Normal run,1,9,0.39,0.64,0.0,0.0,1,249
for i := 0; i < b.N; i++ {,0,7,0.26,0.14,0.0,0.0,1,249
print2(),0,7,0.26,0.14,0.0,0.0,1,249
},0,7,0.17,0.14,0.0,0.0,0,249
},0,7,0.17,0.14,0.0,0.02,0,249
func BenchmarkGoPrint2(b *testing.B) {,0,7,0.26,0.14,0.02,0.0,1,249
Runs as goroutines,1,9,0.39,0.64,0.0,0.0,1,249
for i := 0; i < b.N; i++ {,0,7,0.26,0.14,0.0,0.0,1,249
goPrint2(),0,7,0.26,0.14,0.0,0.0,1,249
},0,7,0.17,0.14,0.0,0.0,0,249
},0,7,0.17,0.14,0.0,0.02,0,249
"When you run the benchmark tests again, this is what you get:",0,9,0.3,0.14,0.02,0.01,1,249
BenchmarkPrint2     10000      121384 ns/op,0,7,0.26,0.14,0.01,0.0,1,249
BenchmarkGoPrint2   1000000       17206 ns/op,0,7,0.26,0.14,0.0,0.02,1,249
printNumbers2 and printLetters2,0,9,0.21,0.55,0.02,0.0,1,249
You can see the marked difference now. Running,0,9,0.3,0.14,0.0,0.0,1,249
sequentially is about seven times slower than running them as goroutines. Let’s try,0,9,0.21,0.14,0.0,0.0,0,249
"both benchmarks again, but this time loop 100 times instead of 10 times:",0,9,0.21,0.14,0.0,0.01,0,249
func printNumbers2() {,0,7,0.26,0.14,0.01,0.0,1,249
for i := 0; i < 100; i++ {,0,7,0.26,0.14,0.0,0.0,1,249
1,1,9,0.3,0.63,0.0,0.0,0,249
Looping 00 times 1,1,9,0.39,0.57,0.0,0.0,1,249
time.Sleep(1 * time.Microsecond),0,7,0.26,0.14,0.0,0.0,1,249
instead of 0 times,1,9,0.39,0.57,0.0,0.0,1,249
"// fmt.Printf(""%d "", i)",0,7,0.26,0.14,0.0,0.0,1,249
230,1,9,0.39,0.06,0.0,0.0,0,250
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,250
C 9,1,7,0.26,0.31,0.0,0.0,0,250
HAPTER,1,6,0.33,0.32,0.0,0.03,1,250
},0,7,0.17,0.13,0.03,0.0,0,250
},0,7,0.17,0.13,0.0,0.02,0,250
func printLetters2() {,0,7,0.26,0.13,0.02,0.0,1,250
for i := 'A'; i < 'A'+100; i++ {,0,7,0.26,0.13,0.0,0.0,1,250
Looping 1 00 times,1,9,0.39,0.55,0.0,0.0,1,250
time.Sleep(1 * time.Microsecond),0,7,0.26,0.13,0.0,0.0,1,250
instead of 1 0 times,1,9,0.39,0.55,0.0,0.0,1,250
"// fmt.Printf(""%c "", i)",0,7,0.26,0.13,0.0,0.0,1,250
},0,7,0.17,0.13,0.0,0.0,0,250
},0,7,0.17,0.13,0.0,0.02,0,250
Here’s the output:,0,9,0.3,0.13,0.02,0.01,1,250
BenchmarkPrint1  20000000        86.7 ns/op,0,7,0.26,0.13,0.01,0.0,1,250
BenchmarkGoPrint1   1000000        1177 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkPrint2      2000     1184572 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkGoPrint2   1000000       17564 ns/op,0,7,0.26,0.13,0.0,0.02,1,250
"print1 function is 13 times slower, but for",0,9,0.21,0.33,0.02,0.0,1,250
goPrint1 the dif-,0,9,0.21,0.68,0.0,0.0,1,250
The benchmark for the,0,9,0.3,0.13,0.0,0.0,1,250
ference is trivial. Running with a load is even more drastic—the difference between,0,9,0.21,0.13,0.0,0.0,0,250
print2 is almost 10 times,0,9,0.21,0.61,0.0,0.0,1,250
running sequentially is now 67 times! The benchmark for,0,9,0.3,0.13,0.0,0.0,1,250
slower than before (which makes sense since we’re running it 10 times more) whereas,0,9,0.21,0.13,0.0,0.0,0,250
"for goPrint2 , the difference between running it 10 times and 100 times is almost",0,9,0.21,0.13,0.0,0.0,0,250
imperceptible.,0,9,0.3,0.13,0.0,0.0,1,250
Note that we’re still using just one,0,9,0.3,0.15,0.0,0.0,1,250
CPU . What happens if you switch to using two,0,9,0.21,0.45,0.0,0.0,1,250
CPU s (but still loop 100 times)?,0,9,0.3,0.13,0.0,0.01,1,250
go test -run x -bench . -cpu 2,0,7,0.26,0.13,0.01,0.01,1,250
Here’s what you get:,0,9,0.3,0.13,0.01,0.01,1,250
BenchmarkPrint1-2  20000000        87.3 ns/op,0,7,0.26,0.13,0.01,0.0,1,250
BenchmarkGoPrint2-2   5000000         391 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkPrint2-2      1000     1217151 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkGoPrint2-2   200000        8607 ns/op,0,7,0.26,0.13,0.0,0.02,1,250
The benchmark for print1,0,9,0.3,0.13,0.02,0.0,1,250
is no different than running it with one or four,0,9,0.21,0.37,0.0,0.0,1,250
CPU s,0,9,0.21,0.78,0.0,0.0,1,250
"because the functions are called sequentially, and even if you give it four",0,9,0.21,0.13,0.0,0.0,0,250
"CPU s, it can",0,9,0.21,0.73,0.0,0.0,1,250
goPrint1 is fantastic; the improve-,0,9,0.21,0.55,0.0,0.0,1,250
only ever use just one of them. The benchmark for,0,9,0.3,0.13,0.0,0.0,1,250
"ment is almost three times, because the workload is shared now with two",0,9,0.21,0.13,0.0,0.0,0,250
s. As,0,9,0.21,0.79,0.0,0.0,1,250
CPU,0,9,0.12,0.75,0.0,0.0,0,250
print2 is almost the same as before because it can’t use,0,9,0.21,0.37,0.0,0.0,1,250
"expected, the benchmark for",0,9,0.3,0.13,0.0,0.0,1,250
"goPrint2 is twice as fast as earlier, which is as",0,9,0.21,0.46,0.0,0.0,1,250
more than one CPU . The benchmark for,0,9,0.3,0.13,0.0,0.0,1,250
expected since the workload is now shared between two,0,9,0.3,0.13,0.0,0.0,1,250
CPU s.,0,9,0.21,0.59,0.0,0.0,1,250
Time to get adventurous. What happens if you give it four,0,9,0.3,0.15,0.0,0.0,1,250
CPU s instead of two?,0,9,0.21,0.63,0.0,0.01,1,250
BenchmarkPrint1-4  20000000             90.6 ns/op,0,7,0.26,0.13,0.01,0.0,1,250
BenchmarkGoPrint1-4   3000000         479 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkPrint2-4      1000     1272672 ns/op,0,7,0.26,0.13,0.0,0.0,1,250
BenchmarkGoPrint2-4   300000        6193 ns/op,0,7,0.26,0.13,0.0,0.02,1,250
print1 and print2 functions are about the,0,9,0.21,0.47,0.02,0.0,1,250
"As you’d expect, the benchmarks for the",0,9,0.3,0.13,0.0,0.0,1,250
goPrint1 is worse than with two,0,9,0.21,0.52,0.0,0.0,1,250
"same. Surprisingly, though, the benchmark for",0,9,0.3,0.13,0.0,0.0,1,250
CPU s,0,9,0.21,0.78,0.0,0.0,1,250
231,1,9,0.3,0.82,0.0,0.0,0,251
Goroutines,1,9,0.39,0.42,0.0,0.03,1,251
goPrint2,0,9,0.21,0.77,0.03,0.0,1,251
(though it’s still better than with just one,0,9,0.3,0.14,0.0,0.0,1,251
CPU ) whereas the benchmark for,0,9,0.21,0.49,0.0,0.0,1,251
is better than with two CPU,0,9,0.3,0.14,0.0,0.0,1,251
s (though the improvement is just a disappointing 40 %).,0,9,0.21,0.37,0.0,0.0,1,251
The benchmarks are worse because of the same issue I mentioned earlier: scheduling,0,9,0.21,0.14,0.0,0.0,0,251
and running on multiple,0,9,0.3,0.14,0.0,0.0,1,251
"CPU s have a cost, and if the processing doesn’t warrant the",0,9,0.21,0.36,0.0,0.0,1,251
"high cost, it can make the performance worse.",0,9,0.3,0.14,0.0,0.0,1,251
The moral of the story? Increasing the number of,0,9,0.3,0.17,0.0,0.0,1,251
CPU s doesn’t necessarily mean,0,9,0.21,0.59,0.0,0.0,1,251
better performance. It’s important to understand your code and do lots of bench-,0,9,0.21,0.14,0.0,0.0,0,251
marking.,0,9,0.3,0.14,0.0,0.02,1,251
9.2.3 Waiting for goroutines,1,10,0.5,0.07,0.02,0.01,1,251
"You saw how goroutines are run independently, and in a previous example, you also",0,9,0.21,0.14,0.01,0.0,0,251
saw how the goroutines started in the program would end unceremoniously when the,0,9,0.21,0.14,0.0,0.0,0,251
"Sleep function,",0,9,0.21,0.71,0.0,0.0,1,251
program ended. You got away with it by adding a time delay using the,0,9,0.3,0.14,0.0,0.0,1,251
but that’s a very hacky way of handling it. Although the danger of a program ending,0,9,0.21,0.14,0.0,0.0,0,251
before the goroutines can complete is less probable in any serious code (because,0,9,0.21,0.14,0.0,0.0,0,251
"you’ll know right away and change it), you may often encounter a need to ensure all",0,9,0.21,0.14,0.0,0.0,0,251
goroutines complete before moving on to the next thing.,0,9,0.3,0.14,0.0,0.0,1,251
sync,0,9,0.21,0.8,0.0,0.0,1,251
Go provides a simple mechanism called the,0,9,0.3,0.17,0.0,0.0,1,251
"WaitGroup , which is found in the",1,9,0.39,0.53,0.0,0.0,1,251
package. The mechanism is straightforward:,0,9,0.3,0.14,0.0,0.01,1,251
Declare a WaitGroup.,0,9,0.3,0.19,0.01,0.0,1,251
■,0,4,0.11,0.17,0.0,0.01,0,251
Add method.,0,9,0.21,0.54,0.01,0.0,1,251
Set up the WaitGroup’s counter using the,0,9,0.3,0.19,0.0,0.0,1,251
■,0,4,0.11,0.17,0.0,0.01,0,251
Done method whenever a goroutine com-,0,9,0.21,0.49,0.01,0.0,1,251
Decrement the counter using the,0,9,0.3,0.19,0.0,0.0,1,251
■,0,4,0.11,0.17,0.0,0.01,0,251
pletes its task.,0,9,0.3,0.19,0.01,0.01,1,251
"Call the Wait method, which will block until the counter is 0.",0,9,0.3,0.19,0.01,0.0,1,251
■,0,4,0.11,0.17,0.0,0.02,0,251
printNumbers2 and,0,9,0.21,0.68,0.02,0.0,1,251
The following listing shows an example. You’ll be using the same,0,9,0.3,0.14,0.0,0.0,1,251
printLetters2 functions that previously needed a one-microsecond delay.,0,9,0.21,0.14,0.0,0.03,0,251
Listing 9.6 Using WaitGroups,1,9,0.48,0.17,0.03,0.02,1,251
package main,0,7,0.26,0.14,0.02,0.02,1,251
"import ""fmt""",0,7,0.26,0.14,0.02,0.0,1,251
"import ""time""",0,7,0.26,0.14,0.0,0.0,1,251
"import ""sync""",0,7,0.26,0.14,0.0,0.02,1,251
func printNumbers2(wg *sync.WaitGroup) {,0,7,0.26,0.14,0.02,0.0,1,251
for i := 0; i < 10; i++ {,0,7,0.26,0.14,0.0,0.0,1,251
time.Sleep(1 * time.Microsecond),0,7,0.26,0.14,0.0,0.0,1,251
"fmt.Printf(""%d "", i)",0,7,0.26,0.14,0.0,0.0,1,251
},0,7,0.17,0.14,0.0,0.0,0,251
wg.Done(),0,7,0.26,0.14,0.0,0.0,1,251
Decrement counter,1,9,0.39,0.53,0.0,0.0,1,251
},0,7,0.17,0.14,0.0,0.02,0,251
func printLetters2(wg *sync.WaitGroup) {,0,7,0.26,0.14,0.02,0.0,1,251
for i := 'A'; i < 'A'+10; i++ {,0,7,0.26,0.14,0.0,0.0,1,251
232,1,9,0.39,0.06,0.0,0.0,0,252
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,252
C 9,1,7,0.26,0.31,0.0,0.0,0,252
HAPTER,1,6,0.33,0.32,0.0,0.03,1,252
time.Sleep(1 * time.Microsecond),0,7,0.26,0.13,0.03,0.0,1,252
"fmt.Printf(""%c "", i)",0,7,0.26,0.13,0.0,0.0,1,252
},0,7,0.17,0.13,0.0,0.0,0,252
wg.Done(),0,7,0.26,0.13,0.0,0.0,1,252
Decrement counter,1,9,0.39,0.42,0.0,0.0,1,252
},0,7,0.17,0.13,0.0,0.02,0,252
func main() {,0,7,0.26,0.13,0.02,0.0,1,252
var wg sync.WaitGroup,0,7,0.26,0.13,0.0,0.0,1,252
Declares WaitGroup,1,9,0.39,0.62,0.0,0.0,1,252
wg.Add(2),0,7,0.26,0.13,0.0,0.0,1,252
Sets up counter,1,9,0.39,0.41,0.0,0.0,1,252
go printNumbers2(&wg),0,7,0.26,0.13,0.0,0.0,1,252
go printLetters2(&wg),0,7,0.26,0.13,0.0,0.0,1,252
wg.Wait(),0,7,0.26,0.13,0.0,0.0,1,252
Blocks until counter reaches 0,1,9,0.39,0.48,0.0,0.0,1,252
},0,7,0.17,0.13,0.0,0.02,0,252
0 A 1 B 2 C 3 D 4 E 5 F 6 G 7 H 8 I 9 J,0,9,0.21,0.47,0.02,0.0,1,252
When you run the program it’ll print out,0,9,0.3,0.13,0.0,0.0,1,252
WaitGroup variable called,0,9,0.21,0.48,0.0,0.0,1,252
"wg . Next, we call",0,9,0.21,0.69,0.0,0.0,1,252
"nicely. How does it work? First, we define a",0,9,0.3,0.13,0.0,0.0,1,252
"the Add method on wg , passing it a value of 2, which increments the counter by 2. As",0,9,0.21,0.13,0.0,0.0,0,252
you call the printNumbers2,0,9,0.3,0.13,0.0,0.0,1,252
"and printLetters2 goroutines, respectively, you decre-",0,9,0.21,0.36,0.0,0.0,1,252
Wait,0,9,0.21,0.79,0.0,0.0,1,252
ment the counter. The WaitGroup will block at the location where you call the,0,9,0.21,0.13,0.0,0.0,0,252
"Done method is called twice, the Wait-",0,9,0.21,0.52,0.0,0.0,1,252
method until the counter becomes 0. Once the,0,9,0.3,0.13,0.0,0.0,1,252
Group will unblock and the program ends.,0,9,0.3,0.13,0.0,0.0,1,252
What happens if you forget to decrement the counter in one of the goroutines?,0,9,0.21,0.15,0.0,0.0,0,252
"The WaitGroup blocks until the runtime detects all goroutines are asleep, after which",0,9,0.21,0.13,0.0,0.0,0,252
it’ll panic.,0,9,0.3,0.13,0.0,0.01,1,252
0 A 1 B 2 C 3 D 4 E 5 F 6 G 7 H 8 I 9 J fatal error: all goroutines are,0,7,0.17,0.13,0.01,0.0,0,252
asleep - deadlock!,0,7,0.26,0.17,0.0,0.01,1,252
The WaitGroup feature is pretty nifty and it’s an important tool to have in your tool-,0,9,0.21,0.13,0.01,0.0,0,252
box when writing concurrent programs.,0,9,0.3,0.13,0.0,0.02,1,252
9.3 Channels,1,12,0.54,0.06,0.02,0.01,1,252
go keyword can be used to convert normal,0,9,0.21,0.47,0.01,0.0,1,252
"In the previous section, you saw how the",0,9,0.3,0.13,0.0,0.0,1,252
"functions into goroutines and execute them independently. In the last subsection, you",0,9,0.21,0.13,0.0,0.0,0,252
also saw how to use WaitGroups to synchronize between independently running gor-,0,9,0.21,0.13,0.0,0.0,0,252
"outines. In this section, you’ll learn how goroutines can communicate with each other",0,9,0.21,0.13,0.0,0.0,0,252
using channels.,0,9,0.3,0.13,0.0,0.0,1,252
You can think of a channel as,0,9,0.3,0.15,0.0,0.0,1,252
a box. Goroutines can talk to,0,9,0.3,0.13,0.0,0.0,1,252
Sender,0,7,0.17,0.45,0.0,0.0,1,252
Receiver,0,7,0.17,0.75,0.0,0.0,1,252
each other only through this box.,0,9,0.3,0.13,0.0,0.0,1,252
goroutine,0,7,0.17,0.44,0.0,0.0,1,252
goroutine,0,7,0.17,0.75,0.0,0.0,1,252
If a goroutine wants to pass some-,0,9,0.3,0.13,0.0,0.0,1,252
"thing to another goroutine, it",0,9,0.3,0.13,0.0,0.0,1,252
must place something in this box,0,9,0.3,0.13,0.0,0.0,1,252
for the corresponding goroutine,0,9,0.3,0.13,0.0,0.0,1,252
"to retrieve, shown in figure 9.3.",0,9,0.3,0.13,0.0,0.01,1,252
Figure 9.3 Unbuffered Go,1,7,0.35,0.22,0.01,0.0,1,252
Unbuffered Go channel,0,7,0.17,0.57,0.0,0.0,1,252
channel as a box,1,7,0.35,0.28,0.0,0.0,1,252
233,1,9,0.3,0.82,0.0,0.0,0,253
Channels,1,9,0.39,0.43,0.0,0.03,1,253
C hannels are typed values that allow goroutines to communicate with each other.,1,9,0.39,0.14,0.03,0.0,0,253
"make , and the resulting value is a reference to an under-",0,9,0.21,0.38,0.0,0.0,1,253
Channels are allocated using,0,9,0.3,0.14,0.0,0.0,1,253
"lying data structure. This, for example, allocates a channel of integers:",0,9,0.21,0.14,0.0,0.01,0,253
ch := make(chan int),0,7,0.26,0.14,0.01,0.01,1,253
"Channels are, by default, unbuffered. If an optional integer parameter is provided, a",0,9,0.21,0.14,0.01,0.0,0,253
buffered channel of the given size is allocated instead. This creates a buffered channel of,1,9,0.39,0.14,0.0,0.0,0,253
integers with the size 10:,0,9,0.3,0.14,0.0,0.01,1,253
"ch := make(chan int, 10)",0,7,0.26,0.14,0.01,0.01,1,253
Unbuffered channels are synchronous. You can think of unbuffered channels as a box,0,9,0.21,0.14,0.01,0.0,0,253
that can contain only one thing at a time. Once a goroutine puts something into this,0,9,0.21,0.14,0.0,0.0,0,253
"box, no other goroutines can put anything in, unless another goroutine takes out",0,9,0.21,0.14,0.0,0.0,0,253
whatever is inside it first. This means if another goroutine wants to put in something,0,9,0.21,0.14,0.0,0.0,0,253
"else when the box contains something already, it will block and go to sleep until the",0,9,0.21,0.14,0.0,0.0,0,253
box is empty.,0,9,0.3,0.14,0.0,0.0,1,253
"Similarly, if a goroutine tries to take out something from this box and it’s empty,",0,9,0.21,0.17,0.0,0.0,0,253
it’ll block and go to sleep until the box has something in it.,0,9,0.3,0.14,0.0,0.0,1,253
"The syntax for putting things into a channel is quickly recognizable, visually. This",0,9,0.21,0.17,0.0,0.0,0,253
ch :,0,9,0.21,0.43,0.0,0.0,1,253
puts an integer 1 into the channel,0,9,0.3,0.14,0.0,0.01,1,253
ch <- 1,0,7,0.26,0.14,0.01,0.01,1,253
Taking out the value from a channel is equally recognizable. This removes the value,0,9,0.21,0.14,0.01,0.0,0,253
i :,0,9,0.12,0.53,0.0,0.0,0,253
from the channel and assigns it to the variable,0,9,0.3,0.14,0.0,0.01,1,253
i := <- ch,0,7,0.26,0.14,0.01,0.01,1,253
"Channels can be directional. By default, channels work both ways (",0,9,0.3,0.14,0.01,0.0,1,253
bidirectional ) and,1,9,0.39,0.71,0.0,0.0,1,253
values can be sent to or received from it. But channels can be restricted to,0,9,0.21,0.14,0.0,0.0,0,253
send-only or,1,9,0.39,0.75,0.0,0.0,1,253
receive-only . This allocates a send-only channel of strings:,1,9,0.48,0.14,0.0,0.01,1,253
ch := make(chan <- string),0,7,0.26,0.14,0.01,0.01,1,253
This allocates a receive-only channel of strings:,0,9,0.3,0.14,0.01,0.01,1,253
ch := make(<-chan string),0,7,0.26,0.14,0.01,0.01,1,253
"Although channels can be allocated to be directional, they can also be allocated as",0,9,0.21,0.14,0.01,0.0,0,253
bidirectional but returned as directional. You’ll see an example of this near the end of,0,9,0.21,0.14,0.0,0.0,0,253
this chapter.,0,9,0.3,0.14,0.0,0.02,1,253
9.3.1 Synchronization with channels,1,10,0.5,0.07,0.02,0.01,1,253
"As you can imagine, channels are useful when you want to synchronize between two",0,9,0.21,0.14,0.01,0.0,0,253
goroutines—especially when you have one goroutine dependent on another. Let’s,0,9,0.21,0.14,0.0,0.0,0,253
jump into some code now and use the WaitGroup example to show how synchroniza-,0,9,0.21,0.14,0.0,0.0,0,253
"tion can be done using channels instead, shown in this listing.",0,9,0.3,0.14,0.0,0.0,1,253
234,1,9,0.39,0.06,0.0,0.0,0,254
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,254
C 9,1,7,0.26,0.31,0.0,0.0,0,254
HAPTER,1,6,0.33,0.32,0.0,0.03,1,254
Listing 9.7 Synchronizing goroutines using channels,1,9,0.48,0.15,0.03,0.02,1,254
package main,0,7,0.26,0.13,0.02,0.02,1,254
"import ""fmt""",0,7,0.26,0.13,0.02,0.0,1,254
"import ""time""",0,7,0.26,0.13,0.0,0.02,1,254
func printNumbers2(w chan bool) {,0,7,0.26,0.13,0.02,0.0,1,254
for i := 0; i < 10; i++ {,0,7,0.26,0.13,0.0,0.0,1,254
time.Sleep(1 * time.Microsecond),0,7,0.26,0.13,0.0,0.0,1,254
"fmt.Printf(""%d "", i)",0,7,0.26,0.13,0.0,0.0,1,254
},0,7,0.17,0.13,0.0,0.0,0,254
w <- true,0,7,0.26,0.13,0.0,0.0,1,254
},0,7,0.17,0.13,0.0,0.02,0,254
func printLetters2(w chan bool) {,0,7,0.26,0.13,0.02,0.0,1,254
Places Boolean value,1,9,0.39,0.5,0.0,0.0,1,254
for i := 'A'; i < 'A'+10; i++ {,0,7,0.26,0.13,0.0,0.0,1,254
into channel to unblock,1,9,0.39,0.5,0.0,0.0,1,254
time.Sleep(1 * time.Microsecond),0,7,0.26,0.13,0.0,0.0,1,254
"fmt.Printf(""%c "", i)",0,7,0.26,0.13,0.0,0.0,1,254
},0,7,0.17,0.13,0.0,0.0,0,254
w <- true,0,7,0.26,0.13,0.0,0.0,1,254
},0,7,0.17,0.13,0.0,0.02,0,254
func main() {,0,7,0.26,0.13,0.02,0.0,1,254
"w1, w2 := make(chan bool), make(chan bool)",0,7,0.26,0.13,0.0,0.0,1,254
go printNumbers2(w1),0,7,0.26,0.13,0.0,0.0,1,254
go printLetters2(w2),0,7,0.26,0.13,0.0,0.0,1,254
<-w1,0,7,0.26,0.13,0.0,0.0,1,254
Channel blocks until something’s in it,1,9,0.39,0.48,0.0,0.0,1,254
<-w2,0,7,0.26,0.13,0.0,0.0,1,254
},0,7,0.17,0.13,0.0,0.02,0,254
Let’s look at the main function first. You created two channels of type,0,9,0.21,0.13,0.02,0.0,0,254
bool : w1 and w2 .,0,9,0.21,0.69,0.0,0.0,1,254
"Then, you ran both printNumbers2",0,9,0.3,0.13,0.0,0.0,1,254
"and printLetters2 as goroutines, passing them",0,9,0.21,0.43,0.0,0.0,1,254
"the channel. As soon the goroutines are launched, you try to remove something from",0,9,0.21,0.13,0.0,0.0,0,254
"the channel w1 . Because there’s nothing in this channel, the program will block here.",0,9,0.21,0.13,0.0,0.0,0,254
Before the function printNumbers2,0,9,0.3,0.13,0.0,0.0,1,254
true value into,0,9,0.21,0.7,0.0,0.0,1,254
"completes, though, you place a",0,9,0.21,0.43,0.0,0.0,1,254
the channel w1 . This results in the program unblocking and continuing to the second,0,9,0.21,0.13,0.0,0.0,0,254
"channel, w2 . A similar thing happens and",0,9,0.3,0.13,0.0,0.0,1,254
w2 gets a true value in,0,9,0.21,0.49,0.0,0.0,1,254
"printLetters2 ,",0,9,0.21,0.7,0.0,0.0,1,254
"resulting in w2 being unblocked, and the program exits.",0,9,0.3,0.13,0.0,0.0,1,254
"w1 and w2 but they aren’t used, because",0,9,0.21,0.49,0.0,0.0,1,254
Notice that you took out the value from,0,9,0.3,0.15,0.0,0.0,1,254
you’re only interested in unblocking the program once the goroutines complete.,0,9,0.21,0.13,0.0,0.0,0,254
This is a simple example. You can see that the goroutines aren’t communicating,0,9,0.21,0.15,0.0,0.0,0,254
with each other—you only used the channels to synchronize them. Let’s look at,0,9,0.21,0.13,0.0,0.0,0,254
"another example, this time with a message passing between goroutines.",0,9,0.3,0.13,0.0,0.02,1,254
9.3.2 Message passing with channels,1,10,0.5,0.06,0.02,0.01,1,254
The following listing has two functions running as independent goroutines: a thrower,0,9,0.21,0.13,0.01,0.0,0,254
and a catcher. The thrower throws a number in sequence by sending the number to a,0,9,0.21,0.13,0.0,0.0,0,254
channel that’s being passed into the goroutine. The catcher catches by receiving from,0,9,0.21,0.13,0.0,0.0,0,254
the same channel and printing it out.,0,9,0.3,0.13,0.0,0.0,1,254
235,1,9,0.3,0.82,0.0,0.0,0,255
Channels,1,9,0.39,0.43,0.0,0.03,1,255
Listing 9.8 Passing messages with channels,1,9,0.48,0.17,0.03,0.02,1,255
package main,0,7,0.26,0.14,0.02,0.02,1,255
import (,0,7,0.26,0.14,0.02,0.0,1,255
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,255
"""time""",0,7,0.26,0.14,0.0,0.0,1,255
),0,7,0.17,0.14,0.0,0.02,0,255
func thrower(c chan int) {,0,7,0.26,0.14,0.02,0.0,1,255
for i := 0; i < 5; i++ {,0,7,0.26,0.14,0.0,0.0,1,255
c <- i,0,7,0.26,0.14,0.0,0.0,1,255
Places something,1,9,0.39,0.57,0.0,0.0,1,255
"fmt.Println(""Threw  >>"", i)",0,7,0.26,0.14,0.0,0.0,1,255
into channel,1,9,0.39,0.57,0.0,0.0,1,255
},0,7,0.17,0.14,0.0,0.0,0,255
},0,7,0.17,0.14,0.0,0.02,0,255
func catcher(c chan int) {,0,7,0.26,0.14,0.02,0.0,1,255
for i := 0; i < 5; i++ {,0,7,0.26,0.14,0.0,0.0,1,255
num := <-c,0,7,0.26,0.14,0.0,0.0,1,255
Takes something out of channel,1,9,0.39,0.57,0.0,0.0,1,255
"fmt.Println(""Caught <<"", num)",0,7,0.26,0.14,0.0,0.0,1,255
},0,7,0.17,0.14,0.0,0.0,0,255
},0,7,0.17,0.14,0.0,0.02,0,255
func main() {,0,7,0.26,0.14,0.02,0.0,1,255
c := make(chan int),0,7,0.26,0.14,0.0,0.0,1,255
go thrower(c),0,7,0.26,0.14,0.0,0.0,1,255
go catcher(c),0,7,0.26,0.14,0.0,0.0,1,255
time.Sleep(100 * time.Millisecond),0,7,0.26,0.14,0.0,0.0,1,255
},0,7,0.17,0.14,0.0,0.02,0,255
"When you run this program, here’s what you get:",0,9,0.3,0.14,0.02,0.01,1,255
Caught << 0,0,7,0.26,0.14,0.01,0.0,1,255
Threw  >> 0,0,7,0.26,0.14,0.0,0.0,1,255
Threw  >> 1,0,7,0.26,0.14,0.0,0.0,1,255
Caught << 1,0,7,0.26,0.14,0.0,0.0,1,255
Caught << 2,0,7,0.26,0.14,0.0,0.0,1,255
Threw  >> 2,0,7,0.26,0.14,0.0,0.0,1,255
Threw  >> 3,0,7,0.26,0.14,0.0,0.0,1,255
Caught << 3,0,7,0.26,0.14,0.0,0.0,1,255
Caught << 4,0,7,0.26,0.14,0.0,0.0,1,255
Threw  >> 4,0,7,0.26,0.14,0.0,0.02,1,255
Caught statement is run before the,0,9,0.21,0.49,0.02,0.0,1,255
"Threw ,",0,9,0.21,0.79,0.0,0.0,1,255
It might seem strange that sometimes the,0,9,0.3,0.14,0.0,0.0,1,255
but that’s not important—it’s just the runtime scheduling between the print state-,0,9,0.21,0.14,0.0,0.0,0,255
ments after sending or receiving from the channel. What’s more important to notice,0,9,0.21,0.14,0.0,0.0,0,255
"is that the numbers are in sequence, meaning once the number is “thrown” from the",0,9,0.21,0.14,0.0,0.0,0,255
"thrower, the same number must be “caught” by the catcher before proceeding to the",0,9,0.21,0.14,0.0,0.0,0,255
next number.,0,9,0.3,0.14,0.0,0.02,1,255
9.3.3 Buffered channels,1,10,0.5,0.07,0.02,0.01,1,255
Unbuffered or synchronous channels seem simple enough. What about buffered,0,9,0.21,0.14,0.01,0.0,0,255
"channels? Buffered channels are asynchronous, first-in, first-out",0,9,0.3,0.14,0.0,0.0,1,255
(FIFO) message,0,9,0.21,0.71,0.0,0.0,1,255
236,1,9,0.39,0.06,0.0,0.0,0,256
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,256
C 9,1,7,0.26,0.31,0.0,0.0,0,256
HAPTER,1,6,0.33,0.32,0.0,0.03,1,256
queues. Think of buffered channels as a large box that can contain a number of simi-,0,9,0.21,0.13,0.03,0.0,0,256
lar things. A goroutine can continually add things into this box without blocking until,0,9,0.21,0.13,0.0,0.0,0,256
"there’s no more space in the box. Similarly, another goroutine can continually remove",0,9,0.21,0.13,0.0,0.0,0,256
things from this box (in the same sequence it was put in) and will only block when it,0,9,0.21,0.13,0.0,0.0,0,256
"runs out of things to remove, shown in figure 9.4.",0,9,0.3,0.13,0.0,0.06,1,256
Sender,0,7,0.26,0.16,0.06,0.0,1,256
Receiver,0,7,0.17,0.68,0.0,0.0,1,256
goroutine,0,7,0.26,0.15,0.0,0.0,1,256
goroutine,0,7,0.3,0.68,0.0,0.13,1,256
Buffered Go channel,0,7,0.3,0.37,0.13,0.01,1,256
Figure 9.4 Buffered channel as a box,1,7,0.44,0.13,0.01,0.05,1,256
Let’s see how this works with our thrower and catcher example. You convert the,0,9,0.21,0.13,0.05,0.0,0,256
unbuffered channel you allocated:,0,9,0.3,0.13,0.0,0.01,1,256
c := make(chan int),0,7,0.26,0.13,0.01,0.01,1,256
into a buffered channel of size 3:,0,9,0.3,0.13,0.01,0.01,1,256
"c := make(chan int, 3)",0,7,0.26,0.13,0.01,0.01,1,256
"When you run the program again, this is what you see:",0,9,0.3,0.13,0.01,0.01,1,256
Threw  >> 0,0,7,0.26,0.13,0.01,0.0,1,256
Threw  >> 1,0,7,0.26,0.13,0.0,0.0,1,256
Threw  >> 2,0,7,0.26,0.13,0.0,0.0,1,256
Caught << 0,0,7,0.26,0.13,0.0,0.0,1,256
Caught << 1,0,7,0.26,0.13,0.0,0.0,1,256
Caught << 2,0,7,0.26,0.13,0.0,0.0,1,256
Threw  >> 3,0,7,0.26,0.13,0.0,0.0,1,256
Threw  >> 4,0,7,0.26,0.13,0.0,0.0,1,256
Caught << 3,0,7,0.26,0.13,0.0,0.0,1,256
Caught << 4,0,7,0.26,0.13,0.0,0.02,1,256
"You can see that the buffer fills up with three numbers before it blocks, as the catcher",0,9,0.21,0.13,0.02,0.0,0,256
receives the three numbers in sequence. Buffered channels are useful when limiting,0,9,0.21,0.13,0.0,0.0,0,256
throughput. If you have a limited number of processes to work on your problem and,0,9,0.21,0.13,0.0,0.0,0,256
"you want to throttle the number of requests coming in to your processes, buffered",0,9,0.21,0.13,0.0,0.0,0,256
channels allow you to do exactly that.,0,9,0.3,0.13,0.0,0.0,1,256
237,1,9,0.3,0.82,0.0,0.0,0,257
Channels,1,9,0.39,0.43,0.0,0.03,1,257
9.3.4 Selecting channels,1,10,0.5,0.07,0.03,0.01,1,257
"select , that allows you to select one of many channels to",0,9,0.21,0.36,0.01,0.0,1,257
"Go has a special keyword,",0,9,0.3,0.14,0.0,0.0,1,257
select statement like a,0,9,0.21,0.46,0.0,0.0,1,257
switch statement but,0,9,0.21,0.66,0.0,0.0,1,257
receive from or send to. Think of the,0,9,0.3,0.14,0.0,0.0,1,257
"for channels, shown in this listing.",0,9,0.3,0.14,0.0,0.03,1,257
Listing 9.9 Selecting channels,1,9,0.48,0.17,0.03,0.02,1,257
package main,0,7,0.26,0.14,0.02,0.02,1,257
import (,0,7,0.26,0.14,0.02,0.0,1,257
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,257
),0,7,0.17,0.14,0.0,0.02,0,257
func callerA(c chan string) {,0,7,0.26,0.14,0.02,0.0,1,257
"c <- ""Hello World!""",0,7,0.26,0.14,0.0,0.0,1,257
},0,7,0.17,0.14,0.0,0.02,0,257
func callerB(c chan string) {,0,7,0.26,0.14,0.02,0.0,1,257
"c <- ""Hola Mundo!""",0,7,0.26,0.14,0.0,0.0,1,257
},0,7,0.17,0.14,0.0,0.02,0,257
func main() {,0,7,0.26,0.14,0.02,0.0,1,257
"a, b := make(chan string), make(chan string)",0,7,0.26,0.14,0.0,0.0,1,257
go callerA(a),0,7,0.26,0.14,0.0,0.0,1,257
go callerB(b),0,7,0.26,0.14,0.0,0.0,1,257
for i := 0; i < 5; i++ {,0,7,0.26,0.14,0.0,0.0,1,257
select {,0,7,0.26,0.14,0.0,0.0,1,257
case msg := <-a:,0,7,0.26,0.14,0.0,0.0,1,257
"fmt.Printf(""%s from A\n"", msg)",0,7,0.26,0.14,0.0,0.0,1,257
case msg := <-b:,0,7,0.26,0.14,0.0,0.0,1,257
"fmt.Printf(""%s from B\n"", msg)",0,7,0.26,0.14,0.0,0.0,1,257
},0,7,0.17,0.14,0.0,0.0,0,257
},0,7,0.17,0.14,0.0,0.0,0,257
},0,7,0.17,0.14,0.0,0.02,0,257
"callerA and callerB , each of which takes in a channel of",0,9,0.21,0.35,0.02,0.0,1,257
"There are two functions,",0,9,0.3,0.14,0.0,0.0,1,257
strings and sends a message into it. These two functions are called as goroutines. You,0,9,0.21,0.14,0.0,0.0,0,257
"loop five times (the number of loops is arbitrary), and in each iteration the Go run-",0,9,0.21,0.14,0.0,0.0,0,257
"a or channel b , depending on the",0,9,0.21,0.57,0.0,0.0,1,257
time determines whether you receive from channel,0,9,0.3,0.14,0.0,0.0,1,257
"channel that has a value at the time of selection. If both are available, the Go runtime",0,9,0.21,0.14,0.0,0.0,0,257
will randomly pick one.,0,9,0.3,0.14,0.0,0.0,1,257
"But when you run this program, you get a deadlock:",0,9,0.3,0.17,0.0,0.01,1,257
Hello World! from A,0,7,0.26,0.14,0.01,0.0,1,257
Hola Mundo! from B,0,7,0.26,0.14,0.0,0.0,1,257
fatal error: all goroutines are asleep - deadlock!,0,7,0.26,0.14,0.0,0.02,1,257
"This is because once one goroutine has received from a channel, any other goroutine",0,9,0.21,0.14,0.02,0.0,0,257
"receiving from it will be blocked and go to sleep. In the example, you receive from chan-",0,9,0.21,0.14,0.0,0.0,0,257
"nel a first, and it blocks. In the next iteration of the loop, you receive from channel",0,9,0.21,0.14,0.0,0.0,0,257
b,0,9,0.12,0.83,0.0,0.0,0,257
238,1,9,0.39,0.06,0.0,0.0,0,258
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,258
C 9,1,7,0.26,0.31,0.0,0.0,0,258
HAPTER,1,6,0.33,0.32,0.0,0.03,1,258
"and it blocks. At this point you have received from both goroutines, so all goroutines are",0,9,0.21,0.13,0.03,0.0,0,258
"blocked and asleep, and therefore deadlocked, and the runtime will panic.",0,9,0.21,0.13,0.0,0.0,0,258
select can have a default case that will be,0,9,0.21,0.47,0.0,0.0,1,258
So how can you prevent a deadlock?,0,9,0.3,0.15,0.0,0.0,1,258
called when all channels in the select are blocked (the code is shown in bold):,0,9,0.21,0.13,0.0,0.01,0,258
select {,0,7,0.26,0.13,0.01,0.0,1,258
case msg := <-a:,0,7,0.26,0.13,0.0,0.0,1,258
"fmt.Printf(""%s from A\n"", msg)",0,7,0.26,0.13,0.0,0.0,1,258
case msg := <-b:,0,7,0.26,0.13,0.0,0.0,1,258
"fmt.Printf(""%s from B\n"", msg)",0,7,0.26,0.13,0.0,0.0,1,258
default:,1,7,0.44,0.13,0.0,0.0,1,258
"fmt.Println(""Default"")",1,7,0.44,0.13,0.0,0.0,1,258
},0,7,0.17,0.13,0.0,0.02,0,258
"select is executed, Go will run the default",0,9,0.21,0.46,0.02,0.0,1,258
If neither channel is available when the,0,9,0.3,0.13,0.0,0.0,1,258
"block. In the preceding code, both channels will be blocked once the messages are",0,9,0.21,0.13,0.0,0.0,0,258
"received, so the default will be executed until the loop ends. If you run this now,",0,9,0.21,0.13,0.0,0.0,0,258
select is called too quickly and the,0,9,0.21,0.53,0.0,0.0,1,258
"though, it’ll show only the defaults, because the",0,9,0.3,0.13,0.0,0.0,1,258
loop ends before any channels can be received properly. You’ll have to add a one-,0,9,0.21,0.13,0.0,0.0,0,258
select is called (the code appears in bold):,0,9,0.21,0.46,0.0,0.0,1,258
microsecond delay just before each time,0,9,0.3,0.13,0.0,0.01,1,258
for i := 0; i < 5; i++ {,0,7,0.26,0.13,0.01,0.0,1,258
time.Sleep(1 * time.Microsecond),1,7,0.44,0.13,0.0,0.0,1,258
select {,0,7,0.26,0.13,0.0,0.0,1,258
case msg := <-a:,0,7,0.26,0.13,0.0,0.0,1,258
"fmt.Printf(""%s from A\n"", msg)",0,7,0.26,0.13,0.0,0.0,1,258
case msg := <-b:,0,7,0.26,0.13,0.0,0.0,1,258
"fmt.Printf(""%s from B\n"", msg)",0,7,0.26,0.13,0.0,0.0,1,258
default:,0,7,0.26,0.13,0.0,0.0,1,258
"fmt.Println(""Default"")",0,7,0.26,0.13,0.0,0.0,1,258
},0,7,0.17,0.13,0.0,0.0,0,258
},0,7,0.17,0.13,0.0,0.02,0,258
"If you run this program now, the deadlock is now gone:",0,9,0.3,0.13,0.02,0.01,1,258
Hello World! from A,0,7,0.26,0.13,0.01,0.0,1,258
Hola Mundo! from B,0,7,0.26,0.13,0.0,0.0,1,258
Default,0,7,0.26,0.13,0.0,0.0,1,258
Default,0,7,0.26,0.13,0.0,0.0,1,258
Default,0,7,0.26,0.13,0.0,0.02,1,258
"As you can see, after both channels are received, they’re blocked and the default",0,9,0.21,0.13,0.02,0.0,0,258
block is run.,0,9,0.3,0.13,0.0,0.0,1,258
It might seem odd that I’m asking you to add in a time delay. This is because I want,0,9,0.21,0.15,0.0,0.0,0,258
to show you how select,0,9,0.3,0.13,0.0,0.0,1,258
is used—in most cases you’ll want to loop indefinitely. In that,0,9,0.21,0.33,0.0,0.0,1,258
"case, there’s a different problem. After both channels block, the program will call",0,9,0.21,0.13,0.0,0.0,0,258
default indefinitely. You could escape by breaking out of the,0,9,0.3,0.13,0.0,0.0,1,258
for loop by counting,0,9,0.21,0.65,0.0,0.0,1,258
the number of times the default is called. But there’s a better way of doing this.,0,9,0.21,0.13,0.0,0.0,0,258
close built-in function. Closing a channel indi-,0,9,0.21,0.44,0.0,0.0,1,258
Channels can be closed using the,0,9,0.3,0.15,0.0,0.0,1,258
cates to the receiver that no more values will be sent to the channel. You can’t close a,0,9,0.21,0.13,0.0,0.0,0,258
239,1,9,0.3,0.82,0.0,0.0,0,259
Channels,1,9,0.39,0.43,0.0,0.03,1,259
"receive-only channel, and sending to or closing an already closed channel causes a",0,9,0.21,0.14,0.03,0.0,0,259
panic. A closed channel is never blocked and always returns the zero value for the,0,9,0.21,0.14,0.0,0.0,0,259
channel’s type.,0,9,0.3,0.14,0.0,0.0,1,259
In the following listing let’s see how closing a channel and checking if a channel is,0,9,0.21,0.17,0.0,0.0,0,259
closed helps to break the infinite loop.,0,9,0.3,0.14,0.0,0.03,1,259
Listing 9.10 Closing channels,1,9,0.48,0.17,0.03,0.02,1,259
package main,0,7,0.26,0.14,0.02,0.01,1,259
import (,0,7,0.26,0.14,0.01,0.0,1,259
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,259
),0,7,0.17,0.14,0.0,0.01,0,259
func callerA(c chan string) {,0,7,0.26,0.14,0.01,0.0,1,259
"c <- ""Hello World!""",0,7,0.26,0.14,0.0,0.0,1,259
close(c),0,7,0.26,0.14,0.0,0.0,1,259
},0,7,0.17,0.14,0.0,0.01,0,259
Closes channel after,1,9,0.39,0.52,0.01,0.0,1,259
func callerB(c chan string) {,0,7,0.26,0.14,0.0,0.0,1,259
function is called,1,9,0.39,0.52,0.0,0.0,1,259
"c <- ""Hola Mundo!""",0,7,0.26,0.14,0.0,0.0,1,259
close(c),0,7,0.26,0.14,0.0,0.0,1,259
},0,7,0.17,0.14,0.0,0.01,0,259
func main() {,0,7,0.26,0.14,0.01,0.0,1,259
"a, b := make(chan string), make(chan string)",0,7,0.26,0.14,0.0,0.0,1,259
go callerA(a),0,7,0.26,0.14,0.0,0.0,1,259
go callerB(b),0,7,0.26,0.14,0.0,0.0,1,259
var msg string,0,7,0.26,0.14,0.0,0.0,1,259
"ok1, ok2 := true, true",0,7,0.26,0.14,0.0,0.0,1,259
for ok1 || ok2 {,0,7,0.26,0.14,0.0,0.0,1,259
select {,0,7,0.26,0.14,0.0,0.0,1,259
"case msg, ok1 = <-a:",0,7,0.26,0.14,0.0,0.0,1,259
if ok1 {,0,7,0.26,0.14,0.0,0.0,1,259
ok1 and ok2 become false,1,9,0.39,0.57,0.0,0.0,1,259
"fmt.Printf(""%s from A\n"", msg)",0,7,0.26,0.14,0.0,0.0,1,259
when channels close,1,9,0.39,0.57,0.0,0.0,1,259
},0,7,0.17,0.14,0.0,0.0,0,259
"case msg, ok2 = <-b:",0,7,0.26,0.14,0.0,0.0,1,259
if ok2 {,0,7,0.26,0.14,0.0,0.0,1,259
"fmt.Printf(""%s from B\n"", msg)",0,7,0.26,0.14,0.0,0.0,1,259
},0,7,0.17,0.14,0.0,0.0,0,259
},0,7,0.17,0.14,0.0,0.0,0,259
},0,7,0.17,0.14,0.0,0.0,0,259
},0,7,0.17,0.14,0.0,0.02,0,259
"Now you’ll notice that you no longer loop just five times, and you’ve also done away",0,9,0.21,0.14,0.02,0.0,0,259
"close built-in function,",0,9,0.21,0.65,0.0,0.0,1,259
"with the one-microsecond delay. To close the channel, use the",0,9,0.3,0.14,0.0,0.0,1,259
"right after sending a string to the channel. Unlike closing files or sockets, remember",0,9,0.21,0.14,0.0,0.0,0,259
that this doesn’t disable the channel altogether—it simply tells any goroutines receiv-,0,9,0.21,0.14,0.0,0.0,0,259
ing from this channel that nothing else will come through.,0,9,0.3,0.14,0.0,0.0,1,259
"In the select statement, you use the multivalue form of receiving a value from a",0,9,0.21,0.17,0.0,0.0,0,259
channel:,0,9,0.3,0.14,0.0,0.01,1,259
"case value, ok11 = <-a",0,7,0.26,0.14,0.01,0.0,1,259
240,1,9,0.39,0.06,0.0,0.0,0,260
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,260
C 9,1,7,0.26,0.31,0.0,0.0,0,260
HAPTER,1,6,0.33,0.32,0.0,0.03,1,260
The variable value will be assigned the value from the channel,0,9,0.3,0.13,0.03,0.0,1,260
"a , whereas ok1 is a",0,9,0.21,0.67,0.0,0.0,1,260
ok1,0,9,0.12,0.8,0.0,0.0,0,260
"Boolean that indicates whether the channel is still open. If the channel is closed,",0,9,0.21,0.13,0.0,0.0,0,260
will be false .,0,9,0.3,0.13,0.0,0.0,1,260
One final note on closing channels: it’s perfectly all right not to close them. As,0,9,0.21,0.15,0.0,0.0,0,260
"mentioned earlier, closing channels just means telling the receiver that nothing else is",0,9,0.21,0.13,0.0,0.0,0,260
"coming through. In the following code, you now know whether the channel is closed.",0,9,0.21,0.13,0.0,0.0,0,260
"If it is, you no longer print anything. This is what you’ll get as the result:",0,9,0.21,0.13,0.0,0.01,0,260
Hello World! from A,0,7,0.26,0.13,0.01,0.0,1,260
Hola Mundo! from B,0,7,0.26,0.13,0.0,0.02,1,260
9.4 Concurrency for web applications,1,12,0.54,0.06,0.02,0.01,1,260
So far we’ve been discussing Go concurrency in a standalone program. Whatever,0,9,0.21,0.13,0.01,0.0,0,260
works as a standalone program will obviously work in a web application as well. In this,0,9,0.21,0.13,0.0,0.0,0,260
section you’ll switch over to a web application and learn how concurrency can be used,0,9,0.21,0.13,0.0,0.0,0,260
to improve Go web applications. You’ll encounter some of the basic techniques shown,0,9,0.21,0.13,0.0,0.0,0,260
"in the previous sections, as well as other concurrency patterns in a more practical web",0,9,0.21,0.13,0.0,0.0,0,260
application.,0,9,0.3,0.13,0.0,0.0,1,260
You’ll create a photo mosaic-generating web application. A,0,9,0.3,0.15,0.0,0.0,1,260
photo mosaic is a picture,1,9,0.39,0.64,0.0,0.0,1,260
(usually a photograph) that has been divided into (usually equal-sized) rectangular,0,9,0.21,0.13,0.0,0.0,0,260
"sections, each of which is replaced with another picture (called a",0,9,0.3,0.13,0.0,0.0,1,260
tile picture ). If you,1,9,0.39,0.68,0.0,0.0,1,260
"view it from far away or if you squint at it, then the original picture can be seen. If you",0,9,0.21,0.13,0.0,0.0,0,260
"look closer, you’ll see that the picture is made up of many hundreds or even thou-",0,9,0.21,0.13,0.0,0.0,0,260
sands of smaller tile pictures.,0,9,0.3,0.13,0.0,0.0,1,260
The basic idea is simple: the web application allows a user to upload a,0,9,0.21,0.15,0.0,0.0,0,260
"target picture ,",1,9,0.39,0.73,0.0,0.0,1,260
"which will be used to create a photo mosaic. To make things simple, let’s assume that",0,9,0.21,0.13,0.0,0.0,0,260
tile pictures are already available and are correctly sized.,0,9,0.3,0.13,0.0,0.02,1,260
9.4.1 Creating the photo mosaic,1,10,0.5,0.06,0.02,0.01,1,260
Let’s start with the photo mosaic algorithm. The steps can be followed without the use,0,9,0.21,0.13,0.01,0.0,0,260
of any third-party libraries.,0,9,0.3,0.13,0.0,0.01,1,260
"Build a tile database, a hash of tile pictures, by scanning a directory of pictures",0,9,0.21,0.18,0.01,0.0,0,260
1,1,6,0.33,0.15,0.0,0.01,0,260
and then using the filename as the key and the average color of the picture as,0,9,0.21,0.18,0.01,0.0,0,260
"the value. The average color is a 3-tuple calculated from getting the red, green,",0,9,0.21,0.18,0.0,0.0,0,260
"and blue (RGB) of every pixel and adding up all the reds, greens, and blues,",0,9,0.21,0.18,0.0,0.0,0,260
and then dividing by the total number of pixels.,0,9,0.3,0.18,0.0,0.01,1,260
Cut the target picture into smaller pictures of the correct tile size.,0,9,0.3,0.18,0.01,0.0,1,260
2,1,6,0.33,0.15,0.0,0.01,0,260
"For every tile-sized piece of the target picture, assume the average color to be",0,9,0.21,0.18,0.01,0.0,0,260
3,1,6,0.33,0.15,0.0,0.01,0,260
the color of the top-left pixel of that piece.,0,9,0.3,0.18,0.01,0.01,1,260
Find the corresponding tile in the tile database that’s the nearest match to the,0,9,0.21,0.18,0.01,0.0,0,260
4,1,6,0.33,0.15,0.0,0.01,0,260
"average color of the piece of the target picture, and place that tile in the corre-",0,9,0.21,0.18,0.01,0.0,0,260
"sponding position in the photo mosaic. To find the nearest match, calculate the",0,9,0.21,0.18,0.0,0.0,0,260
241,1,9,0.3,0.82,0.0,0.0,0,261
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,261
Euclidean distance between the two color 3-tuples by converting each color,0,9,0.21,0.19,0.03,0.0,0,261
3-tuple into a point in a 3-dimensional space.,0,9,0.3,0.19,0.0,0.01,1,261
Remove the tile from the tile database so that each tile in the photo mosaic is,0,9,0.21,0.19,0.01,0.0,0,261
5,1,6,0.33,0.17,0.0,0.01,0,261
unique.,0,9,0.3,0.19,0.01,0.01,1,261
The next listing shows the mosaic-creating code in a single source file named,0,9,0.21,0.14,0.01,0.0,0,261
mosaic.go. Let’s look at each function in this file.,0,9,0.3,0.14,0.0,0.03,1,261
Listing 9.11 The averageColor,1,9,0.48,0.17,0.03,0.0,1,261
function,1,9,0.39,0.43,0.0,0.02,1,261
func averageColor(img image.Image) [3]float64 {,0,7,0.26,0.14,0.02,0.0,1,261
Finds the average,1,9,0.39,0.68,0.0,0.0,1,261
bounds := img.Bounds(),0,7,0.26,0.14,0.0,0.0,1,261
color of the picture,1,9,0.39,0.68,0.0,0.0,1,261
"r, g, b := 0.0, 0.0, 0.0",0,7,0.26,0.14,0.0,0.0,1,261
for y := bounds.Min.Y; y < bounds.Max.Y; y++ {,0,7,0.26,0.14,0.0,0.0,1,261
for x := bounds.Min.X; x < bounds.Max.X; x++ {,0,7,0.26,0.14,0.0,0.0,1,261
"r1, g1, b1, _ := img.At(x, y).RGBA()",0,7,0.26,0.14,0.0,0.0,1,261
"r, g, b = r+float64(r1), g+float64(g1), b+float64(b1)",0,7,0.26,0.14,0.0,0.0,1,261
},0,7,0.17,0.14,0.0,0.0,0,261
},0,7,0.17,0.14,0.0,0.0,0,261
totalPixels := float64(bounds.Max.X * bounds.Max.Y),0,7,0.26,0.14,0.0,0.0,1,261
"return [3]float64{r / totalPixels, g / totalPixels, b / totalPixels}",0,7,0.26,0.14,0.0,0.0,1,261
},0,7,0.17,0.14,0.0,0.02,0,261
First is the averageColor,0,9,0.3,0.14,0.02,0.0,1,261
"function, which takes the red, green, and blue of each pixel",0,9,0.21,0.35,0.0,0.0,1,261
"in the image, adds them all up, and then divides each sum by the total number of pix-",0,9,0.21,0.14,0.0,0.0,0,261
els in the image. Then you create a 3-tuple (actually a 3-element array) consisting of,0,9,0.21,0.14,0.0,0.0,0,261
these numbers.,0,9,0.3,0.14,0.0,0.0,1,261
resize function. The resize,0,9,0.21,0.55,0.0,0.0,1,261
"Next, as in the following listing, you have the",0,9,0.3,0.17,0.0,0.0,1,261
func-,0,9,0.21,0.8,0.0,0.0,1,261
tion resizes an image to a new width.,0,9,0.3,0.14,0.0,0.03,1,261
Listing 9.12 The resize,1,9,0.48,0.17,0.03,0.0,1,261
function,1,9,0.39,0.37,0.0,0.02,1,261
"func resize(in image.Image, newWidth int) image.NRGBA {",0,7,0.26,0.14,0.02,0.0,1,261
Resizes an image,1,9,0.39,0.73,0.0,0.0,1,261
bounds := in.Bounds(),0,7,0.26,0.14,0.0,0.0,1,261
to its new width,1,9,0.39,0.73,0.0,0.0,1,261
ratio := bounds.Dx()/ newWidth,0,7,0.26,0.14,0.0,0.0,1,261
"out := image.NewNRGBA(image.Rect(bounds.Min.X/ratio, bounds.Min.X/ratio,",0,7,0.17,0.14,0.0,0.0,0,261
➥,0,10,0.23,0.14,0.0,0.0,0,261
"bounds.Max.X/ratio, bounds.Max.Y/ratio))",0,7,0.26,0.18,0.0,0.0,1,261
"for y, j := bounds.Min.Y, bounds.Min.Y; y < bounds.Max.Y; y, j = y+ratio,",0,7,0.17,0.14,0.0,0.0,0,261
j+1 {,0,7,0.26,0.17,0.0,0.0,1,261
"for x, i := bounds.Min.X, bounds.Min.X; x < bounds.Max.X; x, i =",0,7,0.26,0.14,0.0,0.0,1,261
➥,0,10,0.23,0.18,0.0,0.0,0,261
"x+ratio, i+1 {",0,7,0.26,0.2,0.0,0.0,1,261
"r, g, b, a := in.At(x, y).RGBA()",0,7,0.26,0.14,0.0,0.0,1,261
"out.SetNRGBA(i, j, color.NRGBA{uint8(r>>8), uint8(g>>8), uint8(b>>8),",0,7,0.26,0.14,0.0,0.0,1,261
➥,0,10,0.23,0.2,0.0,0.0,0,261
uint8(a>>8)}),0,7,0.17,0.22,0.0,0.0,1,261
},0,7,0.17,0.14,0.0,0.0,0,261
},0,7,0.17,0.14,0.0,0.0,0,261
return *out,0,7,0.26,0.14,0.0,0.0,1,261
},0,7,0.17,0.14,0.0,0.0,0,261
242,1,9,0.39,0.06,0.0,0.0,0,262
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,262
C 9,1,7,0.26,0.31,0.0,0.0,0,262
HAPTER,1,6,0.33,0.32,0.0,0.03,1,262
The tilesDB function creates a database of the tile picture by scanning the directory,0,9,0.21,0.13,0.03,0.0,0,262
"where the tile pictures are located, shown in this listing.",0,9,0.3,0.13,0.0,0.03,1,262
Listing 9.13 The tilesDB,1,9,0.48,0.15,0.03,0.0,1,262
function,1,9,0.39,0.36,0.0,0.02,1,262
func tilesDB() map[string][3]float64 {,0,7,0.26,0.13,0.02,0.0,1,262
Populates a tiles,1,9,0.39,0.64,0.0,0.0,1,262
"fmt.Println(""Start populating tiles db ..."")",0,7,0.26,0.13,0.0,0.0,1,262
database in memory,1,9,0.39,0.64,0.0,0.0,1,262
db := make(map[string][3]float64),0,7,0.26,0.13,0.0,0.0,1,262
"files, _ := ioutil.ReadDir(""tiles"")",0,7,0.26,0.13,0.0,0.0,1,262
"for _, f := range files {",0,7,0.26,0.13,0.0,0.0,1,262
"name := ""tiles/"" + f.Name()",0,7,0.26,0.13,0.0,0.0,1,262
"file, err := os.Open(name)",0,7,0.26,0.13,0.0,0.0,1,262
if err == nil {,0,7,0.26,0.13,0.0,0.0,1,262
"img, _, err := image.Decode(file)",0,7,0.26,0.13,0.0,0.0,1,262
if err == nil {,0,7,0.26,0.13,0.0,0.0,1,262
db[name] = averageColor(img),0,7,0.26,0.13,0.0,0.0,1,262
} else {,0,7,0.26,0.13,0.0,0.0,1,262
"fmt.Println(""error in populating TILEDB:"", err, name)",0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.0,0,262
} else {,0,7,0.26,0.13,0.0,0.0,1,262
"fmt.Println(""cannot open file"", name, err)",0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.0,0,262
file.Close(),0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.0,0,262
"fmt.Println(""Finished populating tiles db."")",0,7,0.26,0.13,0.0,0.0,1,262
return db,0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.02,0,262
"The tile database is a map with a string as the key a 3-tuple (in this case, a 3-element",0,9,0.21,0.13,0.02,0.0,0,262
array) as the value. You open each image file in the directory and then get the average,0,9,0.21,0.13,0.0,0.0,0,262
color of the image to create an entry in the map. The tile database is used to find the,0,9,0.21,0.13,0.0,0.0,0,262
nearest func-,0,9,0.21,0.71,0.0,0.0,1,262
correct tile picture in the tile picture director and it is passed into the,0,9,0.21,0.13,0.0,0.0,0,262
"tion, along with the target color 3-tuple.",0,9,0.3,0.13,0.0,0.01,1,262
"func nearest(target [3]float64, db *map[string][3]float64) string {",0,7,0.26,0.13,0.01,0.0,1,262
var filename string,0,7,0.26,0.13,0.0,0.0,1,262
Finds the nearest,1,9,0.39,0.7,0.0,0.0,1,262
smallest := 1000000.0,0,7,0.26,0.13,0.0,0.0,1,262
matching image,1,9,0.39,0.71,0.0,0.0,1,262
"for k, v := range *db {",0,7,0.26,0.13,0.0,0.0,1,262
"dist := distance(target, v)",0,7,0.26,0.13,0.0,0.0,1,262
if dist < smallest {,0,7,0.26,0.13,0.0,0.0,1,262
"filename, smallest = k, dist",0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.0,0,262
},0,7,0.17,0.13,0.0,0.0,0,262
"delete(*db, filename)",0,7,0.26,0.13,0.0,0.0,1,262
return filename,0,7,0.26,0.13,0.0,0.0,1,262
},0,7,0.17,0.13,0.0,0.02,0,262
Each entry in the tile database is compared with the target color and the entry with,0,9,0.21,0.13,0.02,0.0,0,262
"the smallest distance is returned as the nearest tile, and also removed from the tile",0,9,0.21,0.13,0.0,0.0,0,262
database. The distance,0,9,0.3,0.13,0.0,0.0,1,262
"function, shown in the next listing, calculates the Euclidean",0,9,0.21,0.33,0.0,0.0,1,262
distance between two 3-tuples.,0,9,0.3,0.13,0.0,0.0,1,262
243,1,9,0.3,0.82,0.0,0.0,0,263
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,263
Listing 9.14 The distance,1,9,0.48,0.17,0.03,0.0,1,263
function,1,9,0.39,0.39,0.0,0.02,1,263
"func distance(p1 [3]float64, p2 [3]float64) float64 {",0,7,0.26,0.14,0.02,0.0,1,263
return math.Sqrt(sq(p2[0]-p1[0]) + sq(p2[1]-p1[1]) + sq(p2[2]-p1[2])),0,7,0.26,0.14,0.0,0.0,1,263
},0,7,0.17,0.14,0.0,0.0,0,263
Finds the Euclidean,1,9,0.39,0.7,0.0,0.0,1,263
func sq(n float64) float64 {,0,7,0.26,0.14,0.0,0.0,1,263
distance between,1,9,0.39,0.71,0.0,0.0,1,263
Finds the square,1,9,0.39,0.49,0.0,0.0,1,263
return n * n,0,7,0.26,0.14,0.0,0.0,1,263
two points,1,9,0.39,0.76,0.0,0.0,1,263
},0,7,0.17,0.14,0.0,0.02,0,263
Scanning and loading the tile database every time a photo mosaic is created can be,0,9,0.21,0.14,0.02,0.0,0,263
"pretty cumbersome. You want to do that only once, and clone the tile database every",0,9,0.21,0.14,0.0,0.0,0,263
"time a photo mosaic is created. The source tile database,",0,9,0.3,0.14,0.0,0.0,1,263
"TILEDB , shown in the follow-",0,9,0.21,0.61,0.0,0.0,1,263
"ing listing, is then created as a global variable and populated upon start of the web",0,9,0.21,0.14,0.0,0.0,0,263
application.,0,9,0.3,0.14,0.0,0.03,1,263
Listing 9.15 The cloneTilesDB,1,9,0.48,0.17,0.03,0.0,1,263
function,1,9,0.39,0.43,0.0,0.02,1,263
var TILESDB map[string][3]float64,0,7,0.26,0.14,0.02,0.02,1,263
func cloneTilesDB() map[string][3]float64 {,0,7,0.26,0.14,0.02,0.0,1,263
Clones the tile database,1,9,0.39,0.66,0.0,0.0,1,263
db := make(map[string][3]float64),0,7,0.26,0.14,0.0,0.0,1,263
each time the photo,1,9,0.39,0.66,0.0,0.0,1,263
"for k, v := range TILESDB {",0,7,0.26,0.14,0.0,0.0,1,263
mosaic is generated.,1,9,0.39,0.66,0.0,0.0,1,263
db[k] = v,0,7,0.26,0.14,0.0,0.0,1,263
},0,7,0.17,0.14,0.0,0.0,0,263
return db,0,7,0.26,0.14,0.0,0.0,1,263
},0,7,0.17,0.14,0.0,0.02,0,263
9.4.2 The photo mosaic web application,1,10,0.5,0.07,0.02,0.01,1,263
"With the mosaic-generating functions in place, you can begin writing your web appli-",0,9,0.21,0.14,0.01,0.0,0,263
"cation. Place the web application in a source code file named main.go, shown next.",0,9,0.21,0.14,0.0,0.03,0,263
Listing 9.16 The photo mosaic web application,1,9,0.48,0.17,0.03,0.02,1,263
package main,0,7,0.26,0.14,0.02,0.02,1,263
import (,0,7,0.26,0.14,0.02,0.0,1,263
"""bytes""",0,7,0.26,0.14,0.0,0.0,1,263
"""encoding/base64""",0,7,0.26,0.14,0.0,0.0,1,263
"""fmt""",0,7,0.26,0.14,0.0,0.0,1,263
"""html/template""",0,7,0.26,0.14,0.0,0.0,1,263
"""image""",0,7,0.26,0.14,0.0,0.0,1,263
"""image/draw""",0,7,0.26,0.14,0.0,0.0,1,263
"""image/jpeg""",0,7,0.26,0.14,0.0,0.0,1,263
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,263
"""os""",0,7,0.26,0.14,0.0,0.0,1,263
"""strconv""",0,7,0.26,0.14,0.0,0.0,1,263
"""sync""",0,7,0.26,0.14,0.0,0.0,1,263
"""time""",0,7,0.26,0.14,0.0,0.0,1,263
),0,7,0.17,0.14,0.0,0.0,0,263
244,1,9,0.39,0.06,0.0,0.0,0,264
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,264
C 9,1,7,0.26,0.31,0.0,0.0,0,264
HAPTER,1,6,0.33,0.32,0.0,0.03,1,264
func main() {,0,7,0.26,0.13,0.03,0.0,1,264
mux := http.NewServeMux(),0,7,0.26,0.13,0.0,0.0,1,264
"files := http.FileServer(http.Dir(""public""))",0,7,0.26,0.13,0.0,0.0,1,264
"mux.Handle(""/static/"", http.StripPrefix(""/static/"", files))",0,7,0.26,0.13,0.0,0.0,1,264
"mux.HandleFunc(""/"", upload)",0,7,0.26,0.13,0.0,0.0,1,264
"mux.HandleFunc(""/mosaic"", mosaic)",0,7,0.26,0.13,0.0,0.0,1,264
server := &http.Server{,0,7,0.26,0.13,0.0,0.0,1,264
"Addr:    ""127.0.0.1:8080"",",0,7,0.26,0.13,0.0,0.0,1,264
"Handler: mux,",0,7,0.26,0.13,0.0,0.0,1,264
},0,7,0.17,0.13,0.0,0.02,0,264
TILESDB = tilesDB(),0,7,0.26,0.13,0.02,0.0,1,264
"fmt.Println(""Mosaic server started."")",0,7,0.26,0.13,0.0,0.0,1,264
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,264
},0,7,0.17,0.13,0.0,0.03,0,264
"func upload(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.03,0.0,1,264
"t, _ := template.ParseFiles(""upload.html"")",0,7,0.26,0.13,0.0,0.0,1,264
"t.Execute(w, nil)",0,7,0.26,0.13,0.0,0.0,1,264
},0,7,0.17,0.13,0.0,0.03,0,264
"func mosaic(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.03,0.0,1,264
t0 := time.Now(),0,7,0.26,0.13,0.0,0.01,1,264
Gets uploaded,1,9,0.39,0.58,0.01,0.0,1,264
r.ParseMultipartForm(10485760),0,7,0.26,0.13,0.0,0.0,1,264
file and tile size,1,9,0.39,0.58,0.0,0.0,1,264
"file, _, _ := r.FormFile(""image"")",0,7,0.26,0.13,0.0,0.0,1,264
defer file.Close(),0,7,0.26,0.13,0.0,0.0,1,264
"tileSize, _ := strconv.Atoi(r.FormValue(""tile_size""))",0,7,0.26,0.13,0.0,0.0,1,264
Decodes uploaded,1,9,0.39,0.7,0.0,0.0,1,264
target image,1,9,0.39,0.7,0.0,0.0,1,264
"original, _, _ := image.Decode(file)",0,7,0.26,0.13,0.0,0.0,1,264
bounds := original.Bounds(),0,7,0.26,0.13,0.0,0.02,1,264
"newimage := image.NewNRGBA(image.Rect(bounds.Min.X, bounds.Min.X,",0,7,0.26,0.13,0.02,0.0,1,264
"bounds.Max.X, bounds.Max.Y))",0,7,0.26,0.15,0.0,0.02,1,264
db := cloneTilesDB(),0,7,0.26,0.13,0.02,0.0,1,264
Clones tile,1,9,0.48,0.02,0.0,0.0,1,264
Sets up source,1,9,0.39,0.7,0.0,0.0,1,264
database,1,9,0.48,0.02,0.0,0.0,1,264
point for each tile,1,9,0.39,0.7,0.0,0.0,1,264
"sp := image.Point{0, 0}",0,7,0.26,0.13,0.0,0.0,1,264
Iterates for y := bounds.Min.Y; y < bounds.Max.Y; y = y + tileSize {,1,9,0.48,0.03,0.0,0.0,1,264
for x := bounds.Min.X; x < bounds.Max.X; x = x + tileSize {,0,7,0.26,0.13,0.0,0.0,1,264
through,1,9,0.48,0.03,0.0,0.0,1,264
target image,1,9,0.48,0.0,0.0,0.0,1,264
"r, g, b, _ := original.At(x, y).RGBA()",0,7,0.26,0.13,0.0,0.0,1,264
"color := [3]float64{float64(r), float64(g), float64(b)}",0,7,0.26,0.13,0.0,0.02,1,264
"nearest := nearest(color, &db)",0,7,0.26,0.13,0.02,0.0,1,264
"file, err := os.Open(nearest)",0,7,0.26,0.13,0.0,0.0,1,264
if err == nil {,0,7,0.26,0.13,0.0,0.0,1,264
"img, _, err := image.Decode(file)",0,7,0.26,0.13,0.0,0.0,1,264
if err == nil {,0,7,0.26,0.13,0.0,0.02,1,264
"t := resize(img, tileSize)",0,7,0.26,0.13,0.02,0.0,1,264
tile := t.SubImage(t.Bounds()),0,7,0.26,0.13,0.0,0.0,1,264
"tileBounds := image.Rect(x, y, x+tileSize, y+tileSize)",0,7,0.26,0.13,0.0,0.0,1,264
245,1,9,0.3,0.82,0.0,0.0,0,265
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,265
"draw.Draw(newimage, tileBounds, tile, sp, draw.Src)",0,7,0.26,0.14,0.03,0.0,1,265
} else {,0,7,0.26,0.14,0.0,0.0,1,265
"fmt.Println(""error:"", err, nearest)",0,7,0.26,0.14,0.0,0.0,1,265
},0,7,0.17,0.14,0.0,0.0,0,265
} else {,0,7,0.26,0.14,0.0,0.0,1,265
"fmt.Println(""error:"", nearest)",0,7,0.26,0.14,0.0,0.0,1,265
},0,7,0.17,0.14,0.0,0.0,0,265
file.Close(),0,7,0.26,0.14,0.0,0.0,1,265
},0,7,0.17,0.14,0.0,0.0,0,265
},0,7,0.17,0.14,0.0,0.0,0,265
"Encodes in JPEG, deliver to",1,9,0.39,0.56,0.0,0.0,1,265
browser in base64 string,1,9,0.39,0.56,0.0,0.0,1,265
buf1 := new(bytes.Buffer),0,7,0.26,0.14,0.0,0.0,1,265
"jpeg.Encode(buf1, original, nil)",0,7,0.26,0.14,0.0,0.0,1,265
originalStr := base64.StdEncoding.EncodeToString(buf1.Bytes()),0,7,0.26,0.14,0.0,0.02,1,265
buf2 := new(bytes.Buffer),0,7,0.26,0.14,0.02,0.0,1,265
"jpeg.Encode(buf2, newimage, nil)",0,7,0.26,0.14,0.0,0.0,1,265
mosaic := base64.StdEncoding.EncodeToString(buf2.Bytes()),0,7,0.26,0.14,0.0,0.0,1,265
t1 := time.Now(),0,7,0.26,0.14,0.0,0.0,1,265
images := map[string]string{,0,7,0.26,0.14,0.0,0.0,1,265
"""original"": originalStr,",0,7,0.26,0.14,0.0,0.0,1,265
"""mosaic"":   mosaic,",0,7,0.26,0.14,0.0,0.0,1,265
"""duration"": fmt.Sprintf(""%v "", t1.Sub(t0)),",0,7,0.26,0.14,0.0,0.0,1,265
},0,7,0.17,0.14,0.0,0.0,0,265
"t, _ := template.ParseFiles(""results.html"")",0,7,0.26,0.14,0.0,0.0,1,265
"t.Execute(w, images)",0,7,0.26,0.14,0.0,0.0,1,265
},0,7,0.17,0.14,0.0,0.02,0,265
"mosaic function, which is",0,9,0.21,0.63,0.02,0.0,1,265
The main logic for creating the photo mosaic resides in the,0,9,0.3,0.14,0.0,0.0,1,265
"a handler function. First, you get the uploaded file and the tile size from the form.",0,9,0.21,0.14,0.0,0.0,0,265
"Next, you decode the uploaded target image and create a new photo mosaic image.",0,9,0.21,0.14,0.0,0.0,0,265
You clone the source tile database and set up the source point for each tile (the source,0,9,0.21,0.14,0.0,0.0,0,265
image/draw package later). You’re now ready to iterate,0,9,0.21,0.36,0.0,0.0,1,265
point is needed by the,0,9,0.3,0.14,0.0,0.0,1,265
through each tile-sized piece of the target image.,0,9,0.3,0.14,0.0,0.0,1,265
"For every piece, you pick the top-left pixel and assume that’s the average color.",0,9,0.21,0.17,0.0,0.0,0,265
Then you find the nearest tile in the tile database that matches this color. The tile,0,9,0.21,0.14,0.0,0.0,0,265
"database gives you a filename, so you open the tile picture and resize it to the tile size.",0,9,0.21,0.14,0.0,0.0,0,265
The resultant tile is drawn into the photo mosaic you created earlier.,0,9,0.3,0.14,0.0,0.0,1,265
"Once the photo mosaic is created, you encode it into",0,9,0.3,0.17,0.0,0.0,1,265
JPEG format and then,0,9,0.21,0.65,0.0,0.0,1,265
encode it once again into a base64 string.,0,9,0.3,0.14,0.0,0.0,1,265
The original target picture and the photo mosaic are then sent to the results.html,0,9,0.21,0.17,0.0,0.0,0,265
"template to be displayed on the next page. As you can see, the image is displayed",0,9,0.21,0.14,0.0,0.0,0,265
using a data URL with the base64 content that’s embedded in the web page itself (the,0,9,0.21,0.14,0.0,0.0,0,265
code is shown in bold in the following listing). Data,0,9,0.3,0.14,0.0,0.0,1,265
URL s are used as an alternative to,0,9,0.21,0.57,0.0,0.0,1,265
a normal URL that points to another resource. In a data,0,9,0.3,0.14,0.0,0.0,1,265
"URL , the data itself is embed-",0,9,0.21,0.6,0.0,0.0,1,265
ded into the URL .,0,9,0.3,0.14,0.0,0.0,1,265
246,1,9,0.39,0.06,0.0,0.0,0,266
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,266
C 9,1,7,0.26,0.31,0.0,0.0,0,266
HAPTER,1,6,0.33,0.32,0.0,0.03,1,266
Listing 9.17 The results template,1,9,0.48,0.15,0.03,0.02,1,266
<!DOCTYPE html>,0,7,0.26,0.13,0.02,0.0,1,266
<html>,0,7,0.26,0.13,0.0,0.0,1,266
<head>,0,7,0.26,0.13,0.0,0.0,1,266
"<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">",0,7,0.26,0.13,0.0,0.0,1,266
<title>Mosaic</title>,0,7,0.26,0.13,0.0,0.0,1,266
...,0,7,0.17,0.13,0.0,0.0,0,266
</head>,0,7,0.26,0.13,0.0,0.0,1,266
<body>,0,7,0.26,0.13,0.0,0.0,1,266
<div class='container'>,0,7,0.26,0.13,0.0,0.0,1,266
"<div class=""col-md-6"">",0,7,0.26,0.13,0.0,0.0,1,266
"<img src=""data:image/jpg;base64,{{ .original }}"" width=""100%"">",1,7,0.44,0.13,0.0,0.0,1,266
"<div class=""lead"">Original</div>",0,7,0.26,0.13,0.0,0.0,1,266
</div>,0,7,0.26,0.13,0.0,0.0,1,266
"<div class=""col-md-6"">",0,7,0.26,0.13,0.0,0.0,1,266
"<img src=""data:image/jpg;base64,{{ .mosaic }}"" width=""100%"">",1,7,0.44,0.13,0.0,0.0,1,266
{{ .duration }} </div>,1,7,0.35,0.46,0.0,0.0,1,266
"<div class=""lead"">Mosaic –",0,7,0.26,0.13,0.0,0.0,1,266
</div>,0,7,0.26,0.13,0.0,0.0,1,266
"<div class=""col-md-12 center"">",0,7,0.26,0.13,0.0,0.0,1,266
"<a class=""btn btn-lg btn-info"" href=""/"">Go Back</a>",0,7,0.26,0.13,0.0,0.0,1,266
</div>,0,7,0.26,0.13,0.0,0.0,1,266
</div>,0,7,0.26,0.13,0.0,0.0,1,266
<br>,0,7,0.26,0.13,0.0,0.0,1,266
</body>,0,7,0.26,0.13,0.0,0.0,1,266
</html>,0,7,0.26,0.13,0.0,0.02,1,266
Figure 9.5 shows the mosaic that’s created if you build it and then run it with only one,0,9,0.21,0.13,0.02,0.0,0,266
"CPU , assuming your code is in a directory named mosaic:",0,9,0.3,0.13,0.0,0.01,1,266
GOMAXPROCS=1 ./mosaic,0,7,0.4,0.13,0.01,0.35,1,266
Figure 9.5 Basic photo mosaic web application,1,7,0.58,0.13,0.35,0.0,1,266
247,1,9,0.3,0.82,0.0,0.0,0,267
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,267
"Now that you have the basic mosaic-generating web application, let’s create the con-",0,9,0.21,0.14,0.03,0.0,0,267
current version of it.,0,9,0.3,0.14,0.0,0.02,1,267
9.4.3 Concurrent photo mosaic web application,1,10,0.5,0.07,0.02,0.01,1,267
One of the more frequent uses of concurrency is to improve performance. The web,0,9,0.21,0.14,0.01,0.0,0,267
application from the previous section created a mosaic from a,0,9,0.3,0.14,0.0,0.0,1,267
151 KB JPEG image in,0,9,0.21,0.67,0.0,0.0,1,267
about 2.25 seconds. The performance isn’t fantastic and can be improved using con-,0,9,0.21,0.14,0.0,0.0,0,267
currency. You’ll use the algorithm in this example to build concurrency into the,0,9,0.21,0.14,0.0,0.0,0,267
photo mosaic web application:,0,9,0.3,0.14,0.0,0.01,1,267
Split the original image into four quarters.,0,9,0.3,0.19,0.01,0.0,1,267
1,1,6,0.33,0.17,0.0,0.01,0,267
Process them at the same time.,0,9,0.3,0.19,0.01,0.0,1,267
2,1,6,0.33,0.17,0.0,0.01,0,267
Combine the results into a single mosaic.,0,9,0.3,0.19,0.01,0.0,1,267
3,1,6,0.33,0.17,0.0,0.01,0,267
"For a diagrammatic point of view, see figure 9.6.",0,9,0.3,0.14,0.01,0.04,1,267
2. Convert,0,7,0.17,0.43,0.04,0.0,1,267
to mosaic,0,7,0.17,0.43,0.0,0.02,1,267
1. Cut to four,0,7,0.17,0.22,0.02,0.0,1,267
3. Combine the four,0,7,0.17,0.65,0.0,0.0,1,267
quadrants,0,7,0.17,0.22,0.0,0.0,1,267
mosaic quadrants,0,7,0.3,0.65,0.0,0.28,1,267
Figure 9.6 Concurrency algorithm for generating mosaics faster,1,7,0.58,0.14,0.28,0.06,1,267
A word of caution: this is not the only way that performance can be improved or con-,0,9,0.21,0.14,0.06,0.0,0,267
"currency can be achieved, but only one relatively straightforward way.",0,9,0.3,0.14,0.0,0.0,1,267
mosaic handler function. The earlier program had a,0,9,0.21,0.4,0.0,0.0,1,267
The main change is in the,0,9,0.3,0.17,0.0,0.0,1,267
single handler function that created the photo mosaic. In the concurrent version of,0,9,0.21,0.14,0.0,0.0,0,267
"the web application, you need to break up that function into two separate ones, called",0,9,0.21,0.14,0.0,0.0,0,267
248,1,9,0.39,0.06,0.0,0.0,0,268
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,268
C 9,1,7,0.26,0.31,0.0,0.0,0,268
HAPTER,1,6,0.33,0.32,0.0,0.03,1,268
"cut and combine , respectively. Both functions are called from the",0,9,0.3,0.13,0.03,0.0,1,268
mosaic handler,0,9,0.21,0.7,0.0,0.0,1,268
"function, shown here.",0,9,0.3,0.13,0.0,0.03,1,268
Listing 9.18 The mosaic,1,9,0.48,0.15,0.03,0.0,1,268
handler function,1,9,0.39,0.35,0.0,0.02,1,268
"func mosaic(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.13,0.02,0.0,1,268
t0 := time.Now(),0,7,0.26,0.13,0.0,0.0,1,268
r.ParseMultipartForm(10485760) // max body in memory is 10MB,0,7,0.26,0.13,0.0,0.0,1,268
"file, _, _ := r.FormFile(""image"")",0,7,0.26,0.13,0.0,0.0,1,268
defer file.Close(),0,7,0.26,0.13,0.0,0.0,1,268
"tileSize, _ := strconv.Atoi(r.FormValue(""tile_size""))",0,7,0.26,0.13,0.0,0.0,1,268
"original, _, _ := image.Decode(file)",0,7,0.26,0.13,0.0,0.0,1,268
bounds := original.Bounds(),0,7,0.26,0.13,0.0,0.0,1,268
db := cloneTilesDB(),0,7,0.26,0.13,0.0,0.02,1,268
"c1 := cut(original, &db, tileSize, bounds.Min.X, bounds.Min.Y,",0,7,0.26,0.13,0.02,0.0,1,268
➥,0,10,0.23,0.14,0.0,0.0,0,268
"bounds.Max.X/2, bounds.Max.Y/2)",0,7,0.26,0.17,0.0,0.0,1,268
"c2 := cut(original, &db, tileSize, bounds.Max.X/2, bounds.Min.Y,",0,7,0.26,0.13,0.0,0.0,1,268
"Fanning out,",1,9,0.39,0.77,0.0,0.0,1,268
➥,0,10,0.23,0.14,0.0,0.0,0,268
"bounds.Max.X, bounds.Max.Y/2)",0,7,0.26,0.17,0.0,0.0,1,268
cutting up,1,9,0.39,0.77,0.0,0.0,1,268
"c3 := cut(original, &db, tileSize, bounds.Min.X, bounds.Max.Y/2,",0,7,0.26,0.13,0.0,0.0,1,268
image for independent,1,9,0.39,0.77,0.0,0.0,1,268
➥,0,10,0.23,0.14,0.0,0.0,0,268
"bounds.Max.X/2, bounds.Max.Y)",0,7,0.26,0.17,0.0,0.0,1,268
"c4 := cut(original, &db, tileSize, bounds.Max.X/2, bounds.Max.Y/2,",0,7,0.26,0.13,0.0,0.0,1,268
processing,1,9,0.39,0.77,0.0,0.0,1,268
➥,0,10,0.23,0.14,0.0,0.0,0,268
"bounds.Max.X, bounds.Max.Y)",0,7,0.26,0.17,0.0,0.0,1,268
"c := combine(bounds, c1, c2, c3, c4)",0,7,0.26,0.13,0.0,0.0,1,268
"Fanning in,",1,9,0.48,0.01,0.0,0.0,1,268
combining,1,9,0.48,0.01,0.0,0.0,1,268
buf1 := new(bytes.Buffer),0,7,0.26,0.13,0.0,0.0,1,268
images,1,9,0.48,0.03,0.0,0.0,1,268
"jpeg.Encode(buf1, original, nil)",0,7,0.26,0.13,0.0,0.0,1,268
originalStr := base64.StdEncoding.EncodeToString(buf1.Bytes()),0,7,0.26,0.13,0.0,0.02,1,268
t1 := time.Now(),0,7,0.26,0.13,0.02,0.0,1,268
images := map[string]string{,0,7,0.26,0.13,0.0,0.0,1,268
"""original"": originalStr,",0,7,0.26,0.13,0.0,0.0,1,268
"""mosaic"":   <-c,",0,7,0.26,0.13,0.0,0.0,1,268
"""duration"": fmt.Sprintf(""%v "", t1.Sub(t0)),",0,7,0.26,0.13,0.0,0.0,1,268
},0,7,0.17,0.13,0.0,0.02,0,268
"t, _ := template.ParseFiles(""results.html"")",0,7,0.26,0.13,0.02,0.0,1,268
"t.Execute(w, images)",0,7,0.26,0.13,0.0,0.0,1,268
},0,7,0.17,0.13,0.0,0.02,0,268
cut,0,9,0.12,0.49,0.02,0.0,0,268
Cutting up the image is handled by the,0,9,0.3,0.13,0.0,0.0,1,268
"function, in what is known as the",0,9,0.3,0.13,0.0,0.0,1,268
fan-out pattern,1,9,0.39,0.4,0.0,0.0,1,268
(figure 9.7).,0,9,0.3,0.13,0.0,0.0,1,268
The original image is cut up into four quad-,0,9,0.3,0.15,0.0,0.0,1,268
rants to be processed separately. As you may,0,9,0.3,0.13,0.0,0.0,1,268
"notice, these are regular functions and not",0,9,0.3,0.13,0.0,0.0,1,268
"goroutines, so how can they run concurrently?",0,9,0.3,0.13,0.0,0.0,1,268
cut function creates a,0,9,0.21,0.34,0.0,0.0,1,268
The answer is because the,0,9,0.3,0.13,0.0,0.0,1,268
goroutine from an anonymous function and,0,9,0.3,0.13,0.0,0.0,1,268
returns a channel.,0,9,0.3,0.13,0.0,0.02,1,268
Figure 9.7 Splitting the target picture into four quadrants,1,7,0.44,0.12,0.02,0.0,1,268
249,1,9,0.3,0.82,0.0,0.0,0,269
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,269
Here’s where you need to be careful. Remember that you’re converting an application,0,9,0.21,0.14,0.03,0.0,0,269
"to a concurrent one, with multiple goroutines running at the same time. If you have",0,9,0.21,0.14,0.0,0.0,0,269
"some resources that are shared, the changes can possibly cause a race condition.",0,9,0.21,0.14,0.0,0.03,0,269
Race condition,1,10,0.5,0.17,0.03,0.01,1,269
A race condition exists when the program depends on a specific sequence or timing,1,9,0.39,0.17,0.01,0.0,0,269
"for it to happen and specific sequence or timing can’t be guaranteed. As a result, the",0,9,0.21,0.17,0.0,0.0,0,269
behavior of the program becomes erratic and unpredictable.,0,9,0.3,0.17,0.0,0.01,1,269
Race conditions commonly appear in concurrent programs that modify a shared re-,0,9,0.21,0.17,0.01,0.0,0,269
source. If two or more processes or threads try to modify the shared resource at the,0,9,0.21,0.17,0.0,0.0,0,269
"same time, the one that gets to the resource first will behave as expected but the",0,9,0.21,0.17,0.0,0.0,0,269
other processes won’t. Because we can’t predict which process gets the resource,0,9,0.21,0.17,0.0,0.0,0,269
"first, the system won’t behave consistently.",0,9,0.3,0.17,0.0,0.01,1,269
"Race conditions are notoriously difficult to debug, although they aren’t difficult to fix",0,9,0.21,0.17,0.01,0.0,0,269
once the problem is identified.,0,9,0.3,0.17,0.0,0.04,1,269
"In this case, you do have a shared resource: the original image that was uploaded to",0,9,0.21,0.14,0.04,0.0,0,269
nearest function finds the best-fitting tile image and,0,9,0.21,0.39,0.0,0.0,1,269
the mosaic application. The,0,9,0.3,0.14,0.0,0.0,1,269
removes it from the tile database in order not to have duplicate tiles. This means if the,0,9,0.21,0.14,0.0,0.0,0,269
"cut goroutines happen to find the same tile as the best fitting, at the same time, there",0,9,0.21,0.14,0.0,0.0,0,269
will be a race condition.,0,9,0.3,0.14,0.0,0.0,1,269
"To eliminate the race condition, you can use a common technique called",0,9,0.3,0.17,0.0,0.0,1,269
mutual,1,9,0.39,0.79,0.0,0.0,1,269
"exclusion , mutex for short. Mutex refers to the requirement that only one process (in our",1,9,0.39,0.14,0.0,0.0,0,269
"case, a goroutine) can access a critical section at the same time. In the case of the con-",0,9,0.21,0.14,0.0,0.0,0,269
"current mosaic application, you need to implement mutex on the nearest function.",0,9,0.21,0.14,0.0,0.0,0,269
Mutex struct in the sync,0,9,0.21,0.42,0.0,0.0,1,269
"package. First, define a DB",0,9,0.21,0.62,0.0,0.0,1,269
"To do this, you can use Go’s",0,9,0.3,0.17,0.0,0.0,1,269
"mutex flag,",0,9,0.21,0.75,0.0,0.0,1,269
"struct, where the struct encapsulates both the actual tile store as well as a",0,9,0.21,0.14,0.0,0.0,0,269
shown next.,0,9,0.3,0.14,0.0,0.03,1,269
Listing 9.19 The DB struct,1,9,0.48,0.17,0.03,0.02,1,269
type DB struct {,0,7,0.26,0.14,0.02,0.0,1,269
mutex *sync.Mutex,0,7,0.26,0.14,0.0,0.0,1,269
store map[string][3]float64,0,7,0.26,0.14,0.0,0.0,1,269
},0,7,0.17,0.14,0.0,0.02,0,269
"Next, change the nearest",0,9,0.3,0.14,0.02,0.0,1,269
"DB struct, shown here.",0,9,0.21,0.61,0.0,0.0,1,269
function into a method on the,0,9,0.21,0.36,0.0,0.03,1,269
Listing 9.20 The nearest,1,9,0.48,0.17,0.03,0.0,1,269
method,1,9,0.39,0.38,0.0,0.02,1,269
func (db *DB) nearest(target [3]float64) string {,0,7,0.26,0.14,0.02,0.0,1,269
var filename string,0,7,0.26,0.14,0.0,0.0,1,269
db.mutex.Lock(),0,7,0.26,0.14,0.0,0.0,1,269
Sets mutex flag by locking it,1,9,0.39,0.52,0.0,0.0,1,269
smallest := 1000000.0,0,7,0.26,0.14,0.0,0.0,1,269
250,1,9,0.39,0.06,0.0,0.0,0,270
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,270
C 9,1,7,0.26,0.31,0.0,0.0,0,270
HAPTER,1,6,0.33,0.32,0.0,0.03,1,270
"for k, v := range db.store {",0,7,0.26,0.13,0.03,0.0,1,270
"dist := distance(target, v)",0,7,0.26,0.13,0.0,0.0,1,270
if dist < smallest {,0,7,0.26,0.13,0.0,0.0,1,270
"filename, smallest = k, dist",0,7,0.26,0.13,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.0,0,270
},0,7,0.17,0.13,0.0,0.0,0,270
"delete(db.store, filename)",0,7,0.26,0.13,0.0,0.0,1,270
db.mutex.Unlock(),0,7,0.26,0.13,0.0,0.0,1,270
Unsets mutex,1,9,0.39,0.51,0.0,0.0,1,270
return filename,0,7,0.26,0.13,0.0,0.0,1,270
flag by unlocking it,1,9,0.39,0.51,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.02,0,270
"In the new nearest method, you can lock the section that searches for the best-fitting",0,9,0.21,0.13,0.02,0.0,0,270
delete function because doing so will still cause a race,0,9,0.21,0.38,0.0,0.0,1,270
tile. You shouldn’t just lock the,0,9,0.3,0.13,0.0,0.0,1,270
condition—another goroutine can find the same tile just before it’s removed from the,0,9,0.21,0.13,0.0,0.0,0,270
database.,0,9,0.3,0.13,0.0,0.0,1,270
Next is the cut function.,0,9,0.3,0.15,0.0,0.03,1,270
Listing 9.21 The cut function,1,9,0.48,0.15,0.03,0.02,1,270
"func cut(original image.Image, db *DB, tileSize, x1, y1, x2, y2 int) <-chan",0,7,0.17,0.13,0.02,0.0,0,270
image.Image {,0,7,0.26,0.15,0.0,0.0,1,270
Passes in reference to,1,9,0.39,0.57,0.0,0.0,1,270
c := make(chan image.Image),0,7,0.26,0.14,0.0,0.0,1,270
Returns channel,1,9,0.48,0.03,0.0,0.0,1,270
DB struct instead of map,1,9,0.39,0.57,0.0,0.0,1,270
"sp := image.Point{0, 0}",0,7,0.26,0.13,0.0,0.0,1,270
go func() {,0,7,0.26,0.13,0.0,0.0,1,270
Creates anonymous,1,9,0.39,0.69,0.0,0.0,1,270
"newimage := image.NewNRGBA(image.Rect(x1, y1, x2, y2))",0,7,0.26,0.13,0.0,0.0,1,270
goroutine,1,9,0.39,0.69,0.0,0.0,1,270
for y := y1; y < y2; y = y + tileSize {,0,7,0.26,0.13,0.0,0.0,1,270
for x := x1; x < x2; x = x + tileSize {,0,7,0.26,0.13,0.0,0.0,1,270
"r, g, b, _ := original.At(x, y).RGBA()",0,7,0.26,0.13,0.0,0.0,1,270
"color := [3]float64{float64(r), float64(g), float64(b)}",0,7,0.26,0.13,0.0,0.0,1,270
nearest := db.nearest(color),0,7,0.26,0.13,0.0,0.0,1,270
Calls nearest,1,9,0.48,0.05,0.0,0.0,1,270
"file, err := os.Open(nearest)",0,7,0.26,0.13,0.0,0.0,1,270
method on DB to,1,9,0.48,0.02,0.0,0.0,1,270
if err == nil {,0,7,0.26,0.13,0.0,0.0,1,270
get best-fitting tile,1,9,0.48,0.01,0.0,0.0,1,270
"img, _, err := image.Decode(file)",0,7,0.26,0.13,0.0,0.0,1,270
if err == nil {,0,7,0.26,0.13,0.0,0.0,1,270
"t := resize(img, tileSize)",0,7,0.26,0.13,0.0,0.0,1,270
tile := t.SubImage(t.Bounds()),0,7,0.26,0.13,0.0,0.0,1,270
"tileBounds := image.Rect(x, y, x+tileSize, y+tileSize)",0,7,0.26,0.13,0.0,0.0,1,270
"draw.Draw(newimage, tileBounds, tile, sp, draw.Src)",0,7,0.26,0.13,0.0,0.0,1,270
} else {,0,7,0.26,0.13,0.0,0.0,1,270
"fmt.Println(""error:"", err)",0,7,0.26,0.13,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.0,0,270
} else {,0,7,0.26,0.13,0.0,0.0,1,270
"fmt.Println(""error:"", nearest)",0,7,0.26,0.13,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.0,0,270
file.Close(),0,7,0.26,0.13,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.0,0,270
},0,7,0.17,0.13,0.0,0.0,0,270
c <- newimage.SubImage(newimage.Rect),0,7,0.26,0.13,0.0,0.0,1,270
}(),0,7,0.17,0.13,0.0,0.0,0,270
return c,0,7,0.26,0.13,0.0,0.0,1,270
},0,7,0.17,0.13,0.0,0.0,0,270
251,1,9,0.3,0.82,0.0,0.0,0,271
Concurrency for web applications,1,9,0.39,0.35,0.0,0.03,1,271
The logic is the same as in the original photo mosaic web application. You created a,0,9,0.21,0.14,0.03,0.0,0,271
channel in the cut function and started an anonymous goroutine that sends the,0,9,0.21,0.14,0.0,0.0,0,271
"results to this channel and then returns the channel. This way, the channel is immedi-",0,9,0.21,0.14,0.0,0.0,0,271
ately returned to the mosaic,0,9,0.3,0.14,0.0,0.0,1,271
"handler function, and the completed photo mosaic seg-",0,9,0.21,0.38,0.0,0.0,1,271
ment is sent to the channel when the processing is done. You may notice that,0,9,0.21,0.14,0.0,0.0,0,271
"although you’ve created the return channel as bidirectional, you can typecast it to be",0,9,0.21,0.14,0.0,0.0,0,271
returned as a receive-only channel.,0,9,0.3,0.14,0.0,0.0,1,271
You’ve cut the original image into four separate pieces and converted each piece,0,9,0.21,0.17,0.0,0.0,0,271
"into a part of a photo mosaic. It’s time to put them together again, using what’s com-",0,9,0.21,0.14,0.0,0.0,0,271
"pattern, in the combine",0,9,0.21,0.36,0.0,0.0,1,271
monly known as the fan-in,1,9,0.48,0.14,0.0,0.0,1,271
"function, shown here.",0,9,0.21,0.56,0.0,0.03,1,271
Listing 9.22 The combine,1,9,0.48,0.17,0.03,0.0,1,271
function,1,9,0.39,0.38,0.0,0.02,1,271
"func combine(r image.Rectangle, c1, c2, c3, c4 <-chan image.Image)",0,7,0.26,0.14,0.02,0.0,1,271
<-chan string {,0,7,0.26,0.14,0.0,0.0,1,271
c := make(chan string),0,7,0.26,0.14,0.0,0.0,1,271
Returns a channel,1,9,0.39,0.58,0.0,0.01,1,271
go func() {,0,7,0.26,0.14,0.01,0.0,1,271
Creates an,1,9,0.48,0.04,0.0,0.0,1,271
var wg sync.WaitGroup,0,7,0.26,0.14,0.0,0.0,1,271
anonymous,1,9,0.48,0.03,0.0,0.0,1,271
Waits until all subimages,1,9,0.39,0.65,0.0,0.0,1,271
img:= image.NewNRGBA(r),0,7,0.26,0.14,0.0,0.0,1,271
goroutine,1,9,0.48,0.04,0.0,0.0,1,271
copied to final image,1,9,0.39,0.65,0.0,0.0,1,271
"copy := func(dst draw.Image, r image.Rectangle,",0,7,0.26,0.14,0.0,0.0,1,271
"src image.Image, sp image.Point) {",0,7,0.26,0.14,0.0,0.0,1,271
"draw.Draw(dst, r, src, sp, draw.Src)",0,7,0.26,0.14,0.0,0.0,1,271
wg.Done(),0,7,0.26,0.14,0.0,0.0,1,271
Decrements,1,9,0.48,0.05,0.0,0.0,1,271
},0,7,0.17,0.14,0.0,0.0,0,271
counter as,1,9,0.48,0.06,0.0,0.0,1,271
wg.Add(4),0,7,0.26,0.14,0.0,0.0,1,271
copied over subimages,1,9,0.48,0.05,0.0,0.0,1,271
Sets WaitGroup,1,9,0.39,0.61,0.0,0.0,1,271
"var s1, s2, s3, s4 image.Image",0,7,0.26,0.14,0.0,0.0,1,271
counter to 4,1,9,0.39,0.61,0.0,0.0,1,271
"var ok1, ok2, ok3, ok4 bool",0,7,0.26,0.14,0.0,0.0,1,271
for  {,0,7,0.26,0.14,0.0,0.0,1,271
"Loops, waits",1,9,0.39,0.52,0.0,0.0,1,271
select {,0,7,0.26,0.14,0.0,0.0,1,271
Selects,1,9,0.48,0.07,0.0,0.0,1,271
indefinitely,1,9,0.39,0.52,0.0,0.0,1,271
"case s1, ok1 = <-c1:",0,7,0.26,0.14,0.0,0.0,1,271
first channel,1,9,0.48,0.04,0.0,0.0,1,271
"go copy(img, s1.Bounds(), s1,",0,7,0.26,0.14,0.0,0.0,1,271
"image.Point{r.Min.X, r.Min.Y})",0,7,0.26,0.14,0.0,0.0,1,271
"case s2, ok2 = <-c2:",0,7,0.26,0.14,0.0,0.0,1,271
"go copy(img, s2.Bounds(), s2,",0,7,0.26,0.14,0.0,0.0,1,271
"image.Point{r.Max.X / 2, r.Min.Y})",0,7,0.26,0.14,0.0,0.0,1,271
"case s3, ok3 = <-c3:",0,7,0.26,0.14,0.0,0.0,1,271
"go copy(img, s3.Bounds(), s3,",0,7,0.26,0.14,0.0,0.0,1,271
"image.Point{r.Min.X, r.Max.Y/2})",0,7,0.26,0.14,0.0,0.0,1,271
"case s4, ok4 = <-c4:",0,7,0.26,0.14,0.0,0.0,1,271
"go copy(img, s4.Bounds(), s4,",0,7,0.26,0.14,0.0,0.0,1,271
"image.Point{r.Max.X / 2, r.Max.Y / 2})",0,7,0.26,0.14,0.0,0.0,1,271
},0,7,0.17,0.14,0.0,0.0,0,271
if (ok1 && ok2 && ok3 && ok4) {,0,7,0.26,0.14,0.0,0.0,1,271
Breaks out of loop,1,9,0.39,0.61,0.0,0.0,1,271
break,0,7,0.26,0.14,0.0,0.0,1,271
when all channels closed,1,9,0.39,0.61,0.0,0.0,1,271
},0,7,0.17,0.14,0.0,0.0,0,271
},0,7,0.17,0.14,0.0,0.02,0,271
wg.Wait(),0,7,0.26,0.14,0.02,0.0,1,271
Blocks until all,1,9,0.39,0.53,0.0,0.0,1,271
buf2 := new(bytes.Buffer),0,7,0.26,0.14,0.0,0.0,1,271
subimages copied,1,9,0.39,0.53,0.0,0.0,1,271
"jpeg.Encode(buf2, img, nil)",0,7,0.26,0.14,0.0,0.0,1,271
252,1,9,0.39,0.06,0.0,0.0,0,272
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,272
C 9,1,7,0.26,0.31,0.0,0.0,0,272
HAPTER,1,6,0.33,0.32,0.0,0.03,1,272
c <- base64.StdEncoding.EncodeToString(buf2.Bytes()),0,7,0.26,0.13,0.03,0.0,1,272
}(),0,7,0.17,0.13,0.0,0.0,0,272
return c,0,7,0.26,0.13,0.0,0.0,1,272
},0,7,0.17,0.13,0.0,0.02,0,272
"As in the cut function, the main logic in combining the images resides in an anony-",0,9,0.21,0.13,0.02,0.0,0,272
"mous goroutine, and you create and return a receive-only channel. As a result, you",0,9,0.21,0.13,0.0,0.0,0,272
can encode the original image while combining the four photo mosaic segments.,0,9,0.21,0.13,0.0,0.0,0,272
"In the anonymous goroutine, you create another anonymous function and assign",0,9,0.21,0.15,0.0,0.0,0,272
it to a variable copy. This function copies a photo mosaic segment into the final photo,0,9,0.21,0.13,0.0,0.0,0,272
copy function is called as a,0,9,0.21,0.6,0.0,0.0,1,272
mosaic and will be run as a goroutine later. Because the,0,9,0.3,0.13,0.0,0.0,1,272
"goroutine, you won’t be able to control it when it completes. To synchronize the com-",0,9,0.21,0.13,0.0,0.0,0,272
"wg , and then set",0,9,0.21,0.7,0.0,0.0,1,272
"pletion of the copying, you use a WaitGroup. You create a WaitGroup,",0,9,0.3,0.13,0.0,0.0,1,272
Add method. Each time the,0,9,0.21,0.34,0.0,0.0,1,272
"copy function completes, it will",0,9,0.21,0.57,0.0,0.0,1,272
the counter to 4 using the,0,9,0.3,0.13,0.0,0.0,1,272
Done method. You call the,0,9,0.21,0.4,0.0,0.0,1,272
Wait method just before,0,9,0.21,0.62,0.0,0.0,1,272
decrement the counter using the,0,9,0.3,0.13,0.0,0.0,1,272
encoding the image to allow all the copy goroutines to complete and you have a com-,0,9,0.21,0.13,0.0,0.0,0,272
plete photo mosaic image.,0,9,0.3,0.13,0.0,0.0,1,272
combine function includes the four channels com-,0,9,0.21,0.42,0.0,0.0,1,272
Remember that the input to the,0,9,0.3,0.15,0.0,0.0,1,272
"ing from the cut function containing the photo mosaic segments, and you don’t know",0,9,0.21,0.13,0.0,0.0,0,272
when the channels have segments. You could try to receive each one of those channels,0,9,0.21,0.13,0.0,0.0,0,272
"in sequence, but that wouldn’t be very concurrent. What I like to do is to start process-",0,9,0.21,0.13,0.0,0.0,0,272
select statement fits the bill nicely.,0,9,0.21,0.52,0.0,0.0,1,272
"ing whichever segment that comes first, and the",0,9,0.3,0.13,0.0,0.0,1,272
"You loop indefinitely, and in each iteration, you select the channel that’s ready",0,9,0.21,0.15,0.0,0.0,0,272
"with a value. (If more than one is available, Go randomly assigns you one.) You use the",0,9,0.21,0.13,0.0,0.0,0,272
copy function. You’re using,0,9,0.21,0.6,0.0,0.0,1,272
image from this channel and start a goroutine with the,0,9,0.3,0.13,0.0,0.0,1,272
"the multivalue format for receiving values from the channel, meaning the second vari-",0,9,0.21,0.13,0.0,0.0,0,272
"able ( ok1 , ok2 , ok3 , or ok4",0,9,0.3,0.13,0.0,0.0,1,272
) tells you if you’ve successfully received from the channel.,0,9,0.21,0.34,0.0,0.0,1,272
The for loop breaks once you’ve successfully received on all channels.,0,9,0.3,0.13,0.0,0.0,1,272
"wg you used earlier, remember that",0,9,0.21,0.53,0.0,0.0,1,272
"Moving on, and referring to the WaitGroup",0,9,0.3,0.15,0.0,0.0,1,272
"even though you received all the photo mosaic segments successfully, you have in turn",0,9,0.21,0.13,0.0,0.0,0,272
"started four separate goroutines, which might not have completed at that time. The",0,9,0.21,0.13,0.0,0.0,0,272
Wait method on the WaitGroup,0,9,0.3,0.13,0.0,0.0,1,272
wg blocks the encoding of the assembled photo,0,9,0.21,0.41,0.0,0.0,1,272
mosaic until the photo mosaic is completed.,0,9,0.3,0.13,0.0,0.0,1,272
go,0,9,0.12,0.81,0.0,0.0,0,272
"Now that you have the concurrent mosaic application, let’s run it. For now, run",0,9,0.21,0.15,0.0,0.0,0,272
build and then execute it with just one,0,9,0.3,0.13,0.0,0.0,1,272
", assuming that your code is in a directory",0,9,0.21,0.49,0.0,0.0,1,272
CPU,0,9,0.12,0.45,0.0,0.0,0,272
named mosaic_concurrent,0,9,0.3,0.13,0.0,0.0,1,272
:,0,9,0.12,0.35,0.0,0.01,0,272
GOMAXPROCS=1 ./mosaic_concurrent,0,7,0.26,0.13,0.01,0.01,1,272
"You can see the results in figure 9.8, which uses the same target picture and tile pic-",0,9,0.21,0.13,0.01,0.0,0,272
tures when you run it with a single,0,9,0.3,0.13,0.0,0.0,1,272
CPU .,0,9,0.21,0.41,0.0,0.0,1,272
"If you’re sharp-eyed, you might see the slight differences in the photo mosaic that’s",0,9,0.21,0.15,0.0,0.0,0,272
generated (it works better on the e-book version where you can see the color,0,9,0.21,0.13,0.0,0.0,0,272
253,1,9,0.3,0.82,0.0,0.0,0,273
Concurrency for web applications,1,9,0.53,0.35,0.0,0.35,1,273
Figure 9.8 Photo mosaic web application with concurrency,1,7,0.58,0.14,0.35,0.05,1,273
differences). The final photo mosaic is assembled from four separate pieces and the,0,9,0.21,0.14,0.05,0.0,0,273
algorithm doesn’t smooth out the rough edges. But you can see the difference in per-,0,9,0.21,0.14,0.0,0.0,0,273
"formance—where the basic photo mosaic web application took 2.25 seconds, the one",0,9,0.21,0.14,0.0,0.0,0,273
"using concurrency takes only a quarter of that time, about 646 ms.",0,9,0.3,0.14,0.0,0.0,1,273
You might be wondering now if what I’ve just shown you is a case of parallel pro-,0,9,0.21,0.17,0.0,0.0,0,273
gramming instead of concurrent programming. What’s done here,0,9,0.3,0.14,0.0,0.0,1,273
seems to be just,1,9,0.39,0.71,0.0,0.0,1,273
breaking up a function into four goroutines that are run independently.,0,9,0.21,0.14,0.0,0.0,0,273
Keep in mind that you didn’t just break up a long-running function into separate,0,9,0.21,0.17,0.0,0.0,0,273
cut functions running goroutines—you also assembled their output with the,0,9,0.21,0.14,0.0,0.0,0,273
combine,0,9,0.21,0.78,0.0,0.01,1,273
cut functions completes its,0,9,0.21,0.62,0.01,0.0,1,273
function that wraps a goroutine. Whenever any one of the,0,9,0.3,0.14,0.0,0.0,1,273
combine function to be copied into a single,0,9,0.21,0.48,0.0,0.0,1,273
"processing, it will send the results to the",0,9,0.3,0.14,0.0,0.0,1,273
image.,0,9,0.3,0.14,0.0,0.0,1,273
Remember that I asked you to run both the original and the concurrent web appli-,0,9,0.21,0.17,0.0,0.0,0,273
cations with only one CPU,0,9,0.3,0.14,0.0,0.0,1,273
". As mentioned earlier in this chapter, concurrency is",0,9,0.21,0.36,0.0,0.0,1,273
not,1,9,0.3,0.82,0.0,0.0,0,273
parallelism—I’ve shown you how to take a simple algorithm and break it down into a,0,9,0.21,0.14,0.0,0.0,0,273
"concurrent one, with no parallelism involved. None of the goroutines are running in",0,9,0.21,0.14,0.0,0.0,0,273
parallel (there’s only one,0,9,0.3,0.14,0.0,0.0,1,273
"CPU ), even though they’re running independently.",0,9,0.21,0.35,0.0,0.0,1,273
"For our grand finale, now run it with multiple",0,9,0.3,0.17,0.0,0.0,1,273
"CPU s and, in the process, automati-",0,9,0.21,0.55,0.0,0.0,1,273
"cally get parallelism for free. To do this, run the application normally:",0,9,0.21,0.14,0.0,0.01,0,273
./mosaic_concurrent,0,7,0.26,0.14,0.01,0.0,1,273
254,1,9,0.39,0.06,0.0,0.0,0,274
Leveraging Go concurrency,1,9,0.39,0.39,0.0,0.0,1,274
C 9,1,7,0.26,0.31,0.0,0.0,0,274
HAPTER,1,6,0.47,0.32,0.0,0.31,1,274
Figure 9.9 Photo mosaic web application with concurrency and eight CPUs,1,7,0.49,0.12,0.31,0.04,0,274
Figure 9.9 shows what you should get as a result.,0,9,0.3,0.13,0.04,0.0,1,274
"As you can see from the numbers, the performance has improved three times,",0,9,0.21,0.15,0.0,0.0,0,274
from 646 ms to 216 ms! And if we compare that with our original non-concurrent,0,9,0.21,0.13,0.0,0.0,0,274
"photo mosaic web application with 2.25 seconds, that’s a 10 times performance",0,9,0.21,0.13,0.0,0.0,0,274
improvement!,0,9,0.3,0.13,0.0,0.0,1,274
There’s no difference between the original and the concurrent web applications in,0,9,0.21,0.15,0.0,0.0,0,274
"terms of the photo mosaic algorithm. In fact, between the two applications, the",0,9,0.21,0.13,0.0,0.0,0,274
"mosaic.go source file was hardly modified. The main difference is concurrency, and",0,9,0.21,0.13,0.0,0.0,0,274
that’s a testament to how powerful it is.,0,9,0.3,0.13,0.0,0.0,1,274
We’re done with programming our web applications. The next chapter discusses,0,9,0.21,0.15,0.0,0.0,0,274
how you can take your web applications and web services and deploy them.,0,9,0.21,0.13,0.0,0.02,0,274
9.5 Summary,1,12,0.54,0.06,0.02,0.01,1,274
The Go web server itself is concurrent and each request to the server runs on a,0,9,0.21,0.18,0.01,0.0,0,274
■,0,4,0.11,0.15,0.0,0.01,0,274
separate goroutine.,0,9,0.3,0.18,0.01,0.01,1,274
Concurrency is not parallelism—they are complementary concepts but not the,0,9,0.21,0.18,0.01,0.0,0,274
■,0,4,0.11,0.15,0.0,0.01,0,274
"same. Concurrency is when two or more tasks start, run, and end within the",0,9,0.21,0.18,0.01,0.0,0,274
same period of time and these tasks can potentially interact with each other,0,9,0.21,0.18,0.0,0.0,0,274
while parallelism is simply multiple tasks running at the same time.,0,9,0.3,0.18,0.0,0.01,1,274
Go supports concurrency directly with two main features: goroutines and chan-,0,9,0.21,0.18,0.01,0.0,0,274
■,0,4,0.11,0.15,0.0,0.01,0,274
nels. Go doesn’t support parallelism directly.,0,9,0.3,0.18,0.01,0.01,1,274
"Goroutines are used to write concurrent programs, whereas channels are used",0,9,0.21,0.18,0.01,0.0,0,274
■,0,4,0.11,0.15,0.0,0.01,0,274
to provide the communications between goroutines.,0,9,0.3,0.18,0.01,0.01,1,274
Unbuffered channels are synchronous and are blocked when they contain data,0,9,0.21,0.18,0.01,0.0,0,274
■,0,4,0.11,0.15,0.0,0.01,0,274
but not received while buffered channels can be asynchronous until buffer is full.,0,9,0.21,0.18,0.01,0.0,0,274
255,1,9,0.3,0.82,0.0,0.0,0,275
Summary,1,9,0.39,0.43,0.0,0.03,1,275
A select statement can be used to choose one out of a number of channels—,0,9,0.21,0.19,0.03,0.0,0,275
■,0,4,0.11,0.17,0.0,0.01,0,275
the first channel that is ready to be received will be selected.,0,9,0.3,0.19,0.01,0.01,1,275
WaitGroups can also be used to synchronize between channels.,0,9,0.3,0.19,0.01,0.0,1,275
■,0,4,0.11,0.17,0.0,0.01,0,275
"Concurrent web applications can be highly performant, depending on the",0,9,0.3,0.19,0.01,0.0,1,275
■,0,4,0.11,0.17,0.0,0.01,0,275
"algorithm used, even on a single",0,9,0.3,0.19,0.01,0.0,1,275
"CPU , compared with non-concurrent web",0,9,0.21,0.49,0.0,0.0,1,275
applications.,0,9,0.3,0.19,0.0,0.01,1,275
Concurrent web applications can potentially get the benefits of parallelism,0,9,0.21,0.19,0.01,0.0,0,275
■,0,4,0.11,0.17,0.0,0.01,0,275
automatically.,0,9,0.3,0.19,0.01,0.0,1,275
Deploying Go,1,30,0.93,0.53,0.0,0.22,1,276
This chapter covers,1,12,0.67,0.11,0.22,0.01,1,276
Deploying Go web apps to standalone servers,0,9,0.3,0.13,0.01,0.0,1,276
■,0,4,0.11,0.11,0.0,0.01,0,276
Deploying Go web apps to the cloud,0,9,0.3,0.13,0.01,0.0,1,276
■,0,4,0.11,0.11,0.0,0.01,0,276
Deploying Go web apps in Docker containers,0,9,0.3,0.13,0.01,0.0,1,276
■,0,4,0.11,0.11,0.0,0.08,0,276
"Now that you’ve learned how to develop a web application with Go, the next logical",0,9,0.21,0.14,0.08,0.0,0,276
step is to deploy it. Deploying web applications is quite different from deploying,0,9,0.21,0.14,0.0,0.0,0,276
other types of applications. Desktop and mobile applications are deployed on the,0,9,0.21,0.14,0.0,0.0,0,276
"end users’ devices (smart phones tables, laptops, and so forth) but web applications",0,9,0.21,0.14,0.0,0.0,0,276
are deployed on servers that are accessed through a client (usually a browser) on,0,9,0.21,0.14,0.0,0.0,0,276
the end users’ device.,0,9,0.3,0.14,0.0,0.0,1,276
Deploying Go web apps can be simple because the executable program is com-,0,9,0.21,0.17,0.0,0.0,0,276
"piled into a single binary file. Also, because Go programs can be compiled into a",0,9,0.21,0.14,0.0,0.0,0,276
"statically linked binary file that doesn’t need any other libraries, they can be a sin-",0,9,0.21,0.14,0.0,0.0,0,276
gle executable file. But web apps are usually not just a single executable binary;,0,9,0.21,0.14,0.0,0.0,0,276
"most often they consist of template files as well as static files like JavaScript, images,",0,9,0.21,0.14,0.0,0.0,0,276
and style sheets. In this chapter we’ll explore a few ways of deploying Go web apps,0,9,0.21,0.14,0.0,0.0,0,276
"to the internet, mostly through cloud providers. You’ll learn how to deploy to",0,9,0.21,0.14,0.0,0.0,0,276
257,1,9,0.3,0.82,0.0,0.0,0,277
Deploying to servers,1,9,0.39,0.39,0.0,0.03,1,277
"A server that’s either fully owned by you, physical, or virtual (on an Infrastruc-",0,9,0.21,0.19,0.03,0.0,0,277
■,0,4,0.11,0.17,0.0,0.01,0,277
"ture-as-a-Service provider, Digital Ocean)",0,9,0.3,0.19,0.01,0.01,1,277
"A cloud Platform-as-a-Service (PaaS) provider, Heroku",0,9,0.3,0.19,0.01,0.0,1,277
■,0,4,0.11,0.17,0.0,0.01,0,277
"Another cloud PaaS provider, Google App Engine",0,9,0.3,0.19,0.01,0.0,1,277
■,0,4,0.11,0.17,0.0,0.01,0,277
"A dockerized container, deployed to a local Docker server, and also to a virtual",0,9,0.21,0.19,0.01,0.0,0,277
■,0,4,0.11,0.17,0.0,0.01,0,277
machine on Digital Ocean,0,9,0.3,0.19,0.01,0.04,1,277
Cloud computing,1,10,0.5,0.17,0.04,0.01,1,277
"Cloud computing, or “the cloud,” is a model of network and computer access that",0,9,0.21,0.17,0.01,0.0,0,277
"provides a pool of shared resources (servers, storage, network, and others). This al-",0,9,0.21,0.17,0.0,0.0,0,277
lows the users of these resources to avoid up-front costs and the providers of the,0,9,0.21,0.17,0.0,0.0,0,277
resources to use the resources more effectively for a larger number of users. Cloud,0,9,0.21,0.17,0.0,0.0,0,277
computing has gained traction over the past years and is now a regular model used,0,9,0.21,0.17,0.0,0.0,0,277
"by most large infrastructure and service providers, including Amazon, Google, and",0,9,0.21,0.17,0.0,0.0,0,277
Facebook.,0,9,0.3,0.17,0.0,0.05,1,277
It’s important to remember that there are many different ways of deploying a web app,0,9,0.21,0.14,0.05,0.0,0,277
"and in each of the methods you’ll be learning in this chapter, there are many varia-",0,9,0.21,0.14,0.0,0.0,0,277
tions. The methods described in this chapter are based on a single person deploying,0,9,0.21,0.14,0.0,0.0,0,277
the web app. The processes are usually a lot more involved in a production environ-,0,9,0.21,0.14,0.0,0.0,0,277
"ment, which includes additiona tasks like running test suites, continual integration,",0,9,0.21,0.14,0.0,0.0,0,277
"staging servers, and so on.",0,9,0.3,0.14,0.0,0.0,1,277
"This chapter also introduces many concepts and tools, each of them worthy of an",0,9,0.21,0.17,0.0,0.0,0,277
"entire book. Therefore, it’s impossible to cover all of these technologies and services.",0,9,0.21,0.14,0.0,0.0,0,277
"This chapter aims to cover only a small portion, and if you want to learn more, take",0,9,0.21,0.14,0.0,0.0,0,277
this as a starting point.,0,9,0.3,0.14,0.0,0.0,1,277
"In our examples, you’ll be using the simple web service in section 7.6. Wherever",0,9,0.21,0.17,0.0,0.0,0,277
"possible, you’ll use P ostgre",0,9,0.3,0.14,0.0,0.0,1,277
"SQL (except in Google App Engine, where you’ll use",0,9,0.21,0.37,0.0,0.0,1,277
"Google Cloud SQL , which is",0,9,0.3,0.14,0.0,0.0,1,277
M y SQL based). The base assumption is that the setup of,0,9,0.21,0.38,0.0,0.0,1,277
"the database is done beforehand, on a separate database server, so setting up the data-",0,9,0.21,0.14,0.0,0.0,0,277
"base isn’t covered here. If you need some brief guidance, review section 2.6.",0,9,0.21,0.14,0.0,0.02,0,277
10.1 Deploying to servers,1,12,0.54,0.07,0.02,0.01,1,277
Let’s start with the simplest deployment: creating an executable binary and then run-,0,9,0.21,0.14,0.01,0.0,0,277
ning it off a server that’s on the internet. Whether this server is a physical server con-,0,9,0.21,0.14,0.0,0.0,0,277
nected to the internet or a virtual machine (VM) that’s been created on a provider,0,9,0.21,0.14,0.0,0.0,0,277
like Amazon Web Services,0,9,0.3,0.14,0.0,0.0,1,277
"(AWS) or Digital Ocean, it’s the same. In this section, you’ll",0,9,0.21,0.36,0.0,0.0,1,277
learn how to deploy to a server that’s running Ubuntu Server 14.04.,0,9,0.3,0.14,0.0,0.0,1,277
258,1,9,0.39,0.06,0.0,0.0,0,278
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,278
C 10,1,7,0.35,0.35,0.0,0.0,1,278
HAPTER,1,6,0.33,0.36,0.0,0.04,1,278
"IaaS, PaaS, and SaaS",1,10,0.5,0.15,0.04,0.01,1,278
Cloud computing providers offer their services through different models. NIST (National,0,9,0.21,0.15,0.01,0.0,0,278
"Institute of Standards and Technology, US Department of Commerce) defines three",0,9,0.21,0.15,0.0,0.0,0,278
"service models that are widely used today: Infrastructure-as-a-Service (IaaS), Platform-",0,9,0.21,0.15,0.0,0.0,0,278
"as-a-Service (PaaS), and Software-as-a-Service (SaaS).",0,9,0.3,0.15,0.0,0.01,1,278
"IaaS, the most basic of the three models, describes providers that offer their users",0,9,0.21,0.15,0.01,0.0,0,278
"the basic computing capabilities, including compute, storage, and networking. Exam-",0,9,0.21,0.15,0.0,0.0,0,278
"ples of IaaS services include the AWS Elastic Cloud Computing (EC2) service, Google’s",0,9,0.21,0.15,0.0,0.0,0,278
"Compute Engine, and Digital Ocean’s Droplets.",0,9,0.3,0.15,0.0,0.01,1,278
PaaS is a model that describes providers that offer their users capabilities to deploy,0,9,0.21,0.15,0.01,0.0,0,278
"applications to the infrastructure, using their tools. Examples include Heroku, AWS’s",0,9,0.21,0.15,0.0,0.0,0,278
"Elastic Beanstalk, and Google’s App Engine.",0,9,0.3,0.15,0.0,0.01,1,278
SaaS is a model that describes providers that offer application services to the users.,0,9,0.21,0.15,0.01,0.0,0,278
"Most services used by consumers today can be considered SaaS services, but in the",0,9,0.21,0.15,0.0,0.0,0,278
"context of this book, SaaS services include Heroku’s Postgres database service (which",0,9,0.21,0.15,0.0,0.0,0,278
"provides a cloud-based Postgres service), AWS’s Relational Database Service (RDS),",0,9,0.21,0.15,0.0,0.0,0,278
and Google’s Cloud SQL.,0,9,0.3,0.15,0.0,0.01,1,278
"In this book, and in this chapter, you’ll learn how you can use IaaS and PaaS providers",0,9,0.21,0.15,0.01,0.0,0,278
to deploy Go web applications.,0,9,0.3,0.15,0.0,0.04,1,278
"Our simple web service from chapter 7 consists of two files: data.go (listing 10.1),",0,9,0.21,0.13,0.04,0.0,0,278
"which contains all the connections to the database, as well as the functions that read",0,9,0.21,0.13,0.0,0.0,0,278
main,0,9,0.21,0.79,0.0,0.0,1,278
"from and write to the database, and server.go (listing 10.2), which contains the",0,9,0.21,0.13,0.0,0.0,0,278
function and all the processing logic for the web service.,0,9,0.3,0.13,0.0,0.03,1,278
Listing 10.1 Accessing the database with data.go,1,9,0.48,0.15,0.03,0.02,1,278
package main,0,7,0.26,0.13,0.02,0.02,1,278
import (,0,7,0.26,0.13,0.02,0.0,1,278
"""database/sql""",0,7,0.26,0.13,0.0,0.0,1,278
"_ ""github.com/lib/pq""",0,7,0.26,0.13,0.0,0.0,1,278
),0,7,0.17,0.13,0.0,0.02,0,278
var Db *sql.DB,0,7,0.26,0.13,0.02,0.01,1,278
func init() {,0,7,0.26,0.13,0.01,0.0,1,278
var err error,0,7,0.26,0.13,0.0,0.0,1,278
"Db, err = sql.Open(""postgres"", ""user=gwp dbname=gwp password=gwp",0,7,0.26,0.13,0.0,0.0,1,278
➥,0,10,0.23,0.13,0.0,0.0,0,278
"sslmode=disable"")",0,7,0.26,0.17,0.0,0.0,1,278
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,278
panic(err),0,7,0.26,0.13,0.0,0.0,1,278
},0,7,0.17,0.13,0.0,0.0,0,278
},0,7,0.17,0.13,0.0,0.01,0,278
"func retrieve(id int) (post Post, err error) {",0,7,0.26,0.13,0.01,0.0,1,278
post = Post{},0,7,0.26,0.13,0.0,0.0,1,278
259,1,9,0.3,0.82,0.0,0.0,0,279
Deploying to servers,1,9,0.39,0.39,0.0,0.03,1,279
"err = Db.QueryRow(""select id, content, author from posts where id =",0,7,0.26,0.14,0.03,0.0,1,279
➥,0,10,0.23,0.16,0.0,0.0,0,279
"$1"", id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.18,0.0,0.0,1,279
return,0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.02,0,279
func (post *Post) create() (err error) {,0,7,0.26,0.14,0.02,0.0,1,279
"statement := ""insert into posts (content, author) values ($1, $2)",0,7,0.26,0.14,0.0,0.0,1,279
➥,0,10,0.23,0.16,0.0,0.0,0,279
"returning id""",0,7,0.26,0.18,0.0,0.0,1,279
"stmt, err := Db.Prepare(statement)",0,7,0.26,0.14,0.0,0.0,1,279
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,279
return,0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.0,0,279
defer stmt.Close(),0,7,0.26,0.14,0.0,0.0,1,279
"err = stmt.QueryRow(post.Content, post.Author).Scan(&post.Id)",0,7,0.26,0.14,0.0,0.0,1,279
return,0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.02,0,279
func (post *Post) update() (err error) {,0,7,0.26,0.14,0.02,0.0,1,279
"_, err = Db.Exec(""update posts set content = $2, author = $3 where id =",0,7,0.17,0.14,0.0,0.0,0,279
➥,0,10,0.23,0.17,0.0,0.0,0,279
"$1"", post.Id, post.Content, post.Author)",0,7,0.26,0.19,0.0,0.0,1,279
return,0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.02,0,279
func (post *Post) delete() (err error) {,0,7,0.26,0.14,0.02,0.0,1,279
"_, err = Db.Exec(""delete from posts where id = $1"", post.Id)",0,7,0.26,0.14,0.0,0.0,1,279
return,0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.03,0,279
Listing 10.2 Go web service in server.go,1,9,0.48,0.17,0.03,0.01,1,279
package main,0,7,0.26,0.14,0.01,0.02,1,279
import (,0,7,0.26,0.14,0.02,0.0,1,279
"""encoding/json""",0,7,0.26,0.14,0.0,0.0,1,279
"""net/http""",0,7,0.26,0.14,0.0,0.0,1,279
"""path""",0,7,0.26,0.14,0.0,0.0,1,279
"""strconv""",0,7,0.26,0.14,0.0,0.0,1,279
),0,7,0.17,0.14,0.0,0.02,0,279
type Post struct {,0,7,0.26,0.14,0.02,0.0,1,279
"Id      int    `json:""id""`",0,7,0.26,0.14,0.0,0.0,1,279
"Content string `json:""content""`",0,7,0.26,0.14,0.0,0.0,1,279
"Author  string `json:""author""`",0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.02,0,279
func main() {,0,7,0.26,0.14,0.02,0.0,1,279
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,279
"Addr: ""127.0.0.1:8080"",",0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.0,0,279
"http.HandleFunc(""/post/"", handleRequest)",0,7,0.26,0.14,0.0,0.0,1,279
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,279
},0,7,0.17,0.14,0.0,0.02,0,279
"func handleRequest(w http.ResponseWriter, r *http.Request) {",0,7,0.26,0.14,0.02,0.0,1,279
var err error,0,7,0.26,0.14,0.0,0.0,1,279
260,1,9,0.39,0.06,0.0,0.0,0,280
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,280
C 10,1,7,0.35,0.35,0.0,0.0,1,280
HAPTER,1,6,0.33,0.36,0.0,0.03,1,280
switch r.Method {,0,7,0.26,0.13,0.03,0.0,1,280
"case ""GET"":",0,7,0.26,0.13,0.0,0.0,1,280
"err = handleGet(w, r)",0,7,0.26,0.13,0.0,0.0,1,280
"case ""POST"":",0,7,0.26,0.13,0.0,0.0,1,280
"err = handlePost(w, r)",0,7,0.26,0.13,0.0,0.0,1,280
"case ""PUT"":",0,7,0.26,0.13,0.0,0.0,1,280
"err = handlePut(w, r)",0,7,0.26,0.13,0.0,0.0,1,280
"case ""DELETE"":",0,7,0.26,0.13,0.0,0.0,1,280
"err = handleDelete(w, r)",0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
"http.Error(w, err.Error(), http.StatusInternalServerError)",0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
},0,7,0.17,0.13,0.0,0.02,0,280
"func handleGet(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.02,0.0,1,280
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
"output, err := json.MarshalIndent(&post, """", ""\t\t"")",0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
"w.Header().Set(""Content-Type"", ""application/json"")",0,7,0.26,0.13,0.0,0.0,1,280
w.Write(output),0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.02,0,280
"func handlePost(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.02,0.0,1,280
len := r.ContentLength,0,7,0.26,0.13,0.0,0.0,1,280
"body := make([]byte, len)",0,7,0.26,0.13,0.0,0.0,1,280
r.Body.Read(body),0,7,0.26,0.13,0.0,0.0,1,280
var post Post,0,7,0.26,0.13,0.0,0.0,1,280
"json.Unmarshal(body, &post)",0,7,0.26,0.13,0.0,0.0,1,280
err = post.create(),0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
w.WriteHeader(200),0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.02,0,280
"func handlePut(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.26,0.13,0.02,0.0,1,280
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
},0,7,0.17,0.13,0.0,0.0,0,280
"post, err := retrieve(id)",0,7,0.26,0.13,0.0,0.0,1,280
if err != nil {,0,7,0.26,0.13,0.0,0.0,1,280
return,0,7,0.26,0.13,0.0,0.0,1,280
261,1,9,0.3,0.82,0.0,0.0,0,281
Deploying to servers,1,9,0.39,0.39,0.0,0.03,1,281
},0,7,0.17,0.14,0.03,0.0,0,281
len := r.ContentLength,0,7,0.26,0.14,0.0,0.0,1,281
"body := make([]byte, len)",0,7,0.26,0.14,0.0,0.0,1,281
r.Body.Read(body),0,7,0.26,0.14,0.0,0.0,1,281
"json.Unmarshal(body, &post)",0,7,0.26,0.14,0.0,0.0,1,281
err = post.update(),0,7,0.26,0.14,0.0,0.0,1,281
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.0,0,281
w.WriteHeader(200),0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.01,0,281
"func handleDelete(w http.ResponseWriter, r *http.Request) (err error) {",0,7,0.17,0.14,0.01,0.0,0,281
"id, err := strconv.Atoi(path.Base(r.URL.Path))",0,7,0.26,0.14,0.0,0.0,1,281
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.0,0,281
"post, err := retrieve(id)",0,7,0.26,0.14,0.0,0.0,1,281
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.0,0,281
err = post.delete(),0,7,0.26,0.14,0.0,0.0,1,281
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.0,0,281
w.WriteHeader(200),0,7,0.26,0.14,0.0,0.0,1,281
return,0,7,0.26,0.14,0.0,0.0,1,281
},0,7,0.17,0.14,0.0,0.02,0,281
"First, you compile the code:",0,9,0.3,0.14,0.02,0.01,1,281
go build,0,7,0.26,0.14,0.01,0.01,1,281
"Assuming that you have the code in a directory called ws-s, this command will produce",0,9,0.21,0.14,0.01,0.0,0,281
"the executable binary ws-s in the same directory. To deploy the web service ws-s, copy",0,9,0.21,0.14,0.0,0.0,0,281
the ws-s file into the server. Anywhere will do as long as it’s accessible.,0,9,0.21,0.14,0.0,0.0,0,281
"To run the web service, log into the server and run it from the console:",0,9,0.21,0.17,0.0,0.01,0,281
./ws-s,0,7,0.26,0.14,0.01,0.01,1,281
"But wait! You’re running it in the foreground, which means you can’t do anything else",0,9,0.21,0.14,0.01,0.0,0,281
& or,0,9,0.21,0.81,0.0,0.0,1,281
or it will shut down the service. You can’t even run it in the background using the,0,9,0.21,0.14,0.0,0.0,0,281
"bg command because once you log out, the web service gets killed.",0,9,0.3,0.14,0.0,0.0,1,281
"nohup command, which tells",0,9,0.21,0.6,0.0,0.0,1,281
One way of getting around this issue is to use the,0,9,0.3,0.17,0.0,0.0,1,281
the OS to ignore the HUP,0,9,0.3,0.14,0.0,0.0,1,281
(hangup) signal that is sent to your web service once you,0,9,0.21,0.36,0.0,0.0,1,281
log out:,0,9,0.3,0.14,0.0,0.01,1,281
nohup ./ws-s &,0,7,0.26,0.14,0.01,0.01,1,281
"This command will run the web service in the background, and there’s no fear of it",0,9,0.21,0.14,0.01,0.0,0,281
being killed. The web service is still connected to the console; it just ignores any sig-,0,9,0.21,0.14,0.0,0.0,0,281
"nals to hang up or quit. If it crashes, you won’t be alerted, and you’ll need to log in to",0,9,0.21,0.14,0.0,0.0,0,281
"restart it. If the server is restarted, you’ll have to restart the web service.",0,9,0.21,0.14,0.0,0.0,0,281
262,1,9,0.39,0.06,0.0,0.0,0,282
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,282
C 10,1,7,0.35,0.35,0.0,0.0,1,282
HAPTER,1,6,0.33,0.36,0.0,0.03,1,282
nohup is to use an init daemon like Upstart or systemd.,0,9,0.21,0.37,0.03,0.0,1,282
An alternative to running,0,9,0.3,0.15,0.0,0.0,1,282
"In Unix-based OS es, init is the first process that’s run when the system is booted up",0,9,0.21,0.13,0.0,0.0,0,282
and continues running until the system is shut down. It’s the direct or indirect ances-,0,9,0.21,0.13,0.0,0.0,0,282
tor of all other processes and is automatically started by the kernel.,0,9,0.3,0.13,0.0,0.0,1,282
"In this section, you’ll be using Upstart, an event-based replacement for init, cre-",0,9,0.21,0.15,0.0,0.0,0,282
"ated for Ubuntu. Although systemd is gaining adoption, Upstart is generally simpler",0,9,0.21,0.13,0.0,0.0,0,282
"to use, and for our purposes, both perform the same things.",0,9,0.3,0.13,0.0,0.0,1,282
"To use Upstart, create an Upstart job configuration file, shown next, and place it in",0,9,0.21,0.15,0.0,0.0,0,282
"the etc/init directory. For the simple web service, you’ll create ws.conf and place it in",0,9,0.21,0.13,0.0,0.0,0,282
the etc/init directory.,0,9,0.3,0.13,0.0,0.03,1,282
Listing 10.3 Listing 10.3 Upstart job configuration file for the simple web service,1,9,0.39,0.15,0.03,0.02,0,282
respawn,0,7,0.26,0.13,0.02,0.0,1,282
respawn limit 10 5,0,7,0.26,0.13,0.0,0.01,1,282
setuid sausheong,0,7,0.26,0.13,0.01,0.0,1,282
setgid sausheong,0,7,0.26,0.13,0.0,0.01,1,282
exec /go/src/github.com/sausheong/ws-s/ws-s,0,7,0.26,0.13,0.01,0.02,1,282
The Upstart job configuration file in the listing is straightforward. Each Upstart job,0,9,0.21,0.13,0.02,0.0,0,282
"stanzas . The first stanza, respawn",1,9,0.39,0.52,0.0,0.0,1,282
consists of one or more command blocks called,0,9,0.3,0.13,0.0,0.0,1,282
", indi-",0,9,0.21,0.78,0.0,0.0,1,282
"cates that if the job fails, it should be respawned, or restarted. The second stanza,",0,9,0.21,0.13,0.0,0.0,0,282
"respawn limit 10 5 , sets parameters for",0,9,0.3,0.13,0.0,0.0,1,282
"respawn , indicating that it will try to",0,9,0.21,0.51,0.0,0.0,1,282
"respawn only 10 times, waiting 5 seconds in between. After 10 tries, Upstart will stop",0,9,0.21,0.13,0.0,0.0,0,282
trying to respawn the job and consider the job to have failed. The third and fourth,0,9,0.21,0.13,0.0,0.0,0,282
stanzas set the user and group that will be used to run the process. The last stanza is,0,9,0.21,0.13,0.0,0.0,0,282
the executable that’s run by Upstart when the job starts.,0,9,0.3,0.13,0.0,0.0,1,282
"To start the Upstart job, you start it from the console:",0,9,0.3,0.15,0.0,0.01,1,282
sudo start ws,0,7,0.26,0.13,0.01,0.0,1,282
"ws start/running, process 2011",0,7,0.26,0.13,0.0,0.02,1,282
This command will trigger Upstart to read the /etc/init/ws.conf job configuration file,0,9,0.21,0.13,0.02,0.0,0,282
"and start the job. Upstart job configuration files can have a number of other stanzas,",0,9,0.21,0.13,0.0,0.0,0,282
"and Upstart jobs can be configured in a variety of ways, all of which are beyond the",0,9,0.21,0.13,0.0,0.0,0,282
scope of this book. This section provides only a flavor of how a simple Upstart job can,0,9,0.21,0.13,0.0,0.0,0,282
be used to run a Go web application.,0,9,0.3,0.13,0.0,0.0,1,282
"To test this point, let’s try a simple experiment. You’ll try to kill the Upstart job",0,9,0.21,0.15,0.0,0.0,0,282
after it’s started:,0,9,0.3,0.13,0.0,0.01,1,282
ps -ef | grep ws,0,7,0.26,0.13,0.01,0.0,1,282
sausheo+ 2011 1 0 17:23 ? 00:00:00 /go/src/github.com/sausheong/ws-s/ws-s,0,7,0.17,0.13,0.0,0.01,0,282
sudo kill -0 2011,0,7,0.26,0.13,0.01,0.01,1,282
ps -ef | grep ws,0,7,0.26,0.13,0.01,0.0,1,282
sausheo+ 2030 1 0 17:23 ? 00:00:00 /go/src/github.com/sausheong/ws-s/ws-s,0,7,0.17,0.13,0.0,0.0,0,282
263,1,9,0.3,0.82,0.0,0.0,0,283
Deploying to Heroku,1,9,0.39,0.39,0.0,0.03,1,283
"ID for the job was 2011 , whereas after you",0,9,0.21,0.51,0.03,0.0,1,283
"Notice that before we killed the process, the",0,9,0.3,0.14,0.0,0.0,1,283
PID became 2030 . This is because Upstart detects,0,9,0.21,0.44,0.0,0.0,1,283
"tried killing the process, the process",0,9,0.3,0.14,0.0,0.0,1,283
"that the process went down, so Upstart will try to restart it.",0,9,0.3,0.14,0.0,0.0,1,283
"Finally, most web applications are deployed to the standard",0,9,0.3,0.17,0.0,0.0,1,283
HTTP port (port 80).,0,9,0.21,0.67,0.0,0.0,1,283
"When it is time to do the final deployment, you should be changing the port number",0,9,0.21,0.14,0.0,0.0,0,283
"from 8080 to 80, or use some mechanism to proxy or redirect traffic to port 80 to",0,9,0.21,0.14,0.0,0.0,0,283
port 8080.,0,9,0.3,0.14,0.0,0.02,1,283
10.2 Deploying to Heroku,1,12,0.54,0.07,0.02,0.01,1,283
I’ve just shown you how easy it is to deploy a simple Go web service to a server and also,0,9,0.21,0.14,0.01,0.0,0,283
"how the web service can be managed by the init daemon. In this section, you’ll see",0,9,0.21,0.14,0.0,0.0,0,283
"that it’s just as easy to deploy to Heroku, a PaaS provider.",0,9,0.3,0.14,0.0,0.0,1,283
"Heroku allows you to deploy, run, and manage applications written in a few pro-",0,9,0.21,0.17,0.0,0.0,0,283
"gramming languages, including Go. An",0,9,0.3,0.14,0.0,0.0,1,283
"application , as defined by Heroku, is a collec-",1,9,0.39,0.47,0.0,0.0,1,283
"tion of source code written in one of Heroku’s supported languages, as well as its",0,9,0.21,0.14,0.0,0.0,0,283
dependencies.,0,9,0.3,0.14,0.0,0.0,1,283
Heroku’s premise is simple and requires only a couple of things:,0,9,0.3,0.17,0.0,0.01,1,283
"A configuration file or mechanism that defines the dependencies. For example,",0,9,0.21,0.19,0.01,0.0,0,283
■,0,4,0.11,0.17,0.0,0.01,0,283
"in Ruby this would be a Gemfile file, in Node.js a package.json file, and in Java a",0,9,0.21,0.19,0.01,0.0,0,283
pom.xml file.,0,9,0.3,0.19,0.0,0.01,1,283
A Procfile that defines what to be run. More than one executable can be run at,0,9,0.21,0.19,0.01,0.0,0,283
■,0,4,0.11,0.17,0.0,0.01,0,283
the same time.,0,9,0.3,0.19,0.01,0.01,1,283
Heroku uses the command line extensively and provides a command-line “toolbelt” to,0,9,0.21,0.14,0.01,0.0,0,283
"deploy, run, and manage applications. In addition, Heroku uses Git to push source",0,9,0.21,0.14,0.0,0.0,0,283
code to the server to be deployed. When the Heroku platform receives the code,0,9,0.21,0.14,0.0,0.0,0,283
"through Git, it builds the application and retrieves the dependencies that are speci-",0,9,0.21,0.14,0.0,0.0,0,283
"fied, and then assembles them into a",0,9,0.3,0.14,0.0,0.0,1,283
slug . These slugs are then run on Heroku,1,9,0.39,0.45,0.0,0.0,1,283
"dynos ,",1,9,0.39,0.8,0.0,0.0,1,283
"Heroku’s terminology for isolated, lightweight virtualized Unix containers.",0,9,0.21,0.14,0.0,0.0,0,283
Although some of the management and configuration activities can later be done,0,9,0.21,0.17,0.0,0.0,0,283
"through a web interface, Heroku’s main interface is still through its command-line",0,9,0.21,0.14,0.0,0.0,0,283
"toolbelt. So the first thing you need to do to use Heroku, after registering for an",0,9,0.21,0.14,0.0,0.0,0,283
"account, is to download the toolbelt at",0,9,0.3,0.14,0.0,0.0,1,283
https://toolbelt.heroku.com,0,9,0.21,0.47,0.0,0.0,1,283
.,0,9,0.12,0.7,0.0,0.0,0,283
There are many reasons why you’d want to use a PaaS (Heroku is an atypical PaaS),0,9,0.21,0.17,0.0,0.0,0,283
"to deploy your web application. As a web application programmer, you’ll find the most",0,9,0.21,0.14,0.0,0.0,0,283
direct reason is that your infrastructure and systems layers are now abstracted and man-,0,9,0.21,0.14,0.0,0.0,0,283
aged for you. Although in a large-scale production environment such as in corporate,0,9,0.21,0.14,0.0,0.0,0,283
IT,0,9,0.12,0.83,0.0,0.0,0,283
"infrastructure this is not usually an issue, PaaS has become a boon for smaller compa-",0,9,0.21,0.14,0.0,0.0,0,283
nies and startups where there’s less need for up-front capital cost commitments.,0,9,0.21,0.14,0.0,0.0,0,283
"Once you have downloaded the toolbelt, log into Heroku using the credentials you",0,9,0.21,0.17,0.0,0.0,0,283
received when registering for an account:,0,9,0.3,0.14,0.0,0.01,1,283
heroku login,0,7,0.26,0.14,0.01,0.0,1,283
Enter your Heroku credentials.,0,7,0.26,0.14,0.0,0.0,1,283
264,1,9,0.39,0.06,0.0,0.0,0,284
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,284
C 10,1,7,0.35,0.35,0.0,0.0,1,284
HAPTER,1,6,0.33,0.36,0.0,0.03,1,284
Email: <your email>,0,7,0.26,0.13,0.03,0.0,1,284
Password (typing will be hidden):,0,7,0.26,0.13,0.0,0.0,1,284
Authentication successful.,0,7,0.26,0.13,0.0,0.02,1,284
Figure 10.1 shows how you can deploy the same simple web service to Heroku.,0,9,0.21,0.13,0.02,0.05,0,284
Change code:,0,7,0.26,0.18,0.05,0.0,1,284
get port from Use Godep for,0,7,0.26,0.18,0.0,0.0,1,284
Create Heroku Push code to,0,7,0.17,0.51,0.0,0.0,1,284
dependencies application,0,7,0.17,0.34,0.0,0.0,1,284
Heroku application,0,7,0.17,0.66,0.0,0.0,1,284
environment variable,0,7,0.26,0.16,0.0,0.02,1,284
"Figure 10.1 Steps to deploy a web application on Heroku. First, change the code to use the port from",1,7,0.35,0.13,0.02,0.0,0,284
the environment settings and use Godep to include dependencies. Then create the Heroku application,1,7,0.35,0.13,0.0,0.0,0,284
and push the code to Heroku.,1,7,0.44,0.13,0.0,0.03,1,284
"To deploy the web service, you need to make a simple code change. Remember you",0,9,0.21,0.13,0.03,0.0,0,284
"bound your web server to the address :8080 previously. When deploying on Heroku,",0,9,0.21,0.13,0.0,0.0,0,284
you have no control over the port to use; you must get the port by reading the envi-,0,9,0.21,0.13,0.0,0.0,0,284
"ronment variable PORT . Therefore, instead of this",0,9,0.3,0.13,0.0,0.0,1,284
main function in the server.go file:,0,9,0.21,0.53,0.0,0.01,1,284
func main() {,0,7,0.26,0.13,0.01,0.0,1,284
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,284
"Addr: "":8080"",",0,7,0.26,0.13,0.0,0.0,1,284
},0,7,0.17,0.13,0.0,0.0,0,284
"http.HandleFunc(""/post/"", handlePost)",0,7,0.26,0.13,0.0,0.0,1,284
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,284
},0,7,0.17,0.13,0.0,0.02,0,284
you use this main function:,0,9,0.3,0.13,0.02,0.01,1,284
func main() {,0,7,0.26,0.13,0.01,0.0,1,284
Gets port number from,1,9,0.39,0.59,0.0,0.0,1,284
server := http.Server{,0,7,0.26,0.13,0.0,0.0,1,284
environment variable,1,9,0.39,0.59,0.0,0.0,1,284
"Addr: "":"" + os.Getenv(""PORT""),//",0,7,0.26,0.13,0.0,0.0,1,284
},0,7,0.17,0.13,0.0,0.0,0,284
"http.HandleFunc(""/post/"", handlePost)",0,7,0.26,0.13,0.0,0.0,1,284
server.ListenAndServe(),0,7,0.26,0.13,0.0,0.0,1,284
},0,7,0.17,0.13,0.0,0.02,0,284
"That’s all the code changes you need to make; everything else is the same. Next, you",0,9,0.21,0.13,0.02,0.0,0,284
need to tell Heroku about your web service’s dependencies. Heroku uses godep,0,9,0.21,0.13,0.0,0.0,0,284
( https://github.com/tools/godep,0,9,0.3,0.13,0.0,0.0,1,284
") to manage Go dependencies. To install godep,",0,9,0.21,0.4,0.0,0.0,1,284
use the standard go get,0,9,0.3,0.13,0.0,0.0,1,284
command:,0,9,0.21,0.33,0.0,0.01,1,284
go get github.com/tools/godep,0,7,0.26,0.13,0.01,0.01,1,284
"Once godep is installed, you need to use it to bring in your dependencies. In the root",0,9,0.21,0.13,0.01,0.0,0,284
"directory of your web service, run this command:",0,9,0.3,0.13,0.0,0.01,1,284
godep save,0,7,0.26,0.13,0.01,0.0,1,284
265,1,9,0.3,0.82,0.0,0.0,0,285
Deploying to Heroku,1,9,0.39,0.39,0.0,0.03,1,285
"This command will create a directory named Godeps, retrieve all the dependencies in",0,9,0.21,0.14,0.03,0.0,0,285
"your code, and copy their source code into the directory Godeps/_workspace. It will",0,9,0.21,0.14,0.0,0.0,0,285
also create a file named Godeps.json that lists all your dependencies. This listing,0,9,0.21,0.14,0.0,0.0,0,285
shows an example of the Godeps.json file.,0,9,0.3,0.14,0.0,0.03,1,285
Listing 10.4 Godeps.json file,1,9,0.48,0.17,0.03,0.02,1,285
{,0,7,0.17,0.14,0.02,0.0,0,285
"""ImportPath"": ""github.com/sausheong/ws-h"",",0,7,0.26,0.14,0.0,0.0,1,285
"""GoVersion"": ""go1.4.2"",",0,7,0.26,0.14,0.0,0.0,1,285
"""Deps"": [",0,7,0.26,0.14,0.0,0.0,1,285
{,0,7,0.17,0.14,0.0,0.0,0,285
"""ImportPath"": ""github.com/lib/pq"",",0,7,0.26,0.14,0.0,0.0,1,285
"""Comment"": ""go1.0-cutoff-31-ga33d605"",",0,7,0.26,0.14,0.0,0.0,1,285
"""Rev"": ""a33d6053e025943d5dc89dfa1f35fe5500618df7""",0,7,0.26,0.14,0.0,0.0,1,285
},0,7,0.17,0.14,0.0,0.0,0,285
],0,7,0.17,0.14,0.0,0.0,0,285
},0,7,0.17,0.14,0.0,0.02,0,285
"Because the web service depends only on the Postgres database driver, it lists only that",0,9,0.21,0.14,0.02,0.0,0,285
as a dependency.,0,9,0.3,0.14,0.0,0.0,1,285
"The last thing that you need to do is define a Procfile, shown in the next listing, which",0,9,0.21,0.17,0.0,0.0,0,285
is nothing more than a file that describes which executable or main function to run.,0,9,0.21,0.14,0.0,0.03,0,285
Listing 10.5 Godeps.json file,1,9,0.48,0.17,0.03,0.02,1,285
web: ws-h,0,7,0.26,0.14,0.02,0.02,1,285
That’s it! What the listing says is that the web process is associated with the ws-h,0,9,0.21,0.14,0.02,0.0,0,285
"executable binary, so that’s what’s going to be executed when the Heroku build",0,9,0.21,0.14,0.0,0.0,0,285
completes.,0,9,0.3,0.14,0.0,0.0,1,285
"Now that you have all this in place, the next step is to push everything up to Her-",0,9,0.21,0.17,0.0,0.0,0,285
"oku. Heroku allows you to use different mechanisms to push code, including GitHub",0,9,0.21,0.14,0.0,0.0,0,285
"integration, Dropbox Sync, Heroku’s own",0,9,0.3,0.14,0.0,0.0,1,285
"API s, and standard Git. In this example,",0,9,0.21,0.5,0.0,0.0,1,285
you’ll use standard Git to push your simple web service to Heroku.,0,9,0.3,0.14,0.0,0.0,1,285
"Before you push the code, you must create an application:",0,9,0.3,0.17,0.0,0.02,1,285
heroku create ws-h,0,7,0.26,0.14,0.02,0.02,1,285
"This command will create a Heroku application called ws-h, which will finally be",0,9,0.21,0.14,0.02,0.0,0,285
shown as https://ws-h.herokuapp.com,0,9,0.3,0.14,0.0,0.0,1,285
". Naturally since we’ve used this already, you",0,9,0.21,0.46,0.0,0.0,1,285
"won’t be able to do so again. You can choose another name, or you can drop the name",0,9,0.21,0.14,0.0,0.0,0,285
altogether and let Heroku generate a random application name for you.,0,9,0.3,0.14,0.0,0.02,1,285
heroku create,0,7,0.26,0.14,0.02,0.0,1,285
266,1,9,0.39,0.06,0.0,0.0,0,286
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,286
C 10,1,7,0.35,0.35,0.0,0.0,1,286
HAPTER,1,6,0.33,0.36,0.0,0.03,1,286
Using heroku create will initialize a local Git repository for the web service and add,0,9,0.21,0.13,0.03,0.0,0,286
"the remote Heroku repository. Once you’ve created the application, you can use Git",0,9,0.21,0.13,0.0,0.0,0,286
to push the code to the application:,0,9,0.3,0.13,0.0,0.01,1,286
git push heroku master,0,7,0.26,0.13,0.01,0.01,1,286
"This will push your code to Heroku, triggering a build and deploy. And that’s all you",0,9,0.21,0.13,0.01,0.0,0,286
need to do! Heroku also provides a number of nifty application management tools for,0,9,0.21,0.13,0.0,0.0,0,286
"scaling and managing releases, as well as configuration tools to add new services.",0,9,0.21,0.13,0.0,0.02,0,286
10.3 Deploying to Google App Engine,1,12,0.54,0.06,0.02,0.01,1,286
Another popular PaaS for Go web applications is the Google App Engine,0,9,0.3,0.13,0.01,0.0,1,286
(GAE) .,0,9,0.21,0.77,0.0,0.0,1,286
"Google has a number of services in its Google Cloud Platform suite of products,",0,9,0.21,0.13,0.0,0.0,0,286
including the App Engine and the Compute Engine. The App Engine is a PaaS ser-,0,9,0.21,0.13,0.0,0.0,0,286
"vice; a Compute Engine, like",0,9,0.3,0.13,0.0,0.0,1,286
"AWS ’s EC2 and Digital Ocean’s Droplets, is an IaaS",0,9,0.21,0.39,0.0,0.0,1,286
service. Using EC2 or Droplets isn’t much different from having your own,0,9,0.21,0.13,0.0,0.0,0,286
VM or run-,0,9,0.21,0.74,0.0,0.0,1,286
"ning your own server, and we’ve covered that. This section explores Google’s powerful",0,9,0.21,0.13,0.0,0.0,0,286
"PaaS service, GAE .",0,9,0.3,0.13,0.0,0.0,1,286
There are a number of reasons why you’d use,0,9,0.3,0.15,0.0,0.0,1,286
GAE as compared with any other,0,9,0.21,0.55,0.0,0.0,1,286
"PaaS, including Heroku. The main reasons are performance and scalability.",0,9,0.21,0.13,0.0,0.0,0,286
allows,0,9,0.21,0.77,0.0,0.0,1,286
GAE,0,9,0.12,0.74,0.0,0.0,0,286
you to build applications that can automatically scale and load balance according to its,0,9,0.21,0.13,0.0,0.0,0,286
load. Google also provides a large number of tools and capabilities built into the,0,9,0.21,0.13,0.0,0.0,0,286
GAE .,0,9,0.21,0.79,0.0,0.0,1,286
"For example, it can allow your application to authenticate into Google Accounts and it",0,9,0.21,0.13,0.0,0.0,0,286
"provides services to send emails, create logs, and serve and manipulate images. Inte-",0,9,0.21,0.13,0.0,0.0,0,286
gration into other Google,0,9,0.3,0.13,0.0,0.0,1,286
s is also more straightforward using,0,9,0.21,0.37,0.0,0.0,1,286
.,0,9,0.12,0.7,0.0,0.0,0,286
API,0,9,0.12,0.34,0.0,0.0,0,286
GAE,0,9,0.12,0.66,0.0,0.01,0,286
"With any advantages there are also a number of disadvantages. For one, you have",0,9,0.21,0.15,0.01,0.0,0,286
"read-only access to the filesystem, you can’t have a request lasting more than 60 sec-",0,9,0.21,0.13,0.0,0.0,0,286
"onds ( GAE will kill it if you do), and you can’t have direct network access or make",0,9,0.21,0.13,0.0,0.0,0,286
other kinds of system calls. This means you can’t (at least not easily) access many ser-,0,9,0.21,0.13,0.0,0.0,0,286
vices outside of Google’s sandboxed application environment.,0,9,0.3,0.13,0.0,0.0,1,286
Figure 10.2 shows a high-level overview of the steps for deploying a web application,0,9,0.21,0.15,0.0,0.0,0,286
on the GAE .,0,9,0.3,0.13,0.0,0.04,1,286
Change code: use,0,7,0.26,0.16,0.04,0.0,1,286
Create Create GAE,0,7,0.17,0.36,0.0,0.0,1,286
Push code to,0,7,0.17,0.68,0.0,0.0,1,286
Google libraries app.yml file,0,7,0.26,0.17,0.0,0.0,1,286
application GAE application,0,7,0.17,0.52,0.0,0.03,1,286
Figure 10.2 Steps to deploy on the Google App Engine. First change the code to use Google libraries,1,7,0.35,0.13,0.03,0.0,0,286
and create the app.yml configuration file. Then create the application and push it to the GAE.,1,7,0.35,0.13,0.0,0.03,0,286
"As with all other Google services, you’ll need a Google account to start with. Unlike Her-",0,9,0.21,0.13,0.03,0.0,0,286
"oku, much of the management and servicing of the web application is done through",0,9,0.21,0.13,0.0,0.0,0,286
"the web interface (figure 10.3), called the Google Developer Console (",0,9,0.3,0.13,0.0,0.0,1,286
https://,0,9,0.21,0.76,0.0,0.0,1,286
console.developers.google.com,0,9,0.3,0.13,0.0,0.0,1,286
).,0,9,0.12,0.38,0.0,0.0,0,286
267,1,9,0.3,0.82,0.0,0.0,0,287
Deploying to Google App Engine,1,9,0.53,0.35,0.0,0.36,1,287
Figure 10.3 Use the Google Developer Console to create your GAE web application.,1,7,0.49,0.15,0.36,0.05,0,287
Although a command-line interface is available that’s equivalent to the developer,0,9,0.21,0.14,0.05,0.0,0,287
"console, Google’s command-line tools aren’t integrated, unlike in Heroku. To use",0,9,0.21,0.14,0.0,0.0,0,287
"the GAE , you’ll need to download the appropriate",0,9,0.3,0.14,0.0,0.0,1,287
GAE SDK for Go at https://,0,9,0.21,0.6,0.0,0.0,1,287
cloud.google.com/appengine/downloads,0,9,0.3,0.14,0.0,0.0,1,287
.,0,9,0.12,0.49,0.0,0.03,0,287
Google App Engine and other Google services,1,10,0.5,0.17,0.03,0.01,1,287
GAE and other Google services like the Google Cloud SQL are,0,9,0.3,0.17,0.01,0.0,1,287
not free. Google provides,1,9,0.39,0.63,0.0,0.0,1,287
a 60-day free trial and $300 worth of services during the trial period so you can go,0,9,0.21,0.17,0.0,0.0,0,287
"through the exercises in this chapter without cost. After the trial period, you will have",0,9,0.21,0.17,0.0,0.0,0,287
to pay for the services themselves.,0,9,0.3,0.17,0.0,0.04,1,287
"Once you have the tools in place, you need to configure the datastore for the",0,9,0.21,0.14,0.04,0.0,0,287
GAE . As,0,9,0.21,0.78,0.0,0.0,1,287
"mentioned earlier, Google restricts direct network access so connecting to a",0,9,0.21,0.14,0.0,0.0,0,287
P ost-,0,9,0.21,0.81,0.0,0.0,1,287
"gre SQL server directly isn’t possible. As an alternative, Google provides the Google",0,9,0.21,0.14,0.0,0.0,0,287
"Cloud SQL service, which is based on",0,9,0.3,0.14,0.0,0.0,1,287
M y SQL and is directly accessible through the,0,9,0.21,0.47,0.0,0.0,1,287
cloudsql package. This is what you’ll be using for this section.,0,9,0.3,0.14,0.0,0.0,1,287
To use Google Cloud SQL,0,9,0.3,0.17,0.0,0.0,1,287
", you’ll need to create a database instance using the",0,9,0.21,0.4,0.0,0.0,1,287
"Developer Console (figure 10.4). From the console, you can click the project that you",0,9,0.21,0.14,0.0,0.0,0,287
"created (mine is called ws-g-1234), and then from the left navigation panel, click Stor-",0,9,0.21,0.14,0.0,0.0,0,287
"age, then Cloud SQL . Clicking the New Instance button will give you a number of",0,9,0.21,0.14,0.0,0.0,0,287
"options for creating the database instance. Most of the default options are fine, but",0,9,0.21,0.14,0.0,0.0,0,287
268,1,9,0.39,0.06,0.0,0.0,0,288
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,288
C 10,1,7,0.35,0.35,0.0,0.0,1,288
HAPTER,1,6,0.33,0.36,0.0,0.03,1,288
3. Choose Follow,1,9,0.39,0.32,0.03,0.0,1,288
App Engine App.,1,9,0.53,0.32,0.0,0.41,1,288
1 . Click Storage 2. Select,1,9,0.62,0.15,0.41,0.0,1,288
4. Set up an IPv4,1,9,0.39,0.56,0.0,0.0,1,288
to show the Cloud SQL.,1,9,0.48,0.15,0.0,0.0,1,288
IP address.,1,9,0.39,0.56,0.0,0.0,1,288
storage menu.,1,9,0.48,0.15,0.0,0.02,1,288
Figure 10.4 Creating a Google Cloud SQL database instance using the Developer Console,1,7,0.35,0.13,0.02,0.05,0,288
you need to set the preferred location option to Follow App Engine App and use the,0,9,0.21,0.13,0.05,0.0,0,288
default project application,0,9,0.3,0.13,0.0,0.0,1,288
"ID . If you don’t, your GAE",0,9,0.21,0.36,0.0,0.0,1,288
application won’t be able to,0,9,0.21,0.58,0.0,0.0,1,288
access the database instance.,0,9,0.3,0.13,0.0,0.0,1,288
You’ll also need to add an,0,9,0.3,0.15,0.0,0.0,1,288
"IP v4 address, unless your desktop or laptop (or server),",0,9,0.21,0.37,0.0,0.0,1,288
"as well as the internet provider you’re using, has",0,9,0.3,0.13,0.0,0.0,1,288
IP v6 network connectivity. This is,0,9,0.21,0.55,0.0,0.0,1,288
because Google provides an,0,9,0.3,0.13,0.0,0.0,1,288
IP v6 to your database instance by default and for free,0,9,0.21,0.37,0.0,0.0,1,288
(although an IP v4 address will cost you some money and you won’t have one by default).,0,9,0.21,0.13,0.0,0.0,0,288
"Besides these settings, it’s okay to use the defaults. Just specify a name for your",0,9,0.21,0.15,0.0,0.0,0,288
instance and you’re all set.,0,9,0.3,0.13,0.0,0.0,1,288
"As you may have guessed, with all these modifications, code change is inevitable.",0,9,0.21,0.15,0.0,0.0,0,288
Here’s a high-level list of things you’ll need to do to make your code deployable to,0,9,0.21,0.13,0.0,0.0,0,288
GAE :,0,9,0.21,0.79,0.0,0.01,1,288
main to another package name.,0,9,0.21,0.45,0.01,0.0,1,288
Change the package name from,0,9,0.3,0.18,0.0,0.0,1,288
■,0,4,0.11,0.15,0.0,0.01,0,288
Remove the main function.,0,9,0.3,0.18,0.01,0.0,1,288
■,0,4,0.11,0.15,0.0,0.0,0,288
269,1,9,0.3,0.82,0.0,0.0,0,289
Deploying to Google App Engine,1,9,0.39,0.35,0.0,0.03,1,289
Move the handler registration statement(s) into an init function.,0,9,0.3,0.19,0.03,0.0,1,289
■,0,4,0.11,0.17,0.0,0.01,0,289
Use a M y SQL database driver instead of,0,9,0.3,0.19,0.01,0.0,1,289
P ostgre SQL .,0,9,0.21,0.52,0.0,0.0,1,289
■,0,4,0.11,0.17,0.0,0.01,0,289
Change the SQL queries to,0,9,0.3,0.19,0.01,0.0,1,289
M y SQL format.,0,9,0.21,0.42,0.0,0.0,1,289
■,0,4,0.11,0.17,0.0,0.02,0,289
"Because GAE will take over your entire application, you won’t have control over how",0,9,0.21,0.14,0.02,0.0,0,289
"it’s started or which port it runs on. In fact, you’re not going to be writing a stand-",0,9,0.21,0.14,0.0,0.0,0,289
alone application at all—what you’ll be writing is simply a package to be deployed on,0,9,0.21,0.14,0.0,0.0,0,289
"GAE . As a result, you’ll need to change the package name to something other than",0,9,0.21,0.14,0.0,0.0,0,289
main ( main is only for standalone Go programs).,0,9,0.3,0.14,0.0,0.0,1,289
"Next, remove the main function and move your code into an init function. In other",0,9,0.21,0.17,0.0,0.0,0,289
"words, the main function we had earlier",0,9,0.3,0.14,0.0,0.01,1,289
func main() {,0,7,0.26,0.14,0.01,0.0,1,289
server := http.Server{,0,7,0.26,0.14,0.0,0.0,1,289
"Addr: "":8080"",",0,7,0.26,0.14,0.0,0.0,1,289
},0,7,0.17,0.14,0.0,0.0,0,289
"http.HandleFunc(""/post/"", handlePost)",0,7,0.26,0.14,0.0,0.0,1,289
server.ListenAndServe(),0,7,0.26,0.14,0.0,0.0,1,289
},0,7,0.17,0.14,0.0,0.02,0,289
should be modified and its processing logic placed in an init function:,0,9,0.21,0.14,0.02,0.01,0,289
func init() {,0,7,0.26,0.14,0.01,0.0,1,289
"http.HandleFunc(""/post/"", handlePost)",0,7,0.26,0.14,0.0,0.0,1,289
},0,7,0.17,0.14,0.0,0.02,0,289
"Notice that the code that specifies the starting address and port, as well as the code",0,9,0.21,0.14,0.02,0.0,0,289
"that starts up the web server, is no longer needed.",0,9,0.3,0.14,0.0,0.0,1,289
Switch to a y database driver instead of a,0,9,0.3,0.17,0.0,0.0,1,289
ostgre driver. In data.go you,0,9,0.21,0.58,0.0,0.0,1,289
M SQL,0,9,0.21,0.27,0.0,0.0,1,289
P SQL,0,9,0.21,0.57,0.0,0.01,1,289
need to import a M y SQL database driver and use the correct data connection string:,0,9,0.21,0.14,0.01,0.01,0,289
import (,0,7,0.26,0.14,0.01,0.0,1,289
"""database/sql""",0,7,0.26,0.14,0.0,0.0,1,289
"_ ""github.com/ziutek/mymysql/godrv""",0,7,0.26,0.14,0.0,0.0,1,289
),0,7,0.17,0.14,0.0,0.0,0,289
func init() {,0,7,0.26,0.14,0.0,0.0,1,289
var err error,0,7,0.26,0.14,0.0,0.0,1,289
"Db, err = sql.Open(""mymysql"", ""cloudsql:<app ID>:<instance name>*<database",0,7,0.17,0.14,0.0,0.0,0,289
"name>/<user name>/<password>"")",0,7,0.26,0.17,0.0,0.0,1,289
if err != nil {,0,7,0.26,0.14,0.0,0.0,1,289
panic(err),0,7,0.26,0.14,0.0,0.0,1,289
},0,7,0.17,0.14,0.0,0.0,0,289
},0,7,0.17,0.14,0.0,0.02,0,289
"In addition, you’ll need to switch to the correct",0,9,0.3,0.14,0.02,0.0,1,289
y queries. Although the syn-,0,9,0.21,0.55,0.0,0.0,1,289
M SQL SQL,0,9,0.21,0.53,0.0,0.0,1,289
"tax is similar, there’s enough difference between",0,9,0.3,0.14,0.0,0.0,1,289
M y SQL and P ostgre SQL such that it,0,9,0.21,0.55,0.0,0.0,1,289
"$1 , $2 , and so on to",0,9,0.21,0.68,0.0,0.0,1,289
"won’t work without any changes. For example, instead of using",0,9,0.3,0.14,0.0,0.0,1,289
"? . So, instead of (code in bold)",0,9,0.21,0.55,0.0,0.0,1,289
"represent the replaced variables, you have  to use",0,9,0.3,0.14,0.0,0.01,1,289
"func retrieve(id int) (post Post, err error) {",0,7,0.26,0.14,0.01,0.0,1,289
post = Post{},0,7,0.26,0.14,0.0,0.0,1,289
270,1,9,0.39,0.06,0.0,0.0,0,290
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,290
C 10,1,7,0.35,0.35,0.0,0.0,1,290
HAPTER,1,6,0.33,0.36,0.0,0.03,1,290
"err = Db.QueryRow("" select id, content, author from posts where id =",1,7,0.44,0.13,0.03,0.0,1,290
➥,0,10,0.23,0.14,0.0,0.0,0,290
"$1 "", id).Scan(&post.Id, &post.Content, &post.Author)",1,7,0.44,0.17,0.0,0.0,1,290
return,0,7,0.26,0.13,0.0,0.0,1,290
},0,7,0.17,0.13,0.0,0.02,0,290
change the query to (code in bold),0,9,0.3,0.13,0.02,0.0,1,290
SQL,0,9,0.12,0.22,0.0,0.0,0,290
Changing $n to ? in,1,9,0.39,0.69,0.0,0.0,1,290
"func retrieve(id int) (post Post, err error) {",0,7,0.26,0.13,0.0,0.0,1,290
MySQL query format,1,9,0.39,0.68,0.0,0.0,1,290
post = Post{},0,7,0.26,0.13,0.0,0.0,1,290
"err = Db.QueryRow("" select id, content, author from posts where id = ?",1,7,0.44,0.13,0.0,0.0,1,290
""",",0,7,0.08,0.77,0.0,0.0,0,290
➥,0,10,0.23,0.14,0.0,0.0,0,290
"id).Scan(&post.Id, &post.Content, &post.Author)",0,7,0.26,0.17,0.0,0.0,1,290
return,0,7,0.26,0.13,0.0,0.0,1,290
},0,7,0.17,0.13,0.0,0.02,0,290
"With all the code changes done, the next action is to create an app.yaml file, shown in",0,9,0.21,0.13,0.02,0.0,0,290
"the following listing, to describe the application.",0,9,0.3,0.13,0.0,0.03,1,290
Listing 10.6 app.yaml file for deploying to GAE,1,9,0.48,0.15,0.03,0.02,1,290
application: ws-g-1234,0,7,0.26,0.13,0.02,0.0,1,290
version: 1,0,7,0.26,0.13,0.0,0.0,1,290
runtime: go,0,7,0.26,0.13,0.0,0.0,1,290
api_version: go1,0,7,0.26,0.13,0.0,0.01,1,290
handlers:,0,7,0.26,0.13,0.01,0.0,1,290
- url: /.*,0,7,0.26,0.13,0.0,0.0,1,290
script: _go_app,0,7,0.26,0.13,0.0,0.02,1,290
"The file is quite self-descriptive, and the only thing you have to change in this file, nor-",0,9,0.21,0.13,0.02,0.0,0,290
"mally, should be the name of the application. And that’s it! Now let’s test our brand-",0,9,0.21,0.13,0.0,0.0,0,290
new GAE web application.,0,9,0.3,0.13,0.0,0.0,1,290
"You may realize by now that with all these changes, there’s no chance at all that",0,9,0.21,0.15,0.0,0.0,0,290
you’ll be able to run this application on your development machine. Nothing to fear.,0,9,0.21,0.13,0.0,0.0,0,290
Google provides developers with a,0,9,0.3,0.13,0.0,0.0,1,290
GAE SDK that allows developers to run the applica-,0,9,0.21,0.41,0.0,0.0,1,290
tion locally.,0,9,0.3,0.13,0.0,0.0,1,290
Assuming that you’ve installed the,0,9,0.3,0.15,0.0,0.0,1,290
SDK by following the instructions on the down-,0,9,0.21,0.44,0.0,0.0,1,290
"load site, you can run your",0,9,0.3,0.13,0.0,0.0,1,290
GAE web application by issuing this command on your con-,0,9,0.21,0.35,0.0,0.0,1,290
"sole, in the application root directory:",0,9,0.3,0.13,0.0,0.01,1,290
goapp serve,0,7,0.26,0.13,0.01,0.01,1,290
The SDK provides the environment that’s needed to run your web application locally,0,9,0.21,0.13,0.01,0.0,0,290
so you can test the application. It also provides an admin site running locally to,0,9,0.21,0.13,0.0,0.0,0,290
inspect what you’ve just written. Just go to http://localhost:8000 to look at the admin,0,9,0.21,0.13,0.0,0.0,0,290
"site. Unfortunately, as of this writing Cloud",0,9,0.3,0.13,0.0,0.0,1,290
SQL isn’t supported in the development,0,9,0.21,0.49,0.0,0.0,1,290
"environment, so you can’t test the web service locally. A good alternative is to switch to",0,9,0.21,0.13,0.0,0.0,0,290
"a local M y SQL server for testing, and then to the Cloud",0,9,0.3,0.13,0.0,0.0,1,290
SQL database for production.,0,9,0.21,0.58,0.0,0.0,1,290
"When you’re happy with your work, you can deploy it to Google’s servers. Deploy-",0,9,0.21,0.15,0.0,0.0,0,290
ment is easy by issuing this command:,0,9,0.3,0.13,0.0,0.01,1,290
goapp deploy,0,7,0.26,0.13,0.01,0.0,1,290
271,1,9,0.3,0.82,0.0,0.0,0,291
Deploying to Docker,1,9,0.39,0.39,0.0,0.03,1,291
"The SDK will push your code to Google’s servers, compile it, and deploy it. And if",0,9,0.21,0.14,0.03,0.0,0,291
"everything is fine, your application will be live on the internet! Assuming your applica-",0,9,0.21,0.14,0.0,0.0,0,291
"tion is named ws-g-1234 (like mine), your application will be at",0,9,0.3,0.14,0.0,0.0,1,291
http://ws-g-,0,9,0.21,0.75,0.0,0.0,1,291
1234.appspot.com .,0,9,0.3,0.14,0.0,0.0,1,291
Let’s test our newly deployed simple web service. Use curl and send a,0,9,0.3,0.17,0.0,0.0,1,291
POST request,0,9,0.21,0.73,0.0,0.0,1,291
to the server to create a record:,0,9,0.3,0.14,0.0,0.01,1,291
"curl -i -X POST -H ""Content-Type: application/json""  -d '{""content"":""My first",0,7,0.17,0.14,0.01,0.0,0,291
"post"",""author"":""Sau Sheong""}' http://ws-g-1234.appspot.com/post/",0,7,0.26,0.19,0.0,0.0,1,291
HTTP/1.1 200 OK,0,7,0.26,0.14,0.0,0.0,1,291
Content-Type: text/html; charset=utf-8,0,7,0.26,0.14,0.0,0.0,1,291
"Date: Sat, 01 Aug 2015 06:46:59 GMT",0,7,0.26,0.14,0.0,0.0,1,291
Server: Google Frontend,0,7,0.26,0.14,0.0,0.0,1,291
Content-Length: 0,0,7,0.26,0.14,0.0,0.0,1,291
"Alternate-Protocol: 80:quic,p=0",0,7,0.26,0.14,0.0,0.02,1,291
"Now, use curl again to get the same record:",0,9,0.3,0.14,0.02,0.01,1,291
curl -i -X GET http://ws-g-1234.appspot.com/post/1,0,7,0.26,0.14,0.01,0.0,1,291
HTTP/1.1 200 OK,0,7,0.26,0.14,0.0,0.0,1,291
Content-Type: application/json,0,7,0.26,0.14,0.0,0.0,1,291
"Date: Sat, 01 Aug 2015 06:44:29 GMT",0,7,0.26,0.14,0.0,0.0,1,291
Server: Google Frontend,0,7,0.26,0.14,0.0,0.0,1,291
Content-Length: 69,0,7,0.26,0.14,0.0,0.0,1,291
"Alternate-Protocol: 80:quic,p=0",0,7,0.26,0.14,0.0,0.02,1,291
{,0,7,0.17,0.14,0.02,0.0,0,291
"""id"": 1,",0,7,0.26,0.14,0.0,0.0,1,291
"""content"": ""My first post"",",0,7,0.26,0.14,0.0,0.0,1,291
"""author"": ""Sau Sheong""",0,7,0.26,0.14,0.0,0.0,1,291
},0,7,0.17,0.14,0.0,0.02,0,291
The GAE is powerful and has a lot of capabilities to help developers create and deploy,0,9,0.21,0.14,0.02,0.0,0,291
"scalable web applications to the internet. But it’s Google’s playground, and if you want",0,9,0.21,0.14,0.0,0.0,0,291
"to play in it, you have to follow its rules.",0,9,0.3,0.14,0.0,0.02,1,291
10.4 Deploying to Docker,1,12,0.54,0.07,0.02,0.01,1,291
The previous section included a brief introduction to Docker and discussed how you,0,9,0.21,0.14,0.01,0.0,0,291
can dockerize your Go web application and push it out as a Docker container on the,0,9,0.21,0.14,0.0,0.0,0,291
many Docker hosting services available. This section will focus entirely on deploying a,0,9,0.21,0.14,0.0,0.0,0,291
simple Go web service to a local Docker host and then to a Docker host on the cloud.,0,9,0.21,0.14,0.0,0.02,0,291
10.4.1 What is Docker?,1,10,0.5,0.07,0.02,0.01,1,291
Docker is quite a phenomenon. Since its release as an open source project by PaaS,0,9,0.21,0.14,0.01,0.0,0,291
"company dotCloud in 2013, its adoption by large and small companies has been amaz-",0,9,0.21,0.14,0.0,0.0,0,291
"ing. Technology companies like Google,",0,9,0.3,0.14,0.0,0.0,1,291
", and Microsoft have embraced it.",0,9,0.21,0.52,0.0,0.0,1,291
AWS,0,9,0.12,0.49,0.0,0.0,0,291
AWS,0,9,0.12,0.81,0.0,0.01,0,291
has the EC2 C ontainer S,0,9,0.3,0.14,0.01,0.0,1,291
"ervice, Google provides the Google Container Engine, and",0,9,0.21,0.35,0.0,0.0,1,291
"many other cloud providers like Digital Ocean, Rackspace, and even",0,9,0.3,0.14,0.0,0.0,1,291
IBM have thrown,0,9,0.21,0.71,0.0,0.0,1,291
272,1,9,0.39,0.06,0.0,0.0,0,292
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,292
C 10,1,7,0.35,0.35,0.0,0.0,1,292
HAPTER,1,6,0.33,0.36,0.0,0.03,1,292
VM: Emulates,1,9,0.48,0.15,0.03,0.0,1,292
Container: Virtualization at,1,9,0.39,0.47,0.0,0.0,1,292
complete computer,1,9,0.48,0.15,0.0,0.0,1,292
OS level; resources partitioned,1,9,0.39,0.47,0.0,0.0,1,292
"system, including OS",1,9,0.48,0.15,0.0,0.0,1,292
for multiple user space instances,1,9,0.39,0.47,0.0,0.07,1,292
App A App B App A,0,7,0.26,0.16,0.07,0.0,1,292
App C,0,7,0.17,0.4,0.0,0.03,1,292
Libraries Libraries,0,7,0.26,0.19,0.03,0.0,1,292
App A App A App B,0,7,0.17,0.51,0.0,0.0,1,292
App C,0,7,0.17,0.75,0.0,0.01,1,292
Guest OS Guest OS,0,7,0.26,0.18,0.01,0.0,1,292
Libraries Libraries,0,7,0.17,0.54,0.0,0.0,1,292
Libraries,0,7,0.17,0.75,0.0,0.02,1,292
Hypervisor,0,7,0.17,0.26,0.02,0.0,1,292
Container engine,0,7,0.17,0.6,0.0,0.03,1,292
Host OS,0,7,0.17,0.27,0.03,0.0,1,292
Host OS,0,7,0.17,0.62,0.0,0.04,1,292
Machine,0,7,0.17,0.27,0.04,0.0,1,292
Machine,0,7,0.17,0.62,0.0,0.04,1,292
"Figure 10.5 Containers are a different take on infrastructure virtualization, providing virtualization",1,7,0.35,0.13,0.04,0.0,0,292
at the OS level and allowing resources to be partitioned through multiple isolated user space instance,1,7,0.35,0.13,0.0,0.04,0,292
in support for Docker. Traditional companies like,0,9,0.3,0.13,0.04,0.0,1,292
BBC and banks such as,0,9,0.21,0.55,0.0,0.0,1,292
ING and,0,9,0.21,0.76,0.0,0.0,1,292
Goldman Sachs have started using Docker internally.,0,9,0.3,0.13,0.0,0.0,1,292
"Docker is an open platform for building, shipping, and running applications on",0,9,0.21,0.15,0.0,0.0,0,292
containers. Containers aren’t a new technology—they’ve been around since the early,0,9,0.21,0.13,0.0,0.0,0,292
"days of Unix, and Linux containers, which Docker was originally based on, were intro-",0,9,0.21,0.13,0.0,0.0,0,292
duced in 2008. Heroku dynos are also containers.,0,9,0.3,0.13,0.0,0.0,1,292
Containers are a different spin on the virtualization of infrastructure (figure 10.5).,0,9,0.21,0.15,0.0,0.0,0,292
"VM s provide emulation of the complete computer system, including the entire",0,9,0.21,0.13,0.0,0.0,0,292
"OS , but",0,9,0.21,0.77,0.0,0.0,1,292
containers provide virtualization at the,0,9,0.3,0.13,0.0,0.0,1,292
"OS level, allowing computer resources to be",0,9,0.21,0.46,0.0,0.0,1,292
"partitioned through multiple isolated user space instances. As a result, the resource",0,9,0.21,0.13,0.0,0.0,0,292
requirements of a container are much less than a,0,9,0.3,0.13,0.0,0.0,1,292
VM and the container is much faster,0,9,0.21,0.53,0.0,0.0,1,292
to start up and deploy.,0,9,0.3,0.13,0.0,0.0,1,292
"Docker is essentially software for managing containers, making it easier for devel-",0,9,0.21,0.15,0.0,0.0,0,292
opers to use them. It’s not the only available software to do that—there are many oth-,0,9,0.21,0.13,0.0,0.0,0,292
"ers, including chroot, Linux containers",0,9,0.3,0.13,0.0,0.0,1,292
"(LXC) , Solaris Zones, C ore",0,9,0.21,0.46,0.0,0.0,1,292
"OS , and lmctfy—",0,9,0.21,0.68,0.0,0.0,1,292
but it’s probably the most well-known to-date.,0,9,0.3,0.13,0.0,0.02,1,292
10.4.2 Installing Docker,1,10,0.5,0.06,0.02,0.01,1,292
"Docker only works on Linux-based OSes today, though there are workarounds",0,9,0.21,0.13,0.01,0.0,0,292
to make the Docker tool available on,0,9,0.3,0.13,0.0,0.0,1,292
"OS X and Windows. To install Docker, go to",0,9,0.21,0.45,0.0,0.0,1,292
273,1,9,0.3,0.82,0.0,0.0,0,293
Deploying to Docker,1,9,0.39,0.39,0.0,0.03,1,293
https://docs.docker.com/engine/installation,0,9,0.3,0.14,0.03,0.0,1,293
", select where you want to install Docker,",0,9,0.21,0.51,0.0,0.0,1,293
"and follow the instructions. For Ubuntu Server 14.04, the instruction is as simple as this:",0,9,0.21,0.14,0.0,0.01,0,293
wget -qO- https://get.docker.com/ | sh,0,7,0.26,0.14,0.01,0.01,1,293
"To verify that Docker is installed properly, run this command on the console:",0,9,0.21,0.14,0.01,0.01,0,293
sudo docker run hello-world,0,7,0.26,0.14,0.01,0.01,1,293
This command will pull the hello-world image from a remote repository and run it as,0,9,0.21,0.14,0.01,0.0,0,293
a container locally.,0,9,0.3,0.14,0.0,0.02,1,293
10.4.3 Docker concepts and components,1,10,0.5,0.07,0.02,0.01,1,293
"The Docker engine , or Docker (figure",1,9,0.48,0.14,0.01,0.0,1,293
"10.6), consists of a number of compo-",0,9,0.3,0.14,0.0,0.0,1,293
"nents. The first, which you used earlier",0,9,0.3,0.14,0.0,0.0,1,293
"in testing the Docker installation, is",0,9,0.3,0.14,0.0,0.0,1,293
the Docker client . This is the command-,1,9,0.48,0.14,0.0,0.0,1,293
line interface that allows you to inter-,0,9,0.3,0.14,0.0,0.0,1,293
Docker host,0,8,0.19,0.49,0.0,0.0,1,293
act with the Docker daemon.,0,9,0.3,0.14,0.0,0.0,1,293
The Docker daemon is the process,1,9,0.48,0.17,0.0,0.0,1,293
that sits on the host,0,9,0.3,0.14,0.0,0.0,1,293
that answers,0,9,0.21,0.35,0.0,0.0,1,293
OS,0,9,0.12,0.33,0.0,0.0,0,293
Docker client,0,7,0.17,0.63,0.0,0.0,1,293
requests for service and orchestrates,0,9,0.3,0.14,0.0,0.0,1,293
the management of containers.,0,9,0.3,0.14,0.0,0.0,1,293
Docker,1,9,0.39,0.41,0.0,0.0,1,293
"containers , containers for short, are",1,9,0.48,0.14,0.0,0.0,1,293
Docker daemon,0,7,0.17,0.62,0.0,0.0,1,293
lightweight virtualization of all the pro-,0,9,0.3,0.14,0.0,0.0,1,293
grams that are needed to run a particu-,0,9,0.3,0.14,0.0,0.0,1,293
Docker containers,0,7,0.17,0.61,0.0,0.0,1,293
"lar application, including the",0,9,0.3,0.14,0.0,0.0,1,293
OS .,0,9,0.21,0.43,0.0,0.0,1,293
Containers are lightweight because,0,9,0.3,0.14,0.0,0.0,1,293
though the application and other bun-,0,9,0.3,0.14,0.0,0.0,1,293
dled programs believe they have the,0,9,0.3,0.14,0.0,0.0,1,293
(and in fact the whole hardware) to,0,9,0.3,0.17,0.0,0.0,1,293
OS,0,9,0.21,0.14,0.0,0.01,0,293
"themselves, they actually",0,9,0.3,0.14,0.01,0.0,1,293
don’t.,0,9,0.21,0.41,0.0,0.0,1,293
"Instead, the share the same host",0,9,0.3,0.14,0.0,0.0,1,293
OS .,0,9,0.21,0.41,0.0,0.0,1,293
Docker containers are built on,0,9,0.3,0.17,0.0,0.0,1,293
Docker images Dockerfile,0,7,0.17,0.62,0.0,0.01,1,293
"Docker images , which are read-only tem-",1,9,0.48,0.14,0.01,0.0,1,293
plates that help to launch containers.,0,9,0.3,0.14,0.0,0.0,1,293
You run containers from images.,0,9,0.3,0.14,0.0,0.0,1,293
Docker images can be built in different,0,9,0.3,0.14,0.0,0.0,1,293
Docker,0,7,0.17,0.64,0.0,0.0,1,293
registry,0,7,0.17,0.64,0.0,0.0,1,293
ways. One way of doing it involves,0,9,0.3,0.14,0.0,0.0,1,293
using a set of instructions contained in,0,9,0.3,0.14,0.0,0.0,1,293
Figure 10.6 The Docker engine consists of the,1,7,0.35,0.49,0.0,0.0,1,293
a single file called the Dockerfile.,0,9,0.3,0.14,0.0,0.0,1,293
"Docker client, the Docker daemon, and various",1,7,0.35,0.49,0.0,0.0,1,293
Docker images can be stored locally,0,9,0.3,0.17,0.0,0.0,1,293
"Docker containers, which are instantiated as Docker",1,7,0.35,0.49,0.0,0.0,1,293
in the same computer as the Docker,0,9,0.3,0.14,0.0,0.0,1,293
images. Docker images can be created through,1,7,0.35,0.49,0.0,0.0,1,293
"daemon (also called the Docker host),",0,9,0.3,0.14,0.0,0.0,1,293
Dockerfiles and can be stored in the Docker registry.,1,7,0.35,0.49,0.0,0.0,1,293
274,1,9,0.39,0.06,0.0,0.0,0,294
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,294
C 10,1,7,0.35,0.35,0.0,0.0,1,294
HAPTER,1,6,0.33,0.36,0.0,0.03,1,294
or they can be hosted in a,0,9,0.3,0.13,0.03,0.0,1,294
"Docker registry , a repository of Docker images. You can run",1,9,0.39,0.35,0.0,0.0,1,294
your own private Docker registry or use,0,9,0.3,0.13,0.0,0.0,1,294
Docker Hub ( https://hub.docker.com,1,9,0.39,0.46,0.0,0.0,1,294
) as your,0,9,0.21,0.75,0.0,0.0,1,294
"registry. Docker Hub hosts both public and private Docker images, though the latter",0,9,0.21,0.13,0.0,0.0,0,294
usually requires a subscription.,0,9,0.3,0.13,0.0,0.0,1,294
If you install Docker on a Linux,0,9,0.3,0.15,0.0,0.0,1,294
"OS like Ubuntu, the Docker daemon and the",0,9,0.21,0.44,0.0,0.0,1,294
"Docker client are installed in the same machine. With other types of OSes, Docker can",0,9,0.21,0.13,0.0,0.0,0,294
install the client on one type of,0,9,0.3,0.13,0.0,0.0,1,294
"OS (for example, OS X or Windows), and the daemon",0,9,0.21,0.39,0.0,0.0,1,294
"will be installed somewhere else, usually in a",0,9,0.3,0.13,0.0,0.0,1,294
VM sitting in that OS . An example of this,0,9,0.21,0.49,0.0,0.0,1,294
is when you install Docker on,0,9,0.3,0.13,0.0,0.0,1,294
"OS X , the Docker client is installed in",0,9,0.21,0.39,0.0,0.0,1,294
OS X and the,0,9,0.21,0.71,0.0,0.0,1,294
Docker daemon will be installed in a,0,9,0.3,0.13,0.0,0.0,1,294
VM inside VirtualBox (an x86-based hypervisor).,0,9,0.21,0.43,0.0,0.0,1,294
Docker containers are run from Docker images and run on the Docker host.,0,9,0.21,0.15,0.0,0.0,0,294
"Now that you have an overall understanding of Docker, let’s see how you can",0,9,0.21,0.15,0.0,0.0,0,294
deploy a simple Go web service into a Docker container. We’ll be using the same sim-,0,9,0.21,0.13,0.0,0.0,0,294
ple web service we’ve used in the previous three sections.,0,9,0.3,0.13,0.0,0.02,1,294
10.4.4 Dockerizing a Go web application,1,10,0.5,0.06,0.02,0.01,1,294
"Despite the plethora of technologies, dockerizing a Go web application is surprisingly",0,9,0.21,0.13,0.01,0.0,0,294
easy. There’s no need for messing with the code because the web service will have full,0,9,0.21,0.13,0.0,0.0,0,294
"access to the whole container, so the only work is entirely in the configuration and use",0,9,0.21,0.13,0.0,0.0,0,294
of Docker. Figure 10.7 shows a high-level overview of the steps for dockerizing your,0,9,0.21,0.13,0.0,0.0,0,294
web application and deploying it both locally and to a cloud provider.,0,9,0.3,0.13,0.0,0.04,1,294
Build Docker Create Docker,0,6,0.24,0.19,0.04,0.0,1,294
Create Docker Connect to,0,6,0.15,0.4,0.0,0.0,1,294
Build Docker Start Docker,0,6,0.15,0.62,0.0,0.0,1,294
Create image with container from,0,6,0.24,0.1,0.0,0.0,1,294
host in cloud remote,0,6,0.15,0.41,0.0,0.0,1,294
image in container in,0,6,0.15,0.64,0.0,0.0,1,294
Dockerfile Dockerfile,0,6,0.24,0.09,0.0,0.0,1,294
Docker image provider,0,6,0.15,0.29,0.0,0.0,1,294
Docker host remote host,0,6,0.15,0.52,0.0,0.0,1,294
remote host,0,6,0.15,0.73,0.0,0.05,1,294
Deploy to local,0,7,0.26,0.17,0.05,0.0,1,294
Deploy to cloud provider,0,7,0.17,0.53,0.0,0.01,1,294
Figure 10.7 Steps to dockerize and deploy a Go web application locally and to a cloud provider. To dockerize an,1,7,0.35,0.06,0.01,0.0,0,294
"application locally, use a Dockerfile to create the image and then start a container from the image. To move the",1,7,0.35,0.06,0.0,0.0,0,294
"image to the cloud, create a Docker host in the cloud provider, and then connect to it, build the image in the remote",1,7,0.35,0.06,0.0,0.0,0,294
"host, and start a container from it.",1,7,0.44,0.06,0.0,0.03,1,294
"For this section, we’ll use the name ws-d as the name of the web service. First, shown in",0,9,0.21,0.13,0.03,0.0,0,294
"the next listing, create a Dockerfile file in the root application directory.",0,9,0.21,0.13,0.0,0.03,0,294
Listing 10.7 Dockerfile for simple web service,1,9,0.48,0.15,0.03,0.02,1,294
FROM golang,0,7,0.26,0.13,0.02,0.0,1,294
Starts from a Debian image,1,9,0.39,0.68,0.0,0.0,1,294
with Go installed and a,1,9,0.39,0.68,0.0,0.0,1,294
ADD . /go/src/github.com/sausheong/ws-d,0,7,0.26,0.13,0.0,0.0,1,294
GOPATH configured at /go.,1,9,0.39,0.68,0.0,0.0,1,294
WORKDIR /go/src/github.com/sausheong/ws-d,0,7,0.26,0.13,0.0,0.0,1,294
Copies the local package files,1,9,0.39,0.55,0.0,0.0,1,294
to the container’s workspace.,1,9,0.39,0.55,0.0,0.0,1,294
275,1,9,0.3,0.82,0.0,0.0,0,295
Deploying to Docker,1,9,0.39,0.39,0.0,0.03,1,295
RUN go get github.com/lib/pq,0,7,0.26,0.14,0.03,0.0,1,295
Builds the,1,9,0.48,0.02,0.0,0.0,1,295
RUN go install github.com/sausheong/ws-d,0,7,0.26,0.14,0.0,0.0,1,295
ws-d,1,9,0.48,0.05,0.0,0.0,1,295
Runs the ws-d command by default when the container starts.,1,9,0.39,0.63,0.0,0.0,1,295
command,1,9,0.48,0.02,0.0,0.0,1,295
ENTRYPOINT /go/bin/ws-d,0,7,0.26,0.14,0.0,0.0,1,295
inside the,1,9,0.48,0.02,0.0,0.0,1,295
Documents that the,1,9,0.39,0.41,0.0,0.0,1,295
container.,1,9,0.48,0.02,0.0,0.0,1,295
service listens on port 8080.,1,9,0.39,0.41,0.0,0.0,1,295
EXPOSE 8080,0,7,0.26,0.14,0.0,0.02,1,295
"The first line tells Docker to start from the golang image, which is a Debian image",0,9,0.21,0.14,0.02,0.0,0,295
"with the latest Go installed, and a workspace configured at /go. The next two lines",0,9,0.21,0.14,0.0,0.0,0,295
copy the local code (in the current directory) to the container and set the working,0,9,0.21,0.14,0.0,0.0,0,295
RUN command to tell Docker to get the,0,9,0.21,0.52,0.0,0.0,1,295
"directory accordingly. After that, you use the",0,9,0.3,0.14,0.0,0.0,1,295
"P ostgre SQL driver and build the web service code, placing the executable binaries in",0,9,0.21,0.14,0.0,0.0,0,295
ENTRYPOINT command to tell Docker to run,0,9,0.21,0.47,0.0,0.0,1,295
"/go/bin. Once you have that, use the",0,9,0.3,0.14,0.0,0.0,1,295
"/go/bin/ws-d by default whenever the container is started. Finally, use",0,9,0.21,0.14,0.0,0.0,0,295
EXPOSE to,0,9,0.21,0.76,0.0,0.0,1,295
expose the port 8080 to other containers. Note that this doesn’t open up port 8080 to,0,9,0.21,0.14,0.0,0.0,0,295
the public; it simply opens up the port to other containers in the same machine.,0,9,0.21,0.14,0.0,0.0,0,295
Now build the image from the Dockerfile:,0,9,0.3,0.17,0.0,0.01,1,295
docker build –t ws-d .,0,7,0.26,0.14,0.01,0.01,1,295
This command will execute the Dockerfile and build a local image based on the,0,9,0.21,0.14,0.01,0.0,0,295
docker images command and,0,9,0.21,0.59,0.0,0.0,1,295
"instructions in it. Once this is done, you can issue the",0,9,0.3,0.14,0.0,0.0,1,295
you should see this:,0,9,0.3,0.14,0.0,0.01,1,295
REPOSITORY     TAG          IMAGE ID         CREATED          VIRTUAL SIZE,0,7,0.17,0.14,0.01,0.0,0,295
ws-d           latest       65e8437fce6b     10 minutes ago   534.7 MB,0,7,0.26,0.14,0.0,0.02,1,295
"Now that you have the image, you can now run the image to create and start the",0,9,0.21,0.14,0.02,0.0,0,295
container:,0,9,0.3,0.14,0.0,0.01,1,295
docker run --publish 80:8080 --name simple_web_service --rm  ws-d,0,7,0.26,0.14,0.01,0.01,1,295
"This code will create a container, using the name simple_web_service",0,9,0.3,0.14,0.01,0.0,1,295
from the image,0,9,0.21,0.72,0.0,0.0,1,295
ws-d. The flag --publish 80:8080,0,9,0.3,0.14,0.0,0.0,1,295
opens up the HTTP port 80 and maps it to the,0,9,0.21,0.45,0.0,0.0,1,295
--rm tells Docker that once the container,0,9,0.21,0.5,0.0,0.0,1,295
"exposed port 8080 earlier, whereas the flag",0,9,0.3,0.14,0.0,0.0,1,295
"exits, it should be removed. If this flag isn’t set, when the container exits it will still",0,9,0.21,0.14,0.0,0.0,0,295
remain and can be simply started up again. To see whether your container has been,0,9,0.21,0.14,0.0,0.0,0,295
"created, issue",0,9,0.3,0.14,0.0,0.01,1,295
docker ps,0,7,0.26,0.14,0.01,0.01,1,295
You should see your container in the list of active containers:,0,9,0.3,0.14,0.01,0.01,1,295
CONTAINER ID  IMAGE ...  PORTS                  NAMES,0,7,0.26,0.14,0.01,0.0,1,295
eeb674e289a4  ws-d  ...  0.0.0.0:80->8080/tcp   simple_web_service,0,7,0.26,0.14,0.0,0.0,1,295
276,1,9,0.39,0.06,0.0,0.0,0,296
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,296
C 10,1,7,0.35,0.35,0.0,0.0,1,296
HAPTER,1,6,0.33,0.36,0.0,0.03,1,296
"Some of the columns have been omitted to fit the page, but you can see that your con-",0,9,0.21,0.13,0.03,0.0,0,296
tainer is now running on the local Docker host. You can run a quick test to see if your,0,9,0.21,0.13,0.0,0.0,0,296
service works. Use curl and send a,0,9,0.3,0.13,0.0,0.0,1,296
POST request to the server to create a record:,0,9,0.21,0.41,0.0,0.01,1,296
"curl -i -X POST -H ""Content-Type: application/json""  -d '{""content"":""My first",0,7,0.17,0.13,0.01,0.0,0,296
"post"",""author"":""Sau Sheong""}' http://127.0.0.1/post/",0,7,0.26,0.17,0.0,0.0,1,296
HTTP/1.1 200 OK,0,7,0.26,0.13,0.0,0.0,1,296
Content-Type: text/html; charset=utf-8,0,7,0.26,0.13,0.0,0.0,1,296
"Date: Sat, 01 Aug 2015 06:46:59 GMT",0,7,0.26,0.13,0.0,0.0,1,296
Server: Google Frontend,0,7,0.26,0.13,0.0,0.0,1,296
Content-Length: 0,0,7,0.26,0.13,0.0,0.0,1,296
"Alternate-Protocol: 80:quic,p=0",0,7,0.26,0.13,0.0,0.02,1,296
"Now, use curl again to get the same record:",0,9,0.3,0.13,0.02,0.01,1,296
curl -i -X GET http://127.0.0.1/post/1,0,7,0.26,0.13,0.01,0.0,1,296
HTTP/1.1 200 OK,0,7,0.26,0.13,0.0,0.0,1,296
Content-Type: application/json,0,7,0.26,0.13,0.0,0.0,1,296
"Date: Sat, 01 Aug 2015 06:44:29 GMT",0,7,0.26,0.13,0.0,0.0,1,296
Server: Google Frontend,0,7,0.26,0.13,0.0,0.0,1,296
Content-Length: 69,0,7,0.26,0.13,0.0,0.0,1,296
"Alternate-Protocol: 80:quic,p=0",0,7,0.26,0.13,0.0,0.01,1,296
{,0,7,0.17,0.13,0.01,0.0,0,296
"""id"": 1,",0,7,0.26,0.13,0.0,0.0,1,296
"""content"": ""My first post"",",0,7,0.26,0.13,0.0,0.0,1,296
"""author"": ""Sau Sheong""",0,7,0.26,0.13,0.0,0.0,1,296
},0,7,0.17,0.13,0.0,0.01,0,296
10.4.5 Pushing your Docker container to the internet,1,10,0.5,0.06,0.01,0.01,1,296
"Dockerizing the simple web service sounds great, but it’s still running locally. What",0,9,0.21,0.13,0.01,0.0,0,296
you want is to have it running on the internet. There are a number of ways of doing,0,9,0.21,0.13,0.0,0.0,0,296
"this, but using the Docker machine is probably the most simple (at the moment,",0,9,0.21,0.13,0.0,0.0,0,296
because Docker is still evolving).,0,9,0.3,0.13,0.0,0.0,1,296
"Docker machine is a command-line interface that allows you to create Docker hosts,",1,9,0.39,0.15,0.0,0.0,0,296
"either locally or on cloud providers, both public and private. As of this writing, the list",0,9,0.21,0.13,0.0,0.0,0,296
of public cloud providers include,0,9,0.3,0.13,0.0,0.0,1,296
"AWS , Digital Ocean, Google Compute Engine,",0,9,0.21,0.41,0.0,0.0,1,296
IBM,0,9,0.12,0.79,0.0,0.0,0,296
"Softlayer, Microsoft Azure, Rackspace, Exoscale, and",0,9,0.3,0.13,0.0,0.0,1,296
VMW are vCloud Air. It can also,0,9,0.21,0.57,0.0,0.0,1,296
"create hosts on private clouds, including clouds running on OpenStack,",0,9,0.3,0.13,0.0,0.0,1,296
"are, and",0,9,0.21,0.76,0.0,0.0,1,296
VMW,0,9,0.12,0.72,0.0,0.0,0,296
Microsoft Hyper-V (which covers most of the private cloud infrastructure to date).,0,9,0.21,0.13,0.0,0.0,0,296
Docker Machine isn’t installed along with the main Docker installation; you need,0,9,0.21,0.15,0.0,0.0,0,296
to install it separately. You can install it by either cloning the repository from,0,9,0.21,0.13,0.0,0.0,0,296
https://,0,9,0.21,0.76,0.0,0.0,1,296
github.com/docker/machine,0,9,0.3,0.13,0.0,0.0,1,296
or downloading the binary for your platform from,0,9,0.21,0.38,0.0,0.0,1,296
https://docs.docker.com/machine/install-machine,0,9,0.3,0.13,0.0,0.0,1,296
. For Linux you can use the follow-,0,9,0.21,0.54,0.0,0.0,1,296
ing command to get the binary:,0,9,0.3,0.13,0.0,0.01,1,296
curl -L https://github.com/docker/machine/releases/download/v0.3.0/docker-,0,7,0.17,0.13,0.01,0.0,0,296
➥,0,10,0.23,0.13,0.0,0.0,0,296
machine_linux-amd64 /usr/local/bin/docker-machine,0,7,0.26,0.15,0.0,0.02,1,296
Then make it executable:,0,9,0.3,0.13,0.02,0.0,1,296
277,1,9,0.3,0.82,0.0,0.0,0,297
Deploying to Docker,1,9,0.39,0.39,0.0,0.03,1,297
"Once you’ve downloaded Docker Machine and made it executable, you can use it to",0,9,0.21,0.14,0.03,0.0,0,297
create a Docker host in any of the cloud providers. One of the easiest is probably Digi-,0,9,0.21,0.14,0.0,0.0,0,297
"tal Ocean, a virtual private server",0,9,0.3,0.14,0.0,0.0,1,297
(VPS) provider known for its ease-of-use and low,0,9,0.21,0.43,0.0,0.0,1,297
"cost. (A VPS is a VM sold as a service by a provider.) In May 2015, Digital Ocean",0,9,0.21,0.14,0.0,0.0,0,297
"became the second-largest hosting company in the world, in terms of web-facing serv-",0,9,0.21,0.14,0.0,0.0,0,297
"ers, after AWS .",0,9,0.3,0.14,0.0,0.0,1,297
"To create a Docker host on Digital Ocean, you’ll first need to sign up for a Digital",0,9,0.21,0.17,0.0,0.0,0,297
"Ocean account. Once you have an account, go to the Applications &",0,9,0.3,0.14,0.0,0.0,1,297
API page at,0,9,0.21,0.75,0.0,0.0,1,297
https://cloud.digitalocean.com/settings/applications,0,9,0.3,0.14,0.0,0.0,1,297
.,0,9,0.12,0.58,0.0,0.0,0,297
"On this page there is a Generate New Token button (figure 10.8), which you can",0,9,0.21,0.17,0.0,0.0,0,297
"click to generate a token. Enter any name you want, and remember to keep the Write",0,9,0.21,0.14,0.0,0.0,0,297
check box selected. Then click the Generate Token button to create a personal access,0,9,0.21,0.14,0.0,0.0,0,297
"token, which is something like a username and password rolled into one, used for",0,9,0.21,0.14,0.0,0.0,0,297
API,0,9,0.12,0.82,0.0,0.0,0,297
authentication. The token is only shown when you create it—it won’t be shown,0,9,0.21,0.14,0.0,0.0,0,297
again—so you should store it someplace safe.,0,9,0.43,0.14,0.0,0.39,1,297
Figure 10.8 Generating a personal access token on Digital Ocean is as easy as clicking,1,7,0.49,0.14,0.39,0.0,0,297
the Generate New Token button.,1,7,0.44,0.14,0.0,0.02,1,297
"To create a Docker host on Digital Ocean through Docker Machine, execute this com-",0,9,0.21,0.14,0.02,0.0,0,297
mand on the console:,0,9,0.3,0.14,0.0,0.01,1,297
docker-machine create --driver digitalocean --digitalocean-access-token,0,7,0.17,0.14,0.01,0.0,0,297
<tokenwsd,0,7,0.26,0.19,0.0,0.0,1,297
Creating CA: /home/sausheong/.docker/machine/certs/ca.pem,0,7,0.26,0.14,0.0,0.0,1,297
Creating client certificate: /home/sausheong/.docker/machine/certs/cert.pem,0,7,0.17,0.14,0.0,0.0,0,297
278,1,9,0.39,0.06,0.0,0.0,0,298
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,298
C 10,1,7,0.35,0.35,0.0,0.0,1,298
HAPTER,1,6,0.33,0.36,0.0,0.03,1,298
Creating SSH key...,0,7,0.26,0.13,0.03,0.0,1,298
Creating Digital Ocean droplet...,0,7,0.26,0.13,0.0,0.0,1,298
"To see how to connect Docker to this machine, run: docker-machine env wsd",0,7,0.17,0.13,0.0,0.02,0,298
"Once the remote Docker host is created, the next step is to connect to it. Remember,",0,9,0.21,0.13,0.02,0.0,0,298
your Docker client is currently connected to the local Docker host. You need to con-,0,9,0.21,0.13,0.0,0.0,0,298
"nect it to our Docker host on Digital Ocean, called wsd. The response from Docker",0,9,0.21,0.13,0.0,0.0,0,298
Machine gives you a hint how to do it. You should run:,0,9,0.3,0.13,0.0,0.01,1,298
docker-machine env wsd,0,7,0.26,0.13,0.01,0.0,1,298
"export DOCKER_TLS_VERIFY=""1""",0,7,0.26,0.13,0.0,0.0,1,298
"export DOCKER_HOST=""tcp://104.236.0.57:2376""",0,7,0.26,0.13,0.0,0.0,1,298
"export DOCKER_CERT_PATH=""/home/sausheong/.docker/machine/machines/wsd""",0,7,0.26,0.13,0.0,0.0,1,298
"export DOCKER_MACHINE_NAME=""wsd""",0,7,0.26,0.13,0.0,0.0,1,298
# Run this command to configure your shell:,0,7,0.26,0.13,0.0,0.0,1,298
"# eval ""$(docker-machine env wsd)""",0,7,0.26,0.13,0.0,0.02,1,298
The command tells you the environment settings for our Docker host on the cloud.,0,9,0.21,0.13,0.02,0.0,0,298
"To configure the client to point to this Docker host, you need to change your environ-",0,9,0.21,0.13,0.0,0.0,0,298
ment settings to match it. Here’s a quick way to do this:,0,9,0.3,0.13,0.0,0.01,1,298
"eval ""$(docker-machine env wsd)""",0,7,0.26,0.13,0.01,0.01,1,298
"As simple as that, you’re connected to the Docker host on Digital Ocean! How do you",0,9,0.21,0.13,0.01,0.0,0,298
know that? Just run,0,9,0.3,0.13,0.0,0.01,1,298
docker images,0,7,0.26,0.13,0.01,0.01,1,298
You’ll see that there are no images listed. Remember that when you were creating the,0,9,0.21,0.13,0.01,0.0,0,298
"container earlier in this section you created an image locally, so if you’re still con-",0,9,0.21,0.13,0.0,0.0,0,298
"nected to the local Docker host, you should see at least one image. No image means",0,9,0.21,0.13,0.0,0.0,0,298
you’re no longer connected to the local Docker host.,0,9,0.3,0.13,0.0,0.0,1,298
"Because you have no image in this new Docker host, you have to create one again.",0,9,0.21,0.15,0.0,0.0,0,298
Issue the same docker build,0,9,0.3,0.13,0.0,0.0,1,298
command from earlier:,0,9,0.21,0.37,0.0,0.01,1,298
docker build –t ws-d .,0,7,0.26,0.13,0.01,0.01,1,298
"After the command completes, you should see at least two images when you run",0,9,0.21,0.13,0.01,0.0,0,298
"docker images : the golang base image, and the new ws-d image. The final step is to",0,9,0.21,0.13,0.0,0.0,0,298
run the container as you’ve run it before:,0,9,0.3,0.13,0.0,0.01,1,298
docker run --publish 80:8080 --name simple_web_service --rm  ws-d,0,7,0.26,0.13,0.01,0.01,1,298
This command will create and start up a container on the remote Docker host. To,0,9,0.21,0.13,0.01,0.0,0,298
"prove that you’ve done it, use curl to get the post record. But wait—where’s the",0,9,0.21,0.13,0.0,0.0,0,298
docker-machine,0,9,0.21,0.69,0.0,0.0,1,298
server? It’s at the same IP,0,9,0.3,0.13,0.0,0.0,1,298
address that was returned when you ran,0,9,0.21,0.34,0.0,0.0,1,298
env wsd .,0,9,0.3,0.13,0.0,0.01,1,298
curl -i -X GET http://104.236.0.57/post/1,0,7,0.26,0.13,0.01,0.0,1,298
HTTP/1.1 200 OK,0,7,0.26,0.13,0.0,0.0,1,298
Content-Type: application/json,0,7,0.26,0.13,0.0,0.0,1,298
279,1,9,0.3,0.82,0.0,0.0,0,299
Comparison of deployment methods,1,9,0.39,0.34,0.0,0.03,1,299
"Date: Mon, 03 Aug 2015 11:35:46 GMT",0,7,0.26,0.14,0.03,0.0,1,299
Content-Length: 69,0,7,0.26,0.14,0.0,0.02,1,299
{,0,7,0.17,0.14,0.02,0.0,0,299
"""id"": 2,",0,7,0.26,0.14,0.0,0.0,1,299
"""content"": ""My first post"",",0,7,0.26,0.14,0.0,0.0,1,299
"""author"": ""Sau Sheong""",0,7,0.26,0.14,0.0,0.0,1,299
},0,7,0.17,0.14,0.0,0.02,0,299
That’s it! You’ve deployed our simple Go web service to the internet through a Docker,0,9,0.21,0.14,0.02,0.0,0,299
"container. Docker isn’t the simplest way of deploying Go web applications, but it’s",0,9,0.21,0.14,0.0,0.0,0,299
"probably going to be one of the more popular ways. Also, after you’ve done it once",0,9,0.21,0.14,0.0,0.0,0,299
"locally, you can duplicate the process almost effortlessly on multiple cloud providers,",0,9,0.21,0.14,0.0,0.0,0,299
both private and public. This is the power of Docker and now you know how to use it.,0,9,0.21,0.14,0.0,0.0,0,299
I’ve left out a lot of details to keep the section and the chapter brief and focused. If,0,9,0.21,0.17,0.0,0.0,0,299
"you’re interested in Docker (and it’s a very interesting new tool), spend more time",0,9,0.21,0.14,0.0,0.0,0,299
reading the online documentation (,0,9,0.3,0.14,0.0,0.0,1,299
https://docs.docker.com,0,9,0.21,0.46,0.0,0.0,1,299
) and various articles,0,9,0.21,0.66,0.0,0.0,1,299
that have been written about it.,0,9,0.3,0.14,0.0,0.02,1,299
10.5 Comparison of deployment methods,1,12,0.54,0.07,0.02,0.01,1,299
"Before I end this chapter, let’s recap in a table the various types of deployment meth-",0,9,0.21,0.14,0.01,0.0,0,299
"ods we discussed. There are many more other ways of deploying a web application,",0,9,0.21,0.14,0.0,0.0,0,299
and table 10.1 shows only some of them.,0,9,0.3,0.14,0.0,0.02,1,299
Table 10.1 Comparison of Go web application deployment methods,1,7,0.44,0.14,0.02,0.02,1,299
Standalone Heroku,1,7,0.35,0.36,0.02,0.0,1,299
GAE Docker,1,7,0.35,0.64,0.0,0.02,1,299
Type Public/private,0,7,0.26,0.15,0.02,0.0,1,299
Public Public,0,7,0.17,0.47,0.0,0.0,1,299
Public/private,0,7,0.17,0.73,0.0,0.01,1,299
Code change None,0,7,0.26,0.15,0.01,0.0,1,299
Low Medium,0,7,0.17,0.47,0.0,0.0,1,299
None,0,7,0.17,0.73,0.0,0.01,1,299
Systems work High,0,7,0.26,0.15,0.01,0.0,1,299
None None,0,7,0.17,0.47,0.0,0.0,1,299
Medium,0,7,0.17,0.73,0.0,0.01,1,299
Maintenance High,0,7,0.26,0.15,0.01,0.0,1,299
None None,0,7,0.17,0.47,0.0,0.0,1,299
Medium,0,7,0.17,0.73,0.0,0.01,1,299
Ease of deployment Low,0,7,0.26,0.15,0.01,0.0,1,299
High Medium,0,7,0.17,0.47,0.0,0.0,1,299
Low,0,7,0.08,0.73,0.0,0.01,0,299
Platform support None,0,7,0.26,0.15,0.01,0.0,1,299
Low High,0,7,0.17,0.47,0.0,0.0,1,299
Low,0,7,0.08,0.73,0.0,0.01,0,299
Tie-in to platform None,0,7,0.26,0.15,0.01,0.0,1,299
Low High,0,7,0.17,0.47,0.0,0.0,1,299
Low,0,7,0.08,0.73,0.0,0.01,0,299
Scalability None,0,7,0.26,0.15,0.01,0.0,1,299
Medium High,0,7,0.17,0.47,0.0,0.0,1,299
High,0,7,0.17,0.73,0.0,0.01,1,299
Remarks In this bare-,0,7,0.26,0.15,0.01,0.0,1,299
Heroku is a lib- GAE is a restric-,0,7,0.17,0.47,0.0,0.0,1,299
Docker is an up-,0,7,0.17,0.73,0.0,0.0,1,299
bones deploy- eral public PaaS,0,7,0.17,0.34,0.0,0.0,1,299
tive public PaaS and-coming tech-,0,7,0.17,0.6,0.0,0.0,1,299
"ment, you need where you’re",0,7,0.17,0.34,0.0,0.0,1,299
where you’re nology with a lot,0,7,0.17,0.6,0.0,0.0,1,299
to do almost able to do,0,7,0.17,0.34,0.0,0.0,1,299
tied into the GAE of interest and,0,7,0.17,0.6,0.0,0.0,1,299
everything on almost any-,0,7,0.17,0.34,0.0,0.0,1,299
platform. support in both,0,7,0.17,0.6,0.0,0.0,1,299
"your own. thing, with a few",0,7,0.17,0.34,0.0,0.0,1,299
public and pri-,0,7,0.17,0.73,0.0,0.0,1,299
exceptions.,0,7,0.17,0.47,0.0,0.0,1,299
vate deploy-,0,7,0.17,0.73,0.0,0.0,1,299
ments.,0,7,0.17,0.73,0.0,0.0,1,299
280,1,9,0.39,0.06,0.0,0.0,0,300
Deploying Go,1,9,0.39,0.44,0.0,0.0,1,300
C 10,1,7,0.35,0.35,0.0,0.0,1,300
HAPTER,1,6,0.33,0.36,0.0,0.03,1,300
10.6 Summary,1,12,0.54,0.06,0.03,0.01,1,300
The most simple way to deploy a Go web service is to place the binary execut-,0,9,0.21,0.18,0.01,0.0,0,300
■,0,4,0.11,0.15,0.0,0.01,0,300
"able file(s) directly on a server, either a VM or an actual physical server, and",0,9,0.21,0.18,0.01,0.0,0,300
configure Upstart to start it and keep it running continually.,0,9,0.3,0.18,0.0,0.01,1,300
"Deploying to Heroku, which is one of the simplest PaaSes around, is straightfor-",0,9,0.21,0.18,0.01,0.0,0,300
■,0,4,0.11,0.15,0.0,0.01,0,300
"ward and involves only minor modifications, generating local dependencies",0,9,0.21,0.18,0.01,0.0,0,300
using Godep and creating a Procfile. Pushing these all to Heroku’s Git reposi-,0,9,0.21,0.18,0.0,0.0,0,300
tory will deploy the web application.,0,9,0.3,0.18,0.0,0.01,1,300
"Deploying to GAE , Google’s powerful but sandboxed PaaS, is a bit more",0,9,0.3,0.18,0.01,0.0,1,300
■,0,4,0.11,0.15,0.0,0.01,0,300
"involved, but this is compensated for by the fact that the web service deployed is",0,9,0.21,0.18,0.01,0.0,0,300
very scalable. There are a number of limitations with,0,9,0.3,0.18,0.0,0.0,1,300
"GAE , mostly involving",0,9,0.21,0.64,0.0,0.0,1,300
using services that are outside the,0,9,0.3,0.18,0.0,0.0,1,300
GAE sandbox.,0,9,0.21,0.46,0.0,0.01,1,300
Docker is a new and powerful way of deploying web services and applications.,0,9,0.21,0.18,0.01,0.0,0,300
■,0,4,0.11,0.15,0.0,0.01,0,300
"But compared to other solutions, it’s much more involved. You need to docker-",0,9,0.21,0.18,0.01,0.0,0,300
"ize your Go web service into a container, deploy it to a local Docker host, and",0,9,0.21,0.18,0.0,0.0,0,300
then deploy it to a remote Docker host on the cloud.,0,9,0.3,0.18,0.0,0.0,1,300
appendix,1,30,0.79,0.64,0.0,0.0,1,301
Installing and setting up Go,1,30,0.79,0.22,0.0,0.06,1,301
Installing Go,1,12,0.54,0.1,0.06,0.01,1,301
"Before you can write your first line of Go code, you’ll need to set up the environ-",0,9,0.21,0.17,0.01,0.0,0,301
ment. Let’s start off with installing Go. The latest version of Go as of this writing is,0,9,0.21,0.17,0.0,0.0,0,301
"Go 1.6. To install Go, you can either download or use the official binary distribu-",0,9,0.21,0.17,0.0,0.0,0,301
"tions, or you can install Go from source.",0,9,0.3,0.17,0.0,0.0,1,301
Official binary distributions are available for,0,9,0.3,0.19,0.0,0.0,1,301
"F ree BSD (release 8 and above),",0,9,0.21,0.58,0.0,0.0,1,301
"Linux (2.6.23 and above),",0,9,0.3,0.17,0.0,0.0,1,301
"M ac OS X (Snow Leopard and above), and Windows (",0,9,0.21,0.38,0.0,0.0,1,301
XP,0,9,0.12,0.82,0.0,0.0,0,301
and above). Both 32-bt (386) and 64-bit (amd64) x86 processor architectures are,0,9,0.21,0.17,0.0,0.0,0,301
"supported. For F ree BSD and Linux,",0,9,0.3,0.17,0.0,0.0,1,301
ARM processor architecture is also supported.,0,9,0.21,0.46,0.0,0.0,1,301
"To install Go, download the distribution package from",0,9,0.3,0.19,0.0,0.0,1,301
https://golang.org/dl/,0,9,0.21,0.64,0.0,0.0,1,301
Choose the file appropriate for your platform. Once you have the distribution,0,9,0.21,0.19,0.0,0.0,0,301
"package, install Go according to your platform of choice. Note that although Go",0,9,0.21,0.17,0.0,0.0,0,301
"doesn’t have a dependency on any source code versioning system, some Go tools",0,9,0.21,0.17,0.0,0.0,0,301
"like go get need it, so to make your life a bit easier you should download and install",0,9,0.21,0.17,0.0,0.0,0,301
them as you’re installing Go.,0,9,0.3,0.17,0.0,0.0,1,301
You can get the following source code versioning systems here:,0,9,0.3,0.19,0.0,0.01,1,301
Mercurial — http://mercurial.selenic.com,1,9,0.39,0.22,0.01,0.0,1,301
■,0,4,0.11,0.19,0.0,0.01,0,301
Subversion — http://subversion.apache.org,1,9,0.39,0.22,0.01,0.0,1,301
■,0,4,0.11,0.19,0.0,0.01,0,301
Git — http://git-scm.com,1,9,0.39,0.22,0.01,0.0,1,301
■,0,4,0.11,0.19,0.0,0.01,0,301
Bazaar — http://bazaar.canonical.com,1,9,0.39,0.22,0.01,0.0,1,301
■,0,4,0.11,0.19,0.0,0.02,0,301
Linux/FreeBSD,1,10,0.5,0.1,0.02,0.01,1,301
To install on Linux or F ree,0,9,0.3,0.17,0.01,0.0,1,301
"BSD , you’d likely download go",0,9,0.21,0.39,0.0,0.0,1,301
<VERSION>.<OS>-<ARCHI-,0,9,0.21,0.64,0.0,0.01,1,301
.tar.gz. The latest Go for Linux on a 64-bit architecture is go1.3.3.linux-,0,9,0.12,0.25,0.01,0.0,0,301
TECTURE>,0,9,0.3,0.17,0.0,0.0,1,301
amd64.tar.gz.,0,9,0.3,0.17,0.0,0.0,1,301
282,1,9,0.39,0.06,0.0,0.0,0,302
Installing and setting up Go,1,9,0.39,0.39,0.0,0.0,1,302
A,1,7,0.26,0.31,0.0,0.0,0,302
PPENDIX,1,6,0.33,0.32,0.0,0.03,1,302
"Once you’ve downloaded the archive, extract it to /usr/local. Add /usr/local/go/",0,9,0.21,0.15,0.03,0.0,0,302
bin to the PATH environment variable. You can do this by adding this line to your /,0,9,0.21,0.13,0.0,0.0,0,302
etc/profile (for a systemwide installation) or,0,9,0.3,0.13,0.0,0.0,1,302
$HOME /.profile:,0,9,0.21,0.49,0.0,0.01,1,302
export PATH=$PATH:/usr/local/go/bin,0,7,0.26,0.13,0.01,0.02,1,302
Windows,1,10,0.5,0.06,0.02,0.01,1,302
You can use either the,0,9,0.3,0.13,0.01,0.0,1,302
installer (download the,0,9,0.21,0.34,0.0,0.0,1,302
file) or the zip archive. Install-,0,9,0.21,0.57,0.0,0.0,1,302
MSI,0,9,0.12,0.31,0.0,0.0,0,302
MSI,0,9,0.12,0.54,0.0,0.01,0,302
ing from the MSI is easier—open the,0,9,0.3,0.13,0.01,0.0,1,302
MSI installer and follow the instructions to install,0,9,0.21,0.43,0.0,0.0,1,302
Go. By default the installer will place Go in c:\Go and set up c:\Go\bin in your,0,9,0.21,0.13,0.0,0.0,0,302
PATH environment variable.,0,9,0.3,0.13,0.0,0.0,1,302
"Using the zip archive is easy as well. Extract the files into a directory (for example,",0,9,0.21,0.15,0.0,0.0,0,302
PATH variable.,0,9,0.21,0.49,0.0,0.0,1,302
c:\Go) and add the bin subdirectory to your,0,9,0.3,0.13,0.0,0.02,1,302
Mac OS X,1,10,0.5,0.06,0.02,0.01,1,302
For Mac OS X you can download the appropriate,0,9,0.3,0.13,0.01,0.0,1,302
PKG file (same format as earlier) and,0,9,0.21,0.53,0.0,0.0,1,302
/ usr/local/go,0,9,0.21,0.71,0.0,0.0,1,302
run through the installation. The package will install the distribution to,0,9,0.21,0.13,0.0,0.0,0,302
PATH environment variable. You’ll,0,9,0.21,0.55,0.0,0.0,1,302
and place the /usr/local/go/bin directory in your,0,9,0.3,0.13,0.0,0.0,1,302
"need to restart your Terminal, or run this in your Terminal:",0,9,0.3,0.13,0.0,0.01,1,302
$ source ~/.profile,0,7,0.26,0.13,0.01,0.01,1,302
Alternatively you can use Homebrew to install Go. This can be as simple as,0,9,0.21,0.13,0.01,0.01,0,302
$ brew install go,0,7,0.26,0.13,0.01,0.02,1,302
Setting up Go,1,12,0.54,0.06,0.02,0.01,1,302
"Now that you’ve installed Go, you need to set it up properly. Go development tools are",0,9,0.21,0.13,0.01,0.0,0,302
"designed to work with code maintained in public repositories, and the model is the",0,9,0.21,0.13,0.0,0.0,0,302
same regardless if you’re developing an open source program or something else.,0,9,0.34,0.13,0.0,0.27,0,302
Figure 1 Directory structure,1,7,0.49,0.63,0.27,0.0,1,302
of a Go workspace,1,7,0.35,0.63,0.0,0.0,1,302
283,1,9,0.3,0.82,0.0,0.0,0,303
Setting up Go,1,9,0.39,0.41,0.0,0.03,1,303
Go code is developed in a,0,9,0.3,0.17,0.03,0.0,1,303
workspace . A workspace is a directory with three subdirec-,1,9,0.39,0.38,0.0,0.0,1,303
tories (see figure 1):,0,9,0.3,0.14,0.0,0.01,1,303
"src contains Go source files, which are organized in packages, with one subdi-",0,9,0.21,0.19,0.01,0.0,0,303
■,0,4,0.11,0.17,0.0,0.01,0,303
rectory in the src directory representing one package.,0,9,0.3,0.19,0.01,0.01,1,303
pkg contains package objects.,0,9,0.3,0.19,0.01,0.0,1,303
■,0,4,0.11,0.17,0.0,0.01,0,303
bin contains executable binary files.,0,9,0.3,0.19,0.01,0.0,1,303
■,0,4,0.11,0.17,0.0,0.02,0,303
"How this works is simple. When you compile Go code, it creates either packages",0,9,0.21,0.14,0.02,0.0,0,303
(libraries) or binary executable files. These packages or binaries are placed in the pkg,0,9,0.21,0.14,0.0,0.0,0,303
"and bin directories, respectively. In figure A.1, we have the simple web application",0,9,0.21,0.14,0.0,0.0,0,303
"first_webapp as a subdirectory in the src directory, with the source code file",0,9,0.21,0.14,0.0,0.0,0,303
"webapp.go. Once you compile the source code, it generates a binary that’s stored in",0,9,0.21,0.14,0.0,0.0,0,303
the bin directory of the workspace.,0,9,0.3,0.14,0.0,0.0,1,303
GOPATH environment variable. You,0,9,0.21,0.56,0.0,0.0,1,303
"To set up your workspace, you need to set the",0,9,0.3,0.17,0.0,0.0,1,303
can use any directory you like (except for your Go installation). Say we want to set up,0,9,0.21,0.14,0.0,0.0,0,303
the workspace at $HOME,0,9,0.3,0.14,0.0,0.0,1,303
/go in Linux/ F ree BSD or,0,9,0.21,0.35,0.0,0.0,1,303
M ac OS X . Go to the console (or,0,9,0.21,0.57,0.0,0.0,1,303
Terminal in M ac OS X ) and enter this:,0,9,0.3,0.14,0.0,0.01,1,303
$ mkdir $HOME/go,0,7,0.26,0.14,0.01,0.0,1,303
$ export GOPATH=$HOME/go,0,7,0.26,0.14,0.0,0.02,1,303
"To set things up permanently, you can add the following lines in your ~/.profile or ~/",0,9,0.21,0.14,0.02,0.0,0,303
.bashrc file (if you’re using bash):,0,9,0.3,0.14,0.0,0.01,1,303
export GOPATH=$HOME/go,0,7,0.26,0.14,0.01,0.01,1,303
PATH .,0,9,0.21,0.8,0.01,0.0,1,303
For convenience you should also add your workspace’s bin directory to your,0,9,0.21,0.14,0.0,0.0,0,303
Doing so will allow you to execute the binaries of your compiled Go code:,0,9,0.21,0.14,0.0,0.01,0,303
$ export PATH=$PATH:$GOPATH/bin,0,7,0.26,0.14,0.01,0.0,1,303
284,1,9,0.39,0.06,0.0,0.0,0,304
Installing and setting up Go,1,9,0.39,0.39,0.0,0.0,1,304
A,1,7,0.26,0.31,0.0,0.0,0,304
PPENDIX,1,6,0.33,0.32,0.0,0.0,1,304
index,1,30,0.79,0.72,0.0,0.05,1,305
Symbols,1,9,0.48,0.07,0.05,0.0,1,305
action tags 121,0,9,0.21,0.34,0.0,0.0,1,305
AutoMigrate method 151,0,9,0.21,0.6,0.0,0.0,1,305
averageColor function 241,0,9,0.21,0.6,0.0,0.0,1,305
"actions 33, 98, 102–109",0,9,0.21,0.34,0.0,0.0,1,305
` character 165,0,9,0.3,0.07,0.0,0.0,1,305
AWS (Amazon Web,0,9,0.21,0.6,0.0,0.0,1,305
conditional actions 102–103,0,9,0.21,0.36,0.0,0.0,1,305
_ character 141,0,9,0.3,0.07,0.0,0.0,1,305
Services) 257,0,9,0.21,0.64,0.0,0.0,1,305
converting actions to,0,9,0.21,0.36,0.0,0.0,1,305
: character 165,0,9,0.3,0.07,0.0,0.0,1,305
resources 162,0,9,0.21,0.37,0.0,0.0,1,305
? character 15,0,9,0.3,0.07,0.0,0.0,1,305
converting to resources 162,0,9,0.21,0.36,0.0,0.0,1,305
B,1,9,0.3,0.6,0.0,0.0,0,305
". character 33, 36, 99, 102, 104",0,9,0.3,0.07,0.0,0.0,1,305
include actions 107–109,0,9,0.21,0.36,0.0,0.0,1,305
"{{ }} characters 99, 102",0,9,0.3,0.07,0.0,0.0,1,305
iterator actions 104–105,0,9,0.21,0.36,0.0,0.0,1,305
backticks 165,0,9,0.21,0.6,0.0,0.0,1,305
@ character 15,0,9,0.3,0.07,0.0,0.0,1,305
making properties of,0,9,0.21,0.36,0.0,0.0,1,305
BBD (behavior-driven,0,9,0.21,0.6,0.0,0.0,1,305
/ character 15,0,9,0.3,0.07,0.0,0.0,1,305
resources 163,0,9,0.21,0.37,0.0,0.0,1,305
development) 216,0,9,0.21,0.64,0.0,0.0,1,305
"// character 14 & character 15, 75, 139",0,9,0.3,0.07,0.0,0.0,1,305
set actions 105–107,0,9,0.21,0.36,0.0,0.0,1,305
BBS (bulletin board systems) 23,0,9,0.21,0.6,0.0,0.0,1,305
Active Server Pages. See ASP,1,9,0.39,0.34,0.0,0.0,1,305
behavior-driven development.,0,9,0.21,0.6,0.0,0.0,1,305
# character 15,0,9,0.3,0.07,0.0,0.0,1,305
"active templates 18 Add method 89, 231–232, 252",0,9,0.21,0.34,0.0,0.0,1,305
bench flag 198 See BBD,1,9,0.39,0.6,0.0,0.0,1,305
% character 15,0,9,0.3,0.07,0.0,0.0,1,305
= character 75,0,9,0.3,0.07,0.0,0.0,1,305
Allow response header 14,0,9,0.21,0.34,0.0,0.0,1,305
bench_test.go file 197,0,9,0.21,0.6,0.0,0.0,1,305
| character 110,0,9,0.3,0.07,0.0,0.0,1,305
allPosts variable 131,0,9,0.21,0.34,0.0,0.0,1,305
benchmarking 197–200,0,9,0.21,0.6,0.0,0.0,1,305
$ character 110,0,9,0.3,0.07,0.0,0.0,1,305
Amazon Web Services. See AWS,1,9,0.39,0.34,0.0,0.0,1,305
BER (Basic Encoding Rules) 54,0,9,0.21,0.6,0.0,0.0,1,305
bidirectional 233,0,9,0.21,0.6,0.0,0.0,1,305
"ampersand character 15, 75,",0,9,0.21,0.34,0.0,0.0,1,305
Numerics,1,9,0.48,0.07,0.0,0.0,1,305
bin subdirectory 283,0,9,0.21,0.6,0.0,0.0,1,305
139,0,9,0.12,0.37,0.0,0.0,0,305
blank identifier 32,0,9,0.21,0.6,0.0,0.0,1,305
Angular.js library 174,0,9,0.21,0.34,0.0,0.0,1,305
"block action, using to define",0,9,0.21,0.6,0.0,0.0,1,305
1XX status code class 13,0,9,0.3,0.07,0.0,0.0,1,305
app.yaml file 270,0,9,0.21,0.34,0.0,0.0,1,305
default templates 123–124,0,9,0.21,0.64,0.0,0.0,1,305
2XX status code class 13,0,9,0.3,0.07,0.0,0.0,1,305
"application design, ChitChat",0,9,0.21,0.34,0.0,0.0,1,305
blue_hello.html file 122–123,0,9,0.21,0.6,0.0,0.0,1,305
3XX status code class 13,0,9,0.3,0.07,0.0,0.0,1,305
internet forum 24,0,9,0.21,0.37,0.0,0.0,1,305
Body field 73,0,9,0.21,0.6,0.0,0.0,1,305
4XX status code class 13,0,9,0.3,0.07,0.0,0.0,1,305
"application/json 82, 186",0,9,0.21,0.34,0.0,0.0,1,305
browser support for request,0,9,0.21,0.6,0.0,0.0,1,305
5XX status code class 13,0,9,0.3,0.07,0.0,0.0,1,305
application/soap+xml 158,0,9,0.21,0.34,0.0,0.0,1,305
methods 11,0,9,0.21,0.64,0.0,0.0,1,305
"500 status code 184, 188",0,9,0.3,0.07,0.0,0.0,1,305
application/x-www-form-,0,9,0.21,0.34,0.0,0.0,1,305
"buffered channels 233, 235–236 bulletin board systems. See BBS",1,9,0.39,0.6,0.0,0.0,1,305
501 Not Implemented status code 84,0,9,0.3,0.07,0.0,0.0,1,305
"urlencoded 75, 77–78, 82",0,9,0.21,0.37,0.0,0.0,1,305
"applications, defined 7, 263 arguments 110–111",0,9,0.21,0.34,0.0,0.0,1,305
ByName method 66,0,9,0.21,0.6,0.0,0.0,1,305
bytes.Buffer struct 133,0,9,0.21,0.6,0.0,0.0,1,305
A,1,9,0.39,0.07,0.0,0.0,0,305
ASN.1 (Abstract Syntax Notation,0,9,0.21,0.34,0.0,0.0,1,305
One) 54,0,9,0.21,0.37,0.0,0.0,1,305
C,1,9,0.3,0.6,0.0,0.0,0,305
ASP (Active Server Pages) 18,0,9,0.21,0.34,0.0,0.0,1,305
Abstract Syntax Notation One.,0,9,0.3,0.07,0.0,0.0,1,305
Assert function 212,0,9,0.21,0.34,0.0,0.0,1,305
See ASN.1,1,9,0.48,0.11,0.0,0.0,1,305
authenticate function 30,0,9,0.21,0.34,0.0,0.0,1,305
Accept header field 12,0,9,0.3,0.07,0.0,0.0,1,305
CA (certificate authority) 52,0,9,0.21,0.6,0.0,0.0,1,305
Author field 139,0,9,0.21,0.34,0.0,0.0,1,305
Accept-Charset header field 12,0,9,0.3,0.07,0.0,0.0,1,305
callerA function 237,0,9,0.21,0.6,0.0,0.0,1,305
Author struct 165,0,9,0.21,0.34,0.0,0.0,1,305
"access control, using",0,9,0.3,0.07,0.0,0.0,1,305
callerB function 237,0,9,0.21,0.6,0.0,0.0,1,305
cookies 30–32,0,9,0.3,0.11,0.0,0.0,1,305
cargo cult programming 48,0,9,0.21,0.6,0.0,0.0,1,305
Authorization header field 12,0,9,0.21,0.34,0.0,0.0,1,305
286,1,9,0.39,0.06,0.0,0.0,0,306
INDEX,1,6,0.33,0.42,0.0,0.03,1,306
carriage return. See CR,1,9,0.48,0.06,0.03,0.0,1,306
concurrency 223–255,0,9,0.21,0.32,0.0,0.0,1,306
csvFile variable 131,0,9,0.21,0.59,0.0,0.0,1,306
Caught statement 235,0,9,0.3,0.06,0.0,0.0,1,306
channels 232–240,0,9,0.21,0.34,0.0,0.0,1,306
cURL command 185,0,9,0.21,0.59,0.0,0.0,1,306
certificate authority. See CA,1,9,0.48,0.06,0.0,0.0,1,306
buffered 235–236,0,9,0.21,0.36,0.0,0.0,1,306
"cut function 248, 250–252",0,9,0.21,0.59,0.0,0.0,1,306
Certificate struct 54,0,9,0.3,0.06,0.0,0.0,1,306
message passing with,0,9,0.21,0.36,0.0,0.0,1,306
234–235,0,9,0.21,0.38,0.0,0.0,1,306
CGI (Common Gateway,0,9,0.3,0.06,0.0,0.0,1,306
D,1,9,0.3,0.59,0.0,0.0,0,306
selecting 237–240,0,9,0.21,0.36,0.0,0.0,1,306
Interface) 9,0,9,0.3,0.09,0.0,0.0,1,306
chaining handlers and handler,0,9,0.3,0.06,0.0,0.0,1,306
synchronization with,0,9,0.21,0.36,0.0,0.0,1,306
"data model, ChitChat internet",0,9,0.21,0.59,0.0,0.0,1,306
difference from 233–234,0,9,0.21,0.34,0.0,0.0,1,306
"channels 232–240 functions 59, 62",0,9,0.3,0.06,0.0,0.0,1,306
forum 26,0,9,0.21,0.62,0.0,0.0,1,306
Data Security Standard 51,0,9,0.21,0.59,0.0,0.0,1,306
parallelism 223–225,0,9,0.21,0.36,0.0,0.0,1,306
buffered 235–236,0,9,0.3,0.07,0.0,0.0,1,306
"data.Encrypt 30–31 data.go file 181, 204, 258",0,9,0.21,0.59,0.0,0.0,1,306
goroutines 225–232,0,9,0.21,0.34,0.0,0.0,1,306
message passing with 234–235,0,9,0.3,0.07,0.0,0.0,1,306
performance and 228–231,0,9,0.21,0.36,0.0,0.0,1,306
selecting 237–240,0,9,0.3,0.07,0.0,0.0,1,306
data.Session function 32,0,9,0.21,0.59,0.0,0.0,1,306
using 225–228,0,9,0.21,0.36,0.0,0.0,1,306
synchronization with 233–234,0,9,0.3,0.07,0.0,0.0,1,306
data.UserbyEmail 30,0,9,0.21,0.59,0.0,0.0,1,306
waiting for 231–232,0,9,0.21,0.36,0.0,0.0,1,306
Check function 212,0,9,0.3,0.06,0.0,0.0,1,306
database management systems.,0,9,0.21,0.59,0.0,0.0,1,306
photo mosaic web application,0,9,0.21,0.34,0.0,0.0,1,306
"check package 190, 211–213,",0,9,0.3,0.06,0.0,0.0,1,306
See DBMSs,1,9,0.39,0.62,0.0,0.0,1,306
example 240–255,0,9,0.21,0.36,0.0,0.0,1,306
"216, 221",0,9,0.3,0.09,0.0,0.0,1,306
database servers 134,0,9,0.21,0.59,0.0,0.0,1,306
conditional actions 102–103,0,9,0.21,0.32,0.0,0.0,1,306
chitchat database 39,0,9,0.3,0.06,0.0,0.0,1,306
"database, interfacing with 38–42",0,9,0.21,0.59,0.0,0.0,1,306
ConfigureServer method 67,0,9,0.21,0.32,0.0,0.0,1,306
ChitChat internet forum 22–44,0,9,0.3,0.06,0.0,0.0,1,306
Date response header 14,0,9,0.21,0.59,0.0,0.0,1,306
CONNECT method 10,0,9,0.21,0.32,0.0,0.0,1,306
application design 24,0,9,0.3,0.07,0.0,0.0,1,306
DB struct 249,0,9,0.21,0.59,0.0,0.0,1,306
containers 126,0,9,0.21,0.32,0.0,0.0,1,306
data model 26,0,9,0.3,0.07,0.0,0.0,1,306
"Db variable 40, 137, 141",0,9,0.21,0.59,0.0,0.0,1,306
Content field 139,0,9,0.21,0.32,0.0,0.0,1,306
generating HTML responses,0,9,0.3,0.07,0.0,0.0,1,306
DBMSs (database management,0,9,0.21,0.59,0.0,0.0,1,306
Content struct 165,0,9,0.21,0.32,0.0,0.0,1,306
with templates 32–37,0,9,0.3,0.09,0.0,0.0,1,306
systems) 134,0,9,0.21,0.62,0.0,0.0,1,306
content template 122,0,9,0.21,0.32,0.0,0.0,1,306
installing PostgreSQL 37–38,0,9,0.3,0.07,0.0,0.0,1,306
Debian image 274–275,0,9,0.21,0.59,0.0,0.0,1,306
Content-Length header field 12 Content-Length response,0,9,0.21,0.32,0.0,0.0,1,306
Linux/FreeBSD 37–38 Mac OS X 38,0,9,0.3,0.09,0.0,0.0,1,306
"decode function 192, 194,",0,9,0.21,0.59,0.0,0.0,1,306
Decoder struct 169–170 198–199,0,9,0.21,0.59,0.0,0.0,1,306
header 14,0,9,0.21,0.36,0.0,0.0,1,306
Windows 38,0,9,0.3,0.09,0.0,0.0,1,306
"Content-Type header 12, 14,",0,9,0.21,0.32,0.0,0.0,1,306
interfacing with database,0,9,0.3,0.07,0.0,0.0,1,306
"DefaultServeMux 50, 55–57, 59,",0,9,0.21,0.59,0.0,0.0,1,306
"158, 185–186",0,9,0.21,0.36,0.0,0.0,1,306
38–42,0,9,0.3,0.09,0.0,0.0,1,306
"63–64, 66, 68, 84",0,9,0.21,0.62,0.0,0.0,1,306
content. See displaying content,1,9,0.39,0.32,0.0,0.0,1,306
overview 23–24,0,9,0.3,0.07,0.0,0.0,1,306
defer statement 130,0,9,0.21,0.59,0.0,0.0,1,306
context awareness 113–119,0,9,0.21,0.32,0.0,0.0,1,306
receiving and processing,0,9,0.3,0.07,0.0,0.0,1,306
"delete function 142, 250",0,9,0.21,0.59,0.0,0.0,1,306
defending against XSS,0,9,0.21,0.34,0.0,0.0,1,306
requests 27–32,0,9,0.3,0.09,0.0,0.0,1,306
"DELETE method 10, 161",0,9,0.21,0.59,0.0,0.0,1,306
attacks 116–118,0,9,0.21,0.36,0.0,0.0,1,306
access control using,0,9,0.3,0.09,0.0,0.0,1,306
Delete method 142,0,9,0.21,0.59,0.0,0.0,1,306
unescaping HTML 118–119,0,9,0.21,0.34,0.0,0.0,1,306
cookies 30–32,0,9,0.3,0.12,0.0,0.0,1,306
dependency injection 205–210,0,9,0.21,0.59,0.0,0.0,1,306
Context function 221,0,9,0.21,0.32,0.0,0.0,1,306
creating handler,0,9,0.3,0.09,0.0,0.0,1,306
deploying Go 256–280,0,9,0.21,0.59,0.0,0.0,1,306
function 28–30,0,9,0.3,0.12,0.0,0.0,1,306
Cookie header field 12,0,9,0.21,0.32,0.0,0.0,1,306
"methods of, comparing",0,9,0.21,0.6,0.0,0.0,1,306
multiplexer 27–28,0,9,0.3,0.09,0.0,0.0,1,306
Cookie method 91,0,9,0.21,0.32,0.0,0.0,1,306
279–280,0,9,0.21,0.62,0.0,0.0,1,306
serving static files 28,0,9,0.3,0.09,0.0,0.0,1,306
cookies 87–95,0,9,0.21,0.32,0.0,0.0,1,306
to Docker 271–279,0,9,0.21,0.6,0.0,0.0,1,306
starting server 43,0,9,0.3,0.07,0.0,0.0,1,306
access control using 30–32,0,9,0.21,0.34,0.0,0.0,1,306
concepts and,0,9,0.21,0.62,0.0,0.0,1,306
Client Error status code 13,0,9,0.3,0.06,0.0,0.0,1,306
getting from browser 90–92,0,9,0.21,0.34,0.0,0.0,1,306
components 273–274,0,9,0.21,0.64,0.0,0.0,1,306
client-server computing model 8,0,9,0.3,0.06,0.0,0.0,1,306
overview 87–88 sending to browser 88–89,0,9,0.21,0.34,0.0,0.0,1,306
dockerizing Go web,0,9,0.21,0.62,0.0,0.0,1,306
installing Docker 272–273 application 274–276,0,9,0.21,0.62,0.0,0.0,1,306
cloneTilesDB function 243,0,9,0.3,0.06,0.0,0.0,1,306
using for flash messages,0,9,0.21,0.34,0.0,0.0,1,306
close function 238–239,0,9,0.3,0.06,0.0,0.0,1,306
92–95,0,9,0.21,0.36,0.0,0.0,1,306
overview 271–272,0,9,0.21,0.62,0.0,0.0,1,306
Closer interface 73,0,9,0.3,0.06,0.0,0.0,1,306
copy function 252,0,9,0.21,0.32,0.0,0.0,1,306
pushing Docker container,0,9,0.21,0.62,0.0,0.0,1,306
closing channels 239,0,9,0.3,0.06,0.0,0.0,1,306
CR (carriage return) 11,0,9,0.21,0.32,0.0,0.0,1,306
to internet 276–279,0,9,0.21,0.64,0.0,0.0,1,306
Cloud SQL 258,0,9,0.3,0.06,0.0,0.0,1,306
"Create method 130, 139, 141,",0,9,0.21,0.32,0.0,0.0,1,306
to Google App Engine,0,9,0.21,0.6,0.0,0.0,1,306
"146, 149, 152",0,9,0.21,0.36,0.0,0.0,1,306
cloudsql package 267,0,9,0.3,0.06,0.0,0.0,1,306
266–271,0,9,0.21,0.62,0.0,0.0,1,306
CreateCertificate function 55,0,9,0.21,0.32,0.0,0.0,1,306
colon character 165,0,9,0.3,0.06,0.0,0.0,1,306
to Heroku 263–266,0,9,0.21,0.6,0.0,0.0,1,306
CreatedAt field 151,0,9,0.21,0.32,0.0,0.0,1,306
to servers 257–263,0,9,0.21,0.6,0.0,0.0,1,306
"combine function 248, 251–253",0,9,0.3,0.06,0.0,0.0,1,306
createuser program 135,0,9,0.21,0.32,0.0,0.0,1,306
Describe function 219,0,9,0.21,0.59,0.0,0.0,1,306
"Comments struct field 144,",0,9,0.3,0.06,0.0,0.0,1,306
"146–147, 150, 168, 170–171",0,9,0.3,0.09,0.0,0.0,1,306
"Digital Ocean 257, 278",0,9,0.21,0.59,0.0,0.0,1,306
cross-cutting concern 60,0,9,0.21,0.32,0.0,0.0,1,306
comments variable 152,0,9,0.3,0.06,0.0,0.0,1,306
displaying content 96–124,0,9,0.21,0.59,0.0,0.0,1,306
cross-site scripting. See XSS,1,9,0.39,0.32,0.0,0.0,1,306
actions 102–109,0,9,0.21,0.6,0.0,0.0,1,306
Common Gateway Interface.,0,9,0.3,0.06,0.0,0.0,1,306
See CRUD functions 181,1,9,0.39,0.27,0.0,0.0,1,306
CGI,0,9,0.21,0.09,0.0,0.0,0,306
conditional actions 102–103,0,9,0.21,0.62,0.0,0.0,1,306
"CSV files, reading and",0,9,0.21,0.32,0.0,0.0,1,306
287,1,9,0.3,0.82,0.0,0.0,0,307
INDEX,1,6,0.33,0.44,0.0,0.03,1,307
"FreeBSD, installing PostgreSQL",0,9,0.21,0.6,0.03,0.0,1,307
"enctype attribute 74, 78",0,9,0.21,0.34,0.0,0.0,1,307
iterator actions 104–105,0,9,0.3,0.11,0.0,0.0,1,307
on 37–38,0,9,0.21,0.64,0.0,0.0,1,307
set actions 105–107,0,9,0.3,0.11,0.0,0.0,1,307
ENTRYPOINT command 275,0,9,0.21,0.34,0.0,0.0,1,307
func keyword 139,0,9,0.21,0.6,0.0,0.0,1,307
arguments 110–111,0,9,0.3,0.09,0.0,0.0,1,307
Equal function 221,0,9,0.21,0.34,0.0,0.0,1,307
FuncMap map 111,0,9,0.21,0.6,0.0,0.0,1,307
context awareness 113–119,0,9,0.3,0.09,0.0,0.0,1,307
equal sign character 75,0,9,0.21,0.34,0.0,0.0,1,307
Funcs function 112,0,9,0.21,0.6,0.0,0.0,1,307
defending against XSS,0,9,0.3,0.11,0.0,0.0,1,307
ERB (Embedded Ruby) 18,0,9,0.21,0.34,0.0,0.0,1,307
"functions 17, 111–113",0,9,0.21,0.6,0.0,0.0,1,307
attacks 116–118,0,9,0.3,0.13,0.0,0.0,1,307
"Error function 194, 218",0,9,0.21,0.34,0.0,0.0,1,307
functions 111–113 unescaping HTML 118–119,0,9,0.3,0.09,0.0,0.0,1,307
etc/init directory 262,0,9,0.21,0.34,0.0,0.0,1,307
"Exec method 141–142 Execute method 100–102, 108",0,9,0.21,0.34,0.0,0.0,1,307
G,1,9,0.3,0.6,0.0,0.0,0,307
pipelines 110–111,0,9,0.3,0.09,0.0,0.0,1,307
templates and template,0,9,0.3,0.09,0.0,0.0,1,307
"ExecuteTemplate method 35,",0,9,0.21,0.34,0.0,0.0,1,307
"GAE (Google App Engine), deploying Go to 266–271",0,9,0.21,0.6,0.0,0.0,1,307
engines 97–98,0,9,0.3,0.11,0.0,0.0,1,307
"102, 121",0,9,0.21,0.37,0.0,0.0,1,307
executing templates,0,9,0.3,0.11,0.0,0.0,1,307
executing templates 101–102,0,9,0.21,0.34,0.0,0.0,1,307
Generate New Token,0,9,0.21,0.6,0.0,0.0,1,307
101–102,0,9,0.3,0.13,0.0,0.0,1,307
"Expires field 88, 94",0,9,0.21,0.34,0.0,0.0,1,307
button 277,0,9,0.21,0.64,0.0,0.0,1,307
nesting templates 119–123,0,9,0.3,0.11,0.0,0.0,1,307
EXPOSE command 275,0,9,0.21,0.34,0.0,0.0,1,307
generateHTML function 36–37,0,9,0.21,0.6,0.0,0.0,1,307
parsing templates 100–101,0,9,0.3,0.11,0.0,0.0,1,307
eXtensible Markupl Language.,0,9,0.21,0.34,0.0,0.0,1,307
GET HTTP method 162,0,9,0.21,0.6,0.0,0.0,1,307
using block action to define,0,9,0.3,0.11,0.0,0.0,1,307
See XML,1,9,0.39,0.37,0.0,0.0,1,307
"GET method 10, 65, 161",0,9,0.21,0.6,0.0,0.0,1,307
default templates,0,9,0.3,0.13,0.0,0.0,1,307
ExtKeyUsage field 54,0,9,0.21,0.34,0.0,0.0,1,307
GET requests 74–75,0,9,0.21,0.6,0.0,0.0,1,307
123–124,0,9,0.3,0.13,0.0,0.0,1,307
GetComment operation 160,0,9,0.21,0.6,0.0,0.0,1,307
variables 110–111,0,9,0.3,0.09,0.0,0.0,1,307
GetCommentPortType 159–160,0,9,0.21,0.6,0.0,0.0,1,307
F,1,9,0.3,0.34,0.0,0.0,0,307
distance function 242–243,0,9,0.3,0.07,0.0,0.0,1,307
GetCommentRequest 160,0,9,0.21,0.6,0.0,0.0,1,307
<div> tag 114,0,9,0.3,0.07,0.0,0.0,1,307
GetCommentResponse 160,0,9,0.21,0.6,0.0,0.0,1,307
Fail function 194,0,9,0.21,0.34,0.0,0.0,1,307
Docker 271–279 concepts and,0,9,0.3,0.07,0.0,0.0,1,307
GetCommentsBinding 159,0,9,0.21,0.6,0.0,0.0,1,307
FailNow function 194,0,9,0.21,0.34,0.0,0.0,1,307
GetCommentService 159,0,9,0.21,0.6,0.0,0.0,1,307
"FakePost 209–210, 213",0,9,0.21,0.34,0.0,0.0,1,307
components 273–274,0,9,0.3,0.11,0.0,0.0,1,307
"GetPost function 140–141, 147,",0,9,0.21,0.6,0.0,0.0,1,307
fan-in pattern 251,0,9,0.21,0.34,0.0,0.0,1,307
dockerizing Go web,0,9,0.3,0.09,0.0,0.0,1,307
"ginkgo command 218, 221 149",0,9,0.21,0.6,0.0,0.0,1,307
fan-out pattern 248,0,9,0.21,0.34,0.0,0.0,1,307
application 274–276,0,9,0.3,0.11,0.0,0.0,1,307
Fatal function 194,0,9,0.21,0.34,0.0,0.0,1,307
installing 272–273,0,9,0.3,0.09,0.0,0.0,1,307
Ginkgo package 190,0,9,0.21,0.6,0.0,0.0,1,307
fdate function 113,0,9,0.21,0.34,0.0,0.0,1,307
overview 271–272,0,9,0.3,0.09,0.0,0.0,1,307
Ginkgo testing framework,0,9,0.21,0.6,0.0,0.0,1,307
fetch method 208–210,0,9,0.21,0.34,0.0,0.0,1,307
pushing Docker container to,0,9,0.3,0.09,0.0,0.0,1,307
216–222,0,9,0.21,0.64,0.0,0.0,1,307
FieldsPerRecord field 132,0,9,0.21,0.34,0.0,0.0,1,307
internet 276–279,0,9,0.3,0.11,0.0,0.0,1,307
github.com/jmoiron/sqlx 149,0,9,0.21,0.6,0.0,0.0,1,307
"FIFO (first-in, first-out) 235",0,9,0.21,0.34,0.0,0.0,1,307
docker images command 275,0,9,0.3,0.07,0.0,0.0,1,307
"go keyword 225, 232",0,9,0.21,0.6,0.0,0.0,1,307
file storage gob package 132–134,0,9,0.21,0.34,0.0,0.0,1,307
Docker machine 276,0,9,0.3,0.07,0.0,0.0,1,307
Go template engine 118,0,9,0.21,0.6,0.0,0.0,1,307
Docker registry 273–274,0,9,0.3,0.07,0.0,0.0,1,307
"go test command 191, 195, 198,",0,9,0.21,0.6,0.0,0.0,1,307
reading and writing CSV,0,9,0.21,0.36,0.0,0.0,1,307
Dockerfile 273,0,9,0.3,0.07,0.0,0.0,1,307
"212, 214",0,9,0.21,0.64,0.0,0.0,1,307
files 130–132,0,9,0.21,0.37,0.0,0.0,1,307
docroot 7,0,9,0.3,0.07,0.0,0.0,1,307
"gob package 128, 132–134",0,9,0.21,0.6,0.0,0.0,1,307
File struct 129–130,0,9,0.21,0.34,0.0,0.0,1,307
dollar sign character 110,0,9,0.3,0.07,0.0,0.0,1,307
gocheck testing package,0,9,0.21,0.6,0.0,0.0,1,307
file2 function 130,0,9,0.21,0.34,0.0,0.0,1,307
"Done method 231–232, 252",0,9,0.3,0.07,0.0,0.0,1,307
211–216,0,9,0.21,0.64,0.0,0.0,1,307
"files, uploading 80–81",0,9,0.21,0.34,0.0,0.0,1,307
"dot character 33, 36, 99, 102, 104 double braces 99, 102",0,9,0.3,0.07,0.0,0.0,1,307
godeps.json file 264–265,0,9,0.21,0.6,0.0,0.0,1,307
FileServer function 28,0,9,0.21,0.34,0.0,0.0,1,307
godoc (Go documentation,0,9,0.21,0.6,0.0,0.0,1,307
"first_webapp 18, 283",0,9,0.21,0.34,0.0,0.0,1,307
double quotes 165,0,9,0.3,0.07,0.0,0.0,1,307
gofmt (Go source code tool) 5,0,9,0.21,0.6,0.0,0.0,1,307
Flush method 132,0,9,0.21,0.34,0.0,0.0,1,307
double slash character 14,0,9,0.3,0.07,0.0,0.0,1,307
fmt package 19,0,9,0.21,0.34,0.0,0.0,1,307
"doubles, test 204–210",0,9,0.3,0.07,0.0,0.0,1,307
formatter) 5,0,9,0.21,0.64,0.0,0.0,1,307
"fmt.Println statement 139, 194,",0,9,0.21,0.34,0.0,0.0,1,307
Driver interface 138,0,9,0.3,0.07,0.0,0.0,1,307
golang image 275,0,9,0.21,0.6,0.0,0.0,1,307
228,0,9,0.12,0.37,0.0,0.0,0,307
driver.Driver interface 138,0,9,0.3,0.07,0.0,0.0,1,307
"GOMAXPROCS variable 224,",0,9,0.21,0.6,0.0,0.0,1,307
fmt.Sprintf function 111,0,9,0.21,0.34,0.0,0.0,1,307
dynos 263,0,9,0.3,0.07,0.0,0.0,1,307
252,0,9,0.12,0.64,0.0,0.0,0,307
"for loop 238, 252",0,9,0.21,0.34,0.0,0.0,1,307
Gomega matchers 220–221,0,9,0.21,0.6,0.0,0.0,1,307
"Form field 71, 76, 78–79",0,9,0.21,0.34,0.0,0.0,1,307
E,1,9,0.39,0.07,0.0,0.0,0,307
Google App Engine. See GAE,1,9,0.39,0.6,0.0,0.0,1,307
"form tag 11, 74",0,9,0.21,0.34,0.0,0.0,1,307
Google Cloud SQL 267–268,0,9,0.21,0.6,0.0,0.0,1,307
format specifier 20,0,9,0.21,0.34,0.0,0.0,1,307
Google Developer Console 267,0,9,0.21,0.6,0.0,0.0,1,307
EC2 (Elastic Cloud,0,9,0.3,0.07,0.0,0.0,1,307
formatDate function 112,0,9,0.21,0.34,0.0,0.0,1,307
"GOPATH variable 19, 283",0,9,0.21,0.6,0.0,0.0,1,307
Computing) 258,0,9,0.3,0.11,0.0,0.0,1,307
FormFile method 81,0,9,0.21,0.34,0.0,0.0,1,307
"$GOPATH/bin directory 19, 217",0,9,0.21,0.6,0.0,0.0,1,307
Email named field 31,0,9,0.3,0.07,0.0,0.0,1,307
FormValue method 78,0,9,0.21,0.34,0.0,0.0,1,307
$GOPATH/src directory 66,0,9,0.21,0.6,0.0,0.0,1,307
embedded logic template,0,9,0.3,0.07,0.0,0.0,1,307
forward slash character 15,0,9,0.21,0.34,0.0,0.0,1,307
engines 97,0,9,0.3,0.11,0.0,0.0,1,307
"goPrint1 function 226, 228, 230",0,9,0.21,0.6,0.0,0.0,1,307
Fprintf function 20,0,9,0.21,0.34,0.0,0.0,1,307
"Encode method 174, 181",0,9,0.3,0.07,0.0,0.0,1,307
goPrint2 function 230,0,9,0.21,0.6,0.0,0.0,1,307
288,1,9,0.39,0.06,0.0,0.0,0,308
INDEX,1,6,0.33,0.42,0.0,0.03,1,308
"goroutine_test.go file 226,",0,9,0.3,0.06,0.03,0.0,1,308
"init function 137–138, 219",0,9,0.21,0.59,0.0,0.0,1,308
html/template library 49,0,9,0.21,0.32,0.0,0.0,1,308
228–229,0,9,0.3,0.09,0.0,0.0,1,308
installing,0,9,0.21,0.59,0.0,0.0,1,308
HTTP,0,9,0.21,0.32,0.0,0.0,1,308
Docker 272–273,0,9,0.21,0.6,0.0,0.0,1,308
goroutine.go file 225,0,9,0.3,0.06,0.0,0.0,1,308
overview 8,0,9,0.21,0.34,0.0,0.0,1,308
Go 281–282,0,9,0.21,0.6,0.0,0.0,1,308
"goroutines 4, 6, 225–232",0,9,0.3,0.06,0.0,0.0,1,308
testing 200–204,0,9,0.21,0.34,0.0,0.0,1,308
PostgreSQL 37–38,0,9,0.21,0.6,0.0,0.0,1,308
performance and 228–231,0,9,0.3,0.07,0.0,0.0,1,308
HTTP GET request 201,0,9,0.21,0.32,0.0,0.0,1,308
Linux/FreeBSD 37–38,0,9,0.21,0.62,0.0,0.0,1,308
using 225–228,0,9,0.3,0.07,0.0,0.0,1,308
HTTP POST method 159,0,9,0.21,0.32,0.0,0.0,1,308
Mac OS X 38 Windows 38,0,9,0.21,0.62,0.0,0.0,1,308
waiting for 231–232,0,9,0.3,0.07,0.0,0.0,1,308
HTTP request 9–12,0,9,0.21,0.32,0.0,0.0,1,308
gotest 6 gwp user 135,0,9,0.3,0.06,0.0,0.0,1,308
browser support for request methods 11,0,9,0.21,0.34,0.0,0.0,1,308
interfacing with database 38–42,0,9,0.21,0.59,0.0,0.0,1,308
International Telecommunica-,0,9,0.21,0.59,0.0,0.0,1,308
idempotent request,0,9,0.21,0.34,0.0,0.0,1,308
tion Union Telecommuni-,0,9,0.21,0.62,0.0,0.0,1,308
methods 11,0,9,0.21,0.36,0.0,0.0,1,308
H,1,9,0.39,0.06,0.0,0.0,0,308
cation Standardization,0,9,0.21,0.62,0.0,0.0,1,308
request headers 11–12,0,9,0.21,0.34,0.0,0.0,1,308
Sector. See ITU-T,1,9,0.39,0.62,0.0,0.0,1,308
request methods 10,0,9,0.21,0.34,0.0,0.0,1,308
"Handle function 28, 59",0,9,0.3,0.06,0.0,0.0,1,308
Internet Engineering Task,0,9,0.21,0.59,0.0,0.0,1,308
safe request methods 11,0,9,0.21,0.34,0.0,0.0,1,308
"HandleFunc function 28, 84,",0,9,0.3,0.06,0.0,0.0,1,308
Force. See IETF,1,9,0.39,0.62,0.0,0.0,1,308
HTTP response 12–14,0,9,0.21,0.32,0.0,0.0,1,308
"207, 213",0,9,0.3,0.09,0.0,0.0,1,308
Internet of Things. See IoT,1,9,0.39,0.59,0.0,0.0,1,308
response headers 13–14,0,9,0.21,0.34,0.0,0.0,1,308
"handleGet function 200, 202,",0,9,0.3,0.06,0.0,0.0,1,308
io.EOF struct 171,0,9,0.21,0.59,0.0,0.0,1,308
response status code 13,0,9,0.21,0.34,0.0,0.0,1,308
"204–205, 208, 212",0,9,0.3,0.09,0.0,0.0,1,308
io.ReadCloser interface 73,0,9,0.21,0.59,0.0,0.0,1,308
http.ErrNoCookie 94,0,9,0.21,0.32,0.0,0.0,1,308
handlePost function 188,0,9,0.3,0.06,0.0,0.0,1,308
"io.Reader 170, 177",0,9,0.21,0.59,0.0,0.0,1,308
http.Handle function 57,0,9,0.21,0.32,0.0,0.0,1,308
handlePut function 204,0,9,0.3,0.06,0.0,0.0,1,308
IoT (Internet of Things) 175,0,9,0.21,0.59,0.0,0.0,1,308
http.HandlerFunc,0,9,0.21,0.32,0.0,0.0,1,308
handler function,0,9,0.3,0.06,0.0,0.0,1,308
ioutil package 129 iterator actions 104–105,0,9,0.21,0.59,0.0,0.0,1,308
function 207–208,0,9,0.21,0.36,0.0,0.0,1,308
creating 28–30,0,9,0.3,0.07,0.0,0.0,1,308
http.NewRequest function 202,0,9,0.21,0.32,0.0,0.0,1,308
overview 19,0,9,0.3,0.07,0.0,0.0,1,308
ITU-T (International Telecom-,0,9,0.21,0.59,0.0,0.0,1,308
http.response 82 HTTP/2,0,9,0.21,0.32,0.0,0.0,1,308
handler name 25,0,9,0.3,0.06,0.0,0.0,1,308
munication Union,0,9,0.21,0.62,0.0,0.0,1,308
Handler struct 56,0,9,0.3,0.06,0.0,0.0,1,308
Telecommunication Stan-,0,9,0.21,0.62,0.0,0.0,1,308
overview 16,0,9,0.21,0.34,0.0,0.0,1,308
"HandleRequest function 184, 200, 202, 205–209, 219",0,9,0.3,0.06,0.0,0.0,1,308
dardization Sector) 54,0,9,0.21,0.62,0.0,0.0,1,308
request handling using 66–68,0,9,0.21,0.34,0.0,0.0,1,308
HTTPResponseWriter,0,9,0.21,0.32,0.0,0.0,1,308
"HandlerFunc function 58–60,",0,9,0.3,0.06,0.0,0.0,1,308
J,1,9,0.3,0.59,0.0,0.0,0,308
"interface 55, 68",0,9,0.21,0.36,0.0,0.0,1,308
"62, 213",0,9,0.3,0.09,0.0,0.0,1,308
HttpRouter library 65,0,9,0.21,0.32,0.0,0.0,1,308
hangup signal. See HUP,1,9,0.48,0.06,0.0,0.0,1,308
job configuration file 262,0,9,0.21,0.59,0.0,0.0,1,308
"HTTPS, serving Go through",0,9,0.21,0.32,0.0,0.0,1,308
hash character 15,0,9,0.3,0.06,0.0,0.0,1,308
JPEG format 245,0,9,0.21,0.59,0.0,0.0,1,308
51–55,0,9,0.21,0.36,0.0,0.0,1,308
HEAD method 10,0,9,0.3,0.06,0.0,0.0,1,308
JSON (JavaScript Serialized,0,9,0.21,0.59,0.0,0.0,1,308
"httptest package 191, 200–201",0,9,0.21,0.32,0.0,0.0,1,308
"Header method 49, 71, 85",0,9,0.3,0.06,0.0,0.0,1,308
Object Notation) 174–181,0,9,0.21,0.62,0.0,0.0,1,308
httptest.NewRecorder,0,9,0.21,0.32,0.0,0.0,1,308
"hello function 58–60, 65",0,9,0.3,0.06,0.0,0.0,1,308
creating 178–181,0,9,0.21,0.6,0.0,0.0,1,308
function 202,0,9,0.21,0.36,0.0,0.0,1,308
Hello World Go web app 18,0,9,0.3,0.06,0.0,0.0,1,308
parsing 175–178,0,9,0.21,0.6,0.0,0.0,1,308
HUP (hangup) signal 261,0,9,0.21,0.32,0.0,0.0,1,308
"HelloHandler 62, 64",0,9,0.3,0.06,0.0,0.0,1,308
processing POST requests,0,9,0.21,0.6,0.0,0.0,1,308
heroku create command 266,0,9,0.3,0.06,0.0,0.0,1,308
"json.go file 176, 180 with 81–82",0,9,0.21,0.59,0.0,0.0,1,308
I,1,9,0.3,0.32,0.0,0.0,0,308
"Heroku, deploying Go to",0,9,0.3,0.06,0.0,0.0,1,308
263–266,0,9,0.3,0.09,0.0,0.0,1,308
json.MarshalIndent,0,9,0.21,0.59,0.0,0.0,1,308
hierarchical part 14,0,9,0.3,0.06,0.0,0.0,1,308
IaaS (Infrastructure-as-a-,0,9,0.21,0.32,0.0,0.0,1,308
function 186,0,9,0.21,0.62,0.0,0.0,1,308
ID (unique identifier) 25 Service) 258,0,9,0.21,0.32,0.0,0.0,1,308
high performing web apps 6,0,9,0.3,0.06,0.0,0.0,1,308
json.Unmarshal 175,0,9,0.21,0.59,0.0,0.0,1,308
$HOME/.profile 282 Homebrew 282,0,9,0.3,0.06,0.0,0.0,1,308
JSP (Java ServerPages) 18,0,9,0.21,0.59,0.0,0.0,1,308
"id attribute 165, 167",0,9,0.21,0.32,0.0,0.0,1,308
<id> tag 186,0,9,0.21,0.32,0.0,0.0,1,308
horizontal scaling 4,0,9,0.3,0.06,0.0,0.0,1,308
K,1,9,0.3,0.59,0.0,0.0,0,308
idempotent request methods 11,0,9,0.21,0.32,0.0,0.0,1,308
Host header field 12,0,9,0.3,0.06,0.0,0.0,1,308
IETF (Internet Engineering,0,9,0.21,0.32,0.0,0.0,1,308
HTML,0,9,0.3,0.06,0.0,0.0,1,308
$key variable 110,0,9,0.21,0.59,0.0,0.0,1,308
Task Force) 52,0,9,0.21,0.36,0.0,0.0,1,308
generating responses with,0,9,0.3,0.07,0.0,0.0,1,308
KeyUsage field 54,0,9,0.21,0.59,0.0,0.0,1,308
image/draw package 245,0,9,0.21,0.32,0.0,0.0,1,308
templates 32–37,0,9,0.3,0.09,0.0,0.0,1,308
in-memory storage 126–128,0,9,0.21,0.32,0.0,0.0,1,308
unescaping 118–119,0,9,0.3,0.07,0.0,0.0,1,308
L,1,9,0.3,0.59,0.0,0.0,0,308
include actions 107–109,0,9,0.21,0.32,0.0,0.0,1,308
HTML forms 74–82,0,9,0.3,0.06,0.0,0.0,1,308
"index function 28–29, 32, 37",0,9,0.21,0.32,0.0,0.0,1,308
MultipartForm field 78–79,0,9,0.3,0.07,0.0,0.0,1,308
index.html template 34,0,9,0.21,0.32,0.0,0.0,1,308
overview 75–77,0,9,0.3,0.07,0.0,0.0,1,308
"layout template 33, 35",0,9,0.21,0.59,0.0,0.0,1,308
indexHandler 64,0,9,0.21,0.32,0.0,0.0,1,308
PostForm field 77–78,0,9,0.3,0.07,0.0,0.0,1,308
layout.html file 123,0,9,0.21,0.59,0.0,0.0,1,308
Informational status code 13,0,9,0.21,0.32,0.0,0.0,1,308
processing POST requests,0,9,0.3,0.07,0.0,0.0,1,308
layout.html template file 33,0,9,0.21,0.59,0.0,0.0,1,308
with JSON body 81–82,0,9,0.3,0.09,0.0,0.0,1,308
layouts 119,0,9,0.21,0.59,0.0,0.0,1,308
Infrastructure-as-a-Service. See,1,9,0.39,0.32,0.0,0.0,1,308
289,1,9,0.3,0.82,0.0,0.0,0,309
INDEX,1,6,0.33,0.44,0.0,0.03,1,309
Parallel function 196–197,0,9,0.21,0.6,0.03,0.0,1,309
Linux,0,9,0.3,0.07,0.0,0.0,1,309
MVC (Model-View-Controller),0,9,0.21,0.34,0.0,0.0,1,309
pattern 17,0,9,0.21,0.37,0.0,0.0,1,309
installing Go on 281–282,0,9,0.3,0.09,0.0,0.0,1,309
parallel_test.go file 196–197,0,9,0.21,0.6,0.0,0.0,1,309
MySQL database driver 269,0,9,0.21,0.34,0.0,0.0,1,309
installing PostgreSQL on,0,9,0.3,0.09,0.0,0.0,1,309
"parallelism, difference from",0,9,0.21,0.6,0.0,0.0,1,309
37–38,0,9,0.3,0.11,0.0,0.0,1,309
concurrency 223–225,0,9,0.21,0.64,0.0,0.0,1,309
Linux containers 272,0,9,0.3,0.07,0.0,0.0,1,309
parameters 25,0,9,0.21,0.6,0.0,0.0,1,309
N,1,9,0.3,0.34,0.0,0.0,0,309
"ListenAndServe function 43, 50,",0,9,0.3,0.07,0.0,0.0,1,309
Params type 66,0,9,0.21,0.6,0.0,0.0,1,309
ListenAndServeTLS function 52 55,0,9,0.3,0.07,0.0,0.0,1,309
Parse method 101,0,9,0.21,0.6,0.0,0.0,1,309
named parameter 66,0,9,0.21,0.34,0.0,0.0,1,309
"ParseFiles function 33, 100, 108 ParseForm method 76, 78–79,",0,9,0.21,0.6,0.0,0.0,1,309
navbar templat 34,0,9,0.21,0.34,0.0,0.0,1,309
load function 133–134,0,9,0.3,0.07,0.0,0.0,1,309
navbar.html template file 34 navbar.shtml file 9,0,9,0.21,0.34,0.0,0.0,1,309
"Location header 14, 85",0,9,0.3,0.07,0.0,0.0,1,309
82,0,9,0.12,0.64,0.0,0.0,0,309
"log function 60, 62, 194",0,9,0.3,0.07,0.0,0.0,1,309
ParseGlob function 101,0,9,0.21,0.6,0.0,0.0,1,309
NCSA (National Center for,0,9,0.21,0.34,0.0,0.0,1,309
Logf function 194,0,9,0.3,0.07,0.0,0.0,1,309
ParseMultipartForm,0,9,0.21,0.6,0.0,0.0,1,309
Supercomputing,0,9,0.21,0.37,0.0,0.0,1,309
logic-less template engines 97,0,9,0.3,0.07,0.0,0.0,1,309
"method 76, 78–79, 81",0,9,0.21,0.64,0.0,0.0,1,309
Applications) 9,0,9,0.21,0.37,0.0,0.0,1,309
logic-less templates 17,0,9,0.3,0.07,0.0,0.0,1,309
parsing,0,9,0.21,0.6,0.0,0.0,1,309
nearest method 249–250,0,9,0.21,0.34,0.0,0.0,1,309
JSON 175–178,0,9,0.21,0.62,0.0,0.0,1,309
nesting templates 119–123,0,9,0.21,0.34,0.0,0.0,1,309
templates 100–101,0,9,0.21,0.62,0.0,0.0,1,309
"net/http library 48–49, 69–70,",0,9,0.21,0.34,0.0,0.0,1,309
M,1,9,0.39,0.07,0.0,0.0,0,309
XML 163–171,0,9,0.21,0.62,0.0,0.0,1,309
"76, 82, 89",0,9,0.21,0.37,0.0,0.0,1,309
parts of web apps 16–18,0,9,0.21,0.6,0.0,0.0,1,309
net/http package 18–19,0,9,0.21,0.34,0.0,0.0,1,309
Mac OS X,0,9,0.3,0.07,0.0,0.0,1,309
net/http standard library 27,0,9,0.21,0.34,0.0,0.0,1,309
handler 16–17,0,9,0.21,0.62,0.0,0.0,1,309
installing Go on 282,0,9,0.3,0.09,0.0,0.0,1,309
net/http/httptest package 191,0,9,0.21,0.34,0.0,0.0,1,309
template engine 17–18,0,9,0.21,0.62,0.0,0.0,1,309
installing PostgreSQL on 38,0,9,0.3,0.09,0.0,0.0,1,309
"NewDecoder function 134, 170,",0,9,0.21,0.34,0.0,0.0,1,309
PATCH HTTP method 163,0,9,0.21,0.6,0.0,0.0,1,309
"main function 20, 27, 192, 208,",0,9,0.3,0.07,0.0,0.0,1,309
177,0,9,0.12,0.37,0.0,0.0,0,309
PATCH method 10,0,9,0.21,0.6,0.0,0.0,1,309
"226, 234, 258, 264–265,",0,9,0.3,0.11,0.0,0.0,1,309
"NewEncoder function 174, 181 NewReader function 132",0,9,0.21,0.34,0.0,0.0,1,309
PATH variable 282,0,9,0.21,0.6,0.0,0.0,1,309
268–269,0,9,0.3,0.11,0.0,0.0,1,309
path.Base function 186 PCI (Payment Card,0,9,0.21,0.6,0.0,0.0,1,309
"main package 19, 30, 181",0,9,0.3,0.07,0.0,0.0,1,309
NewServeMux function 27,0,9,0.21,0.34,0.0,0.0,1,309
"main_test.go file 193–195, 197 main.go file 27, 29, 243",0,9,0.3,0.07,0.0,0.0,1,309
NewWriter function 131,0,9,0.21,0.34,0.0,0.0,1,309
Industry) 51,0,9,0.21,0.64,0.0,0.0,1,309
Next method 143,0,9,0.21,0.34,0.0,0.0,1,309
PEM (Privacy Enhanced,0,9,0.21,0.6,0.0,0.0,1,309
maintainable web apps 5–6,0,9,0.3,0.07,0.0,0.0,1,309
NIST (National Institute of Stan-,0,9,0.21,0.34,0.0,0.0,1,309
Email) 54,0,9,0.21,0.64,0.0,0.0,1,309
many to many relationship 143,0,9,0.3,0.07,0.0,0.0,1,309
dards and Technology) 258,0,9,0.21,0.37,0.0,0.0,1,309
percent encoding 15,0,9,0.21,0.6,0.0,0.0,1,309
many to one relationship 143,0,9,0.3,0.07,0.0,0.0,1,309
nohup command 261,0,9,0.21,0.34,0.0,0.0,1,309
percent sign character 15,0,9,0.21,0.6,0.0,0.0,1,309
Marshal function 171–172,0,9,0.3,0.07,0.0,0.0,1,309
NumReplies method 42,0,9,0.21,0.34,0.0,0.0,1,309
"performance, goroutines",0,9,0.21,0.6,0.0,0.0,1,309
"MarshalIndent function 172,",0,9,0.3,0.07,0.0,0.0,1,309
and 228–231,0,9,0.21,0.64,0.0,0.0,1,309
"179, 186",0,9,0.3,0.11,0.0,0.0,1,309
O,1,9,0.3,0.34,0.0,0.0,0,309
photo mosaic web application,0,9,0.21,0.6,0.0,0.0,1,309
"MaxAge field 88, 94",0,9,0.3,0.07,0.0,0.0,1,309
example 240–255,0,9,0.21,0.64,0.0,0.0,1,309
"message passing, with",0,9,0.3,0.07,0.0,0.0,1,309
pipelines 110–111,0,9,0.21,0.6,0.0,0.0,1,309
objects 161,0,9,0.21,0.34,0.0,0.0,1,309
channels 234–235,0,9,0.3,0.11,0.0,0.0,1,309
pkg subdirectory 283,0,9,0.21,0.6,0.0,0.0,1,309
one to many relationship 143,0,9,0.21,0.34,0.0,0.0,1,309
method attribute 11,0,9,0.3,0.07,0.0,0.0,1,309
PKI (Public Key,0,9,0.21,0.6,0.0,0.0,1,309
one to one relationship 143,0,9,0.21,0.34,0.0,0.0,1,309
"methods 41, 161",0,9,0.3,0.07,0.0,0.0,1,309
"Infrastructure) 52, 54",0,9,0.21,0.64,0.0,0.0,1,309
one-to-many relationship,0,9,0.21,0.34,0.0,0.0,1,309
microservices 5,0,9,0.3,0.07,0.0,0.0,1,309
OOP (object-oriented 145–147,0,9,0.21,0.34,0.0,0.0,1,309
Platform-as-a-Service. pom.xml file 263 See PaaS,1,9,0.39,0.6,0.0,0.0,1,309
Model method 152,0,9,0.3,0.07,0.0,0.0,1,309
Model-View-Controller pattern. See MVC,1,9,0.48,0.07,0.0,0.0,1,309
programming) 147,0,9,0.21,0.37,0.0,0.0,1,309
PORT variable 264,0,9,0.21,0.6,0.0,0.0,1,309
"Open function 81, 130, 137–138",0,9,0.21,0.34,0.0,0.0,1,309
Post data structure 26,0,9,0.21,0.6,0.0,0.0,1,309
moderators 23,0,9,0.3,0.07,0.0,0.0,1,309
OPTIONS method 10,0,9,0.21,0.34,0.0,0.0,1,309
"POST method 10, 161",0,9,0.21,0.6,0.0,0.0,1,309
modular web apps 5,0,9,0.3,0.07,0.0,0.0,1,309
ORMs (object-relational,0,9,0.21,0.34,0.0,0.0,1,309
post receiver 140,0,9,0.21,0.6,0.0,0.0,1,309
"mosaic function 245, 247–248,",0,9,0.3,0.07,0.0,0.0,1,309
mappers) 147,0,9,0.21,0.37,0.0,0.0,1,309
"POST requests, processing with",0,9,0.21,0.6,0.0,0.0,1,309
251,0,9,0.21,0.11,0.0,0.0,0,309
os package 130,0,9,0.21,0.34,0.0,0.0,1,309
JSON body 81–82,0,9,0.21,0.64,0.0,0.0,1,309
mosaic_concurrent,0,9,0.3,0.07,0.0,0.0,1,309
os.Create 174,0,9,0.21,0.34,0.0,0.0,1,309
"post.json file 175, 193",0,9,0.21,0.6,0.0,0.0,1,309
directory 252,0,9,0.3,0.11,0.0,0.0,1,309
os.Exit function 203,0,9,0.21,0.34,0.0,0.0,1,309
"post.xml file 171, 174",0,9,0.21,0.6,0.0,0.0,1,309
mosaic.go file 241,0,9,0.3,0.07,0.0,0.0,1,309
os.Open 170,0,9,0.21,0.34,0.0,0.0,1,309
PostById variable 127,0,9,0.21,0.6,0.0,0.0,1,309
MSI file 282,0,9,0.3,0.07,0.0,0.0,1,309
PostForm field 77–78,0,9,0.21,0.6,0.0,0.0,1,309
"multipart/form-data 75, 77, 80",0,9,0.3,0.07,0.0,0.0,1,309
P,1,9,0.3,0.34,0.0,0.0,0,309
PostFormValue method 79,0,9,0.21,0.6,0.0,0.0,1,309
MultipartForm field 78–79,0,9,0.3,0.07,0.0,0.0,1,309
postgres package 37,0,9,0.21,0.6,0.0,0.0,1,309
multiplexer 25–28,0,9,0.3,0.07,0.0,0.0,1,309
"PostgreSQL, installing 37–38",0,9,0.21,0.6,0.0,0.0,1,309
"Must function 33, 101",0,9,0.3,0.07,0.0,0.0,1,309
PaaS (Platform-as-a-Service) 258,0,9,0.21,0.34,0.0,0.0,1,309
mutex flag 249,0,9,0.3,0.07,0.0,0.0,1,309
PostId field 151,0,9,0.21,0.6,0.0,0.0,1,309
package keyword 19,0,9,0.21,0.34,0.0,0.0,1,309
290,1,9,0.39,0.06,0.0,0.0,0,310
INDEX,1,6,0.33,0.42,0.0,0.03,1,310
postRead struct 134,0,9,0.3,0.06,0.03,0.0,1,310
"Read method 73, 130, 133",0,9,0.21,0.32,0.0,0.0,1,310
resources,0,9,0.21,0.59,0.0,0.0,1,310
posts.csv file 131–132,0,9,0.3,0.06,0.0,0.0,1,310
ReadAll method 132,0,9,0.21,0.32,0.0,0.0,1,310
converting actions to 162,0,9,0.21,0.6,0.0,0.0,1,310
PostsByAuthor variable 127,0,9,0.3,0.06,0.0,0.0,1,310
Reader interface 73,0,9,0.21,0.32,0.0,0.0,1,310
making actions properties,0,9,0.21,0.6,0.0,0.0,1,310
PostTestSuite 214,0,9,0.3,0.06,0.0,0.0,1,310
of 163,0,9,0.21,0.62,0.0,0.0,1,310
ReadFile 129,0,9,0.21,0.32,0.0,0.0,1,310
prepared statement 139,0,9,0.3,0.06,0.0,0.0,1,310
respawn 262,0,9,0.21,0.59,0.0,0.0,1,310
reading CSV files 130–132,0,9,0.21,0.32,0.0,0.0,1,310
Principle of Least,0,9,0.3,0.06,0.0,0.0,1,310
responds 8,0,9,0.21,0.59,0.0,0.0,1,310
"readPost variable 146, 152",0,9,0.21,0.32,0.0,0.0,1,310
Principle of Least Surprise 64 Astonishment 64,0,9,0.3,0.06,0.0,0.0,1,310
response headers 13–14,0,9,0.21,0.59,0.0,0.0,1,310
receive-only channels 233,0,9,0.21,0.32,0.0,0.0,1,310
response status code 13 ResponseRecorder struct 202,0,9,0.21,0.59,0.0,0.0,1,310
"red_hello.html file 122 red, green, and blue. See RGB",1,9,0.39,0.32,0.0,0.0,1,310
"print1 function 226, 228–230",0,9,0.3,0.06,0.0,0.0,1,310
print2 function 230,0,9,0.3,0.06,0.0,0.0,1,310
"ResponseWriter 82–87, 98–99",0,9,0.21,0.59,0.0,0.0,1,310
Redirection status code 13,0,9,0.21,0.32,0.0,0.0,1,310
printf function 111,0,9,0.3,0.06,0.0,0.0,1,310
REST (Representational State,0,9,0.21,0.59,0.0,0.0,1,310
Referrer header field 12,0,9,0.21,0.32,0.0,0.0,1,310
"printLetters1 function 226, 229",0,9,0.3,0.06,0.0,0.0,1,310
"Transfer), web services",0,9,0.21,0.62,0.0,0.0,1,310
Register function 138,0,9,0.21,0.32,0.0,0.0,1,310
"printLetters2 function 227–229,",0,9,0.3,0.06,0.0,0.0,1,310
based on 160–163,0,9,0.21,0.62,0.0,0.0,1,310
Related method 152,0,9,0.21,0.32,0.0,0.0,1,310
"231, 234",0,9,0.3,0.09,0.0,0.0,1,310
converting actions to,0,9,0.21,0.6,0.0,0.0,1,310
relational databases 134,0,9,0.21,0.32,0.0,0.0,1,310
"printNumbers1 function 226,",0,9,0.3,0.06,0.0,0.0,1,310
resources 162,0,9,0.21,0.62,0.0,0.0,1,310
relational mappers 147–152,0,9,0.21,0.32,0.0,0.0,1,310
229,0,9,0.21,0.09,0.0,0.0,0,310
making actions properties of,0,9,0.21,0.6,0.0,0.0,1,310
Gorm (Go-ORM) 149–152,0,9,0.21,0.34,0.0,0.0,1,310
printNumbers2 function,0,9,0.3,0.06,0.0,0.0,1,310
resources 163,0,9,0.21,0.62,0.0,0.0,1,310
Sqlx library 148–149,0,9,0.21,0.34,0.0,0.0,1,310
"227–229, 231, 234",0,9,0.3,0.09,0.0,0.0,1,310
Restful API Modeling Lan-,0,9,0.21,0.59,0.0,0.0,1,310
"relationships, SQL 143–147",0,9,0.21,0.32,0.0,0.0,1,310
Privacy Enhanced Email. See,1,9,0.48,0.06,0.0,0.0,1,310
guage. See RAML,1,9,0.39,0.62,0.0,0.0,1,310
one-to-many,0,9,0.21,0.34,0.0,0.0,1,310
PEM,0,9,0.21,0.09,0.0,0.0,0,310
results template 246,0,9,0.21,0.59,0.0,0.0,1,310
relationship 145–147,0,9,0.21,0.36,0.0,0.0,1,310
"private key 52–55, 68",0,9,0.3,0.06,0.0,0.0,1,310
"retrieve function 204–205, 208",0,9,0.21,0.59,0.0,0.0,1,310
setting up databases 143–144,0,9,0.21,0.34,0.0,0.0,1,310
private navigation bar 32 process function 100,0,9,0.3,0.06,0.0,0.0,1,310
RPC retrievePost function 186,0,9,0.21,0.53,0.0,0.0,1,310
Remote Procedure Call. See,1,9,0.39,0.32,0.0,0.0,1,310
"RGB (red, green, and blue) 240 --rm flag 275",0,9,0.21,0.59,0.0,0.0,1,310
request handling 47–68,0,9,0.21,0.32,0.0,0.0,1,310
ProgrammableWeb 157,0,9,0.3,0.06,0.0,0.0,1,310
net/http library 48–49 serving Go 50–55,0,9,0.21,0.34,0.0,0.0,1,310
psql tool 40,0,9,0.3,0.06,0.0,0.0,1,310
route_auth.go file 30,0,9,0.21,0.59,0.0,0.0,1,310
Public Key Infrastructure. See,1,9,0.48,0.06,0.0,0.0,1,310
PKI Go web server 50–51,0,9,0.21,0.27,0.0,0.0,1,310
Row struct 140,0,9,0.21,0.59,0.0,0.0,1,310
--publish flag 275,0,9,0.3,0.06,0.0,0.0,1,310
RPC (Remote Procedure,0,9,0.21,0.59,0.0,0.0,1,310
through HTTPS 51–55,0,9,0.21,0.36,0.0,0.0,1,310
"PUT method 10, 161",0,9,0.3,0.06,0.0,0.0,1,310
Call) 157,0,9,0.21,0.62,0.0,0.0,1,310
using handlers 55–66,0,9,0.21,0.34,0.0,0.0,1,310
RUN command 275,0,9,0.21,0.59,0.0,0.0,1,310
chaining handlers and han-,0,9,0.21,0.36,0.0,0.0,1,310
-run flag 198,0,9,0.21,0.59,0.0,0.0,1,310
Q,1,9,0.39,0.06,0.0,0.0,0,310
dler functions 59–62,0,9,0.21,0.38,0.0,0.0,1,310
Run function 203,0,9,0.21,0.59,0.0,0.0,1,310
handler functions 57–59,0,9,0.21,0.36,0.0,0.0,1,310
query 15,0,9,0.3,0.06,0.0,0.0,1,310
handling requests 55–56,0,9,0.21,0.36,0.0,0.0,1,310
Query method 143,0,9,0.3,0.06,0.0,0.0,1,310
S,1,9,0.3,0.59,0.0,0.0,0,310
other multiplexers 64–66,0,9,0.21,0.36,0.0,0.0,1,310
QueryRow method 140–141,0,9,0.3,0.06,0.0,0.0,1,310
ServeMux and,0,9,0.21,0.36,0.0,0.0,1,310
QueryRowx method 149,0,9,0.3,0.06,0.0,0.0,1,310
DefaultServeMux 63–64,0,9,0.21,0.38,0.0,0.0,1,310
SaaS (Software-as-a-Service) 258,0,9,0.21,0.59,0.0,0.0,1,310
Queryx method 149,0,9,0.3,0.06,0.0,0.0,1,310
using HTTP/2 66–68,0,9,0.21,0.34,0.0,0.0,1,310
safe request methods 11,0,9,0.21,0.59,0.0,0.0,1,310
question mark character 15,0,9,0.3,0.06,0.0,0.0,1,310
request headers 11–12,0,9,0.21,0.32,0.0,0.0,1,310
scalable web apps 4–5,0,9,0.21,0.59,0.0,0.0,1,310
quote character 165,0,9,0.3,0.06,0.0,0.0,1,310
request methods 10,0,9,0.21,0.32,0.0,0.0,1,310
Scan method 140–141,0,9,0.21,0.59,0.0,0.0,1,310
"Request struct 20, 55, 68",0,9,0.21,0.32,0.0,0.0,1,310
scheme name 14,0,9,0.21,0.59,0.0,0.0,1,310
request-response 8 requests,0,9,0.21,0.32,0.0,0.0,1,310
<script> tag 116 Secure Socket Laye. See SSL,1,9,0.39,0.59,0.0,0.0,1,310
R,1,9,0.39,0.06,0.0,0.02,0,310
receiving and processing,0,9,0.21,0.34,0.02,0.0,1,310
"select statement 237–239, 252",0,9,0.21,0.59,0.0,0.0,1,310
r.Form 77,0,9,0.3,0.06,0.0,0.0,1,310
27–32,0,9,0.21,0.36,0.0,0.0,1,310
send-only channels 233,0,9,0.21,0.59,0.0,0.0,1,310
r.PostForm 77,0,9,0.3,0.06,0.0,0.0,1,310
access control using,0,9,0.21,0.36,0.0,0.0,1,310
"ServeHTTP method 55, 57, 207",0,9,0.21,0.59,0.0,0.0,1,310
race condition 249–250,0,9,0.3,0.06,0.0,0.0,1,310
cookies 30–32,0,9,0.21,0.38,0.0,0.0,1,310
"ServeMux 49, 56–57, 63–65, 68",0,9,0.21,0.59,0.0,0.0,1,310
RAML (Restful API Modeling,0,9,0.3,0.06,0.0,0.0,1,310
creating handler,0,9,0.21,0.36,0.0,0.0,1,310
Server Error status code 13,0,9,0.21,0.59,0.0,0.0,1,310
Language) 162,0,9,0.3,0.09,0.0,0.0,1,310
function 28–30,0,9,0.21,0.38,0.0,0.0,1,310
Server response header 14,0,9,0.21,0.59,0.0,0.0,1,310
ran docker-machine env,0,9,0.3,0.06,0.0,0.0,1,310
multiplexer 27–28,0,9,0.21,0.36,0.0,0.0,1,310
"Server struct 43, 51, 57, 64, 66",0,9,0.21,0.59,0.0,0.0,1,310
wsd 278,0,9,0.3,0.09,0.0,0.0,1,310
serving static files 28,0,9,0.21,0.36,0.0,0.0,1,310
"server_test.go file 191, 210, 213,",0,9,0.21,0.59,0.0,0.0,1,310
range action 41,0,9,0.3,0.06,0.0,0.0,1,310
request body 73–74,0,9,0.21,0.34,0.0,0.0,1,310
217,0,9,0.12,0.62,0.0,0.0,0,310
RawQuery field 71,0,9,0.3,0.06,0.0,0.0,1,310
request header 71–73,0,9,0.21,0.34,0.0,0.0,1,310
server-side includes. See SSI,1,9,0.39,0.59,0.0,0.0,1,310
RDBMS (relational database,0,9,0.3,0.06,0.0,0.0,1,310
"server.go file 18, 258",0,9,0.21,0.59,0.0,0.0,1,310
Request struct 70,0,9,0.21,0.34,0.0,0.0,1,310
management system) 134,0,9,0.3,0.09,0.0,0.0,1,310
servers,0,9,0.21,0.59,0.0,0.0,1,310
Request URL 70–71,0,9,0.21,0.34,0.0,0.0,1,310
RDS (Relational Database,0,9,0.3,0.06,0.0,0.0,1,310
deploying Go to 257–263,0,9,0.21,0.6,0.0,0.0,1,310
Service) 258,0,9,0.3,0.09,0.0,0.0,1,310
ResponseWriter 82–87,0,9,0.21,0.34,0.0,0.0,1,310
291,1,9,0.3,0.82,0.0,0.0,0,311
INDEX,1,6,0.33,0.44,0.0,0.03,1,311
parsing templates 100–101,0,9,0.21,0.62,0.03,0.0,1,311
service objects 17,0,9,0.3,0.07,0.0,0.0,1,311
stanzas 262,0,9,0.21,0.34,0.0,0.0,1,311
using block action to define,0,9,0.21,0.62,0.0,0.0,1,311
serving Go 50–55,0,9,0.3,0.07,0.0,0.0,1,311
StartElements 171,0,9,0.21,0.34,0.0,0.0,1,311
default templates 123–124,0,9,0.21,0.64,0.0,0.0,1,311
stateless protocol 8,0,9,0.21,0.34,0.0,0.0,1,311
Go web server 50–51,0,9,0.3,0.09,0.0,0.0,1,311
"test fixture 213, 215",0,9,0.21,0.6,0.0,0.0,1,311
"static files, serving 28",0,9,0.21,0.34,0.0,0.0,1,311
through HTTPS 51–55,0,9,0.3,0.09,0.0,0.0,1,311
test-driven development. See,1,9,0.39,0.6,0.0,0.0,1,311
TDD,0,9,0.12,0.81,0.0,0.0,0,311
static templates 17,0,9,0.21,0.34,0.0,0.0,1,311
Session data structure 26,0,9,0.3,0.07,0.0,0.0,1,311
StatusInternalServerError 184,0,9,0.21,0.34,0.0,0.0,1,311
"_test.go files 191, 194, 197",0,9,0.21,0.6,0.0,0.0,1,311
session function 31–32,0,9,0.3,0.07,0.0,0.0,1,311
"store function 127, 133",0,9,0.21,0.34,0.0,0.0,1,311
TestDecode test case 194,0,9,0.21,0.6,0.0,0.0,1,311
set actions 105–107,0,9,0.3,0.07,0.0,0.0,1,311
storing data 125–152 file storage 128–134,0,9,0.21,0.34,0.0,0.0,1,311
TestHandleGet function 212 testing applications 190–222,0,9,0.21,0.6,0.0,0.0,1,311
"Set-Cookie response header 14, 88",0,9,0.3,0.07,0.0,0.0,1,311
gob package 132–134,0,9,0.21,0.37,0.0,0.0,1,311
SetCookie function 89,0,9,0.3,0.07,0.0,0.0,1,311
dependency injection 205–210,0,9,0.21,0.62,0.0,0.0,1,311
reading and writing CSV,0,9,0.21,0.37,0.0,0.0,1,311
setMessage function 93,0,9,0.3,0.07,0.0,0.0,1,311
HTTP testing 200–204,0,9,0.21,0.62,0.0,0.0,1,311
files 130–132,0,9,0.21,0.4,0.0,0.0,1,311
setting up Go 282–283,0,9,0.3,0.07,0.0,0.0,1,311
overview 191,0,9,0.21,0.62,0.0,0.0,1,311
in-memory storage 126–128,0,9,0.21,0.36,0.0,0.0,1,311
setUp function 203–204,0,9,0.3,0.07,0.0,0.0,1,311
test doubles 204–210,0,9,0.21,0.62,0.0,0.0,1,311
relational mappers 147–152,0,9,0.21,0.36,0.0,0.0,1,311
third-party Go testing,0,9,0.21,0.62,0.0,0.0,1,311
"SetUpSuite function 213, 216",0,9,0.3,0.07,0.0,0.0,1,311
Gorm (Go-ORM) 149–152,0,9,0.21,0.37,0.0,0.0,1,311
libraries 210–222,0,9,0.21,0.64,0.0,0.0,1,311
SetUpTest function 213–214,0,9,0.3,0.07,0.0,0.0,1,311
Sqlx 148–149,0,9,0.21,0.37,0.0,0.0,1,311
Ginkgo testing,0,9,0.21,0.64,0.0,0.0,1,311
short flag 195,0,9,0.3,0.07,0.0,0.0,1,311
SQL 134–143,0,9,0.21,0.36,0.0,0.0,1,311
framework 216–222,0,9,0.21,0.66,0.0,0.0,1,311
showMessage function 93,0,9,0.3,0.07,0.0,0.0,1,311
connecting to,0,9,0.21,0.37,0.0,0.0,1,311
gocheck testing,0,9,0.21,0.64,0.0,0.0,1,311
Simple Object Access Protocol.,0,9,0.3,0.07,0.0,0.0,1,311
database 137–138,0,9,0.21,0.4,0.0,0.0,1,311
package 211–216,0,9,0.21,0.66,0.0,0.0,1,311
See SOAP,1,9,0.48,0.11,0.0,0.0,1,311
SPA creating post 138–140,0,9,0.21,0.28,0.0,0.0,1,311
unit testing 191–200,0,9,0.21,0.62,0.0,0.0,1,311
Single Page Applications. See,1,9,0.48,0.07,0.0,0.0,1,311
deleting post 141–142,0,9,0.21,0.37,0.0,0.0,1,311
benchmarking 197–200,0,9,0.21,0.64,0.0,0.0,1,311
Skip function 195,0,9,0.3,0.07,0.0,0.0,1,311
getting all posts 142–143,0,9,0.21,0.37,0.0,0.0,1,311
running tests in,0,9,0.21,0.64,0.0,0.0,1,311
"Sleep function 227, 231",0,9,0.3,0.07,0.0,0.0,1,311
relationships 143–147 retrieving post 140–141,0,9,0.21,0.37,0.0,0.0,1,311
parallel 196–197,0,9,0.21,0.66,0.0,0.0,1,311
SOAP (Simple Object Access,0,9,0.3,0.07,0.0,0.0,1,311
"testing package 190–191, 194, skipping test cases 195–196",0,9,0.21,0.6,0.0,0.0,1,311
"Protocol), web services based on 157–160",0,9,0.3,0.11,0.0,0.0,1,311
setting up database 134–135,0,9,0.21,0.37,0.0,0.0,1,311
updating post 141,0,9,0.21,0.37,0.0,0.0,1,311
"197, 203, 210, 212, 216, 219",0,9,0.21,0.64,0.0,0.0,1,311
Software-as-a-Service. See SaaS,1,9,0.48,0.07,0.0,0.0,1,311
strconv.Atoi 186,0,9,0.21,0.34,0.0,0.0,1,311
testing.T function 212,0,9,0.21,0.6,0.0,0.0,1,311
SPA (Single Page,0,9,0.3,0.07,0.0,0.0,1,311
String method 88,0,9,0.21,0.34,0.0,0.0,1,311
testing.T struct 194,0,9,0.21,0.6,0.0,0.0,1,311
Applications) 153,0,9,0.3,0.11,0.0,0.0,1,311
StripPrefix function 28,0,9,0.21,0.34,0.0,0.0,1,311
testing/httptest package 200,0,9,0.21,0.6,0.0,0.0,1,311
SQL (Structured Query,0,9,0.3,0.07,0.0,0.0,1,311
struct tags 165,0,9,0.21,0.34,0.0,0.0,1,311
Language) 134–143,0,9,0.3,0.11,0.0,0.0,1,311
TestLongRunningTest test 196,0,9,0.21,0.6,0.0,0.0,1,311
StructScan method 148–149,0,9,0.21,0.34,0.0,0.0,1,311
connecting to database,0,9,0.3,0.09,0.0,0.0,1,311
TestMain function 203,0,9,0.21,0.6,0.0,0.0,1,311
Structured Query Language.,0,9,0.21,0.34,0.0,0.0,1,311
"See Text interface 206–207, 209–210",1,9,0.39,0.55,0.0,0.0,1,311
137–138,0,9,0.3,0.11,0.0,0.0,1,311
SQL,0,9,0.12,0.37,0.0,0.0,0,311
creating post 138–140,0,9,0.3,0.09,0.0,0.0,1,311
third-party Go testing,0,9,0.21,0.6,0.0,0.0,1,311
Success status code 13,0,9,0.21,0.34,0.0,0.0,1,311
deleting post 141–142,0,9,0.3,0.09,0.0,0.0,1,311
libraries 210–222,0,9,0.21,0.64,0.0,0.0,1,311
switch statement 237,0,9,0.21,0.34,0.0,0.0,1,311
getting all posts 142–143,0,9,0.3,0.09,0.0,0.0,1,311
Ginkgo testing,0,9,0.21,0.62,0.0,0.0,1,311
"sync package 231, 249",0,9,0.21,0.34,0.0,0.0,1,311
framework 216–222,0,9,0.21,0.64,0.0,0.0,1,311
relationships 143–147,0,9,0.3,0.09,0.0,0.0,1,311
"synchronization, with",0,9,0.21,0.34,0.0,0.0,1,311
gocheck testing package,0,9,0.21,0.62,0.0,0.0,1,311
one-to-many,0,9,0.3,0.11,0.0,0.0,1,311
channels 233–234,0,9,0.21,0.37,0.0,0.0,1,311
211–216,0,9,0.21,0.64,0.0,0.0,1,311
relationship 145–147,0,9,0.3,0.13,0.0,0.0,1,311
Thread data structure 26 Thread struct 38–42,0,9,0.21,0.6,0.0,0.0,1,311
setting up databases 143–144,0,9,0.3,0.11,0.0,0.0,1,311
T,1,9,0.3,0.34,0.0,0.0,0,311
retrieving post 140–141,0,9,0.3,0.09,0.0,0.0,1,311
thread.go file 38,0,9,0.21,0.6,0.0,0.0,1,311
setting up database 134–135,0,9,0.3,0.09,0.0,0.0,1,311
threads 23,0,9,0.21,0.6,0.0,0.0,1,311
t1.html file 102,0,9,0.21,0.34,0.0,0.0,1,311
updating post 141,0,9,0.3,0.09,0.0,0.0,1,311
Threads function 40–41,0,9,0.21,0.6,0.0,0.0,1,311
"t2.html file 102, 108",0,9,0.21,0.34,0.0,0.0,1,311
"sql package 137, 148–149",0,9,0.3,0.07,0.0,0.0,1,311
threads variable 41,0,9,0.21,0.6,0.0,0.0,1,311
TDD (test-driven,0,9,0.21,0.34,0.0,0.0,1,311
"sql.DB struct 137–138, 140–143,",0,9,0.3,0.07,0.0,0.0,1,311
Threw statement 235,0,9,0.21,0.6,0.0,0.0,1,311
"development) 195, 216",0,9,0.21,0.37,0.0,0.0,1,311
"205, 209",0,9,0.3,0.11,0.0,0.0,1,311
tile picture 240,0,9,0.21,0.6,0.0,0.0,1,311
tearDown function 203,0,9,0.21,0.34,0.0,0.0,1,311
sql.Driver package 140,0,9,0.3,0.07,0.0,0.0,1,311
tilesDB function 242,0,9,0.21,0.6,0.0,0.0,1,311
"TearDownSuite function 213,",0,9,0.21,0.34,0.0,0.0,1,311
sql.Row struct 140,0,9,0.3,0.07,0.0,0.0,1,311
time.Sleep function 197,0,9,0.21,0.6,0.0,0.0,1,311
216,0,9,0.12,0.37,0.0,0.0,0,311
sql.Stmt interface 140,0,9,0.3,0.07,0.0,0.0,1,311
template engine 17–18,0,9,0.21,0.34,0.0,0.0,1,311
TLS (Transport Security,0,9,0.21,0.6,0.0,0.0,1,311
Sqlx library 148–149,0,9,0.3,0.07,0.0,0.0,1,311
Layer) 52,0,9,0.21,0.64,0.0,0.0,1,311
"Template struct 29, 100",0,9,0.21,0.34,0.0,0.0,1,311
src directory 18,0,9,0.3,0.07,0.0,0.0,1,311
"tmpl.html file 99, 103–104, 106,",0,9,0.21,0.6,0.0,0.0,1,311
template.New function 112,0,9,0.21,0.34,0.0,0.0,1,311
117,0,9,0.12,0.64,0.0,0.0,0,311
src subdirectory 283,0,9,0.3,0.07,0.0,0.0,1,311
templates and template,0,9,0.21,0.34,0.0,0.0,1,311
TRACE method 10,0,9,0.21,0.6,0.0,0.0,1,311
"SSI (server-side includes) 9, 97",0,9,0.3,0.07,0.0,0.0,1,311
engines 97–98,0,9,0.21,0.37,0.0,0.0,1,311
executing templates 101–102,0,9,0.21,0.36,0.0,0.0,1,311
transient 92,0,9,0.21,0.6,0.0,0.0,1,311
SSL (Secure Socket Layer) 52,0,9,0.3,0.07,0.0,0.0,1,311
292,1,9,0.39,0.06,0.0,0.0,0,312
INDEX,1,6,0.33,0.42,0.0,0.03,1,312
U,1,9,0.39,0.06,0.03,0.0,0,312
Windows,0,9,0.21,0.59,0.0,0.0,1,312
"verbose flag 195, 212",0,9,0.21,0.32,0.0,0.0,1,312
verbs 161,0,9,0.21,0.32,0.0,0.0,1,312
installing Go on 282,0,9,0.21,0.6,0.0,0.0,1,312
"UDDI (Universal Description,",0,9,0.3,0.06,0.0,0.0,1,312
vertical scaling 4,0,9,0.21,0.32,0.0,0.0,1,312
installing PostgreSQL on 38,0,9,0.21,0.6,0.0,0.0,1,312
"Discovery, and",0,9,0.3,0.09,0.0,0.0,1,312
VM (virtual machine) 257,0,9,0.21,0.32,0.0,0.0,1,312
with action 107,0,9,0.21,0.59,0.0,0.0,1,312
Integration) 157,0,9,0.3,0.09,0.0,0.0,1,312
VPS (virtual private server) 277,0,9,0.21,0.32,0.0,0.0,1,312
workspace 282,0,9,0.21,0.59,0.0,0.0,1,312
unbuffered channels 233,0,9,0.3,0.06,0.0,0.0,1,312
Write check box 277,0,9,0.21,0.59,0.0,0.0,1,312
underscore character 141 unescaping HTML 118–119,0,9,0.3,0.06,0.0,0.0,1,312
W,1,9,0.3,0.32,0.0,0.0,0,312
"Write method 130–131, 133",0,9,0.21,0.59,0.0,0.0,1,312
WriteFile 129,0,9,0.21,0.59,0.0,0.0,1,312
unique identifier. See ID,1,9,0.48,0.06,0.0,0.0,1,312
w1 channel 234,0,9,0.21,0.32,0.0,0.0,1,312
WriteHeader method 83–84,0,9,0.21,0.59,0.0,0.0,1,312
unit testing 191–200,0,9,0.3,0.06,0.0,0.0,1,312
w2 channel 234 WADL (Web Application,0,9,0.21,0.32,0.0,0.0,1,312
writing CSV files 130–132,0,9,0.21,0.59,0.0,0.0,1,312
benchmarking 197–200,0,9,0.3,0.07,0.0,0.0,1,312
WS-Addressing 156,0,9,0.21,0.59,0.0,0.0,1,312
running tests in parallel,0,9,0.3,0.07,0.0,0.0,1,312
Description Language) 162,0,9,0.21,0.36,0.0,0.0,1,312
ws-d image 278,0,9,0.21,0.59,0.0,0.0,1,312
196–197,0,9,0.3,0.09,0.0,0.0,1,312
"Wait method 231–232, 252",0,9,0.21,0.32,0.0,0.0,1,312
ws-h executable binary 265,0,9,0.21,0.59,0.0,0.0,1,312
skipping test cases 195–196,0,9,0.3,0.07,0.0,0.0,1,312
"WaitGroup 231, 252",0,9,0.21,0.32,0.0,0.0,1,312
ws-s directory 261,0,9,0.21,0.59,0.0,0.0,1,312
"Universal Description, Discov-",0,9,0.3,0.06,0.0,0.0,1,312
web apps,0,9,0.21,0.32,0.0,0.0,1,312
WS-Security 156,0,9,0.21,0.59,0.0,0.0,1,312
"ery, and Integration. See",1,9,0.48,0.09,0.0,0.0,1,312
high performing 6,0,9,0.21,0.34,0.0,0.0,1,312
ws.conf file 262,0,9,0.21,0.59,0.0,0.0,1,312
UDDI,0,9,0.3,0.09,0.0,0.0,1,312
how they work 6–7,0,9,0.21,0.34,0.0,0.0,1,312
WSDL (Web Service Definition,0,9,0.21,0.59,0.0,0.0,1,312
"Unmarshal function 169, 177,",0,9,0.3,0.06,0.0,0.0,1,312
maintainable 5–6,0,9,0.21,0.34,0.0,0.0,1,312
Language) 156,0,9,0.21,0.62,0.0,0.0,1,312
199,0,9,0.21,0.09,0.0,0.0,0,312
modular 5,0,9,0.21,0.34,0.0,0.0,1,312
"update method 141–142, 187",0,9,0.3,0.06,0.0,0.0,1,312
WSDL message 159,0,9,0.21,0.59,0.0,0.0,1,312
parts of 16–18,0,9,0.21,0.34,0.0,0.0,1,312
uploading files 80–81 Upstart job 262,0,9,0.3,0.06,0.0,0.0,1,312
WWW-Authenticate response,0,9,0.21,0.59,0.0,0.0,1,312
handler 16–17,0,9,0.21,0.36,0.0,0.0,1,312
header 14,0,9,0.21,0.62,0.0,0.0,1,312
template engine 17–18,0,9,0.21,0.36,0.0,0.0,1,312
URI (uniform resource,0,9,0.3,0.06,0.0,0.0,1,312
scalable 4–5,0,9,0.21,0.34,0.0,0.0,1,312
"locater) 10, 14–15",0,9,0.3,0.09,0.0,0.0,1,312
Web Service Definition Lan- guage. See WSDL,1,9,0.39,0.32,0.0,0.0,1,312
X,1,9,0.3,0.59,0.0,0.0,0,312
url.URL type 70,0,9,0.3,0.06,0.0,0.0,1,312
URN (uniform resource,0,9,0.3,0.06,0.0,0.0,1,312
web services 155–189,0,9,0.21,0.32,0.0,0.0,1,312
X-XSS-Protection 119,0,9,0.21,0.59,0.0,0.0,1,312
name) 14,0,9,0.3,0.09,0.0,0.0,1,312
creating Go web services,0,9,0.21,0.34,0.0,0.0,1,312
X.509 certificate 54,0,9,0.21,0.59,0.0,0.0,1,312
User data structure 26,0,9,0.3,0.06,0.0,0.0,1,312
181–189,0,9,0.21,0.36,0.0,0.0,1,312
XHR (XMLHttpRequest) 11,0,9,0.21,0.59,0.0,0.0,1,312
user stories 216,0,9,0.3,0.06,0.0,0.0,1,312
JSON and 174–181,0,9,0.21,0.34,0.0,0.0,1,312
XML (eXtensible Markupl Language) 163–174,0,9,0.21,0.59,0.0,0.0,1,312
user-agent 8,0,9,0.3,0.06,0.0,0.0,1,312
creating JSON 178–181,0,9,0.21,0.36,0.0,0.0,1,312
User-Agent header field 12,0,9,0.3,0.06,0.0,0.0,1,312
parsing JSON 175–178,0,9,0.21,0.36,0.0,0.0,1,312
creating 171–174,0,9,0.21,0.6,0.0,0.0,1,312
user.CreateSession method 30,0,9,0.3,0.06,0.0,0.0,1,312
overview 155–157,0,9,0.21,0.34,0.0,0.0,1,312
parsing 163–171,0,9,0.21,0.6,0.0,0.0,1,312
user.go file 38,0,9,0.3,0.06,0.0,0.0,1,312
REST-based web services,0,9,0.21,0.34,0.0,0.0,1,312
"xml library 171, 179",0,9,0.21,0.59,0.0,0.0,1,312
UserId named field 31,0,9,0.3,0.06,0.0,0.0,1,312
160–163,0,9,0.21,0.36,0.0,0.0,1,312
XML-RPC-based web,0,9,0.21,0.59,0.0,0.0,1,312
util.go file 31,0,9,0.3,0.06,0.0,0.0,1,312
converting actions to,0,9,0.21,0.36,0.0,0.0,1,312
services 156,0,9,0.21,0.62,0.0,0.0,1,312
Uuid 31,0,9,0.3,0.06,0.0,0.0,1,312
resources 162,0,9,0.21,0.38,0.0,0.0,1,312
xml.go file 171,0,9,0.21,0.59,0.0,0.0,1,312
making actions properties,0,9,0.21,0.36,0.0,0.0,1,312
xml.Header 173,0,9,0.21,0.59,0.0,0.0,1,312
V,1,9,0.39,0.06,0.0,0.0,0,312
of resources 163,0,9,0.21,0.38,0.0,0.0,1,312
xml.Name file 166,0,9,0.21,0.59,0.0,0.0,1,312
SOAP-based web services 157–160,0,9,0.21,0.34,0.0,0.0,1,312
xml.Unmarshal 163,0,9,0.21,0.59,0.0,0.0,1,312
-v flag 195,0,9,0.3,0.06,0.0,0.0,1,312
XMLName file 166,0,9,0.21,0.59,0.0,0.0,1,312
XML and 163–174,0,9,0.21,0.34,0.0,0.0,1,312
$value variable 110,0,9,0.3,0.06,0.0,0.0,1,312
XSS (cross-site scripting) 115,0,9,0.21,0.59,0.0,0.0,1,312
creating XML 171–174,0,9,0.21,0.36,0.0,0.0,1,312
value variable 240,0,9,0.3,0.06,0.0,0.0,1,312
parsing XML 163–171,0,9,0.21,0.36,0.0,0.0,1,312
variables 110–111,0,9,0.3,0.06,0.0,0.0,1,312
"XSS attacks, defending",0,9,0.21,0.59,0.0,0.0,1,312
web template 96,0,9,0.21,0.32,0.0,0.0,1,312
"variadic function 37, 100, 151",0,9,0.3,0.06,0.0,0.0,1,312
against 116–118,0,9,0.21,0.62,0.0,0.0,1,312
GO/PROGRAMMING,0,10,0.32,0.01,0.0,0.02,1,313
Go Web Programming,0,29,0.68,0.09,0.02,0.0,1,313
SEE  INSERT,0,9,0.21,0.65,0.0,0.0,1,313
Sau Sheong Chang,0,13,0.28,0.22,0.0,0.01,1,313
T,0,50,1.0,0.01,0.01,0.0,0,313
"he Go language handles the demands of scalable, high-",0,11,0.34,0.05,0.0,0.0,1,313
performance web applications by providing clean and fast,0,11,0.34,0.05,0.0,0.0,1,313
“,0,30,0.52,0.58,0.0,0.0,0,313
As the importance of the,0,13,0.28,0.6,0.0,0.0,1,313
"compiled code, garbage collection, a simple concurrency",0,11,0.34,0.05,0.0,0.0,1,313
"Go language grows, the need",0,13,0.28,0.57,0.0,0.0,1,313
"model, and a fantastic standard library. It’s perfect for writing",0,11,0.34,0.01,0.0,0.0,1,313
"microservices or building scalable, maintainable systems.",0,11,0.34,0.01,0.0,0.0,1,313
for a great tutorial grows with,0,13,0.28,0.57,0.0,0.0,1,313
”,0,30,0.52,0.83,0.0,0.0,0,313
it. This book ﬁ lls this need,0,13,0.28,0.57,0.0,0.0,1,313
.,0,12,0.17,0.82,0.0,0.0,0,313
Go Web Programming,0,13,0.38,0.01,0.0,0.0,1,313
teaches you how to build web applica-,0,11,0.34,0.19,0.0,0.0,1,313
Oracle Corporation —Shaun Lippy,0,11,0.25,0.63,0.0,0.0,1,313
tions in Go using modern design principles. You’ll learn how,0,11,0.34,0.01,0.0,0.0,1,313
to implement the dependency injection design pattern for,0,11,0.34,0.01,0.0,0.0,1,313
"writing test doubles, use concurrency in web applications, and",0,11,0.34,0.01,0.0,0.0,1,313
“,0,30,0.52,0.57,0.0,0.0,0,313
"An excellent book, whether",0,13,0.28,0.59,0.0,0.0,1,313
and XML in web services. Along,0,11,0.25,0.23,0.0,0.0,1,313
create and consume JSON,0,11,0.34,0.01,0.0,0.0,1,313
"the way, you’ll discover how to minimize your dependence on",0,11,0.34,0.01,0.0,0.0,1,313
you are an experienced,0,13,0.28,0.6,0.0,0.0,1,313
"external frameworks, and you’ll pick up valuable productivity",0,11,0.34,0.01,0.0,0.0,1,313
"gopher, or you know",0,13,0.28,0.61,0.0,0.0,1,313
techniques for testing and deploying your applications.,0,11,0.34,0.01,0.0,0.0,1,313
web development but,0,13,0.28,0.61,0.0,0.0,1,313
”,0,30,0.52,0.77,0.0,0.0,0,313
are new to Go.,0,13,0.28,0.63,0.0,0.0,1,313
What’s Inside,0,14,0.39,0.01,0.0,0.0,1,313
—Benoit Benedetti,0,11,0.25,0.63,0.0,0.0,1,313
Basics,0,11,0.34,0.04,0.0,0.0,1,313
●,0,4,0.11,0.03,0.0,0.0,0,313
University of Nice,0,11,0.25,0.64,0.0,0.0,1,313
Testing and benchmarking,0,11,0.34,0.04,0.0,0.0,1,313
●,0,4,0.11,0.03,0.0,0.01,0,313
“,0,30,0.52,0.57,0.01,0.0,0,313
Everything you need to get,0,13,0.28,0.59,0.0,0.0,1,313
Using concurrency,0,11,0.34,0.04,0.0,0.0,1,313
●,0,4,0.11,0.03,0.0,0.01,0,313
started writing and deploying,0,13,0.28,0.57,0.01,0.0,1,313
"● Deploying to standalone servers, PaaS, and Docker",0,11,0.34,0.03,0.0,0.0,1,313
”,0,30,0.52,0.77,0.0,0.0,0,313
web apps in Go.,0,13,0.28,0.62,0.0,0.0,1,313
"Dozens of tips, tricks, and techniques",0,11,0.34,0.04,0.0,0.0,1,313
●,0,4,0.11,0.03,0.0,0.01,0,313
"—Brian Cooksey, Zapier",0,11,0.25,0.61,0.01,0.0,1,313
This book assumes you’re familiar with Go language basics,0,11,0.34,0.01,0.0,0.0,1,313
and the general concepts of web development.,0,11,0.34,0.01,0.0,0.0,1,313
“,0,30,0.52,0.57,0.0,0.0,0,313
Deﬁ nitive how-to guide for,0,13,0.28,0.59,0.0,0.0,1,313
”,0,30,0.52,0.81,0.0,0.0,0,313
web development in Go.,0,13,0.28,0.58,0.0,0.0,1,313
Sau Sheong Chang,0,13,0.38,0.01,0.0,0.0,1,313
is Managing Director of Digital Technology,0,11,0.34,0.16,0.0,0.0,1,313
at Singapore Power and an active contributor to the Ruby and,0,11,0.34,0.01,0.0,0.0,1,313
"—Gualtiero Testa, Factor-y S.r.l.",0,11,0.25,0.58,0.0,0.0,1,313
Go communities.,0,11,0.34,0.01,0.0,0.04,1,313
"To download their free eBook in PDF, ePub, and Kindle formats,",0,10,0.32,0.04,0.04,0.0,1,313
owners of this book should visit,0,10,0.32,0.16,0.0,0.0,1,313
manning.com/books/go-web-programming,0,10,0.32,0.12,0.0,0.0,1,313
BULLETIN,1,12,0.52,0.12,0.0,0.0,1,1
MEDEDEELINGEN,1,12,0.43,0.45,0.0,0.01,1,1
DU,1,5,0.27,0.19,0.01,0.0,0,1
VAN HET,1,5,0.27,0.56,0.0,0.01,1,1
Musée royal d'Histoire,1,13,0.54,0.05,0.01,0.0,1,1
Koninklij k Natuurhistorisch,1,13,0.45,0.41,0.0,0.0,1,1
de,1,17,0.54,0.17,0.0,0.0,0,1
naturelle Belgique,1,13,0.54,0.06,0.0,0.0,1,1
Muséum van België,1,13,0.45,0.46,0.0,0.01,1,1
"Deel XII, n r 45.",1,10,0.38,0.44,0.01,0.0,1,1
"Tome XII, n° 45.",1,10,0.47,0.17,0.0,0.0,1,1
"Bruxelles, décembre 1936.",1,10,0.47,0.02,0.0,0.0,1,1
"Brussel, December 1936.",1,10,0.38,0.5,0.0,0.05,1,1
CRUSTACÉS DÉCAPODES NOUVEAUX OU PEU CONNUS,0,10,0.29,0.05,0.05,0.0,1,1
"DE L'ÉPOQUE CRÉTACIQUE,",0,10,0.2,0.22,0.0,0.01,1,1
par Victor,0,10,0.29,0.18,0.01,0.0,1,1
(Bruxelles).,0,10,0.2,0.46,0.0,0.0,1,1
V A N S T R A E L E N,0,6,0.11,0.29,0.0,0.04,1,1
"Les notes rassemblées ici se, rapportent à, des Crustacés",0,10,0.29,0.07,0.04,0.0,1,1
"Décapodes crétaciques, se trouvant dans diverses collections",0,10,0.29,0.05,0.0,0.0,1,1
officielles ou privées. Il m'a été permis d'examiner ces précieux,0,10,0.29,0.05,0.0,0.0,1,1
"fossiles, grâce à l'obligeante confiance des confrères ayant la",0,10,0.29,0.05,0.0,0.0,1,1
garde des collections. Ils sont trop nombreux pour être cités,0,10,0.29,0.05,0.0,0.0,1,1
"tous, mais qu'ils veuillent bien trouver ici l'expression de ma",0,10,0.29,0.05,0.0,0.0,1,1
reconnaissance.,0,10,0.29,0.05,0.0,0.0,1,1
Tout a été mis en œuvre pour condenser le texte de ces notes.,0,10,0.29,0.07,0.0,0.0,1,1
Seules les formes nouvelles sont l'objet d'une description. Les,0,10,0.29,0.05,0.0,0.0,1,1
"espèces crétaciques, connues antérieurement à cette publication",0,10,0.29,0.05,0.0,0.0,1,1
"et reconnues dans ces collections, ne sont citées que si elles pro-",0,10,0.29,0.05,0.0,0.0,1,1
"viennent de localités où, jusqu'à présent, leur existence n'a pas",0,10,0.29,0.05,0.0,0.0,1,1
été signalée.,0,10,0.29,0.05,0.0,0.02,1,1
Sous-ordre des REPTANTIA.,1,10,0.38,0.24,0.02,0.01,1,1
Section des Palinura.,1,10,0.38,0.28,0.01,0.01,1,1
Tribu des ERYONIDEA.,0,10,0.2,0.26,0.01,0.01,1,1
Famille des ERYONIDAE.,1,10,0.38,0.25,0.01,0.01,1,1
Genre ERYON,1,10,0.38,0.25,0.01,0.0,1,1
D E S M A I I E S T .,0,6,0.11,0.42,0.0,0.01,1,1
Eryon sp.,1,10,0.38,0.34,0.01,0.0,1,1
"(Pl. I, fig. 1.)",0,10,0.2,0.32,0.0,0.01,1,1
"— Depuis la fin du Jurassique, les",0,10,0.2,0.21,0.01,0.0,1,1
Eryoniclae,1,10,0.38,0.62,0.0,0.0,1,1
D E S C R I P T I O N .,0,6,0.2,0.07,0.0,0.0,1,1
sont extrêmement rares. On connaissait déjà,0,10,0.29,0.05,0.0,0.0,1,1
Eryon neocomiensis,1,10,0.38,0.52,0.0,0.0,1,1
2 Y.,1,6,0.39,0.15,0.0,0.0,1,2
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.37,0.0,0.02,1,2
"Hohnegge;r Ms. (*), représenté par un seul spécimen dans le",0,10,0.29,0.16,0.02,0.0,1,2
Néocomien de Silésie. Il y a donc une lacune paléontologique,0,10,0.29,0.15,0.0,0.0,1,2
considérable s'étendant du Néocomien à l'Holocène. Un deuxième,0,10,0.29,0.15,0.0,0.0,1,2
"Eryon appartenant probablement à une espèce nouvelle, a été",1,10,0.47,0.15,0.0,0.0,1,2
},1,6,0.2,0.21,0.0,0.0,0,2
rencontré dans le Néocomien des Préalpes externes. Il se pré-,0,10,0.29,0.15,0.0,0.0,1,2
"sente à l'état d'empreinte et est trop incomplet, pour qu'on puisse",0,10,0.29,0.15,0.0,0.0,1,2
établir une coupure spécifique nouvelle et la définir avec une,0,10,0.29,0.15,0.0,0.0,1,2
précision suffisante.,0,10,0.29,0.15,0.0,0.0,1,2
"Le céphalothorax n'est pas dépressif orme et suborbiculaire,",0,10,0.29,0.17,0.0,0.0,1,2
comme on le voit souvent chez les formes jurassiques. Il est,0,10,0.29,0.15,0.0,0.0,1,2
allongé et pourvu d'une carène médiane et de carènes margi-,0,10,0.29,0.15,0.0,0.0,1,2
nales.,0,10,0.29,0.15,0.0,0.0,1,2
Le pléoii surtout a la structure qui caractérise,0,10,0.29,0.17,0.0,0.0,1,2
Eryon. La sur-,1,10,0.38,0.67,0.0,0.0,1,2
"face articulaire postérieure d'un pléonite simule, avec la face",0,10,0.29,0.15,0.0,0.0,1,2
"articulaire antérieure du pléonite suivant, un losange. Des tuber-",0,10,0.29,0.15,0.0,0.0,1,2
cules sont disposés selon la ligne médiane du pléon.,0,10,0.29,0.15,0.0,0.01,1,2
— Néocomien (« Néocomien à Céphalopodes »).,0,10,0.2,0.28,0.01,0.0,1,2
G I S E M E N T .,0,6,0.2,0.17,0.0,0.01,1,2
"— Feradzo, près Châtel-Saint-Denis (Suisse). —",0,10,0.2,0.27,0.01,0.0,1,2
LOCALITÉ.,0,6,0.2,0.17,0.0,0.0,1,2
Musée d'Histoire naturelle de Genève.,0,10,0.29,0.15,0.0,0.02,1,2
Tribu des SCYLLA LIIDEA.,0,10,0.2,0.34,0.02,0.02,1,2
Famille des PALINURIDAE.,1,10,0.38,0.33,0.02,0.02,1,2
Genre L1NUPARUS,1,10,0.38,0.34,0.02,0.0,1,2
W H I T E .,0,6,0.11,0.57,0.0,0.02,1,2
Linuparus dentatus,1,10,0.38,0.24,0.02,0.0,1,2
(A. Milne-Edwards MS).,0,10,0.2,0.46,0.0,0.0,1,2
"(Pl. I, fig. 2.)",0,10,0.2,0.42,0.0,0.02,1,2
"? Podocrates dentatus,",1,10,0.38,0.22,0.02,0.0,1,2
A. Milne-Edwards Ms.,0,10,0.2,0.45,0.0,0.0,1,2
"1931. Linuparus dentatus,",1,10,0.47,0.17,0.0,0.0,1,2
"Yan Straelen, p. 91, fig. 1.",0,10,0.2,0.44,0.0,0.01,1,2
— A. Milne-Edwards a donné le nom de,0,10,0.2,0.31,0.01,0.0,1,2
Podo-,1,10,0.38,0.77,0.0,0.0,1,2
D E S C R I P T I O N .,0,6,0.2,0.17,0.0,0.0,1,2
crates dentatus à un crustacé appartenant en réalité au genre,1,10,0.47,0.15,0.0,0.0,1,2
"Linuparus, conservé au Muséum national d'Histoire naturelle,",1,10,0.47,0.15,0.0,0.0,1,2
à Paris. La diagnose ne fut jamais publiée. Plusieurs spécimens,0,10,0.29,0.15,0.0,0.0,1,2
de la même espèce se trouvent encore dans d'autres collections.,0,10,0.29,0.15,0.0,0.0,1,2
"Tous proviennent du même niveau et de la même localité, les",0,10,0.29,0.15,0.0,0.0,1,2
sables à Rhynchonella compressa,1,10,0.47,0.15,0.0,0.0,1,2
"d'âge cénomanien supérieur,",0,10,0.2,0.51,0.0,0.0,1,2
},1,6,0.2,0.51,0.0,0.02,0,2
"( * ) WOODWARD, 1881, p . 530, p l . 14, f i g . i.",0,6,0.2,0.17,0.02,0.0,1,2
3,1,6,0.2,0.73,0.0,0.0,0,3
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.28,0.0,0.02,1,3
bien exposés autrefois dans les carrières de la Butte comprises,0,10,0.29,0.05,0.02,0.0,1,3
aujourd'hui dans la ville du Mans,0,10,0.29,0.05,0.0,0.0,1,3
en France.,0,10,0.2,0.43,0.0,0.0,1,3
?,0,6,0.02,0.43,0.0,0.0,0,3
"Les spécimens connus, engagés dans des nodules de grès phos-",0,10,0.29,0.07,0.0,0.0,1,3
"phaté, sont réduits au céphalothorax et plus ou moins parfaits.",0,10,0.29,0.05,0.0,0.01,1,3
— Sillon cervical partageant transversalement le,0,10,0.29,0.18,0.01,0.0,1,3
DIAGNOSE.,0,6,0.2,0.08,0.0,0.0,1,3
céphalothorax en moitiés à peu près parfaites.,0,10,0.29,0.05,0.0,0.0,1,3
Carènes médiane et latérales proéminentes et garnies de fortes,0,10,0.29,0.08,0.0,0.0,1,3
épines.,0,10,0.29,0.05,0.0,0.0,1,3
Carènes latérales s'ineurvant vers la ligne médiane et rejoi-,0,10,0.29,0.08,0.0,0.0,1,3
gnant la base de l'épine orbitaire.,0,10,0.29,0.05,0.0,0.0,1,3
Carènes gastriques en arc de cercle.,0,10,0.29,0.08,0.0,0.0,1,3
Epine médiane située en avant de l'extrémité antérieure des,0,10,0.29,0.07,0.0,0.0,1,3
carènes gastriques.,0,10,0.29,0.05,0.0,0.0,1,3
Carènes orbitaires aiguës et garnies de fortes épines.,0,10,0.29,0.08,0.0,0.0,1,3
Sillons branchiaux apparents.,0,10,0.29,0.08,0.0,0.0,1,3
Test à peu près lisse.,0,10,0.29,0.08,0.0,0.02,1,3
— La comparaison avec les di-,0,10,0.2,0.37,0.02,0.0,1,3
R A P P O R T S ET DIFFÉRENCES.,0,6,0.2,0.08,0.0,0.0,1,3
"verses formes de Linuparus,",1,10,0.47,0.06,0.0,0.0,1,3
"d'âge crétaeique, de l'Ancien et du",0,10,0.2,0.34,0.0,0.0,1,3
"Nouveau Monde, permettra de préciser la forme du Maine.",0,10,0.29,0.06,0.0,0.01,1,3
Linuparus dentatus,1,10,0.47,0.08,0.01,0.0,1,3
diffère de :,0,10,0.2,0.28,0.0,0.0,1,3
"L. carteri Reed, de l'Aptien de l'île de Wight, par",1,10,0.47,0.08,0.0,0.0,1,3
"son test lisse,",0,10,0.29,0.08,0.0,0.0,1,3
l'absence de carènes spinuleuses sur les régions brancliio-car-,0,10,0.29,0.08,0.0,0.0,1,3
diaques,0,10,0.29,0.06,0.0,0.0,1,3
3,0,6,0.11,0.13,0.0,0.0,0,3
les carènes latérales plus rectilignes et sensiblement parallèles,0,10,0.29,0.08,0.0,0.0,1,3
à la carène médiane ;,0,10,0.29,0.06,0.0,0.0,1,3
"L. africanus Glaessner, du Sénonien inférieur du Cameroun,",1,10,0.47,0.08,0.0,0.0,1,3
par,0,10,0.2,0.06,0.0,0.0,0,3
l'absence d'une carène médiane tuberculeuse en avant du sil-,0,10,0.29,0.08,0.0,0.0,1,3
lon cervical sur la région gastrique ;,0,10,0.29,0.05,0.0,0.0,1,3
"L. canadensis (Wliiteaves), du Sénonien du Canada, par",1,10,0.47,0.08,0.0,0.0,1,3
"les proportions relatives, le sillon cervical partageant le cépha-",0,10,0.29,0.08,0.0,0.0,1,3
"lothorax dans le sens de sa longueur en moitiés à peu près égales,",0,10,0.29,0.06,0.0,0.0,1,3
"l'échancrure pléonique moins profonde,",0,10,0.29,0.08,0.0,0.0,1,3
les carènes moins aiguës;,0,10,0.29,0.08,0.0,0.01,1,3
"L. euthymei (Roman et Mazeran), du Turonien du Midi de la",1,10,0.47,0.08,0.01,0.0,1,3
"France, par",0,10,0.29,0.06,0.0,0.01,1,3
"son test lisse,",0,10,0.29,0.08,0.01,0.0,1,3
les carènes plus fortement épineuses ;,0,10,0.29,0.08,0.0,0.0,1,3
4 Y.,1,7,0.41,0.15,0.0,0.0,1,4
VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.37,0.0,0.02,1,4
L. dulmenensis (Becks Ms.) (Geinitz)^ du Turonien et du Sé-,1,10,0.47,0.17,0.02,0.0,1,4
"nonien de l'Allemagne septentrionale, de Bohême et de Suède,",0,10,0.29,0.15,0.0,0.0,1,4
par,0,10,0.2,0.15,0.0,0.01,0,4
"son test plus lisse,",0,10,0.29,0.17,0.01,0.0,1,4
"les proportions relatives,",0,10,0.29,0.17,0.0,0.0,1,4
les carènes latérales à peu près parallèles à la carène médiane :,0,10,0.29,0.17,0.0,0.01,1,4
"L. japonicus Nagao, du Sénonien du Japon, pai",1,10,0.47,0.17,0.01,0.0,1,4
"son test plus lisse,",0,10,0.29,0.17,0.0,0.0,1,4
"les carènes médiane et latérales épineuses,",0,10,0.29,0.17,0.0,0.0,1,4
la disposition des carènes épineuses de la région gastrique ;,0,10,0.29,0.17,0.0,0.01,1,4
"L. adkinsi Kathbun, du Crétacique inférieur du Texas, par",1,10,0.47,0.17,0.01,0.01,1,4
"son test lisse,",0,10,0.29,0.17,0.01,0.0,1,4
la présence d'une forte épine médiane et non d'une carène en,0,10,0.29,0.17,0.0,0.0,1,4
avant de la région gastrique,0,10,0.29,0.15,0.0,0.0,1,4
les carènes médiane et latérales garnies de fortes épines ;,0,10,0.29,0.17,0.0,0.01,1,4
"L, kleinfeldcri Kathbun, du Crétacique supérieur de New-",1,10,0.47,0.17,0.01,0.0,1,4
"York, par",0,10,0.29,0.15,0.0,0.01,1,4
les carènes médiane et latérales beaucoup plus aiguës et,0,10,0.29,0.17,0.01,0.0,1,4
"étroites, garnies d'épines,",0,10,0.29,0.15,0.0,0.0,1,4
gastrique ; l'existence d'un système de carènes épineuses dans la région,0,10,0.2,0.15,0.0,0.01,0,4
"L. vancouverensis (Whiteaves), du Crétacique supérieur de",1,10,0.47,0.17,0.01,0.0,1,4
"l'Oklahoma et de la Colombie britannique, par",0,10,0.29,0.15,0.0,0.01,1,4
"la forme plus allongée du céphalothorax,",0,10,0.29,0.17,0.01,0.0,1,4
les carènes médiane et latérales fortement épineuses et subpa-,0,10,0.29,0.17,0.0,0.0,1,4
"rallèles,",0,10,0.29,0.15,0.0,0.0,1,4
les carènes de la région gastrique épineuses et ne délimitant,0,10,0.29,0.17,0.0,0.0,1,4
pas une ellipse (*).,0,10,0.29,0.15,0.0,0.01,1,4
"— Céiiomanien supérieur, sables à",0,10,0.2,0.28,0.01,0.0,1,4
Rhynchonella,1,10,0.38,0.69,0.0,0.0,1,4
G I S E M E N T .,0,7,0.23,0.17,0.0,0.0,1,4
compressa.,1,10,0.47,0.15,0.0,0.01,1,4
"— Le Mans (Sarthe, France). — Collections pa-",0,10,0.2,0.28,0.01,0.0,1,4
LOCALITÉ.,0,7,0.23,0.17,0.0,0.0,1,4
"léontologiques du Muséum national d'Histoire naturelle, Paris ;",0,10,0.29,0.15,0.0,0.0,1,4
Musée municipal du Mans ; Musée d'Histoire naturelle de Ge-,0,10,0.29,0.15,0.0,0.0,1,4
nève.,0,10,0.29,0.15,0.0,0.02,1,4
(*) Sous le nom de Podocrates,1,8,0.43,0.17,0.02,0.0,1,4
"straili Forir, on désigne un frag-",1,8,0.34,0.5,0.0,0.0,1,4
ment de pléon recueilli dans le Sénonien du Pays de Herve.,0,8,0.25,0.15,0.0,0.0,1,4
Podo-,1,8,0.34,0.77,0.0,0.0,1,4
crates étant synonyme de,1,8,0.43,0.15,0.0,0.0,1,4
Linwparus et ce dernier nom de genre ayant,1,8,0.34,0.39,0.0,0.0,1,4
"la priorité, il convient «de désigner provisoirement ce crustacé sous",0,8,0.25,0.15,0.0,0.0,1,4
le nom de Linuparus,1,8,0.43,0.15,0.0,0.0,1,4
straili (Forir). Il est impossible d'en faire la,1,8,0.34,0.37,0.0,0.0,1,4
"comparaison avec la forme du Mans, dont le pléon n'est pas connu.",0,8,0.25,0.15,0.0,0.0,1,4
DÉCAPODES CRÉTACIQUES 6,1,6,0.29,0.29,0.0,0.02,1,5
Tribu (les GL YPHEIDE A.,0,10,0.2,0.26,0.02,0.02,1,5
Famille des GLYPHEIDAE.,1,10,0.38,0.25,0.02,0.02,1,5
Genre GLYPHEA,1,10,0.38,0.22,0.02,0.0,1,5
VON M E Y E R .,0,6,0.11,0.42,0.0,0.02,1,5
Glyphea carteri Bell.,1,10,0.38,0.28,0.02,0.02,1,5
Pour la synonymie de cette espèce depuis 1,0,10,0.29,0.08,0.02,0.0,1,5
"863 à 1927, voyez",1,10,0.38,0.56,0.0,0.0,1,5
"Glaessner, 1929, p. 184.",0,10,0.29,0.06,0.0,0.0,1,5
Un fragment important de céphalothorax provenant de,0,10,0.29,0.08,0.0,0.0,1,5
Gly-,1,10,0.38,0.69,0.0,0.0,1,5
"phea carteri, qui jusqu'à présent n'était connu que dans le",1,10,0.47,0.06,0.0,0.0,1,5
"Gault du Kent et le Greensand du Cambridgeshire, a été recueilli",0,10,0.29,0.06,0.0,0.0,1,5
dans l'Albien du Jura suisse.,0,10,0.29,0.06,0.0,0.01,1,5
— Albien.,0,8,0.25,0.19,0.01,0.0,1,5
G I S E M E N T .,0,6,0.2,0.08,0.0,0.01,1,5
"— Sainte-Croix (Vaud, Suisse). -— Collections géo-",0,10,0.29,0.18,0.01,0.0,1,5
LOCALITÉ.,0,6,0.2,0.08,0.0,0.0,1,5
logiques de l'Université de Neuchâtel (Suisse).,0,10,0.29,0.06,0.0,0.02,1,5
Famille des MECOCHIRIDAE.,1,10,0.38,0.24,0.02,0.02,1,5
Genre MECOCHIRUS,1,10,0.38,0.23,0.02,0.0,1,5
G E R M A R .,0,6,0.11,0.49,0.0,0.02,1,5
Mecochirus'jhoudardi,1,10,0.38,0.23,0.02,0.0,1,5
nov. sp.,0,10,0.2,0.47,0.0,0.0,1,5
"(Pl. I, fig. 3 et 4.)",0,10,0.2,0.31,0.0,0.01,1,5
"— On rencontre, dans les faciès argileux de l'Al-",0,10,0.2,0.22,0.01,0.0,1,5
D E S C R I P T I O N .,0,6,0.2,0.08,0.0,0.0,1,5
"bien de la chaîne du Jura et du bord Sud-Est du Bassin de Paris,",0,10,0.29,0.06,0.0,0.0,1,5
des fragments d'un petit crustacé attribuables au genre,0,10,0.29,0.06,0.0,0.0,1,5
Meco-,1,10,0.38,0.68,0.0,0.0,1,5
chiruSj connu jusqu'à présent de la période Jurassique.,0,10,0.29,0.06,0.0,0.0,1,5
"Ces débris^ plus ou moins phosphatés, sont ou bien le céphalo-",0,10,0.29,0.08,0.0,0.0,1,5
"thorax auquel adhèrent encore les deux premiers pléonites, ou",0,10,0.29,0.06,0.0,0.0,1,5
bien des pléons isolés et passablement complets. Ils ont éprouvé,0,10,0.29,0.06,0.0,0.0,1,5
"des déformations, généralement un léger aplatissement donnant",0,10,0.29,0.06,0.0,0.0,1,5
un bord crêté au céphalothorax. Des articles proximaux des pé-,0,10,0.29,0.06,0.0,0.0,1,5
réiopodes sont parfois encore visibles. Le test est assez bien con-,0,10,0.29,0.06,0.0,0.0,1,5
servé.,0,10,0.29,0.06,0.0,0.01,1,5
"Je dédie cette espèce à M. J. ïïoudard, d'Auxerre, qui a réuni",0,10,0.29,0.08,0.01,0.0,1,5
une importante collection de Crustacés Décapodes crétaciques.,0,10,0.29,0.06,0.0,0.01,1,5
— Céphalothorax relativement élevé.,0,10,0.29,0.19,0.01,0.0,1,5
DIAGNOSE.,0,6,0.2,0.08,0.0,0.0,1,5
Sillon cervical étroit et profond.,0,10,0.29,0.09,0.0,0.0,1,5
Sillon branchiocardiaque apparaissant plutôt comme une dé-,0,10,0.29,0.08,0.0,0.0,1,5
6 Y.,1,6,0.39,0.15,0.0,0.0,1,6
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.37,0.0,0.02,1,6
"pression que comme un sillon, n'atteignant pas la ligne tergale.",0,10,0.29,0.15,0.02,0.0,1,6
"Sillon postcervical faiblement esquissé, n'atteignant pas la",0,10,0.29,0.17,0.0,0.0,1,6
ligne tergale.,0,10,0.29,0.15,0.0,0.0,1,6
Sillon hépatique absent.,0,10,0.29,0.17,0.0,0.0,1,6
Sillon antennaire étroit et se rétrécissant encore avant d'at-,0,10,0.29,0.17,0.0,0.0,1,6
teindre le sillon cervical.,0,10,0.29,0.15,0.0,0.0,1,6
Carènes spinuleuses sur la région cervicale.,0,10,0.29,0.17,0.0,0.0,1,6
Plèvres des premiers pléonites arrondies.,0,10,0.29,0.17,0.0,0.01,1,6
— Albien.,0,10,0.2,0.28,0.01,0.0,1,6
G I S E M E N T .,0,6,0.2,0.17,0.0,0.01,1,6
"— Sainte-Croix et Morteau (Vaud, Suisse).— Par-",0,10,0.2,0.29,0.01,0.0,1,6
LOCALITÉS.,0,6,0.2,0.17,0.0,0.0,1,6
gny (Marne) et Moëslains (Haute-Marne).,0,10,0.29,0.15,0.0,0.0,1,6
Collections géologiques du Musée d'Histoire naturelle de,0,10,0.29,0.17,0.0,0.0,1,6
Genève et de l'Université de Neuchâtel (Suisse).,0,10,0.29,0.15,0.0,0.0,1,6
"Collection de M. J. Houdard, à Auxerre.",0,10,0.29,0.17,0.0,0.02,1,6
Genre M il YEN! A Me COY.,1,10,0.38,0.35,0.02,0.02,1,6
Meyeria ornata Phillips sp.,1,10,0.38,0.34,0.02,0.02,1,6
"Pour la synonymie de cette espèce de 1822 à 1905, voyez Glaess-",0,10,0.29,0.18,0.02,0.0,1,6
"ner 1929, p. 255.",0,10,0.29,0.15,0.0,0.0,1,6
5,0,6,0.11,0.18,0.0,0.0,0,6
"1928. Meyeria ornata,",1,10,0.47,0.17,0.0,0.0,1,6
"Woods, p. 68, pl. 18, fig. 1-4, texte-",0,10,0.2,0.41,0.0,0.0,1,6
fig. 11.,0,10,0.29,0.15,0.0,0.0,1,6
Cette espèce caractéristique du Néocomien a été récemment,0,10,0.29,0.18,0.0,0.0,1,6
décrite avec le plus grand soin par H. Woods. Elfè n'avait pas,0,10,0.29,0.15,0.0,0.0,1,6
encore été signalée dans le Bassin de Paris.,0,10,0.29,0.15,0.0,0.01,1,6
— Hauterivien à faciès zoogène de la,0,10,0.2,0.43,0.01,0.0,1,6
G I S E M E N T ET LOCALITÉS.,0,6,0.2,0.18,0.0,0.0,1,6
Bourgogne. — Saints et Saint-Sauveur-en-Puisaye (Yonne). —,0,10,0.29,0.15,0.0,0.0,1,6
Musée municipal d'Auxerre.,0,10,0.29,0.15,0.0,0.0,1,6
Hauterivien à faciès zoogène du Jura. — Landeron près Neu-,0,10,0.29,0.17,0.0,0.0,1,6
châtel (Suisse). — Musée d'Histoire naturelle de Genève.,0,10,0.29,0.15,0.0,0.02,1,6
Meyeria sp.,1,10,0.38,0.43,0.02,0.0,1,6
"(Pl. I, fig. 5.)",0,10,0.2,0.42,0.0,0.01,1,6
— Des restes de Meyeria,1,10,0.38,0.31,0.01,0.0,1,6
trop incomplets pour,0,10,0.2,0.6,0.0,0.0,1,6
D E S C R I P T I O N .,0,6,0.2,0.18,0.0,0.0,1,6
"permettre une détermination spécifique, ont été rencontrés dans",0,10,0.29,0.16,0.0,0.0,1,6
le Berriasien. Les débris sont constitués par la première paire,0,10,0.29,0.16,0.0,0.0,1,6
"de péréiopodes, un fragment du deuxième péréiopode gauche et",0,10,0.29,0.16,0.0,0.0,1,6
un fragment du flagelle de l'antenne gauche.,0,10,0.29,0.15,0.0,0.0,1,6
"Le propodite, à peu près rectiligne, présente l'allongement si",0,10,0.29,0.18,0.0,0.0,1,6
DÉCAPODES CRÉTACIQUES 8,1,6,0.29,0.29,0.0,0.02,1,7
propre à ce genre. Il est inséré dans un court carpopodite,0,10,0.29,0.07,0.02,0.0,1,7
; celui-,0,10,0.2,0.67,0.0,0.0,1,7
"ci à son tour est attaché à un méropodite fort long, moins grand",0,10,0.29,0.07,0.0,0.0,1,7
cependant que le propodite. Le propodite est pourvu d'un pro-,0,10,0.29,0.07,0.0,0.0,1,7
cessus spiniforme interne à hauteur de l'articulation dactylo -,0,10,0.29,0.07,0.0,0.0,1,7
propodiale. L'appendice se termine par un dactylopodite étroit,0,10,0.29,0.07,0.0,0.0,1,7
et comprimé latéralement. L'ischiopodite et le basipodite ne sont,0,10,0.29,0.07,0.0,0.0,1,7
plus visibles. Le dactylopodite du deuxième péréiopode est étroit,0,10,0.29,0.07,0.0,0.0,1,7
"et mince, simulant une griffe. Les appendices sont couverts de",0,10,0.29,0.07,0.0,0.0,1,7
fines granulations fort serrées.,0,10,0.29,0.07,0.0,0.0,1,7
Ce genre est suffisamment rare pour mériter d'être signalé,0,10,0.29,0.09,0.0,0.0,1,7
chaque fois qu'il est possible de le faire.,0,10,0.29,0.07,0.0,0.01,1,7
"— Valanginien, calcaire de Berrias.",0,10,0.29,0.2,0.01,0.0,1,7
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,7
— Montbazin (Hérault). — Collection de M.,0,10,0.29,0.19,0.01,0.0,1,7
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,7
I I .,0,6,0.11,0.71,0.0,0.0,1,7
"Blondet, à Chambéry.",0,10,0.29,0.07,0.0,0.02,1,7
Meyeria sp.,1,10,0.38,0.34,0.02,0.01,1,7
— Les restes de plusieurs individus ont été ren-,0,10,0.2,0.23,0.01,0.0,1,7
D E S C R I P T I O N .,0,6,0.2,0.09,0.0,0.0,1,7
"contrés, il y a longtemps déjà, dans des calcaires schistoïdes de",0,10,0.29,0.07,0.0,0.0,1,7
"l'île Petite Elobi, au large de la Guinée espagnole. Ils sont ré-",0,10,0.29,0.07,0.0,0.0,1,7
duits à l'état d'empreintes extrêmement frustes. Les caractères,0,10,0.29,0.07,0.0,0.0,1,7
du céphalothorax ne sont plus discernables,0,10,0.29,0.07,0.0,0.0,1,7
; toutefois la première,0,10,0.2,0.52,0.0,0.0,1,7
paire de péréiopodes est suffisamment délimitée pour permettre,0,10,0.29,0.07,0.0,0.0,1,7
de contrôler l'attribution générique.,0,10,0.29,0.07,0.0,0.01,1,7
— Crétacique supérieur.,0,10,0.29,0.2,0.01,0.0,1,7
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,7
— Ile Petite Elobi (Guinée espagnole). — Musée,0,10,0.29,0.19,0.01,0.0,1,7
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,7
d'Histoire naturelle de Bâle (Collection Passavant).,0,10,0.29,0.07,0.0,0.01,1,7
Section des Astacura.,1,10,0.38,0.29,0.01,0.01,1,7
Tribu des NEPIIROPSIDEA.,0,10,0.2,0.25,0.01,0.01,1,7
Famille des ERYMAIDAE.,1,10,0.38,0.26,0.01,0.01,1,7
Genre ERYMA,1,10,0.38,0.26,0.01,0.0,1,7
VON M E Y E K .,0,6,0.11,0.43,0.0,0.02,1,7
Eryma loryi Van Straelen.,1,10,0.38,0.26,0.02,0.0,1,7
"(Pl. I, fig. 0.)",0,10,0.2,0.33,0.0,0.02,1,7
"1923. Eryma Loryi Van Straelen, p. 93, fig. 10.",1,10,0.47,0.09,0.02,0.0,1,7
"Jusqu'à présent, le type de cette espèce n'avait jamais été fi-",0,10,0.29,0.09,0.0,0.0,1,7
guré. Il est constitué par un céphalothorax incomplètement con-,0,10,0.29,0.07,0.0,0.0,1,7
Y.,1,7,0.23,0.34,0.0,0.0,0,8
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.0,1,8
8,1,6,0.29,0.15,0.0,0.02,0,8
"servé, montrant encore tous les sillons et atteignant une longueur",0,10,0.29,0.15,0.02,0.0,1,8
de 6 centimètres.,0,10,0.29,0.15,0.0,0.0,1,8
"— Yalanginien, marnes à",0,10,0.2,0.28,0.0,0.0,1,8
Cosmoceras verrucosum.,1,10,0.38,0.56,0.0,0.0,1,8
G I S E M E N T .,0,6,0.2,0.17,0.0,0.01,1,8
— Mallevai (Isère). — Collections géologiques de,0,10,0.2,0.27,0.01,0.0,1,8
LOCALITÉ.,0,6,0.2,0.17,0.0,0.0,1,8
l'Université de Grenoble (Collection Gevrey).,0,10,0.29,0.15,0.0,0.02,1,8
Eryma tithonia nov. sp.,1,10,0.38,0.36,0.02,0.0,1,8
"(Pl. II, fig. 1 et 2.)",0,10,0.2,0.39,0.0,0.01,1,8
Eryma tithonia est représenté par des frag-,1,10,0.38,0.34,0.01,0.0,1,8
D E S C R I P T I O N . —,0,6,0.2,0.17,0.0,0.0,1,8
ments du céphalothorax engagés dans un calcaire compact gris,0,10,0.29,0.15,0.0,0.0,1,8
à grains fins. Les deux moitiés de ce céphalothorax se sont dis-,0,10,0.29,0.15,0.0,0.0,1,8
jointes suivant la ligne tergale et rabattues de manière à se trou-,0,10,0.29,0.15,0.0,0.0,1,8
"ver dans un même plan horizontal. Le côté gauche, à peu près",0,10,0.29,0.15,0.0,0.0,1,8
"entièrement dépourvu de son test, est réduit aux régions situées",0,10,0.29,0.15,0.0,0.0,1,8
en avant du sillon cervical. Le côté droit est sensiblement com-,0,10,0.29,0.15,0.0,0.0,1,8
plet; une faible portion du test est enlevée immédiatement en,0,10,0.29,0.15,0.0,0.0,1,8
"avant du sillon cervical, le long de la ligne tergale, ainsi que sur",0,10,0.29,0.15,0.0,0.0,1,8
une notable partie de la région cardiaque.,0,10,0.29,0.15,0.0,0.0,1,8
"Le nom spécifique rappelle que ce crustacé, à test très mince,",0,10,0.29,0.18,0.0,0.0,1,8
a été découvert dans le faciès tithonique du Crétacique inférieur.,0,10,0.29,0.15,0.0,0.01,1,8
— Sillons de la carapace étroits et profonds.,0,10,0.2,0.28,0.01,0.0,1,8
DIAGNOSE.,0,6,0.2,0.18,0.0,0.0,1,8
Sillon cervical s'élargissant quelque peu avant d'atteindre la,0,10,0.29,0.18,0.0,0.0,1,8
ligne tergale.,0,10,0.29,0.15,0.0,0.0,1,8
Sillon postcervical se terminant vers le bas et vers l'avant en,0,10,0.29,0.18,0.0,0.0,1,8
une très faible pointe.,0,10,0.29,0.15,0.0,0.0,1,8
"Sillon brancliiocardiaque profond et bien marqué, au moins",0,10,0.29,0.18,0.0,0.0,1,8
dans sa partie inférieure.,0,10,0.29,0.16,0.0,0.0,1,8
Test couvert de tubercules très fins.,0,10,0.29,0.18,0.0,0.01,1,8
— Il est possible de comparer,0,10,0.2,0.47,0.01,0.0,1,8
R A P P O R T S ET D I F F É R E N C E S .,0,6,0.2,0.18,0.0,0.0,1,8
E. tithonia aux quelques espèces du même genre provenant du,1,10,0.47,0.16,0.0,0.0,1,8
"Crétacique inférieur, basées sur des restes analogues.",0,10,0.29,0.16,0.0,0.0,1,8
Eryma tithonia diffère de :,1,10,0.47,0.18,0.0,0.01,1,8
"E. loryi Van Straelen, du Yalangiiiien du Daupliiné, par",1,10,0.47,0.18,0.01,0.0,1,8
"des sillons relativement moins larges,",0,10,0.29,0.18,0.0,0.0,1,8
l'absence au sillon cervical d'un processus angulaire corres-,0,10,0.29,0.18,0.0,0.0,1,8
"pondant à un sillon gastro-orbitaire,",0,10,0.29,0.16,0.0,0.0,1,8
"un sillon postcervical, étroit et mince, très proche à son origine",0,10,0.29,0.18,0.0,0.0,1,8
du sillon branchiocardiaque ;,0,10,0.29,0.16,0.0,0.01,1,8
"E. tu~berculata Yan Straelen, du Néocomien de la Savoie, par",1,10,0.47,0.18,0.01,0.0,1,8
l'absence de tubercules sur la région brancliiocardiaque ;,0,10,0.29,0.18,0.0,0.0,1,8
DÉCAPODES CRÉTACIQUES,1,7,0.32,0.28,0.0,0.0,1,9
9,1,7,0.23,0.73,0.0,0.02,0,9
"E. suloata Harbort, du Hautërivien de Westphalie. par",1,10,0.47,0.07,0.02,0.0,1,9
"l'absence du sillon gastro-orbitaire,",0,10,0.29,0.08,0.0,0.01,1,9
l'absence d'un tubercule en forme de w au haut de la région,0,10,0.29,0.08,0.01,0.0,1,9
"antennaire,",0,10,0.29,0.06,0.0,0.0,1,9
une ornementation beaucoup plus fine.,0,10,0.29,0.08,0.0,0.0,1,9
"— Valanginién, calcaire de Bernas.",0,10,0.29,0.18,0.0,0.0,1,9
GISEMENT.,0,7,0.23,0.08,0.0,0.0,1,9
— La Cisterne (Hérault). — Collections géologiques,0,10,0.29,0.18,0.0,0.0,1,9
LOCALITÉ.,0,7,0.23,0.08,0.0,0.0,1,9
"de la Sorbonne, à Paris.",0,10,0.29,0.06,0.0,0.02,1,9
Eryma tuberculata nov. sp.,1,10,0.38,0.24,0.02,0.0,1,9
"(PI. II, fig. 3.)",0,10,0.2,0.32,0.0,0.02,1,9
— L'unique spécimen connu de cette espèce est,0,10,0.2,0.22,0.02,0.0,1,9
DESCRIPTION.,0,7,0.23,0.08,0.0,0.0,1,9
constitué par un céphalothorax engagé dans une plaquette cal-,0,10,0.29,0.06,0.0,0.0,1,9
caire. Il se présente par la face gauche et sa région rostrale est,0,10,0.29,0.06,0.0,0.0,1,9
détruite.,0,10,0.29,0.06,0.0,0.01,1,9
— Céphalothorax faiblement écliancré par le pléon,0,10,0.29,0.18,0.01,0.0,1,9
DIAGNOSE.,0,7,0.23,0.08,0.0,0.0,1,9
et bordé d'une doublure marginale étroite et lisse.,0,10,0.29,0.06,0.0,0.0,1,9
"Sillon cervical large et profond, se rétrécissant vers le bas.",0,10,0.29,0.08,0.0,0.0,1,9
"Sillon gastro-orbitaire large et court. Sillon branchiocardiaque fort large et profond, «'atténuant",0,10,0.2,0.08,0.0,0.0,0,9
vers la ligne tergale et ne l'atteignant pas.,0,10,0.29,0.06,0.0,0.0,1,9
Sillon postcervical très peu accentué et n'atteignant pas la,0,10,0.29,0.08,0.0,0.0,1,9
ligne tergale.,0,10,0.29,0.06,0.0,0.0,1,9
Branche initiale du sillon hépatique moins large et moins pro-,0,10,0.29,0.08,0.0,0.0,1,9
fonde que le sillon branchiocardiaque.,0,10,0.29,0.06,0.0,0.0,1,9
Branche antérieure atteignant le sillon cervical.,0,10,0.29,0.08,0.0,0.0,1,9
"Ornementation, tout au moins sur les régions branchiales et",0,10,0.29,0.08,0.0,0.0,1,9
"entre les sillons cervical et branchiocardiaque, constituée de gros",0,10,0.29,0.06,0.0,0.0,1,9
tubercules assez espacés.,0,10,0.29,0.06,0.0,0.01,1,9
— Néocomien Berriasien supérieur.,0,10,0.29,0.19,0.01,0.0,1,9
GISEMENT.,0,7,0.23,0.08,0.0,0.01,1,9
"— Leysse, près Chambéry (Savoie). — Collection",0,10,0.29,0.18,0.01,0.0,1,9
LOCALITÉ.,0,7,0.23,0.08,0.0,0.0,1,9
"de M. H. Blondet, à Chambéry.",0,10,0.29,0.06,0.0,0.02,1,9
La présence du genre,0,10,0.29,0.08,0.02,0.0,1,9
Eryma a été reconnue dans le Néoco-,1,10,0.38,0.31,0.0,0.0,1,9
"mien, à Cinquétral (Jura), (Musée d'Histoire naturelle de",0,10,0.29,0.06,0.0,0.0,1,9
os,0,6,0.11,0.14,0.0,0.0,0,9
"Lyon, n 17.084 et 17.085 pro parte), ainsi que dans l'Hauteri-",0,10,0.29,0.06,0.0,0.0,1,9
"vien des environs d'Auxerre (Yonne), (Musée municipal d'Au-",0,10,0.29,0.06,0.0,0.0,1,9
xerre).,0,10,0.29,0.06,0.0,0.0,1,9
Les Eryma du Néocoinien sont peu nombreuses.,1,10,0.47,0.08,0.0,0.0,1,9
10 Y. VAN STRAELEN. — CRUSTACÉS,1,6,0.39,0.16,0.0,0.04,1,10
Genre ENOPLOCLYTIA,1,10,0.38,0.32,0.04,0.0,1,10
Me COY.,0,10,0.2,0.6,0.0,0.02,1,10
Enoploclytia glaessneri,1,10,0.38,0.32,0.02,0.0,1,10
nov. sp.,1,10,0.38,0.58,0.0,0.0,1,10
"(Pl. III, fig. 1.)",0,10,0.2,0.42,0.0,0.01,1,10
D E S C R I P T I O N . — Enoploclytia glaessneri,1,10,0.47,0.18,0.01,0.0,1,10
est représenté par la,0,10,0.2,0.61,0.0,0.0,1,10
"moitié gauclie du céphalothorax d'un seul individu, dont les ré-",0,10,0.29,0.16,0.0,0.0,1,10
gions frontales et le rostre sont brisés.,0,10,0.29,0.16,0.0,0.0,1,10
Le test est à peu près entièrement enlevé sauf quelques débris,0,10,0.29,0.18,0.0,0.0,1,10
"infimes, permettant de conclure à la grande épaisseur de la",0,10,0.29,0.16,0.0,0.0,1,10
carapace. Ce qui subsiste de l'animal est donc essentiellement,0,10,0.29,0.16,0.0,0.0,1,10
un moulage interne du test.,0,10,0.29,0.16,0.0,0.01,1,10
r,0,6,0.02,0.68,0.01,0.0,0,10
J'ai le plaisir de dédier cette espèce à M. le D,0,10,0.29,0.18,0.0,0.0,1,10
Martin Glaess-,0,10,0.2,0.68,0.0,0.0,1,10
"ner, de Vienne, mon confrère en paléocarcinologie.",0,10,0.29,0.16,0.0,0.01,1,10
— Faibles carènes spinuleuses sur la partie tergale,0,10,0.2,0.29,0.01,0.0,1,10
DIAGNOSE.,0,6,0.2,0.18,0.0,0.0,1,10
"des régions,.frontale et gastrique du test, partout ailleurs la sur-",0,10,0.29,0.16,0.0,0.0,1,10
face est entièrement couverte de nombreux petits tubercules.,0,10,0.29,0.16,0.0,0.0,1,10
"Sillons de là carapace larges et profonds, déterminant la mise",0,10,0.29,0.18,0.0,0.0,1,10
eu saillie des régions et notamment de la région branchiale.,0,10,0.29,0.16,0.0,0.0,1,10
"Sillons e et e formant un angle, largement ouvert vers l'ar-",1,10,0.47,0.18,0.0,0.0,1,10
"rière, à leur rencontre au niveau de l'origine du sillon",0,10,0.29,0.16,0.0,0.0,1,10
d.,1,10,0.29,0.75,0.0,0.0,0,10
Sillon d très large à sa naissance et se rétrécissant très rapi-,0,10,0.29,0.18,0.0,0.0,1,10
dement.,0,10,0.43,0.16,0.0,0.13,1,10
Fig. 1. — Enoploclytia,1,8,0.48,0.26,0.13,0.0,1,10
glaessneri VAN STRAELEN.,1,8,0.34,0.49,0.0,0.0,1,10
Néocomien. — Basse-Provence.,0,8,0.16,0.35,0.0,0.0,1,10
"Schéma du céphalothorax, face latérale gauche.",0,8,0.16,0.27,0.0,0.02,1,10
Sillon c s'inflécliissant fortement vers l'avant à partir du dé-,0,10,0.29,0.18,0.02,0.0,1,10
but de sa seconde moitié et recoupant la ligne tergale à angle,0,10,0.29,0.16,0.0,0.0,1,10
"droit, se terminant vers l'avant et vers le bas en s'effilant, tan-",0,10,0.29,0.16,0.0,0.0,1,10
dis qu'une branche rejoint le sillon,0,10,0.29,0.16,0.0,0.0,1,10
a.,1,10,0.29,0.54,0.0,0.0,0,10
Sillon a abordant la ligne tergale obliquement et l'atteignant,0,10,0.29,0.18,0.0,0.0,1,10
fort atténué.,0,10,0.29,0.16,0.0,0.0,1,10
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.28,0.0,0.0,1,11
11,1,6,0.2,0.72,0.0,0.02,0,11
"Sillon b,, large à son origine, se rétrécissant quelque peu au",0,10,0.29,0.07,0.02,0.0,1,11
"delà de sa bifurcation, la brandie antérieure plus étroite encore,",0,10,0.29,0.05,0.0,0.0,1,11
fort incurvée vers le liant.,0,10,0.29,0.05,0.0,0.0,1,11
Sillon 6 se rétrécissant graduellement vers l'avant (fig. 1 dans,0,10,0.29,0.07,0.0,0.0,1,11
le texte).,0,10,0.29,0.05,0.0,0.01,1,11
La comparaison de,0,10,0.2,0.38,0.01,0.0,1,11
Enoploclytia,1,10,0.38,0.6,0.0,0.0,1,11
R A P P O R T S ET D I F F É R E N C E S . —,0,6,0.2,0.07,0.0,0.0,1,11
(jlaessneri est possible avec,1,10,0.47,0.07,0.0,0.0,1,11
1111 certain nombre d'espèces du genre,0,10,0.2,0.35,0.0,0.0,1,11
"Enoploclytia provenant du Crétacique de l'Ancien Monde, ba-",1,10,0.47,0.05,0.0,0.0,1,11
},1,6,0.29,0.18,0.0,0.0,0,11
sées sur des restes analogues.,0,10,0.29,0.05,0.0,0.0,1,11
Enoploclytia glaessneri,1,10,0.47,0.07,0.0,0.0,1,11
se différencie de :,0,10,0.2,0.32,0.0,0.01,1,11
"E. dixoni (Bell), de l'Albien et du Cénoinanien de l'Angleterre",1,10,0.47,0.07,0.01,0.0,1,11
"méridionale, par",0,10,0.29,0.05,0.0,0.0,1,11
des carènes spinuleuses moins nombreuses et moins chargées,0,10,0.29,0.07,0.0,0.0,1,11
"d'épines,",0,10,0.29,0.05,0.0,0.0,1,11
le sillon c abordant la ligne tergale à angle droit et dont l'ex-,1,10,0.47,0.08,0.0,0.0,1,11
trémité inférieure descend moins bas ;,0,10,0.29,0.05,0.0,0.01,1,11
"E. granulicauda Scliluter, du Campanien de Westphalie, par",1,10,0.47,0.07,0.01,0.0,1,11
"ses formes plus massives,",0,10,0.29,0.08,0.0,0.0,1,11
"ses régions frontale et gastrique moins spinuleuses,",0,10,0.29,0.07,0.0,0.0,1,11
le sillon a abordant la ligne tergale en faisant un angle plus,1,10,0.47,0.08,0.0,0.0,1,11
"aigu,",0,10,0.29,0.05,0.0,0.0,1,11
le sillon c abordant la ligne tergale à angle droit ;,1,10,0.47,0.08,0.0,0.01,1,11
E. heterodon Schluter,1,10,0.47,0.08,0.01,0.0,1,11
"du Sénonien supérieur de Westphalie,",0,10,0.2,0.32,0.0,0.0,1,11
},0,6,0.02,0.31,0.0,0.0,0,11
par,0,10,0.2,0.05,0.0,0.0,0,11
"ses proportions plus massives,",0,10,0.29,0.08,0.0,0.0,1,11
"les régions frontale et gastrique moins spinuleuses,",0,10,0.29,0.08,0.0,0.0,1,11
"le sillon a n'abordant pas la ligne tergale à angle droit,",1,10,0.47,0.08,0.0,0.0,1,11
le sillon c abordant la ligne tergale à angle droit ;,1,10,0.47,0.08,0.0,0.01,1,11
"E. leachi (Mantell), du Turonien et du Sénonien du Sud de",1,10,0.47,0.08,0.01,0.0,1,11
"l'Angleterre, par",0,10,0.29,0.05,0.0,0.0,1,11
"ses proportions plus massives,",0,10,0.29,0.08,0.0,0.0,1,11
la région branchiale plus boursouflée et relativement plus,0,10,0.29,0.08,0.0,0.0,1,11
"étendue,",0,10,0.29,0.05,0.0,0.0,1,11
"les régions gastrique et frontale moins spinuleuses,",0,10,0.29,0.08,0.0,0.0,1,11
l'inclinaison du sillon c plus forte et descendant moins bas.,0,10,0.29,0.08,0.0,0.0,1,11
Néoeoniien inférieur.,0,10,0.2,0.22,0.0,0.0,1,11
G I S E M E N T . —,0,6,0.2,0.08,0.0,0.01,1,11
Escragnolles (Basse-Provence). — Musée d'His-,0,10,0.2,0.21,0.01,0.0,1,11
LOCALITÉ. —,0,6,0.2,0.08,0.0,0.0,1,11
toire naturelle de Genève.,0,10,0.29,0.05,0.0,0.0,1,11
12 Y.,1,7,0.41,0.16,0.0,0.0,1,12
VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.37,0.0,0.04,1,12
Enoploclytia sussexiensis,1,10,0.38,0.29,0.04,0.0,1,12
(Mantell).,0,10,0.2,0.59,0.0,0.02,1,12
"1822. Astacus, Mantell, p. 223, pl. 30, fig. 3. •",1,10,0.47,0.18,0.02,0.0,1,12
"1833. Astacus sussexiensis,",1,10,0.47,0.18,0.0,0.0,1,12
"Mantell, p. 124, fig. 2, p. 373,",0,10,0.2,0.49,0.0,0.0,1,12
p. 379.,0,10,0.2,0.27,0.0,0.0,1,12
"1844. Astacus sussexiensis,",1,10,0.47,0.18,0.0,0.0,1,12
"Mantell, p. 538, lign. 116, fig. 4.",0,10,0.2,0.46,0.0,0.0,1,12
"1850. Palaeastacus dixoni,",1,10,0.47,0.18,0.0,0.0,1,12
"Bell, p. 344, pl. 38*, fig. 1-4.",0,10,0.2,0.46,0.0,0.0,1,12
"1854. Enoploclytia sussexiensis,",1,10,0.47,0.18,0.0,0.0,1,12
"Morris, p. 108.",0,10,0.2,0.52,0.0,0.0,1,12
"1863. Hoploparia scalra,",1,10,0.47,0.18,0.0,0.0,1,12
"Bell, p. 28, pl. 7, fig. 3-7.",0,10,0.2,0.44,0.0,0.0,1,12
"1863. Phlyctisoma granulatum,",1,10,0.47,0.18,0.0,0.0,1,12
"Bell, p. 36, pl. 11, fig. 9 et 10.",0,10,0.2,0.5,0.0,0.0,1,12
1878. Enoploclytia,1,10,0.47,0.18,0.0,0.0,1,12
"sussexiensis, Woodward, p. 377, pl. 38*,",1,10,0.38,0.4,0.0,0.0,1,12
fig. 1-4.,0,10,0.2,0.27,0.0,0.0,1,12
1929. Hoploparia scabra,1,10,0.47,0.18,0.0,0.0,1,12
", Glaessner, p. 221.",0,10,0.2,0.44,0.0,0.0,1,12
"1929. Palaeastacus sussexiensis,",1,10,0.47,0.18,0.0,0.0,1,12
"Glaessner, p. 290.",0,10,0.2,0.52,0.0,0.0,1,12
"1929. Phlyctisoma granulatum,",1,10,0.47,0.18,0.0,0.0,1,12
"Glaessner, p. 314.",0,10,0.2,0.5,0.0,0.0,1,12
"1930. Enoploclytia Dixoni,",1,10,0.47,0.18,0.0,0.0,1,12
"Woods, p. 83, pl. 23, fig. 9-12,",0,10,0.2,0.49,0.0,0.0,1,12
"pl. 24, fig. 1-3.",0,10,0.2,0.27,0.0,0.0,1,12
"Cette belle espèce n'a jamais, jusqu'à présent, été signalée que",0,10,0.29,0.18,0.0,0.0,1,12
dans le Crétacique de l'Angleterre. Elle est représentée par un,0,10,0.29,0.16,0.0,0.0,1,12
"céphalothorax gauche, suffisamment bien conservé pour permet-",0,10,0.29,0.16,0.0,0.0,1,12
tre une attribution certaine dans le Cénomanien du Sud-Est du,0,10,0.29,0.16,0.0,0.0,1,12
Bassin de Paris.,0,10,0.29,0.16,0.0,0.01,1,12
GiSEMExNT. — Cénomanien.,0,10,0.29,0.18,0.01,0.01,1,12
— Seignelay (Yonne). — Musée municipal d'Au-,0,10,0.2,0.28,0.01,0.0,1,12
LOCALITÉ.,0,7,0.23,0.18,0.0,0.0,1,12
xerre (Collection Ricordeau).,0,10,0.29,0.16,0.0,0.03,1,12
Enoploclytia leachi,1,10,0.38,0.33,0.03,0.0,1,12
(Mantell).,0,10,0.2,0.56,0.0,0.01,1,12
"1822. Astacus Leachii,",1,10,0.47,0.18,0.01,0.0,1,12
"Mantell, pp. 221-223, pl. 29, fig. 1, 4",0,10,0.2,0.42,0.0,0.0,1,12
"et 5, pl. 30, fig. 2, pl. 31, fig. 1-4.",0,10,0.2,0.27,0.0,0.0,1,12
"1833. Astacus Leachii,",1,10,0.47,0.18,0.0,0.0,1,12
"Mantell, p. 122, fig. 1, p. 373.",0,10,0.2,0.42,0.0,0.0,1,12
"1839. Astacus Leachii,",1,10,0.47,0.18,0.0,0.0,1,12
"Geinitz, p. 14, pl. 7, fig. 4.",0,10,0.2,0.42,0.0,0.0,1,12
"1840. Astacus Leachii,",1,10,0.47,0.18,0.0,0.0,1,12
"Geinitz, p. 39, pl. 9, fig. 1.",0,10,0.2,0.42,0.0,0.0,1,12
"1841. Glyphea (?) Leachii,",1,10,0.47,0.18,0.0,0.0,1,12
"Roemer, p. 105.",0,10,0.2,0.47,0.0,0.0,1,12
"1844. Astacus Leachii,",1,10,0.47,0.18,0.0,0.0,1,12
"Mantell, p. 536, fig. 1-3.",0,10,0.2,0.42,0.0,0.0,1,12
"1845. Klytia Lea,chii,",1,10,0.47,0.18,0.0,0.0,1,12
"Reuss, p. 14, p. 103, pl. 6, fig. 1-6, pl. 42,",0,10,0.2,0.41,0.0,0.0,1,12
fig. 3.,0,10,0.2,0.27,0.0,0.0,1,12
"1849. Clytia Leachii,",1,10,0.47,0.19,0.0,0.0,1,12
"Geinitz, p. 93.",0,10,0.2,0.4,0.0,0.0,1,12
"1849. Enoploclytia Leachii,",1,10,0.47,0.19,0.0,0.0,1,12
"Me Coy, p. 331.",0,10,0.2,0.47,0.0,0.0,1,12
"1850. Palaeastacus Dixoni,",1,10,0.47,0.19,0.0,0.0,1,12
"Bell, p. 344, pl. 38*, fig. 5.",0,10,0.2,0.47,0.0,0.0,1,12
13,1,6,0.2,0.72,0.0,0.0,0,13
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.27,0.0,0.02,1,13
"1850. l'alaeastacus macrodactylus,",1,10,0.47,0.07,0.02,0.0,1,13
"Bell, p. 345, pl. 38*, fig. 0.",0,10,0.2,0.43,0.0,0.0,1,13
"1853. (Jlytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Reuss, pp. 1-10, pl. 1-5.",0,10,0.2,0.28,0.0,0.0,1,13
"1854. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Me Coy, p. 13G.",0,10,0.2,0.35,0.0,0.0,1,13
"1854. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Morris, p. 108.",0,10,0.2,0.35,0.0,0.0,1,13
"1862. Enoploclytia heterodon,",1,10,0.47,0.07,0.0,0.0,1,13
"Scliliiter, p. 724.",0,10,0.2,0.38,0.0,0.0,1,13
"1862. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Schlûter, p. 728.",0,10,0.2,0.35,0.0,0.0,1,13
"1863. Klytia Leachii,",1,10,0.47,0.07,0.0,0.0,1,13
"Geinitz, p. 757, pl. 8, fig. 2.",0,10,0.2,0.29,0.0,0.0,1,13
"1868. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Schliïter, p. 295.",0,10,0.2,0.35,0.0,0.0,1,13
"1868. Klytia Leachii,",1,10,0.47,0.07,0.0,0.0,1,13
"Giiinbel, p. 752, p. 762.",0,10,0.2,0.29,0.0,0.0,1,13
1869. Eoploparia ?,1,10,0.47,0.07,0.0,0.0,1,13
"sp. Ilallez, p. 297, fig. 1-4.",0,10,0.2,0.28,0.0,0.0,1,13
"1875. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Geinitz, p. 205, pl. 37, fig. 31 et 32.",0,10,0.2,0.35,0.0,0.0,1,13
1878. Enoploclytia Leachii,1,10,0.47,0.07,0.0,0.0,1,13
"Woodward, p. 378, pl. 38% fig. 5",0,10,0.2,0.36,0.0,0.0,1,13
},1,6,0.2,0.35,0.0,0.0,0,13
et 6.,0,10,0.29,0.16,0.0,0.0,1,13
1879. Enoploclytia,1,10,0.47,0.07,0.0,0.0,1,13
"granulicauda Schliiter, p. 599, pl. 14,",1,10,0.38,0.29,0.0,0.0,1,13
},1,6,0.2,0.42,0.0,0.0,0,13
fig. 1-4.,0,10,0.29,0.16,0.0,0.0,1,13
"1887. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Fritscli & Kafka, p. 27, pl. 9, fig. 9,",0,10,0.2,0.35,0.0,0.0,1,13
fig. texte 46 à 52.,0,10,0.29,0.16,0.0,0.0,1,13
"1893. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Fritsch, p. 107.",0,10,0.2,0.35,0.0,0.0,1,13
1897. Enoploclytia Leachi,1,10,0.47,0.07,0.0,0.0,1,13
", Leonhard, p. 63.",0,10,0.2,0.35,0.0,0.0,1,13
1903. Enoploclytia Leachi,1,10,0.47,0.07,0.0,0.0,1,13
"Wanderer, p. 23, 2 lig.",0,10,0.2,0.35,0.0,0.0,1,13
},1,6,0.2,0.35,0.0,0.0,0,13
"1929. Enoploclytia granulicauda,",1,10,0.47,0.07,0.0,0.0,1,13
"Glaessner, p. 146.",0,10,0.2,0.42,0.0,0.0,1,13
"1929. Enoploclytia heterodon,",1,10,0.47,0.07,0.0,0.0,1,13
"Glaessner,, p. 146.",0,10,0.2,0.39,0.0,0.0,1,13
"1929. Enoploclytia leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Glaessner, p. 146.",0,10,0.2,0.35,0.0,0.0,1,13
"1930. Enoploclytia Leachi,",1,10,0.47,0.07,0.0,0.0,1,13
"Woods, p. 85, pl. 24, fig. 4, pl. 25,",0,10,0.2,0.35,0.0,0.0,1,13
fig. 1.,0,10,0.29,0.16,0.0,0.01,1,13
Cette belle espèce a été rencontrée dans nn certain nombre de,0,10,0.29,0.07,0.01,0.0,1,13
"localités du Bassin de Paris, qui étendent les limites connues de",0,10,0.29,0.05,0.0,0.0,1,13
son aire de dispersion.,0,10,0.29,0.05,0.0,0.01,1,13
"— Turonien, couclies à",0,10,0.2,0.33,0.01,0.0,1,13
Inoceramus,1,10,0.38,0.6,0.0,0.0,1,13
G I S E M E N T ET LOCALITÉS.,0,6,0.2,0.07,0.0,0.0,1,13
laMatus. — Ligueil (Indre-et-Loire). — Collection de M. G. Le-,1,10,0.47,0.05,0.0,0.0,1,13
"cointre à Chapelle-Blanche (Indre-et-Loire, France).",0,10,0.29,0.05,0.0,0.0,1,13
Environs de Rouen. — Collections géologiques de l'Université,0,10,0.29,0.07,0.0,0.0,1,13
de Lyon.,0,10,0.29,0.05,0.0,0.0,1,13
Coniacien. — Environs de Rouen. — Collections géologiques,0,10,0.29,0.07,0.0,0.0,1,13
"de la Sorbonne, à Paris.",0,10,0.29,0.05,0.0,0.0,1,13
14,1,6,0.29,0.15,0.0,0.0,0,14
Y.,1,7,0.23,0.34,0.0,0.0,0,14
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.03,1,14
Famille des NEPHROPSIDAE.,1,10,0.38,0.32,0.03,0.02,1,14
Genre HOMARUS IL Milne-Edwards.,1,10,0.38,0.29,0.02,0.02,1,14
Homarus dentatus,1,10,0.38,0.31,0.02,0.0,1,14
(A. Roemer).,0,10,0.2,0.52,0.0,0.02,1,14
"1841. Palaemon f dentatus,",1,10,0.47,0.18,0.02,0.0,1,14
"Roemer, p. 106, pl. 16, fig. 24.",0,10,0.2,0.46,0.0,0.0,1,14
"1874. Palaeno dentatus,",1,10,0.47,0.17,0.0,0.0,1,14
"Tribolet, M. de, 1874 (1), p. 359,",0,10,0.2,0.46,0.0,0.0,1,14
"pl. 12, fig. 8.",0,10,0.2,0.26,0.0,0.0,1,14
".1874. Palaeno dentatus,",1,10,0.47,0.17,0.0,0.0,1,14
"Tribolet, 1874 (2), p. 75, pl 1, fig. 4.",0,10,0.2,0.42,0.0,0.0,1,14
"1904. Palaeno dentatus,",1,10,0.47,0.17,0.0,0.0,1,14
"Borissiak, p. 422, pl. 13, fig. 2.",0,10,0.2,0.42,0.0,0.0,1,14
"1924. Hoploparia dentata,",1,10,0.47,0.17,0.0,0.0,1,14
"Stolley, p. 416, pl. 13, fig. 2-13.",0,10,0.2,0.45,0.0,0.0,1,14
1929. Hoploparia dentata,1,10,0.47,0.17,0.0,0.0,1,14
"(pro parte), Glaessner, p. 217.",0,10,0.2,0.44,0.0,0.0,1,14
"1936. Homarus dentatus,",1,10,0.47,0.17,0.0,0.0,1,14
"Van Straelen, p. 473.",0,10,0.2,0.43,0.0,0.01,1,14
—Valanginien : Neuchâtel (Champ,0,10,0.2,0.45,0.01,0.0,1,14
G I S E M E N T S ET LOCALITÉS.,0,6,0.2,0.18,0.0,0.0,1,14
"du Moulin), Sainte-Croix (Vaud). — Musée de Neuchâtel. —",0,10,0.29,0.15,0.0,0.0,1,14
"Saint-Aubin, Hauterive, Sainte-Croix et Sainte-Claude (Jura",0,10,0.29,0.15,0.0,0.0,1,14
suisse). — Musée d'Histoire naturelle de Genève.,0,10,0.29,0.15,0.0,0.0,1,14
Hauterivien : Bétancourt et Wassy (Haute-Marne). — Musée,0,10,0.29,0.18,0.0,0.0,1,14
"municipal d'Auxerre. — Cressier, Hauterive et Landeron près",0,10,0.29,0.15,0.0,0.0,1,14
"Neuchâtel, Sainte-Croix (Jura suisse). — Musée de Neuchâtel.",0,10,0.29,0.15,0.0,0.0,1,14
Urgonien: Louvemont et Wassy (Haute-Marne),0,10,0.29,0.18,0.0,0.0,1,14
( = faciès IJr-,0,10,0.2,0.69,0.0,0.0,1,14
gonien supérieur). — Musée d'Histoire naturelle de Genève. —,0,10,0.29,0.15,0.0,0.0,1,14
Morteau (Doubs) (= faciès Urgonien inférieur). — Musée d'His-,0,10,0.29,0.15,0.0,0.0,1,14
toire naturelle de Genève.,0,10,0.29,0.15,0.0,0.0,1,14
"Néocomien : Marolles, Souches, Saint-Siméon, Saint-Sauveur,",0,10,0.29,0.17,0.0,0.0,1,14
Migraine près Auxerre (Yonne). — Musée d'Histoire naturelle,0,10,0.29,0.15,0.0,0.0,1,14
de Genève.,0,10,0.29,0.15,0.0,0.0,1,14
Cinquétral (Jura). — Musée d'Histoire naturelle de Genève.,0,10,0.29,0.18,0.0,0.0,1,14
"Aptien : La Presta, Sainte-Croix (Yaud) et la Perte du Rhône",0,10,0.29,0.18,0.0,0.0,1,14
"(Ain, France). — Musée d'Histoire naturelle de Genève.",0,10,0.29,0.16,0.0,0.02,1,14
Homarus edwardsi,1,10,0.38,0.26,0.02,0.0,1,14
(Robineau-Desvoidy).,0,10,0.2,0.48,0.0,0.02,1,14
"1849. Homarus Edwardsi,",1,10,0.47,0.18,0.02,0.0,1,14
"Robineau-Desvoidy, p. 109, pl. 4,",0,10,0.2,0.48,0.0,0.0,1,14
fig. 1.,0,10,0.2,0.26,0.0,0.0,1,14
"1849. Homarus Blainvillei,",1,10,0.47,0.18,0.0,0.0,1,14
"Robineau-Desvoidy, p. 111, pl. 4,",0,10,0.2,0.46,0.0,0.0,1,14
fig. 2.,0,10,0.2,0.26,0.0,0.0,1,14
"1849. Homarus Lamarchii,",1,10,0.47,0.18,0.0,0.0,1,14
"Robineau-Desvoidy, p. 112, pl. 4,",0,10,0.2,0.46,0.0,0.0,1,14
fig. 3.,0,10,0.2,0.26,0.0,0.0,1,14
15,1,6,0.2,0.72,0.0,0.0,0,15
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.27,0.0,0.02,1,15
1849. Romanis Latreillei,1,10,0.47,0.06,0.02,0.0,1,15
"Robineau-Desvoidy,",0,10,0.2,0.33,0.0,0.0,1,15
"p. 113, pl. 4.",0,10,0.2,0.59,0.0,0.0,1,15
fig. 4.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Romanis Guerini,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 114, pl. 4,",0,10,0.2,0.35,0.0,0.0,1,15
fig. 5.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Romarus (Jottaldi,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 115, pl. 5,",0,10,0.2,0.33,0.0,0.0,1,15
1.,0,10,0.2,0.2,0.0,0.0,0,15
"1849. Romarus Michelini,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 11G, pl. 5,",0,10,0.2,0.34,0.0,0.0,1,15
fig. 2.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Romarus Guvieri,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 117, pl. 4,",0,10,0.2,0.33,0.0,0.0,1,15
fig. 6.,0,10,0.29,0.15,0.0,0.0,1,15
1849. Romarus Dorbù/nyi,1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy,",0,10,0.2,0.34,0.0,0.0,1,15
"p. 118, pl. 5,",0,10,0.2,0.59,0.0,0.0,1,15
fig. 4.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Romarus Sowerbyi,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 119, pl. 5,",0,10,0.2,0.36,0.0,0.0,1,15
fig. 3.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Romarus Lucasii,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 121, pl. 5,",0,10,0.2,0.35,0.0,0.0,1,15
fig. 6.,0,10,0.29,0.15,0.0,0.0,1,15
"1849. Palaeno Roemeri,",1,10,0.47,0.07,0.0,0.0,1,15
"Robineau-Desvoidy, p. 130, pl. 5.",0,10,0.2,0.35,0.0,0.0,1,15
fig. 13.,0,10,0.29,0.15,0.0,0.0,1,15
"1854. Romarus Latreillei,",1,10,0.47,0.07,0.0,0.0,1,15
"Pictet & Renevier, p. 13, pl. 1, fig. 7.",0,10,0.2,0.33,0.0,0.0,1,15
1,0,6,0.02,0.55,0.0,0.0,0,15
1874. Roploparia,1,10,0.47,0.07,0.0,0.0,1,15
"Latreillei, Tribolet, 1874",1,10,0.38,0.27,0.0,0.0,1,15
", p. 358, pl. 12,",0,10,0.2,0.56,0.0,0.0,1,15
fig. 6.,0,10,0.29,0.15,0.0,0.0,1,15
1,0,6,0.02,0.56,0.0,0.0,0,15
"1874. Roploparia neocomiensis,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, 1874 , p. 350, pl. 12,",0,10,0.2,0.4,0.0,0.0,1,15
fig. 5.,0,10,0.29,0.15,0.0,0.0,1,15
1,0,6,0.02,0.64,0.0,0.0,0,15
1874. Nephrops (Romarus),1,10,0.47,0.07,0.0,0.0,1,15
"Geoffroyi , Tribolet, 1874",1,10,0.38,0.37,0.0,0.0,1,15
", p. 358,",0,10,0.2,0.65,0.0,0.0,1,15
"pl. 12, fig. 7.",0,10,0.29,0.16,0.0,0.0,1,15
2,0,6,0.02,0.52,0.0,0.0,0,15
"1874. Roploparia Latreillei,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, 1874 , p. 70, pl. 1, fig. 4.",0,10,0.2,0.36,0.0,0.0,1,15
2,0,6,0.02,0.57,0.0,0.0,0,15
"1874. Roploparia neocomiensis,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, 1874 , p. 77, pl. 1,",0,10,0.2,0.4,0.0,0.0,1,15
fig. G.,0,10,0.29,0.15,0.0,0.0,1,15
"1875. Roploparia Edwardsi,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, p. 454, pl. 15, fig. 5.",0,10,0.2,0.36,0.0,0.0,1,15
"1875. Roploparia neocomiensis,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, p. 455, pl. 15, fig. G.",0,10,0.2,0.4,0.0,0.0,1,15
"1875. Roploparia Cuvieri,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, p. 456, pl. 15, fig. 8.",0,10,0.2,0.34,0.0,0.0,1,15
"1875. Roploparia Latreillei,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, p. 457, pl. 15, fig. 9.",0,10,0.2,0.36,0.0,0.0,1,15
"1876. Roploparia minima,",1,10,0.47,0.07,0.0,0.0,1,15
"Tribolet, p. 297, pl. 1, fig. 3 ('"""").",0,10,0.2,0.34,0.0,0.0,1,15
"1876. 1915. Roploparia Latreillei, Roploparia Latreillei",1,10,0.47,0.07,0.0,0.0,1,15
", W. Kilian, p. 134. Tribolet, p. 298, pl. 1, fig. 4.",0,10,0.2,0.35,0.0,0.0,1,15
"1929. Roploparia edwardsi,",1,10,0.47,0.07,0.0,0.0,1,15
"Glaessner, p. 217.",0,10,0.2,0.36,0.0,0.0,1,15
1936. Romarus edwardsi,1,10,0.47,0.07,0.0,0.0,1,15
"Van Straelen, p. 472.",0,10,0.2,0.33,0.0,0.0,1,15
},1,6,0.2,0.33,0.0,0.02,0,15
(in Cretaceous Rocks of Britain.,0,8,0.16,0.3,0.02,0.0,1,15
Gault,0,8,0.16,0.67,0.0,0.0,1,15
( * ) A . J . JUKES-BROWNE,0,6,0.2,0.07,0.0,0.0,1,15
I .,0,6,0.02,0.64,0.0,0.0,0,15
"k Greensand, p. 414, 1900. Memoirs Geological Survey United King-",0,8,0.25,0.05,0.0,0.0,1,15
dom) signale un Crustacé dénommé,0,8,0.25,0.05,0.0,0.0,1,15
Roploparia minima,1,8,0.34,0.41,0.0,0.0,1,15
"Price MS,",0,8,0.16,0.63,0.0,0.0,1,15
dans le Gault de Folkestone. Cette forme n'a pas encore été décrite,0,8,0.25,0.05,0.0,0.0,1,15
ni figurée.,0,8,0.25,0.05,0.0,0.0,1,15
16 Y.,1,7,0.41,0.15,0.0,0.0,1,16
VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.37,0.0,0.02,1,16
Robineau-Desvoidy a décrit de nombreuses espèces du genre,0,10,0.29,0.18,0.02,0.0,1,16
"Homarus, toutes recueillies dans le Néocomien de Saint-Sauveur-",1,10,0.47,0.15,0.0,0.0,1,16
en-Puisaye. Les types semblent en être perdus. P>eaucoup d'entre,0,10,0.29,0.15,0.0,0.0,1,16
"elles, établies sur un fragment d'appendice, se rapportent sans",0,10,0.29,0.15,0.0,0.0,1,16
aucun doute à une seule et même forme du genre,0,10,0.29,0.15,0.0,0.0,1,16
Homarus. Ce-,1,10,0.38,0.69,0.0,0.0,1,16
"pendant, il semble y avoir au moins deux espèces du genre",0,10,0.29,0.15,0.0,0.0,1,16
Homarus représentées dans le Néocomien de la province médi-,1,10,0.47,0.15,0.0,0.0,1,16
terranéenne; ce sont,0,10,0.29,0.15,0.0,0.0,1,16
: Homarus dentatus,1,10,0.38,0.37,0.0,0.0,1,16
A. Roemer et Homarus,1,10,0.38,0.58,0.0,0.0,1,16
tacher une grande partie des restes de edwardsi Robineau-Desvoidy. A ces deux espèces doivent se rat-,1,10,0.38,0.15,0.0,0.0,0,16
"Homarus signalés, sans",1,10,0.38,0.58,0.0,0.0,1,16
qu'il soit toujours possible de faire le partage entre les deux,0,10,0.29,0.15,0.0,0.0,1,16
formes citées. Seuls les céphalothorax permettent d'établir une,0,10,0.29,0.15,0.0,0.0,1,16
"distinction, qu'on devra d'ailleurs toujours faire en tenant",0,10,0.29,0.15,0.0,0.0,1,16
compte des effets de la fossilisation.,0,10,0.29,0.15,0.0,0.0,1,16
Je rattache à H. edwardsi,1,10,0.47,0.18,0.0,0.0,1,16
les formes dont le céphalothorax est,0,10,0.2,0.45,0.0,0.0,1,16
"plus étroit dans sa région tergale, tandis qu'il est plus élevé dans H. dentatus. On pourrait songer à rapporter ces différences",1,10,0.38,0.15,0.0,0.0,0,16
"au dimorphisme sexuel. Seulement, dans le homard actuel,",0,10,0.29,0.15,0.0,0.0,1,16
c'est le pléon surtout qui est relativement plus large chez la,0,10,0.29,0.16,0.0,0.0,1,16
"femelle que chez le mâle, le céphalothorax ne présentant pas de",0,10,0.29,0.15,0.0,0.0,1,16
différences sensibles.,0,10,0.29,0.15,0.0,0.01,1,16
Valanginien: La-Chaux-de-Fonds.,0,10,0.2,0.47,0.01,0.0,1,16
GISEMENTS ET LOCALITÉS.—,0,7,0.23,0.18,0.0,0.0,1,16
— Collections géologiques de l'Université de Besançon.,0,10,0.29,0.16,0.0,0.01,1,16
"Hauterivien : Auxerre. — Musée municipal d'Auxerre, Musée",0,10,0.29,0.18,0.01,0.0,1,16
"d'Histoire naturelle de Genève, Collections géologiques de l'Uni-",0,10,0.29,0.15,0.0,0.0,1,16
versité de Dijon.,0,10,0.29,0.15,0.0,0.0,1,16
"Fontenoy-en-Puisaye, Monétan, Saint-Sauveur-en-Puisaye, Ve-",0,10,0.29,0.18,0.0,0.0,1,16
"noy, Villefargean (Yonne). — Musée municipal d'Auxerre.",0,10,0.29,0.16,0.0,0.0,1,16
Brillon (Haute-Marne). — Collections géologiques de l'Uni-,0,10,0.29,0.18,0.0,0.0,1,16
versité de Nancy.,0,10,0.29,0.16,0.0,0.0,1,16
"Champtomay (ITaute-Saône). — Collection de M. Victor Maire,",0,10,0.29,0.18,0.0,0.0,1,16
"à, Gray.",0,10,0.29,0.16,0.0,0.0,1,16
"Saint-Thibaud-de-Couz (Savoie). — Collection de M. J. Demol,",0,10,0.29,0.18,0.0,0.0,1,16
à Chambéry.,0,10,0.29,0.16,0.0,0.0,1,16
"Cascade d'Aiguebelle, Salève (Suisse). — Musée d'Histoire",0,10,0.29,0.18,0.0,0.0,1,16
naturelle de Genève.,0,10,0.29,0.16,0.0,0.0,1,16
Neuchâtel (Suisse). — Collections géologiques de l'Université,0,10,0.29,0.18,0.0,0.0,1,16
de Neuchâtel.,0,10,0.29,0.16,0.0,0.0,1,16
17,1,7,0.23,0.73,0.0,0.0,0,17
DÉCAPODES CRÉTACIQUES,1,7,0.32,0.28,0.0,0.02,1,17
Homarus cf. benedeni,1,10,0.38,0.21,0.02,0.0,1,17
Pelseneer.,0,10,0.2,0.47,0.0,0.02,1,17
"1886. Pelseneer, p. 47, fig. 1 et 2.",0,10,0.29,0.08,0.02,0.0,1,17
Il faut rapprocher de cette espèce des pinces isolées que l'on,0,10,0.29,0.08,0.0,0.0,1,17
rencontre dans les sables albiens de Varennes (Meuse). L'hété-,0,10,0.29,0.05,0.0,0.0,1,17
rochélie est fortement marquée. La pince gauche a un propodite,0,10,0.29,0.05,0.0,0.0,1,17
"arrondi et globuleux, sa plus grande largeur correspondant à",0,10,0.29,0.05,0.0,0.0,1,17
peu près à la moitié de sa longueur. Son bord externe est lisse,0,10,0.29,0.05,0.0,0.0,1,17
"et arrondi, tandis que son bord interne porte des épines. A la",0,10,0.29,0.06,0.0,0.0,1,17
"face supérieure aussi bien qu'à la face inférieure on remarque,",0,10,0.29,0.05,0.0,0.0,1,17
"à peu de distance du bord externe, une légère dépression en forme",0,10,0.29,0.05,0.0,0.0,1,17
"de sillon, qui se continue dans l'index, ce dernier ayant une sec-",0,10,0.29,0.06,0.0,0.0,1,17
tion grossièrement triangulaire. A la face supérieure du dactylo-,0,10,0.29,0.06,0.0,0.0,1,17
"podite une carène, située parallèlement au bord interne, partage",0,10,0.29,0.06,0.0,0.0,1,17
inégalement cette surface en deux bandes différenciées par la,0,10,0.29,0.05,0.0,0.0,1,17
"nature de l'ornementation. La bande externe, c'est-à-dire opposée",0,10,0.29,0.05,0.0,0.0,1,17
"à l'index, porte de petites ponctuations arêolées devenant squa-",0,10,0.29,0.05,0.0,0.0,1,17
miformes comme le reste de la pince. Le bord interne du dacty-,0,10,0.29,0.05,0.0,0.0,1,17
lopodite est garni d'épines peu nombreuses et assez fortes ; le,0,10,0.29,0.05,0.0,0.0,1,17
"bord externe, donc opposé à l'index, porte des tubercules",0,10,0.29,0.05,0.0,0.0,1,17
mousses.,0,10,0.29,0.05,0.0,0.0,1,17
La carène du dactylopodite débute par un tubercule spini-,0,10,0.29,0.07,0.0,0.0,1,17
"forme, s'articulant dans une encoche du propodite. C'est tout",0,10,0.29,0.05,0.0,0.0,1,17
ce qui reste visible de l'articulation dactylopropodiale.,0,10,0.29,0.05,0.0,0.0,1,17
Cette pince est une pince broyeuse.,0,10,0.29,0.07,0.0,0.0,1,17
Les pinces droites sont des pinces ravisseuses au propodite,0,10,0.29,0.07,0.0,0.0,1,17
allongé et déprimé. L'ornementation est identique à celle de la,0,10,0.29,0.05,0.0,0.0,1,17
"pince gauche, seulement le bord externe du dactylopodite et le",0,10,0.29,0.05,0.0,0.0,1,17
bord interne de l'index sont garnis de tubercules épineux.,0,10,0.29,0.05,0.0,0.01,1,17
— Albien.,0,10,0.29,0.18,0.01,0.0,1,17
GISEMENT.,0,7,0.23,0.07,0.0,0.01,1,17
— Varennes (Meuse). — Collections géologiques de,0,10,0.29,0.17,0.01,0.0,1,17
LOCALITÉ.,0,7,0.23,0.07,0.0,0.0,1,17
l'Université de Dijon.,0,10,0.29,0.05,0.0,0.02,1,17
Homarus longimanus,1,10,0.47,0.2,0.02,0.0,1,17
(Sowerby).,0,10,0.2,0.45,0.0,0.02,1,17
"De nombreux débris, notamment des céphalothorax, provenant",0,10,0.29,0.07,0.02,0.0,1,17
"d'individus de petite taille, ont été rencontrés dans l'Albien du",0,10,0.29,0.05,0.0,0.0,1,17
Sud-Est du bassin de Paris.,0,10,0.29,0.05,0.0,0.0,1,17
Il convient également d'attribuer à,0,10,0.29,0.07,0.0,0.0,1,17
Homarus longimanus,1,10,0.38,0.45,0.0,0.0,1,17
des,0,10,0.11,0.68,0.0,0.0,0,17
spécimens offrant les caractères de,0,10,0.29,0.05,0.0,0.0,1,17
Homarus (Hoploparia) sul-,1,10,0.38,0.43,0.0,0.0,1,17
cirostris (Bell). Cette espèce est synonyme de la précédente et,1,10,0.47,0.05,0.0,0.0,1,17
18 Y. VAN STRAELEN. — CRUSTACÉS,1,6,0.39,0.15,0.0,0.02,1,18
ne représente qu'un meilleur état de conservation de l'ornemen-,0,10,0.29,0.15,0.02,0.0,1,18
tation de la région céphalique. C'est le cas notamment pour cer-,0,10,0.29,0.15,0.0,0.0,1,18
"tains individus provenant de Moëslains (Haute-Marne), localité",0,10,0.29,0.15,0.0,0.0,1,18
où l'on trouve les deux types côte à côte et reliés par des transi-,0,10,0.29,0.15,0.0,0.0,1,18
tions sensibles.,0,10,0.29,0.15,0.0,0.01,1,18
"— Albien. — Pargny (Marne), Moës-",0,10,0.2,0.43,0.01,0.0,1,18
G I S E M E N T ET LOCALITÉS.,0,6,0.2,0.18,0.0,0.0,1,18
"lains (Haute-Marne). — Collection de M. J. Houdard, à Au-",0,10,0.29,0.15,0.0,0.0,1,18
xerre.,0,10,0.29,0.15,0.0,0.0,1,18
"Un céphalothorax provenant d'un spécimen de petite taille,",0,10,0.29,0.18,0.0,0.0,1,18
"complètement réduit à l'état de moule interne, ne permettant",0,10,0.29,0.15,0.0,0.0,1,18
"plus une détermination précise, est à rapprocher de cette espèce.",0,10,0.29,0.16,0.0,0.01,1,18
— Cénomanien (Grès ferrugineux).,0,10,0.2,0.29,0.01,0.0,1,18
G I S E M E N T .,0,6,0.2,0.18,0.0,0.01,1,18
— Cosne (Nièvre). — Musée d'Histoire naturelle,0,10,0.2,0.28,0.01,0.0,1,18
LOCALITÉ.,0,6,0.2,0.18,0.0,0.0,1,18
de Genève.,0,10,0.29,0.16,0.0,0.02,1,18
Homarus pelseneeri,1,10,0.38,0.34,0.02,0.0,1,18
nov. sp.,0,10,0.2,0.57,0.0,0.0,1,18
"(Pl. III, fig. 2 et 3.)",0,10,0.2,0.39,0.0,0.02,1,18
Homarus pelseneeri,1,10,0.38,0.38,0.02,0.0,1,18
est représenté par les,0,10,0.2,0.59,0.0,0.0,1,18
D E S C R I P T I O N . —,0,6,0.2,0.18,0.0,0.0,1,18
"restes de deux individus, de taille légèrement différente. Un grès",0,10,0.29,0.16,0.0,0.0,1,18
"grossier phosphaté, très dur, remplit les carapaces et déborde",0,10,0.29,0.16,0.0,0.0,1,18
en formant des rognons qui recouvrent partiellement les parties,0,10,0.29,0.16,0.0,0.0,1,18
extérieures.,0,10,0.29,0.16,0.0,0.0,1,18
"Du plus grand des deux spécimens, qui sera choisi comme",0,10,0.29,0.18,0.0,0.0,1,18
"holotype, il subsiste le céphalothorax dont la moitié droite est",0,10,0.29,0.16,0.0,0.0,1,18
"brisée dans la région ophthalmique, tandis que la partie posté-",0,10,0.29,0.16,0.0,0.0,1,18
"rieure est encroûtée de grès phosphaté, et le pléon dont les so-",0,10,0.29,0.16,0.0,0.0,1,18
mites sont en partie désarticulés. Le telson et les uropodes sont,0,10,0.29,0.16,0.0,0.0,1,18
détruits.,0,10,0.29,0.16,0.0,0.0,1,18
"Dans l'autre spécimen, la partie frontale du céphalothorax est",0,10,0.29,0.18,0.0,0.0,1,18
"complètement détruite, la moitié postérieure gauche et la moitié",0,10,0.29,0.16,0.0,0.0,1,18
antérieure droite du céphalothorax sont partiellement engagées,0,10,0.29,0.16,0.0,0.0,1,18
dans des rognons de grès,0,10,0.29,0.16,0.0,0.0,1,18
; le pléon est complet à l'exception du,0,10,0.2,0.43,0.0,0.0,1,18
"telson et des uropodes, et tous les pléonites sont en connexion.",0,10,0.29,0.16,0.0,0.01,1,18
"J'ai le plaisir de dédier cette espèce à M. Paul Pelseneer,",0,10,0.29,0.18,0.01,0.0,1,18
"membre de l'Académie Royale de Belgique, en souvenir des im-",0,10,0.29,0.16,0.0,0.0,1,18
portants travaux qu'il a consacrés autrefois aux Crustacés,0,10,0.29,0.16,0.0,0.0,1,18
décapodes crétaciques.,0,10,0.29,0.16,0.0,0.01,1,18
"— Céphalothorax, non compris le rostre, à peine",0,10,0.2,0.29,0.01,0.0,1,18
DIAGNOSE.,0,6,0.2,0.18,0.0,0.0,1,18
plus long que le pléon non compris le telson.,0,10,0.29,0.16,0.0,0.0,1,18
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.27,0.0,0.0,1,19
19,1,6,0.2,0.72,0.0,0.02,0,19
Faibles carènes spinuleuses prolongeant les carènes dorsales,0,10,0.29,0.07,0.02,0.0,1,19
du rostre sur la région gastrique.,0,10,0.29,0.05,0.0,0.0,1,19
Epines post-orbitaires peu développées.,0,10,0.29,0.07,0.0,0.0,1,19
Sillon c profond et étroit dans sa partie tergale.,0,10,0.29,0.07,0.0,0.0,1,19
"Sillon a unique, large, peu profond, tangent au sillon",1,10,0.47,0.07,0.0,0.0,1,19
"c, s'en",1,10,0.38,0.65,0.0,0.0,1,19
écartant au point où le sillon c devient perpendiculaire à la ligne,0,10,0.29,0.05,0.0,0.0,1,19
"tergale et atteignant celle-ci un peu en arrière du sillon c, s'éten-",0,10,0.29,0.05,0.0,0.0,1,19
dant vers le bas jusqu'à hauteur de l'extrémité de la branche ô,0,10,0.29,0.05,0.0,0.0,1,19
2,0,6,0.02,0.73,0.0,0.0,0,19
qu'il rejoint.,0,10,0.43,0.04,0.0,0.15,1,19
Fig. 2. — Homarus,1,8,0.57,0.16,0.15,0.0,1,19
pelseneeri VAN STRAELEN.,1,8,0.34,0.36,0.0,0.0,1,19
Albien. — Ardennes.,0,8,0.16,0.28,0.0,0.0,1,19
"Schéma du céphalothorax, face latérale gauche.",0,8,0.25,0.15,0.0,0.02,1,19
"Sillons e, ~b et",1,10,0.47,0.07,0.02,0.0,1,19
"profonds et étroits, sillon",0,10,0.2,0.28,0.0,0.0,1,19
e dépassant vers,1,10,0.38,0.56,0.0,0.0,1,19
le haut la naissance du sillon c.,0,10,0.29,0.04,0.0,0.0,1,19
Sillon 1) atteignant le bord de la carapace au-dessous de l'angle,0,10,0.29,0.07,0.0,0.0,1,19
antennaire.,0,10,0.29,0.04,0.0,0.0,1,19
"Epimères du premier pléonite à peine indiqués, à peu près",0,10,0.29,0.07,0.0,0.0,1,19
"aussi longs que larges, faiblement mucronés vers l'arrière.",0,10,0.29,0.04,0.0,0.01,1,19
La comparaison de,0,10,0.2,0.42,0.01,0.0,1,19
H. pelse-,1,10,0.38,0.62,0.0,0.0,1,19
R A P P O R T S ET D I F F É R E N C E S . —,0,6,0.2,0.07,0.0,0.0,1,19
neeri avec les nombreuses espèces du genre,1,10,0.47,0.04,0.0,0.0,1,19
Homarus provenant,1,10,0.38,0.5,0.0,0.0,1,19
},1,6,0.2,0.6,0.0,0.0,0,19
du Crétacique de l'Ancien Monde et basées sur des restes ana-,0,10,0.29,0.04,0.0,0.0,1,19
"logues de l'organisme, donne les résultats consignés ci-après :",0,10,0.29,0.04,0.0,0.01,1,19
Homarus pelseneeri,1,10,0.47,0.07,0.01,0.0,1,19
se différencie de,0,10,0.2,0.27,0.0,0.01,1,19
"H. asperus (Harbort), du Yalanginien supérieur de l'Alle-",1,10,0.47,0.07,0.01,0.0,1,19
"magne septentrionale, par",0,10,0.29,0.04,0.0,0.0,1,19
"le sillon e remontant moins haut,",0,10,0.29,0.07,0.0,0.0,1,19
la branche rejoignant le sillon a;,0,10,0.29,0.07,0.0,0.01,1,19
"H. dentatus (Roeiner), de l'Hauterivien du Jura de l'Est de",1,10,0.47,0.07,0.01,0.0,1,19
"la France, du Sud de l'Angleterre, de l'Allemagne septentrionale",0,10,0.29,0.05,0.0,0.0,1,19
"et de la Russie méridionale, par",0,10,0.29,0.05,0.0,0.0,1,19
"la branche montante de 6 moins accentuée,",0,10,0.29,0.07,0.0,0.0,1,19
Y.,1,7,0.23,0.35,0.0,0.0,0,20
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.0,1,20
20,1,6,0.29,0.15,0.0,0.02,0,20
la branche montante de c faisant nn angle plus ouvert à son,0,10,0.29,0.18,0.02,0.0,1,20
extrémité avec la branche montante de,0,10,0.29,0.15,0.0,0.0,1,20
b,1,10,0.29,0.58,0.0,0.0,0,20
1;,1,6,0.2,0.6,0.0,0.0,0,20
les plèvres des pléonites beaucoup moins mucronées ;,0,10,0.29,0.18,0.0,0.01,1,20
"H. longimanus (Sowerby), de l'Aptien, de l'Albien et du Cé-",1,10,0.47,0.18,0.01,0.0,1,20
"nomanien inférieur de l'Angleterre méridionale, par",0,10,0.29,0.15,0.0,0.0,1,20
"son test beaucoup moins spinuleux,",0,10,0.29,0.18,0.0,0.0,1,20
le sillon c non souligné postérieurement par une carène spinu-,0,10,0.29,0.18,0.0,0.0,1,20
"leuse,",0,10,0.29,0.15,0.0,0.0,1,20
le sillon c ne rejoignant pas la branche montante de ô,0,10,0.29,0.18,0.0,0.0,1,20
en main-,0,10,0.2,0.75,0.0,0.0,1,20
2,0,6,0.02,0.75,0.0,0.0,0,20
tenant toute sa profondeur ;,0,10,0.29,0.16,0.0,0.01,1,20
"H. benedeni Pelseneer, de l'Albien des Ardennes, par",1,10,0.47,0.18,0.01,0.0,1,20
"la région tergale du céphalothorax moins plane,",0,10,0.29,0.18,0.0,0.0,1,20
"le test non spinuleux,",0,10,0.29,0.18,0.0,0.0,1,20
les régions gastrique et frontale relativement plus longues ;,0,10,0.29,0.18,0.0,0.01,1,20
"H. biserialis (Fritsch), du Turonien de la Bohême, par",1,10,0.47,0.18,0.01,0.0,1,20
"le sillon a moins nettement limité et profondément tracé,",1,10,0.47,0.18,0.0,0.0,1,20
"le sillon e remontant beaucoup moins haut,",1,10,0.47,0.18,0.0,0.0,1,20
les pléonites plus arrondis ;,0,10,0.29,0.18,0.0,0.01,1,20
"H. calcarifer (Scliliiter), du Sénonien de l'Allemagne septen-",1,10,0.47,0.18,0.01,0.0,1,20
"trionale, par",0,10,0.29,0.16,0.0,0.0,1,20
les plèvres des pléonites moins aiguës ;,0,10,0.29,0.18,0.0,0.01,1,20
"H. beyrichi (Schlûter), du Maestrichtien de l'Allemagne sep-",1,10,0.47,0.18,0.01,0.0,1,20
"tentrionale, pai",0,10,0.29,0.16,0.0,0.0,1,20
les plèvres des pléonites moins aiguës.,0,10,0.29,0.18,0.0,0.01,1,20
— Albien.,0,10,0.2,0.29,0.01,0.0,1,20
G I S E M E N T .,0,6,0.2,0.18,0.0,0.01,1,20
LOCALITÉS. — Ecordal (Ardennes). — Collections de géologie,0,10,0.29,0.18,0.01,0.0,1,20
de la Sorbonne à Paris.,0,10,0.29,0.16,0.0,0.0,1,20
Saint-Florentin. — Musée municipal d'Auxerre.,0,10,0.29,0.18,0.0,0.04,1,20
"Homarus trigeri (A. Milne-Edwards, MS).",1,10,0.38,0.26,0.04,0.01,1,20
"(Pl. III, fig. 4.)",0,10,0.2,0.42,0.01,0.02,1,20
"Hoploparia trigeri,",1,10,0.38,0.23,0.02,0.0,1,20
"Milne-Edwards, in",0,10,0.2,0.51,0.0,0.0,1,20
1 8 8 6 .,0,6,0.2,0.18,0.0,0.0,1,20
A .,0,6,0.02,0.49,0.0,0.0,0,20
"G U I L L I E R ,",0,6,0.11,0.75,0.0,0.0,1,20
p. 244.,0,10,0.29,0.16,0.0,0.0,1,20
— Cette espèce dénommée,0,10,0.2,0.32,0.0,0.0,1,20
Hoploparia trigeri,1,10,0.38,0.64,0.0,0.0,1,20
D E S C R I P T I O N .,0,6,0.2,0.18,0.0,0.0,1,20
par A. Milne-Edwards est longtemps restée sans diagnose. Elle,0,10,0.29,0.16,0.0,0.0,1,20
est représentée dans divers musées par des débris provenant de,0,10,0.29,0.16,0.0,0.0,1,20
plusieurs individus. Ils sont tous renfermés dans des concrétions,0,10,0.29,0.16,0.0,0.0,1,20
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.28,0.0,0.0,1,21
21,1,6,0.2,0.73,0.0,0.02,0,21
phosphatées plus ou moins dures. Le bord frontal et le rostre du,0,10,0.29,0.05,0.02,0.0,1,21
"céphalothorax sont brisés ; les appendices, sauf des fragments de",0,10,0.29,0.05,0.0,0.0,1,21
"la première paire de péréiopodes, sont détruits, ainsi que le der-",0,10,0.29,0.05,0.0,0.0,1,21
"nier pléonite, le telson et les uropocles.",0,10,0.29,0.05,0.0,0.01,1,21
— Céphalothorax offrant le long de la ligne tergale,0,10,0.29,0.18,0.01,0.0,1,21
DIAGNOSE.,0,6,0.2,0.08,0.0,0.0,1,21
"une carène, surtout proéminente entre le sillon c cervical et le",0,10,0.29,0.05,0.0,0.0,1,21
bord postérieur ;,0,10,0.29,0.05,0.0,0.0,1,21
une carène à la limite des régions cardiaque et branchiale;,0,10,0.29,0.08,0.0,0.0,1,21
une épine de part et d'autre de la carène tergale en arrière du,0,10,0.29,0.08,0.0,0.0,1,21
sillon cervical ;,0,10,0.29,0.05,0.0,0.0,1,21
"sillon ô donnant naissance, immédiatement au-dessous de sa",0,10,0.29,0.08,0.0,0.0,1,21
2,0,6,0.11,0.16,0.0,0.0,0,21
"confluence avec c, à un faible sillon parallèle à la branche termi-",0,10,0.29,0.05,0.0,0.0,1,21
nale de c;,1,10,0.47,0.05,0.0,0.0,1,21
sillon b présentant un angle en avant de la confluence des sil-,1,10,0.47,0.08,0.0,0.0,1,21
"lons b, et e.",1,10,0.47,0.05,0.0,0.01,1,21
— La comparaison de,0,10,0.2,0.37,0.01,0.0,1,21
H. trigeri,1,10,0.38,0.63,0.0,0.0,1,21
R A P P O R T S ET DIFFÉRENCES.,0,6,0.2,0.08,0.0,0.0,1,21
avec les espèces du genre,0,10,0.29,0.05,0.0,0.0,1,21
"Homarus, provenant du Crétacique de",1,10,0.38,0.32,0.0,0.0,1,21
"l'Ancien Monde et basées sur des restes analogues, donne les",0,10,0.29,0.05,0.0,0.0,1,21
résultats suivants :,0,10,0.29,0.05,0.0,0.01,1,21
H. trigeri se différencie de :,1,10,0.47,0.08,0.01,0.01,1,21
"H. asperus (Harbort), du Valanginien supérieur de l'Alle-",1,10,0.47,0.08,0.01,0.0,1,21
"magne septentrionale, par",0,10,0.29,0.05,0.0,0.01,1,21
l'existence d'une carène tergale et de carènes à la limite des,0,10,0.29,0.06,0.01,0.0,1,21
régions branchiale et cardiaque ;,0,10,0.29,0.05,0.0,0.01,1,21
"H. dentatus (Roemer), de l'Hauterivien du Jura de l'Est de",1,10,0.47,0.08,0.01,0.0,1,21
"la France, du Sud de l'Angleterre, de l'Allemagne septentrio-",0,10,0.29,0.05,0.0,0.0,1,21
"nale et de la Russie méridionale, par",0,10,0.29,0.05,0.0,0.0,1,21
l'existence d'une carène tergale et de carènes à la limite des,0,10,0.29,0.08,0.0,0.0,1,21
"régions branchiale et cardiaque,",0,10,0.29,0.05,0.0,0.0,1,21
la présence au sillon,0,10,0.29,0.08,0.0,0.0,1,21
b d'un angle en avant de la confluence,1,10,0.38,0.3,0.0,0.0,1,21
"des sillons b, 6 et e;",1,10,0.47,0.05,0.0,0.0,1,21
2,0,6,0.02,0.21,0.0,0.0,0,21
"H. longimanus (Sowerby), de l'Aptien, de l'Albien et du Cé-",1,10,0.47,0.08,0.0,0.0,1,21
"nomanien inférieur de l'Angleterre méridionale, par-",0,10,0.29,0.05,0.0,0.0,1,21
"son test lisse,",0,10,0.29,0.08,0.0,0.0,1,21
"l'existence d'une carène tergale,",0,10,0.29,0.08,0.0,0.0,1,21
la présence au sillon,0,10,0.29,0.08,0.0,0.0,1,21
d'un faible sillon parallèle à la branche,0,10,0.2,0.33,0.0,0.0,1,21
terminale de c;,0,10,0.29,0.05,0.0,0.01,1,21
"H. benedeni Pelseneer, de l'Albien des Ardennes, par",1,10,0.47,0.08,0.01,0.0,1,21
l'existence d'une carène tergale et de carènes à la limite des,0,10,0.29,0.08,0.0,0.0,1,21
régions branchiale et cardiaque ;,0,10,0.29,0.05,0.0,0.0,1,21
22 Y.,1,6,0.39,0.15,0.0,0.0,1,22
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.37,0.0,0.02,1,22
"H. pelseneeri Van Straelen, de l'Albien des Ardennes, par",1,10,0.47,0.17,0.02,0.0,1,22
l'existence d'une carène tergale et de carènes à la limite des,0,10,0.29,0.17,0.0,0.0,1,22
"régions branchiale et cardiaque,",0,10,0.29,0.15,0.0,0.0,1,22
la présence au sillon,0,10,0.29,0.18,0.0,0.0,1,22
b d'un faible sillon parallèle à la branche,1,10,0.38,0.39,0.0,0.0,1,22
1,1,6,0.2,0.41,0.0,0.0,0,22
"terminale de c,",1,10,0.47,0.15,0.0,0.0,1,22
la présence au sillon,0,10,0.29,0.18,0.0,0.0,1,22
b d'un angle en avant de la confluence,1,10,0.38,0.4,0.0,0.0,1,22
"des sillons b, bj et e",1,10,0.47,0.15,0.0,0.0,1,22
;,0,10,0.11,0.37,0.0,0.0,0,22
"H. biserialis (Fritsch), du Turonien de la Bohême, par",1,10,0.47,0.18,0.0,0.0,1,22
l'existence d'une carène tergale et de carènes à la limite des,0,10,0.29,0.18,0.0,0.0,1,22
régions cardiaque et branchiale ;,0,10,0.29,0.15,0.0,0.01,1,22
"II. calcarifer (Scliliiter), du Sénonien de l'Allemagne septen-",1,10,0.47,0.18,0.01,0.0,1,22
"trionale, par",0,10,0.29,0.15,0.0,0.0,1,22
l'existence d'une carène tergale et de carènes délimitant les,0,10,0.29,0.18,0.0,0.0,1,22
régions cardiaque et branchiale ;,0,10,0.29,0.15,0.0,0.01,1,22
"H. beyrichi (Schlûter), du Maestriclitien de l'Allemagne sep-",1,10,0.47,0.18,0.01,0.0,1,22
"tentrionale, par",0,10,0.29,0.15,0.0,0.0,1,22
l'existence d'une carène tergale et de carènes délimitant les,0,10,0.29,0.18,0.0,0.0,1,22
"régions cardiaque et branchiale,",0,10,0.29,0.16,0.0,0.0,1,22
"le sillon donnant naissance, immédiatement au-dessous de",0,10,0.29,0.18,0.0,0.0,1,22
"sa confluence avec c,",1,10,0.47,0.16,0.0,0.0,1,22
à un faible sillon parallèle à la branche,0,10,0.2,0.39,0.0,0.0,1,22
"terminale de c,",1,10,0.47,0.16,0.0,0.0,1,22
le sillon b présentant un angle en avant de la confluence des,0,10,0.29,0.18,0.0,0.0,1,22
"sillons 6, bj et e.",1,10,0.47,0.16,0.0,0.01,1,22
"Cénomanien supérieur, sables à",0,10,0.2,0.35,0.01,0.0,1,22
Rhynchonella,1,10,0.38,0.69,0.0,0.0,1,22
G I S E M E N T . —,0,6,0.2,0.18,0.0,0.0,1,22
compressa.,1,10,0.47,0.16,0.0,0.01,1,22
LOCALITÉ. — Le Mans (Sarthe). — Musée municipal du Mans,0,10,0.29,0.19,0.01,0.0,1,22
"et Collections géologiques de la Sorbonne, à Paris.",0,10,0.29,0.16,0.0,0.01,1,22
"Des débris, indéterminables spécifiquement, appartenant à",0,10,0.29,0.18,0.01,0.0,1,22
"Homarus, ont été rencontrés dans les gisements et les localités",1,10,0.47,0.16,0.0,0.0,1,22
qui suivent :,0,10,0.29,0.16,0.0,0.01,1,22
Néocomien : Cinquétral. — Musée d'Histoire naturelle de,0,10,0.29,0.18,0.01,0.0,1,22
Lyon.,0,10,0.29,0.16,0.0,0.01,1,22
"Albien : Saint-Florentin, Sainte-Croix. — Musée d'Histoire",0,10,0.29,0.18,0.01,0.0,1,22
naturelle de Genève.,0,10,0.29,0.16,0.0,0.0,1,22
"Ballav, près Vouziers. — Collections géologiques de la Sor-",0,10,0.29,0.18,0.0,0.0,1,22
bonne.,0,10,0.29,0.16,0.0,0.01,1,22
Cénomanien : Graville-Sainte-Honorine (Seine-Inférieure).—,0,10,0.29,0.18,0.01,0.0,1,22
"Collection de M. Mazetier, à Caen.",0,10,0.29,0.16,0.0,0.0,1,22
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.28,0.0,0.0,1,23
23,1,6,0.2,0.73,0.0,0.02,0,23
"Cénomanien (Sable glauconieux de Arnager), à Madseger",0,10,0.29,0.08,0.02,0.0,1,23
(Bornholm). — Musée minéralogique et géologique de Copen-,0,10,0.29,0.06,0.0,0.0,1,23
hague.,0,10,0.29,0.06,0.0,0.01,1,23
Danien (Calcaire de Faxe) : Faxe (Seeland). — Musée miné-,0,10,0.29,0.08,0.01,0.0,1,23
ralogique et géologique de Copenhague.,0,10,0.29,0.06,0.0,0.01,1,23
"De Tribolet a attribué, avec cloute, à",0,10,0.29,0.08,0.01,0.0,1,23
"Astacodes falcifer Bell,",1,10,0.38,0.48,0.0,0.0,1,23
"Palinuridae du Néoeomien d'Angleterre, un fragment très in-",1,10,0.47,0.06,0.0,0.0,1,23
"complet de pléon, recueilli dans le Néoeomien du Massif de Sen-",0,10,0.29,0.05,0.0,0.0,1,23
tis (*). Cette pièce se rapporte probablement à un,0,10,0.29,0.06,0.0,0.0,1,23
Homarus.,1,10,0.38,0.6,0.0,0.02,1,23
Section des Anomura.,1,10,0.38,0.28,0.02,0.02,1,23
Tribu des THALASSINIDEA.,0,10,0.2,0.23,0.02,0.02,1,23
Famille des CALLIANASSIDAE.,1,10,0.38,0.21,0.02,0.02,1,23
Genre CALLIANASSA,1,10,0.38,0.23,0.02,0.0,1,23
L E A C H .,0,6,0.11,0.5,0.0,0.02,1,23
Callianassa cenomanensis,1,10,0.47,0.14,0.02,0.0,1,23
A. Milne-Edwards.,0,10,0.2,0.44,0.0,0.02,1,23
"1860. Callianassa cenomanensis,",1,10,0.47,0.08,0.02,0.0,1,23
"Milne-Edwards, p. 339, pl. 14,",0,10,0.2,0.42,0.0,0.0,1,23
fig. 5.,0,10,0.29,0.17,0.0,0.0,1,23
"1886. Callianassa cenomanensis,",1,10,0.47,0.08,0.0,0.0,1,23
"Guillier, p. 237 et p. 244.",0,10,0.2,0.42,0.0,0.0,1,23
"1929. Callianassa cenomanensis,",1,10,0.47,0.08,0.0,0.0,1,23
"Glaessner, p. 77.",0,10,0.2,0.42,0.0,0.01,1,23
La détermination de cette espèce présente les difficultés par-,0,10,0.29,0.08,0.01,0.0,1,23
"ticulières au genre Callianassa,",1,10,0.47,0.06,0.0,0.0,1,23
qui exige sans doute une révision,0,10,0.2,0.38,0.0,0.0,1,23
"approfondie. Aux localités du Cénomanien du Maine, où cette",0,10,0.29,0.06,0.0,0.0,1,23
"espèce est connue, il convient d'ajouter celle qui a fourni le",0,10,0.29,0.06,0.0,0.0,1,23
type de l'étage : la Carrière de la Butte du Mans.,0,10,0.29,0.06,0.0,0.0,1,23
A cette espèce se rattachent également des,0,10,0.29,0.08,0.0,0.0,1,23
Callianassa du Cé-,1,10,0.38,0.54,0.0,0.0,1,23
nomanien normand.,0,10,0.29,0.06,0.0,0.01,1,23
"— Cénomanien supérieur, Sables à",0,10,0.2,0.35,0.01,0.0,1,23
G I S E M E N T ET LOCALITÉS.,0,6,0.2,0.08,0.0,0.0,1,23
Rhynchonella compressa :,1,10,0.47,0.06,0.0,0.0,1,23
"Le Mans, carrière de la Butte et",0,10,0.2,0.34,0.0,0.0,1,23
Saint-Mars-sous-Ballons (Sarthe). — Musée municipal du Mans.,0,10,0.29,0.06,0.0,0.01,1,23
Cénomanien : Yillers-sur-Mer (Calvados). — Collection de,0,10,0.29,0.08,0.01,0.0,1,23
"M. Mazetier, à Caen.",0,10,0.29,0.06,0.0,0.0,1,23
"Dans le Sénonien à Dieulefit (Drôme), on a recueilli des pro-",0,10,0.29,0.08,0.0,0.0,1,23
podites atteignant 8 millimètres de long. Ils sont à rapporter au,0,10,0.29,0.06,0.0,0.0,1,23
genre Callianassa. (Institut de Géologie de l'Université de Gre-,1,10,0.47,0.06,0.0,0.0,1,23
"noble, collection Gevrey).",0,10,0.29,0.06,0.0,0.02,1,23
"( * ) TRIBOLET, M . de, 1876, p . 298, p l . 1, f i g . 5.",0,6,0.2,0.08,0.02,0.0,1,23
Y.,1,7,0.23,0.34,0.0,0.0,0,24
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.0,1,24
24,1,6,0.29,0.15,0.0,0.03,0,24
Famille des PAGURIDAE.,1,10,0.38,0.34,0.03,0.02,1,24
Genre ORHOMALUS,1,10,0.38,0.32,0.02,0.0,1,24
E T A L L O N .,0,6,0.11,0.57,0.0,0.02,1,24
Orhomalus ? tombecki,1,10,0.38,0.31,0.02,0.0,1,24
Tribolet.,0,10,0.2,0.57,0.0,0.02,1,24
"Pour la synonymie de 1875 à 1929, voyez Glaessner, 1929,",0,10,0.29,0.17,0.02,0.0,1,24
p. 283.,0,10,0.29,0.15,0.0,0.0,1,24
Des pinces identiques à celles décrites par de Tribolet sont à,0,10,0.29,0.17,0.0,0.0,1,24
signaler dans de nouveaux gisements.,0,10,0.29,0.15,0.0,0.01,1,24
— Hauterivien : Venoy (Yonne). —,0,10,0.2,0.44,0.01,0.0,1,24
GISEMENTS ET LOCALITÉS.,0,6,0.2,0.17,0.0,0.0,1,24
"Collection de M. J. Houdard, à Auxerre.",0,10,0.29,0.15,0.0,0.01,1,24
Barrémien supérieur : Saint-Jean-de-Couz (Savoie). — Col-,0,10,0.29,0.17,0.01,0.0,1,24
"lection de M. J. Demol, à Chambéry.",0,10,0.29,0.15,0.0,0.02,1,24
Tribu des GALATHEIDEA.,0,10,0.2,0.34,0.02,0.02,1,24
Famille des GALA,1,10,0.38,0.33,0.02,0.0,1,24
THEIDAE.,1,10,0.38,0.55,0.0,0.02,1,24
Genre GALA THEITES,1,10,0.38,0.33,0.02,0.0,1,24
s.,0,10,0.11,0.64,0.0,0.0,0,24
B A L S,0,6,0.11,0.59,0.0,0.02,1,24
Galatheites neocomiensis,1,10,0.38,0.29,0.02,0.0,1,24
nov. sp.,0,10,0.2,0.59,0.0,0.0,1,24
"(Pl. III, fig. 5 et 6.)",0,10,0.2,0.39,0.0,0.01,1,24
— Céphalothorax beaucoup plus étroit en avant,0,10,0.2,0.28,0.01,0.0,1,24
D I A G N O S E .,0,6,0.2,0.17,0.0,0.0,1,24
"qu'en arrière, fortement convexe",0,10,0.29,0.15,0.0,0.0,1,24
; angles latéro-antérieurs à peu,0,10,0.2,0.5,0.0,0.0,1,24
"près droits, angles latéro-postérieurs arrondis ; bord postérieur",0,10,0.29,0.15,0.0,0.0,1,24
peu échancré par le pléon.,0,10,0.29,0.15,0.0,0.0,1,24
"Rostre très large à la base, sans carène médiane, occupant au",0,10,0.29,0.17,0.0,0.0,1,24
"total la moitié du bord frontal, recourbé vers le bas.",0,10,0.29,0.15,0.0,0.0,1,24
Sillon cervical profondément marqué et décrivant à peu près,0,10,0.29,0.17,0.0,0.0,1,24
une demi-circonférence.,0,10,0.29,0.15,0.0,0.0,1,24
Sillons gastro-orbitaires faiblement marqués sauf au milieu,0,10,0.29,0.17,0.0,0.0,1,24
"de la base du rostre où ils se rejoignent, région gastrique ainsi",0,10,0.29,0.15,0.0,0.0,1,24
délimitée occupant une aire à peu près égale au tiers de la région,0,10,0.29,0.15,0.0,0.0,1,24
céphalique.,0,10,0.29,0.15,0.0,0.0,1,24
"Sillons hépatiques très accentués, abordant la carène latérale",0,10,0.29,0.17,0.0,0.0,1,24
à peu près à angle droit.,0,10,0.29,0.15,0.0,0.0,1,24
Sillons branehio-cardiaques très faiblement indiqués.,0,10,0.29,0.17,0.0,0.0,1,24
Rostre couvert de très fines granulations paraissant lisses.,0,10,0.29,0.17,0.0,0.0,1,24
"Céphalothorax, sauf région cardiaque, couvert de tubercules",0,10,0.29,0.17,0.0,0.0,1,24
25,1,6,0.2,0.74,0.0,0.0,0,25
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.02,1,25
placés irrégulièrement,0,10,0.29,0.06,0.02,0.0,1,25
; région cardiaque garnie de tubercules,0,10,0.2,0.3,0.0,0.0,1,25
"très rapprochés les uns des autres, placés en rangées, constituant",0,10,0.29,0.06,0.0,0.0,1,25
ainsi des crêtes parallèles légèrement flexueuses.,0,10,0.29,0.06,0.0,0.01,1,25
— Hauterivien.,0,10,0.29,0.19,0.01,0.0,1,25
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,25
— Auxerre (Yonne). — Musée municipal d'Au-,0,10,0.29,0.19,0.01,0.0,1,25
LOCALITÉ.,0,6,0.2,0.08,0.0,0.0,1,25
xerre.,0,10,0.29,0.06,0.0,0.01,1,25
Section des Brachyura.,1,10,0.38,0.28,0.01,0.02,1,25
Tribu des DROMIACEA.,0,10,0.2,0.27,0.02,0.02,1,25
Famille des HOMOLODROMIIDAE.,1,10,0.38,0.21,0.02,0.02,1,25
Genre PL A (Il 0 PII TE A LM US,1,10,0.38,0.21,0.02,0.0,1,25
B E L L .,0,6,0.11,0.54,0.0,0.02,1,25
Plagiophthalmus oviformis,1,10,0.38,0.22,0.02,0.0,1,25
Bell.,0,10,0.2,0.54,0.0,0.02,1,25
"1863. Plagiophthalmus oviformis,",1,10,0.47,0.09,0.02,0.0,1,25
"Bell, p. 9, pl. 2, fig. 1-3.",0,10,0.2,0.44,0.0,0.0,1,25
"1875. Prosopon oviformis,",1,10,0.47,0.09,0.0,0.0,1,25
"Tribolet, p. 457.",0,10,0.2,0.36,0.0,0.0,1,25
"1898. Plagiophthalmus oviformis,",1,10,0.47,0.09,0.0,0.0,1,25
"Carter, p. 21.",0,10,0.2,0.44,0.0,0.0,1,25
"1929. Plagiophthalmus oviformis,",1,10,0.47,0.09,0.0,0.0,1,25
"Glaessner, p. 330.",0,10,0.2,0.44,0.0,0.01,1,25
Connue avec certitude du Cénomanien supérieur du Wiltshire,0,10,0.29,0.09,0.01,0.0,1,25
"et du Cambridgeshire, cette espèce existe aussi dans le Cénoma-",0,10,0.29,0.06,0.0,0.0,1,25
"nien de la Basse-Normandie, où se rencontrent des spécimens",0,10,0.29,0.06,0.0,0.0,1,25
"rigoureusement identiques à ceux du Wiltshire. D'autre part,",0,10,0.29,0.06,0.0,0.0,1,25
elle n'est pas rare dans les argiles albiennes de la bordure orien-,0,10,0.29,0.06,0.0,0.0,1,25
tale du Bassin de Paris.,0,10,0.29,0.06,0.0,0.01,1,25
— Cénomanien : Orbiquet (Calva-,0,10,0.2,0.37,0.01,0.0,1,25
GISEMENTS ET LOCALITÉS.,0,6,0.2,0.09,0.0,0.0,1,25
dos) . — Collections géologiques de l'Université de Caen.,0,10,0.29,0.06,0.0,0.01,1,25
"Albien : Moëslains (Haute-Marne), Pargny (Marne). — Col-",0,10,0.29,0.09,0.01,0.0,1,25
"lection de M. J. Houdard, à Auxerre.",0,10,0.29,0.06,0.0,0.02,1,25
Famille des PROSOPONIDAE.,1,10,0.38,0.24,0.02,0.02,1,25
Genre PROSOPON,1,10,0.38,0.24,0.02,0.0,1,25
VON M E Y E R .,0,6,0.11,0.46,0.0,0.02,1,25
Prosopon icaunensis,1,10,0.38,0.24,0.02,0.0,1,25
nov. sp.,0,10,0.2,0.47,0.0,0.0,1,25
"(Pl. III, fig. 7 et 8.)",0,10,0.2,0.3,0.0,0.01,1,25
— Cette espèce est basée jusqu'à présent sur un,0,10,0.2,0.23,0.01,0.0,1,25
DESCIIIPTUON.,0,6,0.2,0.09,0.0,0.0,1,25
"seul spécimen, réduit à une partie du céphalothorax se présen-",0,10,0.29,0.06,0.0,0.0,1,25
Y.,1,7,0.23,0.33,0.0,0.0,0,26
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.35,0.0,0.0,1,26
26,1,6,0.29,0.14,0.0,0.02,0,26
tant par la face tergale. Il en subsiste les régions situées en,0,10,0.29,0.14,0.02,0.0,1,26
"avant du sillon cervical, ainsi que la partie gauclie des régions",0,10,0.29,0.14,0.0,0.0,1,26
"post-cervicales, diminuées de leurs éléments médians.",0,10,0.29,0.14,0.0,0.0,1,26
"Le nom spécifique rappelle la rivière Yonne, en latin",0,10,0.29,0.16,0.0,0.0,1,26
Icauna dans la vallée de laquelle se trouve le gisement où,1,10,0.47,0.14,0.0,0.0,1,26
},1,6,0.2,0.21,0.0,0.0,0,26
P. icaunensis a été rencontré.,1,10,0.47,0.14,0.0,0.01,1,26
"— Test très mince, présentant de petits tubercules",0,10,0.2,0.27,0.01,0.0,1,26
DIAGNOSE.,0,6,0.2,0.16,0.0,0.0,1,26
sur les régions branchiales.,0,10,0.29,0.14,0.0,0.0,1,26
Céphalothorax fortement convexe dans le sens antéro-posté-,0,10,0.29,0.17,0.0,0.0,1,26
"rieur en avant du sillon cervical, à flancs relativement élevés et",0,10,0.29,0.14,0.0,0.0,1,26
droits.,0,10,0.29,0.14,0.0,0.0,1,26
Région mésogastrique ne s'étendant pas vers l'avant jusqu'à,0,10,0.29,0.17,0.0,0.0,1,26
la base du rostre.,0,10,0.29,0.14,0.0,0.0,1,26
Rostre très large à sa base et ayant probablement été long.,0,10,0.29,0.17,0.0,0.0,1,26
Région hépatique séparée de la région frontale par un sillon,0,10,0.29,0.17,0.0,0.0,1,26
"profond, partagée par un sillon médian ayant son origine au",0,10,0.29,0.14,0.0,0.0,1,26
début du rétrécissement de la région mésogastrique.,0,10,0.29,0.14,0.0,0.0,1,26
Sillon cervical rejoignant vers le bas le sillon branchial.,0,10,0.29,0.17,0.0,0.01,1,26
— La comparaison de,0,10,0.2,0.46,0.01,0.0,1,26
Prosopon,1,10,0.38,0.72,0.0,0.0,1,26
R A P P O R T S ET DIFFÉRENCES.,0,6,0.2,0.17,0.0,0.0,1,26
icaunensis est possible avec les espèces néoeomiennes suivantes,1,10,0.47,0.15,0.0,0.0,1,26
du genre Pr. icaunensis Prosopon (*). se distingue de :,1,10,0.47,0.15,0.0,0.0,1,26
"Pr. tiiberosum l'absence des grosses saillies sur les régions gastrique et hé- von Meyer, du Néocomien du Jura, par",1,10,0.38,0.17,0.0,0.0,0,26
"patique,",0,10,0.29,0.15,0.0,0.0,1,26
"le bord frontal plus large,",0,10,0.29,0.17,0.0,0.0,1,26
petits ; les tubercules des régions branchiales plus espacés et plus,0,10,0.29,0.15,0.0,0.01,1,26
"Pr. gignouxi Van Straelen, du Hauterivien du Diois, par",1,10,0.47,0.17,0.01,0.0,1,26
"les régions hépatiques présentant deux sillons,",0,10,0.29,0.17,0.0,0.0,1,26
"l'absence de crêtes en bordure du sillon cervical,",0,10,0.29,0.17,0.0,0.0,1,26
l'absence du sillon dans la partie médiane antérieure des ré-,0,10,0.29,0.17,0.0,0.0,1,26
gions branchiales (**).,0,10,0.29,0.15,0.0,0.01,1,26
GISEMENT. — N é o c o m i e n .,0,7,0.23,0.17,0.01,0.01,1,26
— Environs d'Auxerre. — Musée municipal d'Au-,0,10,0.2,0.27,0.01,0.0,1,26
xerre. LOCALITÉ.,0,10,0.29,0.15,0.0,0.02,1,26
(*) Le genre Prosopon,1,8,0.43,0.17,0.02,0.0,1,26
est compris ici selon la définition qui en a,0,8,0.16,0.4,0.0,0.0,1,26
été donnée par M. F. Glaessner (Die Krabben der Jura-forimation. —,0,8,0.25,0.15,0.0,0.0,1,26
"Centralbl: f. Minerai., Jahrg. 1933, Abt. B, n° 3, p. 179).",0,8,0.25,0.15,0.0,0.0,1,26
(**) L'attribution à ce genre de,0,8,0.25,0.17,0.0,0.0,1,26
Prosopon schneideri,1,8,0.34,0.5,0.0,0.0,1,26
"Stolley, du",0,8,0.16,0.73,0.0,0.0,1,26
"Hauterivien du Jura suisse, est douteuse.",0,8,0.25,0.15,0.0,0.0,1,26
27,1,6,0.2,0.74,0.0,0.0,0,27
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.04,1,27
Genre PITHONOTON,1,10,0.38,0.22,0.04,0.0,1,27
VON M E Y E R .,0,6,0.11,0.47,0.0,0.02,1,27
Pithonoton planum nov. sp.,1,10,0.38,0.25,0.02,0.0,1,27
"(Pl. IV, fig. 1 et 2.)",0,10,0.2,0.3,0.0,0.02,1,27
D E S C R I P T I O N . — Cette espèce nouvelle est basée sur les restes,0,10,0.2,0.09,0.02,0.0,0,27
de deux individus. Il s'agit de céphalothorax auxquels man-,0,10,0.29,0.07,0.0,0.0,1,27
quent des fragments plus ou moins étendus des régions bran-,0,10,0.29,0.06,0.0,0.0,1,27
"chiales postérieures. Le test est quelque peu décortiqué, la face",0,10,0.29,0.06,0.0,0.0,1,27
interne du test est engagée dans un calcaire blanchâtre.,0,10,0.29,0.06,0.0,0.01,1,27
Céphalothorax sensiblement plan dans le sens,0,10,0.2,0.23,0.01,0.0,1,27
D I A G N O S E . —,0,6,0.2,0.09,0.0,0.0,1,27
"antéro-postérieur et faiblement convexe dans la région frontale,",0,10,0.29,0.06,0.0,0.0,1,27
ainsi que dans le sens transversal.,0,10,0.29,0.06,0.0,0.0,1,27
Entailles orbitaires semi-circulaires avec une épine supra-or-,0,10,0.29,0.09,0.0,0.0,1,27
bitaire.,0,10,0.29,0.06,0.0,0.0,1,27
"Région mésogastrique entièrement lisse, à aire antérieure",0,10,0.29,0.09,0.0,0.0,1,27
étroite.,0,10,0.29,0.06,0.0,0.0,1,27
Région métagastrique non différenciée.,0,10,0.29,0.09,0.0,0.0,1,27
Région épigastrique saillante à hauteur de son extrémité.,0,10,0.29,0.09,0.0,0.0,1,27
Régions hépatiques lisses présentant une faible épine antéro-,0,10,0.29,0.09,0.0,0.0,1,27
latérale.,0,10,0.29,0.06,0.0,0.0,1,27
"Régions gastrique et uro-génitale confluentes, présentant au",0,10,0.29,0.09,0.0,0.0,1,27
"centre un petit tubercule, de part et d'autre duquel se trouve",0,10,0.29,0.06,0.0,0.0,1,27
une dépression transversale.,0,10,0.29,0.06,0.0,0.0,1,27
"Région cardiaque se terminant en pointe vers l'arrière, à crête",0,10,0.29,0.09,0.0,0.0,1,27
transversale antérieure portant deux tubercules.,0,10,0.29,0.06,0.0,0.0,1,27
Sillons branchiaux se joignant en arrière de l'extrémité posté,0,10,0.29,0.09,0.0,0.0,1,27
rieure de la région cardiaque.,0,10,0.29,0.06,0.0,0.0,1,27
Région branchiale antérieure présentant une crête.,0,10,0.29,0.08,0.0,0.01,1,27
L'attribution générique doit,0,10,0.2,0.45,0.01,0.0,1,27
R A P P O R T S ET D I F F É R E N C E S .,0,6,0.2,0.08,0.0,0.0,1,27
—,0,6,0.02,0.4,0.0,0.0,0,27
être considérée comme provisoire. L'espèce se rapproche le plus,0,10,0.29,0.06,0.0,0.0,1,27
de la forme décrite,0,10,0.29,0.06,0.0,0.0,1,27
Pithonoton elongatum,1,10,0.38,0.27,0.0,0.0,1,27
"(v. Meyer), du Port-",0,10,0.2,0.51,0.0,0.0,1,27
"landien de la Franconie et de la Souabe, parfois mise en syno-",0,10,0.29,0.06,0.0,0.0,1,27
nymie avec Pithonoton marginatum,1,10,0.47,0.06,0.0,0.0,1,27
von Meyer. Elle en diffère,0,10,0.2,0.46,0.0,0.0,1,27
cependant par,0,10,0.29,0.06,0.0,0.0,1,27
"sa forme généralement plus allongée,",0,10,0.29,0.08,0.0,0.0,1,27
les entailles orbitaires semi-circulaires avec une épine supra-,0,10,0.29,0.08,0.0,0.0,1,27
"orbitaire,",0,10,0.29,0.06,0.0,0.0,1,27
la longueur et l'étroitesse de la partie antérieure de la région,0,10,0.29,0.09,0.0,0.0,1,27
mésogastrique.,0,10,0.29,0.06,0.0,0.0,1,27
28,1,6,0.29,0.14,0.0,0.0,0,28
Y.,1,7,0.23,0.33,0.0,0.0,0,28
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.35,0.0,0.02,1,28
"l'existence de deux tubercules, et non trois, sur la région car",0,10,0.29,0.16,0.02,0.0,1,28
diaque.,0,10,0.29,0.14,0.0,0.01,1,28
— Néocomien.,0,10,0.2,0.27,0.01,0.0,1,28
G I S E M E N T .,0,6,0.2,0.16,0.0,0.01,1,28
— Localité non précisée des environs immédiats,0,10,0.2,0.26,0.01,0.0,1,28
LOCALITÉ.,0,6,0.2,0.16,0.0,0.0,1,28
d'Auxerre. — Musée municipal d'Auxerre.,0,10,0.29,0.14,0.0,0.02,1,28
Famille des DYNOMEN1DAE.,1,10,0.38,0.32,0.02,0.02,1,28
Genre CYPHONOTUS,1,10,0.38,0.25,0.02,0.0,1,28
MS),0,10,0.11,0.59,0.0,0.0,0,28
( C A R T E R B E L L .,0,6,0.11,0.51,0.0,0.02,1,28
Cyphonotus incertus,1,10,0.38,0.33,0.02,0.0,1,28
Bell.,0,10,0.2,0.57,0.0,0.02,1,28
"1863. Cyphonotus incertus,",1,10,0.47,0.16,0.02,0.0,1,28
"Bell, p. 8, pl. 1, fig. 17-19.",0,10,0.2,0.45,0.0,0.0,1,28
"1898. Cyphonotus incertus,",1,10,0.47,0.16,0.0,0.0,1,28
"Carter, p. 20.",0,10,0.2,0.44,0.0,0.0,1,28
"1933. Cyphonotus incertus,",1,10,0.47,0.17,0.0,0.0,1,28
"Glaessner, p. 584, pl. 28, fig. 8-10.",0,10,0.2,0.45,0.0,0.01,1,28
"Cette forme, très rare, n'a été connue pendant longtemps que",0,10,0.29,0.16,0.01,0.0,1,28
"dans le Cénomanien du Sud de l'Angleterre. Plus tard, elle fut",0,10,0.29,0.14,0.0,0.0,1,28
signalée tout à fait au sommet du Cénomanien de la Saxe. Elle a,0,10,0.29,0.14,0.0,0.0,1,28
"été rencontrée également dans Je Cénomanien de Normandie,",0,10,0.29,0.14,0.0,0.0,1,28
sous l'aspect d'un magnifique spécimen à peu près entier et,0,10,0.29,0.14,0.0,0.0,1,28
cules petits et à peu près tous de même dimension. Par son par- présentant encore son test au complet. Il est couvert de tuber-,0,10,0.2,0.14,0.0,0.0,0,28
"fait état de conservation, le spécimen normand se rapproche de",0,10,0.29,0.14,0.0,0.0,1,28
celui recueilli en Saxe.,0,10,0.29,0.14,0.0,0.01,1,28
— Cénomanien.,0,10,0.2,0.27,0.01,0.0,1,28
G I S E M E N T .,0,6,0.2,0.17,0.0,0.01,1,28
— Le Havre (Seine-Inférieure). — Collection de,0,10,0.2,0.27,0.01,0.0,1,28
LOCALITÉ.,0,6,0.2,0.17,0.0,0.0,1,28
"M. Mazetier, à Caen.",0,10,0.29,0.14,0.0,0.02,1,28
Genre PALAEODROMITES,1,10,0.38,0.22,0.02,0.0,1,28
A.,0,10,0.11,0.54,0.0,0.0,0,28
M I L N E - E D W A R D S .,0,6,0.11,0.56,0.0,0.02,1,28
Palaeodromites octodentatus,1,10,0.38,0.21,0.02,0.0,1,28
A. Milne-Edwards.,0,10,0.2,0.54,0.0,0.01,1,28
1865. Palaeodromites,1,10,0.47,0.17,0.01,0.0,1,28
"octodentatus, Milne-Edwards, p. 346,",1,10,0.38,0.41,0.0,0.0,1,28
"pl. 5, fig. 2.",0,10,0.29,0.14,0.0,0.01,1,28
Cette espèce est très abondante et le Musée d'Auxerre en pos-,0,10,0.29,0.17,0.01,0.0,1,28
"sède environ 70 spécimens, malheureusement tous incomplets.",0,10,0.29,0.14,0.0,0.0,1,28
"A. Milne-Edwards ne disposait que d'un individu, réduit à la",0,10,0.29,0.14,0.0,0.0,1,28
"face tergale du céphalothorax, comme le sont les nombraiv exem-",0,10,0.29,0.14,0.0,0.0,1,28
plaires conservés dans les collections du chef-lieu de l'Yonne.,0,10,0.29,0.14,0.0,0.0,1,28
Ceux-ci ne permettent donc pas de compléter la diagnose déjà,0,10,0.29,0.14,0.0,0.0,1,28
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.0,1,29
29,1,6,0.2,0.74,0.0,0.02,0,29
ancienne de A. Milne-Edwards. Dans les gisements où se ren-,0,10,0.29,0.06,0.02,0.0,1,29
"contrent ces céphalothorax, on trouve en quantité des pinces",0,10,0.29,0.07,0.0,0.0,1,29
"dépareillées, réduites au propodite auquel s'articule encore par-",0,10,0.29,0.06,0.0,0.0,1,29
fois le dactylopodite. Ces pinces ont tous les caractères de celles,0,10,0.29,0.06,0.0,0.0,1,29
des Dromiacées. Elles appartiennent probablement à,0,10,0.29,0.06,0.0,0.0,1,29
Palaeodro-,1,10,0.38,0.63,0.0,0.0,1,29
"mites octodentatus, sans qu'on puisse l'affirmer.",1,10,0.47,0.06,0.0,0.0,1,29
"Précédemment, j'ai signalé la présence d'un Epicaride ayant",0,10,0.29,0.09,0.0,0.0,1,29
produit une déformation de la région branchiale droite chez un,0,10,0.29,0.07,0.0,0.0,1,29
Brachyure (*). Le Crabe en question y est déterminé comme,0,10,0.29,0.07,0.0,0.0,1,29
étant Xantho Agassizi,1,10,0.47,0.06,0.0,0.0,1,29
Robineau-Desvoidy. Il s'agit en réalité,0,10,0.2,0.3,0.0,0.0,1,29
de Palaeodromites,1,10,0.47,0.07,0.0,0.0,1,29
octodentatus.,1,10,0.38,0.28,0.0,0.01,1,29
— Hauterivien.,0,10,0.29,0.19,0.01,0.0,1,29
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,29
— Environs d'Auxerre. — Musée municipal d'Au-,0,10,0.29,0.19,0.01,0.0,1,29
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,29
xerre.,0,10,0.29,0.07,0.0,0.0,1,29
Des pinces semblables à celles du Hauterivien d'Auxerre ont,0,10,0.29,0.09,0.0,0.0,1,29
été rencontrées en divers gisements :,0,10,0.29,0.07,0.0,0.01,1,29
Yalanginien : Saint-Jean-d'Arvey (Savoie). — Collection de,0,10,0.29,0.09,0.01,0.0,1,29
"M. J. Demol, à Chambéry.",0,10,0.29,0.07,0.0,0.0,1,29
Villers-le-Lac (Doubs). — Collections géologiques de l'Univer-,0,10,0.29,0.09,0.0,0.0,1,29
sité de Grenoble.,0,10,0.29,0.07,0.0,0.01,1,29
Hauterivien : Saint-Thibaud-de-Couz (Savoie). — Collection,0,10,0.29,0.09,0.01,0.0,1,29
"de M. J. Demol, à Chambéry.",0,10,0.29,0.07,0.0,0.01,1,29
Urgonien : La Presta (Vaud). — Collections géologiques de,0,10,0.29,0.09,0.01,0.0,1,29
l'Université de Neuchâtel.,0,10,0.29,0.07,0.0,0.01,1,29
"Aptien : Berland (Savoie). — Collection de M. J. Demol, à",0,10,0.29,0.09,0.01,0.0,1,29
Chambéry.,0,10,0.29,0.07,0.0,0.0,1,29
Famille des DROMIIDAE.,1,10,0.38,0.27,0.0,0.02,1,29
Genre CYCLOTHYREUS,1,10,0.38,0.23,0.02,0.0,1,29
R E M E S .,0,6,0.11,0.52,0.0,0.02,1,29
Cyclothyreus autissiodorensis,1,10,0.47,0.2,0.02,0.0,1,29
nov. sp.,0,10,0.2,0.54,0.0,0.0,1,29
"(Pl. IY, fig. 3.)",0,10,0.2,0.33,0.0,0.01,1,29
— Le type de cette espèce est basé sur les restes,0,10,0.2,0.23,0.01,0.0,1,29
D E S C R I P T I O N .,0,6,0.2,0.09,0.0,0.0,1,29
"d'un seul individu réduit au céphalothorax, auquel il manque",0,10,0.29,0.07,0.0,0.0,1,29
une partie importante du côté gauche. A ce spécimen vient,0,10,0.29,0.07,0.0,0.0,1,29
"s'ajouter un jeune exemplaire de petite taille, dépourvu de la",0,10,0.29,0.07,0.0,0.0,1,29
"partie latéro-antérieure droite, recueilli dans l'Urgonien.",0,10,0.29,0.07,0.0,0.02,1,29
Contribution à Vétude des Isopodes,1,8,0.34,0.33,0.02,0.0,1,29
méso-,1,8,0.34,0.71,0.0,0.0,1,29
"( * ) VAN STRAELEN, Y . —",0,6,0.2,0.09,0.0,0.0,1,29
"et cénozoïques. (Académie royale de Belgique, Classe des Sciences,",1,8,0.43,0.07,0.0,0.0,1,29
e,0,5,0.0,0.21,0.0,0.0,0,29
"Mém. in-4°, 2 sér., t. 9, 1928, p. 51, pl., fig. 10).",0,8,0.25,0.07,0.0,0.0,1,29
Y.,1,7,0.23,0.33,0.0,0.0,0,30
30,1,6,0.29,0.14,0.0,0.0,0,30
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.35,0.0,0.02,1,30
"DIAGNOSE. — Rostre fortement recourbé vers le bas, très large",0,10,0.29,0.16,0.02,0.0,1,30
et sillonné dans sa partie médiane.,0,10,0.29,0.14,0.0,0.0,1,30
"Céphalothorax plus large que long, ayant le maximum de la",0,10,0.29,0.16,0.0,0.0,1,30
largeur au début du troisième tiers de la longueur,0,10,0.29,0.13,0.0,0.0,1,30
; très convexe,0,10,0.2,0.68,0.0,0.0,1,30
dans le sens de la longueur dans les régions gastrique et frontale.,0,10,0.29,0.14,0.0,0.0,1,30
Sillon cervical nettement visible jusqu'au centre de la face,0,10,0.29,0.16,0.0,0.0,1,30
"tergale, les deux moitiés y formant un angle droit.",0,10,0.29,0.14,0.0,0.0,1,30
"Sillons gastro-antennaires très courts, ne limitant que la par-",0,10,0.29,0.16,0.0,0.0,1,30
"tie postérieure de la région gastrique, région postérieure divisée",0,10,0.29,0.14,0.0,0.0,1,30
par deux arcs de cercle.,0,10,0.29,0.14,0.0,0.0,1,30
Sillon postcervical profond seulement dans sa partie médiane.,0,10,0.29,0.16,0.0,0.0,1,30
Sillon branchio-cardiaque abordant les bords latéraux de,0,10,0.29,0.16,0.0,0.0,1,30
l'angle droit.,0,10,0.29,0.13,0.0,0.0,1,30
Cavités orbitaires limitées par le bord frontal et par un lobe,0,10,0.29,0.16,0.0,0.0,1,30
sous-orbitaire.,0,10,0.29,0.14,0.0,0.0,1,30
"Région cardiaque en forme d'écu, portant trois gros tubercules.",0,10,0.29,0.16,0.0,0.0,1,30
Bord marginal postérieur correspondant au cinquième de la,0,10,0.29,0.16,0.0,0.0,1,30
largeur totale du céphalothorax.,0,10,0.29,0.13,0.0,0.0,1,30
Bords latéraux découpés entre le sillon cervical et le sillon,0,10,0.29,0.16,0.0,0.0,1,30
branchio-cardiaque.,0,10,0.29,0.13,0.0,0.0,1,30
Face tergale couverte d'une fine granulation.,0,10,0.29,0.16,0.0,0.01,1,30
— Hauterivien : Environs d'Au-,0,10,0.2,0.43,0.01,0.0,1,30
G I S E M E N T S ET LOCALITÉS.,0,6,0.2,0.16,0.0,0.0,1,30
xerre. — Musée municipal d'Auxerre.,0,10,0.29,0.13,0.0,0.01,1,30
Urgonien inférieur : Morteau (Doubs). — Musée d'Histoire,0,10,0.29,0.16,0.01,0.0,1,30
naturelle de Genève.,0,10,0.29,0.13,0.0,0.01,1,30
Sous le nom de Glyphea couloni,1,10,0.47,0.16,0.01,0.0,1,30
de Tribolet a décrit des pro-,0,10,0.2,0.51,0.0,0.0,1,30
},1,6,0.2,0.5,0.0,0.0,0,30
"podites et des dactylopodites isolés, provenant de la première",0,10,0.29,0.13,0.0,0.0,1,30
paire de péréiopodes. L'attribution générique est certainement,0,10,0.29,0.13,0.0,0.0,1,30
erronée. Ces éléments doivent être rapportés à des,0,10,0.29,0.13,0.0,0.0,1,30
Dromiidea,1,10,0.38,0.71,0.0,0.0,1,30
"d'assez grande taille, sans qu'on puisse spécifier s'il s'agit de",0,10,0.29,0.13,0.0,0.0,1,30
Dynomenidae vants viennent s'ajouter à ceux déjà connus antérieurement. ou de,1,10,0.38,0.13,0.0,0.0,0,30
Dromiidae. Les gisements et les lieux sui-,1,10,0.38,0.35,0.0,0.02,1,30
Valanginien : Sainte-Croix (Vaud). — Musée d'Histoire na-,0,10,0.29,0.16,0.02,0.0,1,30
turelle de Neuchâtel.,0,10,0.29,0.13,0.0,0.01,1,30
Hauterivien : Saint-Aubin et Hauterive (Jura suisse). — Mu-,0,10,0.29,0.16,0.01,0.0,1,30
sée d'Histoire naturelle de Neuchâtel.,0,10,0.29,0.13,0.0,0.0,1,30
"Bettancourt (Haute - Marne),",0,10,0.29,0.16,0.0,0.0,1,30
Brillon et Ville-sur-Saulx,0,10,0.2,0.52,0.0,0.0,1,30
"(Meuse). — Collection de M. J. Hou dard, à Auxerre.",0,10,0.29,0.14,0.0,0.01,1,30
Urgonien : Morteau (Doubs). — Musée d'Histoire naturelle de,0,10,0.29,0.16,0.01,0.0,1,30
Neuchâtel.,0,10,0.29,0.13,0.0,0.0,1,30
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.0,1,31
31,1,6,0.2,0.73,0.0,0.04,0,31
Famille des HOMOLIDAE.,1,10,0.38,0.25,0.04,0.02,1,31
Genre E0M0L0PSI8,1,10,0.47,0.17,0.02,0.0,1,31
MS.),0,10,0.2,0.5,0.0,0.0,1,31
( C A R T E R B E L L .,0,6,0.11,0.42,0.0,0.02,1,31
Homolopsis tuberculata,1,10,0.38,0.22,0.02,0.0,1,31
nov. sp.,1,10,0.38,0.49,0.0,0.0,1,31
"(Pl. I V , fig. 4.)",0,10,0.2,0.32,0.0,0.01,1,31
— Le type et unique spécimen connu de cette,0,10,0.2,0.22,0.01,0.0,1,31
D E S C R I P T I O N .,0,6,0.2,0.08,0.0,0.0,1,31
nouvelle espèce est constitué par un céphalothorax réduit à l'in-,0,10,0.29,0.06,0.0,0.0,1,31
"tégrité des régions situées en avant du sillon cervical, à la région",0,10,0.29,0.06,0.0,0.0,1,31
gastrique et aux régions branchiales antérieures droites. La ca- rapace est remplie intérieurement d'un calcaire gris.,0,10,0.2,0.06,0.0,0.01,0,31
— Céphalothorax à test épais fortement convexe et,0,10,0.29,0.19,0.01,0.0,1,31
DIAGNOSE.,0,6,0.2,0.08,0.0,0.0,1,31
"Î\ régions nettement délimitées, au moins dans sa portion cer-",0,10,0.29,0.06,0.0,0.0,1,31
vicale.,0,10,0.29,0.06,0.0,0.0,1,31
Région frontale fortement infléchie vers le bas et sillonnée,0,10,0.29,0.08,0.0,0.0,1,31
longitudinalement.,0,10,0.29,0.06,0.0,0.0,1,31
Région mésogastrique présentant trois éminences: une anté-,0,10,0.29,0.08,0.0,0.0,1,31
rieure et deux postérieures.,0,10,0.29,0.06,0.0,0.0,1,31
Régions hépatiques peu développées portant un tubercule dans,0,10,0.29,0.08,0.0,0.0,1,31
l'angle postérieur interne et trois autres tubercules disposés sen-,0,10,0.29,0.06,0.0,0.0,1,31
siblement en une file parallèle au bord orbitaire.,0,10,0.29,0.06,0.0,0.0,1,31
Angle postérieur externe des régions hépatiques étiré en un,0,10,0.29,0.08,0.0,0.0,1,31
tubercule mousse.,0,10,0.29,0.06,0.0,0.0,1,31
"Région gastrique très étroite, rétrécie vers le milieu.",0,10,0.29,0.08,0.0,0.0,1,31
Régions branchiales partagées par un sillon branchial.,0,10,0.29,0.09,0.0,0.0,1,31
Régions branchiales antérieures portant un puissant tubercule,0,10,0.29,0.08,0.0,0.0,1,31
à la limite interne et un autre moins important situé latérale-,0,10,0.29,0.06,0.0,0.0,1,31
ment.,0,10,0.29,0.06,0.0,0.01,1,31
— La comparaison de,0,10,0.2,0.37,0.01,0.0,1,31
Homolopsis,1,10,0.38,0.62,0.0,0.0,1,31
R A P P O R T S ET DIFFÉRENCES.,0,6,0.2,0.09,0.0,0.0,1,31
tuberculata avec les formes du genre connues au Crétacique,1,10,0.47,0.07,0.0,0.0,1,31
donne les résultats suivants.,0,10,0.29,0.06,0.0,0.0,1,31
Elle diffère de :,0,10,0.29,0.09,0.0,0.01,1,31
"H. spinosa Van Straelen, de l'Albien du bord Est du Bassin",1,10,0.47,0.09,0.01,0.0,1,31
"de Paris, par",0,10,0.29,0.07,0.0,0.0,1,31
la forme de la partie antérieure du céphalothorax plus allon-,0,10,0.29,0.09,0.0,0.0,1,31
"gée,",0,10,0.29,0.07,0.0,0.0,1,31
l'existence sur la région hépatique de trois tubercules disposés,0,10,0.29,0.09,0.0,0.0,1,31
"en une file parallèle au bord orbitaire,",0,10,0.29,0.06,0.0,0.0,1,31
l'absence d'une forte épine aux angles postérieurs externes des,0,10,0.29,0.09,0.0,0.0,1,31
"régions hépatiques,",0,10,0.29,0.07,0.0,0.0,1,31
32 Y. VAN STRAELEN. — CRUSTACÉS,1,6,0.39,0.15,0.0,0.02,1,32
l'existence de tubercules sur les régions branchiales anté-,0,10,0.29,0.17,0.02,0.0,1,32
rieures ;,0,10,0.29,0.15,0.0,0.01,1,32
"E. edwardsi Bell, du Gault de Folkestone et du Greensand de",1,10,0.47,0.17,0.01,0.0,1,32
"Cambridge, par",0,10,0.29,0.15,0.0,0.0,1,32
la forme plus allongée de la partie antérieure du céphalo-,0,10,0.29,0.17,0.0,0.0,1,32
"thorax,",0,10,0.29,0.15,0.0,0.0,1,32
"la présence de trois éminenees, et non de tubercules, sur la",0,10,0.29,0.17,0.0,0.0,1,32
"région mésogastrique,",0,10,0.29,0.15,0.0,0.0,1,32
l'existence sur les régions hépatiques de tubercules placés en,0,10,0.29,0.17,0.0,0.0,1,32
"une file parallèle au bord orbitaire,",0,10,0.29,0.15,0.0,0.0,1,32
l'existence de tubercules sur les régions branchiales anté-,0,10,0.29,0.17,0.0,0.0,1,32
rieures ;,0,10,0.29,0.15,0.0,0.01,1,32
"E. depressa Carter, du Gault de Folkestone et du Greensand",1,10,0.47,0.17,0.01,0.0,1,32
"de Cambridge, par",0,10,0.29,0.15,0.0,0.0,1,32
la forme plus allongée de la partie antérieure du céphalo-,0,10,0.29,0.17,0.0,0.0,1,32
"thorax,",0,10,0.29,0.14,0.0,0.0,1,32
"l'existence de trois éminenees sur la région mésogastrique,",0,10,0.29,0.17,0.0,0.0,1,32
l'existence sur les régions hépatiques de tubercules placés en,0,10,0.29,0.17,0.0,0.0,1,32
une file parallèle au bord orbitaire ;,0,10,0.29,0.15,0.0,0.01,1,32
"E. etJieridgei (H. Woodward), du Crétacique inférieur du",1,10,0.47,0.17,0.01,0.0,1,32
"Queensland, par",0,10,0.29,0.14,0.0,0.0,1,32
l'existence sur les régions hépatiques de tubercules placés en,0,10,0.29,0.17,0.0,0.0,1,32
"une file parallèle au bord orbitaire,",0,10,0.29,0.15,0.0,0.0,1,32
la région gastrique beaucoup plus étroite ;,0,10,0.29,0.17,0.0,0.01,1,32
"E. gibbosa (Scliliiter), du Sénonien de l'Allemagne septen-",1,10,0.47,0.17,0.01,0.0,1,32
"trionale, par",0,10,0.29,0.14,0.0,0.0,1,32
la forme plus allongée de la partie antérieure du céphalo-,0,10,0.29,0.17,0.0,0.0,1,32
"thorax,",0,10,0.29,0.14,0.0,0.0,1,32
la portion plus large et moins longue de la région mésogas-,0,10,0.29,0.17,0.0,0.0,1,32
"trique,",0,10,0.29,0.14,0.0,0.0,1,32
la disposition des tubercules des régions hépatiques ;,0,10,0.29,0.17,0.0,0.01,1,32
"E. schliiteri Beurlen, du Sénonien de l'Allemagne septentrio-",1,10,0.47,0.17,0.01,0.0,1,32
"nale, pai",0,10,0.29,0.14,0.0,0.0,1,32
l'absence d'un tubercule médian sur la partie postérieure de,0,10,0.29,0.17,0.0,0.0,1,32
"la région mésogastrique,",0,10,0.29,0.14,0.0,0.0,1,32
"la disposition des tubercules des régions hépatiques,",0,10,0.29,0.17,0.0,0.0,1,32
la forme plus étroite de la région gastrique ;,0,10,0.29,0.17,0.0,0.01,1,32
"E. punctata Bathbun, du Crétacique supérieur du Dakota mé-",1,10,0.47,0.17,0.01,0.0,1,32
"ridional, par",0,10,0.29,0.14,0.0,0.0,1,32
la forme plus allongée de la partie antérieure du céphalo-,0,10,0.29,0.17,0.0,0.0,1,32
"thorax,",0,10,0.29,0.14,0.0,0.0,1,32
DÉCAPODES CRÉTACIQUES,1,7,0.32,0.28,0.0,0.0,1,33
33,1,7,0.23,0.73,0.0,0.02,0,33
l'existence d'un tubercule dans l'angle postérieur interne des,0,10,0.29,0.08,0.02,0.0,1,33
régions hépatiques ;,0,10,0.29,0.06,0.0,0.01,1,33
"B. transiens Segerberg, du Daiiien du Danemark et de la Suède",1,10,0.47,0.08,0.01,0.0,1,33
"méridionale, par",0,10,0.29,0.06,0.0,0.0,1,33
la forme plus allongée de la partie antérieure du céphalo-,0,10,0.29,0.08,0.0,0.0,1,33
"thorax,",0,10,0.29,0.06,0.0,0.0,1,33
la disposition des tubercules des régions hépatiques.,0,10,0.29,0.08,0.0,0.01,1,33
— Hauterivien.,0,10,0.29,0.19,0.01,0.0,1,33
GISEMENT.,0,7,0.23,0.08,0.0,0.01,1,33
— Localité non précisée des environs d'Auxerre. —,0,10,0.29,0.18,0.01,0.0,1,33
LOCALITÉ.,0,7,0.23,0.08,0.0,0.0,1,33
Musée municipal d'Auxerre.,0,10,0.29,0.06,0.0,0.02,1,33
Homolopsis edwardsi Bell.,1,10,0.38,0.25,0.02,0.02,1,33
"Pour la synonymie de 1863 à 1929, voyez Glaessner, 1929,",0,10,0.29,0.08,0.02,0.0,1,33
p. 211.,0,10,0.29,0.06,0.0,0.0,1,33
Cette forme n'est connue jusqu'à présent que dans le Gault,0,10,0.29,0.08,0.0,0.0,1,33
de Folkestone et les Sables verts de Cambridge. Elle se trouve,0,10,0.29,0.06,0.0,0.0,1,33
assez communément dans le Gault de la bordure orientale du,0,10,0.29,0.06,0.0,0.0,1,33
bassin de Paris et du Jura. Les spécimens sont rigoureusement,0,10,0.29,0.06,0.0,0.0,1,33
identiques à ceux recueillis dans le Kent et le Cambridgeshire.,0,10,0.29,0.06,0.0,0.01,1,33
— Albien.,0,10,0.29,0.19,0.01,0.0,1,33
GISEMENT.,0,7,0.23,0.08,0.0,0.01,1,33
— Moëslains (Haute-Marne). — Collection de,0,10,0.29,0.19,0.01,0.0,1,33
LOCALITÉS.,0,7,0.23,0.08,0.0,0.0,1,33
"M. J. Houdard, à Auxerre.",0,10,0.29,0.06,0.0,0.0,1,33
Sainte-Croix (Yaud). — Université de Neuchâtel.,0,10,0.29,0.08,0.0,0.02,1,33
Homolopsis spinosa,1,10,0.38,0.24,0.02,0.0,1,33
nov. sp.,0,10,0.2,0.47,0.0,0.0,1,33
"(Pî. IV, fig. 5.)",0,10,0.2,0.32,0.0,0.01,1,33
— Le type de cette espèce est constitué par un,0,10,0.2,0.22,0.01,0.0,1,33
DESCRIPTION.,0,7,0.23,0.08,0.0,0.0,1,33
"céphalothorax, dont la face tergale est à peu près complètement",0,10,0.29,0.06,0.0,0.0,1,33
conservée sauf le rostre. L'intérieur de la carapace est rempli,0,10,0.29,0.06,0.0,0.0,1,33
d'un grès argileux et phosphaté.,0,10,0.29,0.06,0.0,0.01,1,33
"— Céphalothorax légèrement déprimé, aussi long-",0,10,0.29,0.19,0.01,0.0,1,33
DIAGNOSE.,0,7,0.23,0.08,0.0,0.0,1,33
"que large, à bords latéraux subparallèles, à bord postérieur très",0,10,0.29,0.06,0.0,0.0,1,33
"faiblement échancré, à régions nettement délimitées.",0,10,0.29,0.06,0.0,0.0,1,33
Région frontale faiblement incurvée vers le bas.,0,10,0.29,0.08,0.0,0.0,1,33
Epines infraorbitaires présentes.,0,10,0.29,0.08,0.0,0.0,1,33
"atteignant le bord latéral! immédiatement après les épines hépa- Sillon cervical étroit, mais bien dessiné sur toute son étendue,",0,10,0.2,0.06,0.0,0.0,0,33
tiques.,0,10,0.29,0.06,0.0,0.0,1,33
34 Y.,1,6,0.39,0.14,0.0,0.0,1,34
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.02,1,34
Sillon branchial partageant la région branchiale en un tiers,0,10,0.29,0.17,0.02,0.0,1,34
antérieur et deux tiers postérieurs.,0,10,0.29,0.15,0.0,0.0,1,34
Région cardiaque fort saillante.,0,10,0.29,0.17,0.0,0.0,1,34
"Région gastrique de forme semi-lunaire, saillante par rapport",0,10,0.29,0.17,0.0,0.0,1,34
à la région mésogastrique et présentant une échanerure médiane-,0,10,0.29,0.15,0.0,0.0,1,34
postérieure.,0,10,0.29,0.15,0.0,0.0,1,34
Régions hépatiques portant chacune un solide tubercule,0,10,0.29,0.17,0.0,0.0,1,34
"dans l'angle postérieur interne, à la limite de la région méta-",0,10,0.29,0.15,0.0,0.0,1,34
gastrique.,0,10,0.29,0.15,0.0,0.0,1,34
Angles postérieurs externes des régions hépatiques étirés cha-,0,10,0.29,0.17,0.0,0.0,1,34
cun en une forte épine.,0,10,0.29,0.15,0.0,0.0,1,34
Région branchiale renflée au côté interne du second tiers pos-,0,10,0.29,0.17,0.0,0.0,1,34
térieur.,0,10,0.29,0.15,0.0,0.0,1,34
Test couvert (le petits tubercules dont quelques-uns sont plus,0,10,0.29,0.17,0.0,0.0,1,34
puissants sur les régions hépatiques.,0,10,0.29,0.15,0.0,0.0,1,34
Homolopsi. S- • spinosa,1,10,0.38,0.52,0.0,0.0,1,34
se dis-,0,10,0.2,0.76,0.0,0.0,1,34
R A P P O R T S E T D I F F É R E N C E S .,0,6,0.2,0.17,0.0,0.0,1,34
—,0,6,0.02,0.48,0.0,0.0,0,34
tingue de :,0,10,0.29,0.15,0.0,0.0,1,34
"H. edwardsi Bell, du Gault de Folkestone et du Greensand de",1,10,0.47,0.17,0.0,0.0,1,34
"Cambridge, par",0,10,0.29,0.15,0.0,0.0,1,34
"l'absence de tubercules sur la région mésogastrique,",0,10,0.29,0.17,0.0,0.0,1,34
"l'existence d'un seul tubercule sur chaque région hépatique,",0,10,0.29,0.17,0.0,0.0,1,34
"deux fortes épines hépatiques postérieures,",0,10,0.29,0.17,0.0,0.0,1,34
"l'absence de sillons sur les régions hépatiques,",0,10,0.29,0.17,0.0,0.0,1,34
la région intestinale non individualisée ;,0,10,0.29,0.17,0.0,0.01,1,34
"H. depressa Carter, du Gault de Folkestone et du Greensand",1,10,0.47,0.17,0.01,0.0,1,34
"de Cambridge, par",0,10,0.29,0.15,0.0,0.0,1,34
"les épines hépatiques situées plus en arrière et plus aiguës,",0,10,0.29,0.17,0.0,0.0,1,34
une région gastrique plus étroite et semi-lunaire ;,0,10,0.29,0.17,0.0,0.01,1,34
"J U. etheridgei (H. Woodward), du Crétacique inférieur du",1,10,0.47,0.17,0.01,0.0,1,34
"Queensland, par",0,10,0.29,0.15,0.0,0.0,1,34
"la forme générale subquadratique,",0,10,0.29,0.18,0.0,0.0,1,34
"les régions mésogastrique et hépatiques non sillonnées,",0,10,0.29,0.18,0.0,0.0,1,34
la présence d'une forte épine à l'angle postérieur externe des,0,10,0.29,0.18,0.0,0.0,1,34
régions hépatiques ;,0,10,0.29,0.15,0.0,0.01,1,34
"H. gibbosa (Schluter), du Sénonien de l'Allemagne septentrio-",1,10,0.47,0.18,0.01,0.0,1,34
"nale, par",0,10,0.29,0.15,0.0,0.0,1,34
"l'absence de sillons sur les régions hépatiques,",0,10,0.29,0.18,0.0,0.0,1,34
"l'absence de saillies sur la région cardiaque,",0,10,0.29,0.18,0.0,0.0,1,34
"l'absence, sur les régions branchiales, de deux carènes paral-",0,10,0.29,0.18,0.0,0.0,1,34
"lèles entre elles et au bord latéral postérieur,",0,10,0.29,0.15,0.0,0.0,1,34
35,1,8,0.25,0.72,0.0,0.0,0,35
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.02,1,35
l'existence de gros tubercules dans l'angle postérieur interne,0,10,0.29,0.09,0.02,0.0,1,35
des régions hépatiques ;,0,10,0.29,0.07,0.0,0.01,1,35
"nale, par H. schMteri Beurlen, du Sénonien de l'Allemagne septentrio-",1,10,0.47,0.07,0.01,0.0,1,35
"la forme générale plus subquadratique,",0,10,0.29,0.09,0.0,0.0,1,35
"l'absence d'un tubercule sur la région mésogastrique,",0,10,0.29,0.09,0.0,0.0,1,35
l'existence de fortes épines aux angles postérieurs externes des,0,10,0.29,0.09,0.0,0.0,1,35
"régions hépatiques,",0,10,0.29,0.07,0.0,0.0,1,35
"l'absence de sillons sur les régions hépatiques,",0,10,0.29,0.09,0.0,0.0,1,35
la région intestinale non individualisée ;,0,10,0.29,0.09,0.0,0.01,1,35
"H. punctata llathbun, du Crétacique supérieur du Dakota mé-",1,10,0.47,0.09,0.01,0.0,1,35
"ridional, par",0,10,0.29,0.07,0.0,0.0,1,35
"l'absence de tubercules sur la région mésogastrique,",0,10,0.29,0.09,0.0,0.0,1,35
"l'existence d'un seul tubercule sur chaque région hépatique,",0,10,0.29,0.09,0.0,0.0,1,35
la partie antérieure de la région mésogastrique non carénée ;,0,10,0.29,0.09,0.0,0.01,1,35
"H. transiens Segerberg, du Danien du Danemark et de la Suède",1,10,0.47,0.09,0.01,0.0,1,35
"méridionale, par",0,10,0.29,0.07,0.0,0.0,1,35
"l'existence d'un seul tubercule sur chaque région hépatique,",0,10,0.29,0.09,0.0,0.0,1,35
"l'absence de sillons secondaires sur les régions hépatiques,",0,10,0.29,0.09,0.0,0.0,1,35
un sillon cervical plus étroit.,0,10,0.29,0.09,0.0,0.01,1,35
— Albien.,0,10,0.29,0.19,0.01,0.0,1,35
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,35
— Yalcourt (Haute-Marne). — Collection de M. J.,0,10,0.29,0.19,0.01,0.0,1,35
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,35
"Houdard, d'Auxerre.",0,10,0.29,0.07,0.0,0.02,1,35
Tribu des OXYSTOMATA.,0,10,0.2,0.26,0.02,0.02,1,35
Famille des CALAPPIDAE.,1,10,0.38,0.25,0.02,0.02,1,35
Genre NECROCARVÏNUS,1,10,0.38,0.23,0.02,0.0,1,35
B E L L .,0,6,0.11,0.53,0.0,0.02,1,35
Necrocarcinus labeschei,1,10,0.47,0.17,0.02,0.0,1,35
(Deslongchamps).,0,10,0.2,0.44,0.0,0.02,1,35
"1819. De la Besche, p. 42, pl. 3, fig. 2.",0,10,0.29,0.09,0.02,0.0,1,35
"1822. Arcania t, Mantell, p. 96, pli. 29, fig. 7, 8 et 14.",1,10,0.47,0.09,0.0,0.0,1,35
"1833. Arcania , Mantell, p. 169, fig. 3, p. 385.",1,10,0.47,0.09,0.0,0.0,1,35
"1835. Orithya LiibescMi,",1,10,0.47,0.09,0.0,0.0,1,35
"Deslongchamps, p. 40, pl. 1, fig. 7, 8,",0,10,0.2,0.34,0.0,0.0,1,35
non 9.,0,10,0.29,0.18,0.0,0.0,1,35
"1844. Arcania Buck,lundi,",1,10,0.47,0.09,0.0,0.0,1,35
"Mantell, p. 534.",0,10,0.2,0.35,0.0,0.0,1,35
"1849. Notopocorystes Bechei,",1,10,0.47,0.09,0.0,0.0,1,35
"Me Coy, p. 170.",0,10,0.2,0.39,0.0,0.0,1,35
"1854. Notopocorystes Bechei,",1,10,0.47,0.09,0.0,0.0,1,35
"Morris, p. 111.",0,10,0.2,0.39,0.0,0.0,1,35
"1854. Notopocorystes Bechei,",1,10,0.47,0.09,0.0,0.0,1,35
"Me Coy, p. 125.",0,10,0.2,0.39,0.0,0.0,1,35
36,1,8,0.34,0.15,0.0,0.0,0,36
Y. VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.34,0.0,0.02,1,36
"1859. Notopocorystes Bechei,",1,10,0.47,0.17,0.02,0.0,1,36
"Reuss, p. 19 et p. 79.",0,10,0.2,0.48,0.0,0.0,1,36
"1863. Necrocarcinus Bechei,",1,10,0.47,0.17,0.0,0.0,1,36
"Bell, p. 20, pl. 4, fig. 4-8.",0,10,0.2,0.47,0.0,0.0,1,36
".1868. Necrocarcinus Bechei,",1,10,0.47,0.17,0.0,0.0,1,36
"Woodward, p. 259.",0,10,0.2,0.47,0.0,0.0,1,36
"1898. Necrocarcinus Bechei,",1,10,0.47,0.17,0.0,0.0,1,36
"Carter, p. 27, pl. 1, fig. 9.",0,10,0.2,0.47,0.0,0.0,1,36
"1923. Necrocarcinus Bechei,",1,10,0.47,0.17,0.0,0.0,1,36
"Van Straelen, p. 116 et p. 117.",0,10,0.2,0.47,0.0,0.0,1,36
"1929. Necrocarcinus bechei,",1,10,0.47,0.17,0.0,0.0,1,36
"Glaessner, p. 262.",0,10,0.2,0.47,0.0,0.0,1,36
"Cette espèce, abondante dans le Gault de Folkestone et les",0,10,0.29,0.17,0.0,0.0,1,36
"Sables verts de Cambridge, n'avait été signalée qu'une fois il y",0,10,0.29,0.15,0.0,0.0,1,36
"a plus d'un siècle, dans le Cénomanien du Calvados, près de",0,10,0.29,0.15,0.0,0.0,1,36
"Dives, par E. Deslongehamps. Elle y est moins rare qu'on ne",0,10,0.29,0.15,0.0,0.0,1,36
pourrait le supposer. Les spécimens normands correspondent,0,10,0.29,0.15,0.0,0.0,1,36
rigoureusement à ceux de l'Angleterre.,0,10,0.29,0.15,0.0,0.0,1,36
— Cénomanien.,0,10,0.2,0.28,0.0,0.0,1,36
G I S E M E N T .,0,7,0.23,0.17,0.0,0.01,1,36
"British Muséum (Natural History), à Londres, collection Tes- — Les Vaches Noires, près Dives (Calvados). —",0,10,0.2,0.15,0.01,0.0,0,36
LOCALITÉS.,0,7,0.23,0.17,0.0,0.02,1,36
"son, Inv. 22934-22937",0,10,0.29,0.15,0.02,0.0,1,36
; Musée d'Histoire naturelle de Bâle.,0,10,0.2,0.38,0.0,0.0,1,36
"Orbiquet (Calvados). — Collection Fortin, à Rouen.",0,10,0.29,0.17,0.0,0.0,1,36
Fécamp (Seine-Inférieure). — Musée royal d'Histoire natu-,0,10,0.29,0.17,0.0,0.0,1,36
"relle, à Bruxelles.",0,10,0.29,0.15,0.0,0.02,1,36
Necrocarcinus woodwardi,1,10,0.38,0.31,0.02,0.0,1,36
Bell.,0,10,0.2,0.61,0.0,0.01,1,36
"1863. Necrocarcinus Woodwardi,",1,10,0.47,0.17,0.01,0.0,1,36
"Bell, p. 20, pl. 4, fig. 1-3.",0,10,0.2,0.52,0.0,0.0,1,36
"1898. Necrocarcinus Woodwardi,",1,10,0.47,0.17,0.0,0.0,1,36
"Carter, p. 29, pl. 2, fig. 1.",0,10,0.2,0.52,0.0,0.0,1,36
1929. Necrocarcinus woodwardi,1,10,0.47,0.17,0.0,0.0,1,36
", Glaessner, p. 264.",0,10,0.2,0.51,0.0,0.0,1,36
"1929. Necrocarcinus woodwardi,",1,10,0.47,0.18,0.0,0.0,1,36
"Lorenthey & Beurlen, pp. 299,",0,10,0.2,0.51,0.0,0.0,1,36
"300, 303.",0,10,0.2,0.26,0.0,0.01,1,36
Cette espèce n'était connue jusqu'à présent que dans le Céno-,0,10,0.29,0.17,0.01,0.0,1,36
manien du Midi de l'Angleterre.,0,10,0.29,0.15,0.0,0.0,1,36
— Cénomanien.,0,10,0.2,0.28,0.0,0.0,1,36
GISEMENT.,0,7,0.23,0.18,0.0,0.0,1,36
— Le Havre (Falaise de la Hève). — Collection,0,10,0.2,0.29,0.0,0.0,1,36
LOCALITÉS.,0,7,0.23,0.18,0.0,0.0,1,36
"de M. Mazetier, à Caen.",0,10,0.29,0.15,0.0,0.0,1,36
Trouville. — Collections géologiques de l'Université de Caen.,0,10,0.29,0.18,0.0,0.01,1,36
Genre PARA NEGR O G A R GIN US,1,10,0.38,0.27,0.01,0.0,1,36
nov. gen.,0,10,0.2,0.63,0.0,0.01,1,36
Paranecrocarcinus hexagonalis,1,10,0.47,0.2,0.01,0.0,1,36
"nov. gen., nov. sp.",1,10,0.38,0.56,0.0,0.0,1,36
"(Pl. IV, fig. 6 et 7.)",0,10,0.2,0.39,0.0,0.02,1,36
— Le type et unique spécimen connu de cette,0,10,0.2,0.31,0.02,0.0,1,36
DESCRIPTION.,0,7,0.23,0.17,0.0,0.0,1,36
forme nouvelle est constitué par un céphalothorax d'environ,0,10,0.29,0.15,0.0,0.0,1,36
"8 millimètres de long, rempli d'un grés légèrement rubéfié. La",0,10,0.29,0.15,0.0,0.0,1,36
DÉCAPODES CRÉTACIQUES,1,7,0.32,0.29,0.0,0.0,1,37
37,0,7,0.04,0.73,0.0,0.02,0,37
face sternale et tous les appendices manquent. La région rostrale,0,10,0.29,0.07,0.02,0.0,1,37
est brisée.,0,10,0.29,0.07,0.0,0.01,1,37
"— Céphalothorax, vu du côté tergal, sensiblement",0,10,0.29,0.19,0.01,0.0,1,37
DIAGNOSE.,0,7,0.23,0.09,0.0,0.0,1,37
"hexagonal, à peu près aussi large en avant qu'en arrière",0,10,0.29,0.07,0.0,0.0,1,37
; sa,0,10,0.2,0.7,0.0,0.0,1,37
"longueur, mesurée de la base du rostre au milieu du bord posté-",0,10,0.29,0.07,0.0,0.0,1,37
"rieur, égale à la largeur mesurée à hauteur des dents postéro-",0,10,0.29,0.07,0.0,0.0,1,37
latérales.,0,10,0.29,0.07,0.0,0.0,1,37
Fortes épines épiorbitaires.,0,10,0.29,0.09,0.0,0.0,1,37
Région mésogastrique peu distincte.,0,10,0.29,0.09,0.0,0.0,1,37
Régions hépatiques portant un puissant tubercule vers l'angle,0,10,0.29,0.09,0.0,0.0,1,37
interne postérieur.,0,10,0.29,0.07,0.0,0.0,1,37
Région urogénitale portant un tubercule médian.,0,10,0.29,0.09,0.0,0.0,1,37
Région cardiaque saillante.,0,10,0.29,0.09,0.0,0.0,1,37
Région intestinale distincte.,0,10,0.29,0.09,0.0,0.0,1,37
Sillons branchio-eardiaques abordant les bords latéraux immé-,0,10,0.29,0.09,0.0,0.0,1,37
diatement après les épines postéro-latérales.,0,10,0.29,0.07,0.0,0.0,1,37
"Epines postéro-latérales à base solide, suivies chacune d'une",0,10,0.29,0.09,0.0,0.0,1,37
épine plus faible.,0,10,0.29,0.07,0.0,0.0,1,37
Régions branchiales portant un tubercule dans l'anglle antéro-,0,10,0.29,0.09,0.0,0.0,1,37
interne.,0,10,0.29,0.07,0.0,0.01,1,37
Le nom générique,0,10,0.29,0.09,0.01,0.0,1,37
Paranecrocarcinus,1,10,0.38,0.29,0.0,0.0,1,37
rappelle les affinités,0,10,0.2,0.52,0.0,0.0,1,37
avec le genre Necrocarcinus,1,10,0.47,0.07,0.0,0.0,1,37
"Bell, tandis que le nom spécifique",0,10,0.2,0.36,0.0,0.0,1,37
heœagonalis est motivé par le contour plus ou moins hexagonal,1,10,0.47,0.07,0.0,0.0,1,37
du céphalothorax.,0,10,0.29,0.07,0.0,0.01,1,37
— Néocomien.,0,10,0.29,0.19,0.01,0.0,1,37
GISEMENT.,0,7,0.23,0.09,0.0,0.01,1,37
"— Migraine, près Auxerre (Yonne). — Musée",0,10,0.29,0.19,0.01,0.0,1,37
LOCALITÉ.,0,7,0.23,0.09,0.0,0.0,1,37
d'Histoire naturelle de Genève.,0,10,0.29,0.07,0.0,0.02,1,37
Genre CENOMANOCARCINUS,1,10,0.47,0.18,0.02,0.0,1,37
nov. gen.,0,10,0.2,0.53,0.0,0.02,1,37
Cenomanocarcinus inflatus,1,10,0.47,0.11,0.02,0.0,1,37
(A. Milne-Edwards MS.),0,10,0.2,0.42,0.0,0.0,1,37
"(Pl. IY, fig. 8.)",0,10,0.2,0.32,0.0,0.02,1,37
1886. Necrocarcinus,1,10,0.47,0.09,0.02,0.0,1,37
"inflatus, A. Milne-Edwards MS. in A.",1,10,0.38,0.32,0.0,0.0,1,37
"G u I L L I E R , p . 2 4 4 .",0,7,0.23,0.18,0.0,0.0,1,37
"1935. Necrocarcinus inflatus,",1,10,0.47,0.09,0.0,0.0,1,37
"M. Boule & J. Piveteau, p. 392,",0,10,0.2,0.39,0.0,0.0,1,37
fig. 670.,0,10,0.29,0.17,0.0,0.01,1,37
"— Cette espèce, dénommée",0,10,0.2,0.23,0.01,0.0,1,37
Necrocarcinus infla-,1,10,0.38,0.52,0.0,0.0,1,37
DESCRIPTION.,0,7,0.23,0.09,0.0,0.0,1,37
"tus par A. Milne-Edwards, n'a jamais fait l'objet d'une diagnose.",1,10,0.47,0.07,0.0,0.0,1,37
Le type se trouve probablement dans les collections paléontolo-,0,10,0.29,0.07,0.0,0.0,1,37
39 Y.,1,7,0.41,0.14,0.0,0.0,1,38
VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.35,0.0,0.02,1,38
giques du Muséum national d'Histoire naturelle. Un exemplaire,0,10,0.29,0.15,0.02,0.0,1,38
de forte taille recueilli par Ed. Hébert dans le Cénomanien du,0,10,0.29,0.15,0.0,0.0,1,38
"Mans, dans le gisement classique des carrières de la Butte, figure",0,10,0.29,0.15,0.0,0.0,1,38
dans les collections de la Sorbonne. Il est représenté par un,0,10,0.29,0.15,0.0,0.0,1,38
céphalothorax à peu près entier. Le côté interne est engagé dans,0,10,0.29,0.15,0.0,0.0,1,38
un grès phosphaté très dur. Ce dernier spécimen est plus complet,0,10,0.29,0.15,0.0,0.0,1,38
que le type et de taille plus considérable. Il s'agit vraisemblable-,0,10,0.29,0.15,0.0,0.0,1,38
ment d'une exuvie.,0,10,0.29,0.15,0.0,0.0,1,38
"Enfin, un fragment, appartenant à la même forme et prove-",0,10,0.29,0.17,0.0,0.0,1,38
"nant du Turonien du Gard, se trouve dans la collection de",0,10,0.29,0.15,0.0,0.0,1,38
"M. Marcel Faraud, de Saint-Victor-la-Coste.",0,10,0.29,0.15,0.0,0.0,1,38
Le spécimen si parfait découvert par Ed. Hébert permet de,0,10,0.29,0.17,0.0,0.0,1,38
différencier immédiatement cette espèce du genre,0,10,0.29,0.15,0.0,0.0,1,38
Necrocarcinus,1,10,0.38,0.67,0.0,0.0,1,38
"Bell, par l'existence de trois fortes carènes tergales, une médiane",0,10,0.29,0.15,0.0,0.0,1,38
et deux latérales.,0,10,0.29,0.15,0.0,0.01,1,38
"Cenomanocarcinas, le nouveau nom générique proposé, rap-",1,10,0.47,0.17,0.01,0.0,1,38
"pelle le nom de la ville du Mans, «",0,10,0.29,0.15,0.0,0.0,1,38
Cenomanum ».,1,10,0.38,0.51,0.0,0.01,1,38
"— Céphalothorax fort convexe, plus large que long.",0,10,0.2,0.28,0.01,0.0,1,38
DIAGNOSE.,0,7,0.23,0.17,0.0,0.0,1,38
"Bord frontal très étroit, divisé par un sillon présentant deux-",0,10,0.29,0.17,0.0,0.0,1,38
fortes épines à la base du rostre très court et infléchi vers le bas.,0,10,0.29,0.15,0.0,0.0,1,38
Orbites petites et circulaires à épines supraorbitaires et infra-,0,10,0.29,0.17,0.0,0.0,1,38
"orbitaires, marquées de deux entailles.",0,10,0.29,0.15,0.0,0.0,1,38
Forte carène médiane tuberculeuse portée par la partie posté-,0,10,0.29,0.17,0.0,0.0,1,38
"rieure des régions inésogastrique, gastrique, urogastrique car-",0,10,0.29,0.15,0.0,0.0,1,38
"diaque et intestinale, carène bifurquant avant d'atteindre le bord",0,10,0.29,0.15,0.0,0.0,1,38
latéral postérieur.,0,10,0.29,0.15,0.0,0.0,1,38
"Fortes carènes latérales tuberculeuses, obliques par rapport",0,10,0.29,0.17,0.0,0.0,1,38
"à la carène médiane, portées par la partie médiane postérieure",0,10,0.29,0.15,0.0,0.0,1,38
des régions hépatiques et des régions branchiales.,0,10,0.29,0.15,0.0,0.0,1,38
Régions métagastriques garnies de fortes épines en avant de,0,10,0.29,0.17,0.0,0.0,1,38
la naissance de la carène médiane.,0,10,0.29,0.15,0.0,0.0,1,38
Bords antéro-latéraux régulièrement arqués et munis chacun,0,10,0.29,0.17,0.0,0.0,1,38
de cinq fortes épines.,0,10,0.29,0.15,0.0,0.0,1,38
Premières épines postéro-latérales les plus développées de,0,10,0.29,0.17,0.0,0.0,1,38
toutes.,0,10,0.29,0.15,0.0,0.0,1,38
Bords postéro-latéraux divisés par une forte épine.,0,10,0.29,0.17,0.0,0.0,1,38
Bord postérieur limité par deux fortes épines correspondant,0,10,0.29,0.17,0.0,0.0,1,38
aux extrémités des carènes latérales et portant deux épines cor-,0,10,0.29,0.15,0.0,0.0,1,38
respondant aux extrémités de la carène médiane.,0,10,0.29,0.15,0.0,0.0,1,38
Régions hépatiques présentant,0,10,0.29,0.17,0.0,0.0,1,38
: 1° une rangée antérieure de,0,10,0.2,0.5,0.0,0.0,1,38
"tubercules épineux, plus ou moins parallèles à la partie anté-",0,10,0.29,0.15,0.0,0.0,1,38
39,1,8,0.25,0.73,0.0,0.0,0,39
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.02,1,39
Tieure des bords antéro-latéraux,0,10,0.29,0.07,0.02,0.0,1,39
; 2° une carène épineuse en arc,0,10,0.2,0.41,0.0,0.0,1,39
"de cercle, s'étendant de l'extrémité antérieure de la carène laté-",0,10,0.29,0.07,0.0,0.0,1,39
rale à l'épine postéro-latérale.,0,10,0.29,0.07,0.0,0.0,1,39
Sillon branchial faiblement esquissé.,0,10,0.29,0.09,0.0,0.01,1,39
Il convient de rapporter à ce genre la forme décrite sous le,0,10,0.29,0.09,0.01,0.0,1,39
nom de Necrocarcinus oldahomensis,1,10,0.47,0.07,0.0,0.0,1,39
"Rathbun, provenant des Co-",0,10,0.2,0.44,0.0,0.0,1,39
manche Sériés de l'Oklahoma (*).,0,10,0.29,0.07,0.0,0.01,1,39
"Le Mans. — Collections géologiques de la — Cénomanien, Sables à",0,10,0.2,0.28,0.01,0.0,1,39
Rhyncho-,1,10,0.38,0.64,0.0,0.0,1,39
G I S E M E N T S ET LOCALITÉS.,0,6,0.2,0.09,0.0,0.0,1,39
nella lamarckiana :,1,10,0.47,0.07,0.0,0.0,1,39
Sorbonne (Collection Hébert).,0,10,0.29,0.07,0.0,0.01,1,39
Turonien (Ligérien) à,0,10,0.29,0.09,0.01,0.0,1,39
Exogyra columba :,1,10,0.38,0.33,0.0,0.0,1,39
Bagnols-sur-Cèze,0,10,0.2,0.56,0.0,0.0,1,39
"(Gard). — Collection de M. l'ingénieur Marcel Faraud, à Saint-",0,10,0.29,0.07,0.0,0.0,1,39
Yictor-la-Coste.,0,10,0.29,0.07,0.0,0.01,1,39
Famille des RANINIDAE.,1,10,0.38,0.26,0.01,0.02,1,39
Genre NOTOPOCORYSTES,1,10,0.38,0.21,0.02,0.0,1,39
ME COY.,0,10,0.2,0.52,0.0,0.02,1,39
Notopocorystes broderipi,1,10,0.47,0.2,0.02,0.0,1,39
(Mantell).,0,10,0.2,0.49,0.0,0.02,1,39
"1822. Corystidae, Mantell, pl. 29, fig. 9 et 10.",1,10,0.47,0.09,0.02,0.0,1,39
1833. Leucosiadac et,1,10,0.47,0.09,0.0,0.0,1,39
"Corystidae, Mantell, p. 170 et p. 385.",1,10,0.38,0.31,0.0,0.0,1,39
"1844. Corystes Broderipii,",1,10,0.47,0.09,0.0,0.0,1,39
"Mantell, pp. 532 et 534, lign. 115,",0,10,0.2,0.36,0.0,0.0,1,39
fig. 3.,0,10,0.29,0.18,0.0,0.0,1,39
"1854. Notopocorystes Broderipii,",1,10,0.47,0.09,0.0,0.0,1,39
"Morris, p. 111.",0,10,0.2,0.43,0.0,0.0,1,39
"1862. Palaeocorystes Broderipii,",1,10,0.47,0.09,0.0,0.0,1,39
"Bell, p. 14, pl. 2. fig. 8-13.",0,10,0.2,0.42,0.0,0.0,1,39
"1898. Eucorystes Broderipi,",1,10,0.47,0.09,0.0,0.0,1,39
"Carter, p. 25.",0,10,0.2,0.38,0.0,0.0,1,39
1923. Palaeocorystes Broderipi,1,10,0.47,0.09,0.0,0.0,1,39
"Van Straelen, pp. 117 et 119,",0,10,0.2,0.41,0.0,0.0,1,39
fig. 4.,0,10,0.29,0.18,0.0,0.0,1,39
"1928. Notopocorystes broderipi,",1,10,0.47,0.09,0.0,0.0,1,39
"Withers, p. 458.",0,10,0.2,0.42,0.0,0.0,1,39
"1929. Notopocorystes broderipi,",1,10,0.47,0.09,0.0,0.0,1,39
"Glaessner, p. 275.",0,10,0.2,0.42,0.0,0.0,1,39
"1929. Notopocorystes broderipi,",1,10,0.47,0.09,0.0,0.0,1,39
"Glaessner, p. 153.",0,10,0.2,0.42,0.0,0.01,1,39
Jusqu'à présent cette espèce n'était connue que du Gault de,0,10,0.29,0.09,0.01,0.0,1,39
l'Angleterre. Les spécimens signalés ici proviennent de l'Albien,0,10,0.29,0.07,0.0,0.0,1,39
du Sud-Est du Bassin de Paris et du Jura.,0,10,0.29,0.07,0.0,0.01,1,39
— Albien: Baveuse (Yonne). — Mu-,0,10,0.2,0.35,0.01,0.0,1,39
GISEMENT E T LOCALITÉS.,0,6,0.2,0.09,0.0,0.0,1,39
sée municipal d'Auxerre.,0,10,0.29,0.07,0.0,0.0,1,39
Sainte-Croix (Yaud). — Musée de Neuchâtel.,0,10,0.29,0.09,0.0,0.02,1,39
Fossil Crustacea of the Atlantic,1,8,0.34,0.35,0.02,0.0,1,39
Gulf,1,8,0.34,0.71,0.0,0.0,1,39
"( * ) RATHBUN, M . J .",0,6,0.2,0.09,0.0,0.0,1,39
—,0,6,0.02,0.32,0.0,0.0,0,39
"Coastal Plain, Geol. Soc. America, Spécial Paper n° 2, 1935, p. 44,",1,8,0.43,0.07,0.0,0.0,1,39
fig. 9.,0,8,0.25,0.07,0.0,0.0,1,39
Y.,1,7,0.23,0.33,0.0,0.0,0,40
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.34,0.0,0.0,1,40
40,1,6,0.29,0.14,0.0,0.02,0,40
Pargny s/Saulx (Marne) et Moëslains (Haute-Marne). — Col-,0,10,0.29,0.16,0.02,0.0,1,40
"lection de M. J. Houdard, à Auxerre.",0,10,0.29,0.14,0.0,0.02,1,40
Notopocorystes carteri Me,1,10,0.38,0.3,0.02,0.0,1,40
Coy.,0,10,0.2,0.61,0.0,0.02,1,40
"1854. Notopocorystes Carteri,",1,10,0.47,0.16,0.02,0.0,1,40
"Me Coy, p. 118, pl. 4, fig. 3.",0,10,0.2,0.47,0.0,0.0,1,40
"1859. Notopocorystes Carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Reuss, p. 19.",0,10,0.2,0.48,0.0,0.0,1,40
"1862. ,Eucorystes Carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Bell, p. 17, pl. 2, fig. 14-17, pl. 11,",0,10,0.2,0.43,0.0,0.0,1,40
fig. 16.,0,10,0.2,0.25,0.0,0.0,1,40
"1898. Eucorystes Carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Carter, p. 25.",0,10,0.2,0.43,0.0,0.0,1,40
"1923. Eucorystes Carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Van Straelen, p. 119, fig. 5.",0,10,0.2,0.43,0.0,0.0,1,40
"1928. Notopocorystes carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Withers, p. 458.",0,10,0.2,0.47,0.0,0.0,1,40
1929. Notopocorystes carteri,1,10,0.47,0.16,0.0,0.0,1,40
", Glaessner, p. 276.",0,10,0.2,0.46,0.0,0.0,1,40
"1929. Notopocorystes carteri,",1,10,0.47,0.16,0.0,0.0,1,40
"Glaessner, p. 153.",0,10,0.2,0.47,0.0,0.0,1,40
Jusqu'à présent cette espèce n'était connue que dans le Gault,0,10,0.29,0.16,0.0,0.0,1,40
du Sud de l'Angleterre. Les spécimens examinés proviennent de,0,10,0.29,0.14,0.0,0.0,1,40
l'Albien de la bordure Sud-Est du bassin de Paris et du Jura.,0,10,0.29,0.14,0.0,0.01,1,40
"— Albien : Pargny (Marne), Moës-",0,10,0.2,0.42,0.01,0.0,1,40
G I S E M E N T ET LOCALITÉS.,0,6,0.2,0.16,0.0,0.0,1,40
"lains (Haute-Marne). — Collection de M. J. Houdard, à Au-",0,10,0.29,0.14,0.0,0.0,1,40
xerre.,0,10,0.29,0.14,0.0,0.0,1,40
Eclievanne (Haute-Saône). — Collections géologiques de l'Uni-,0,10,0.29,0.16,0.0,0.0,1,40
versité de Dijon.,0,10,0.29,0.14,0.0,0.0,1,40
"Baliset-sur-Rocliefort, près Neuchâtel (Suisse). — Collections",0,10,0.29,0.16,0.0,0.0,1,40
géologiques de l'Université de Neuchâtel.,0,10,0.29,0.14,0.0,0.0,1,40
Sainte-Croix (Vaud). — Musées d'Histoire naturelle de Ge-,0,10,0.29,0.16,0.0,0.0,1,40
"nève et de Neuchâtel, Collections géologiques de l'Université de",0,10,0.29,0.14,0.0,0.0,1,40
Strasbourg.,0,10,0.29,0.14,0.0,0.02,1,40
Notopocorystes stokesi,1,10,0.38,0.29,0.02,0.0,1,40
(Mantell).,0,10,0.2,0.56,0.0,0.02,1,40
"1822. ? Corystes sp.,",1,10,0.47,0.16,0.02,0.0,1,40
"Mantell, pl. 29, fig. 15 et 16.",0,10,0.2,0.38,0.0,0.0,1,40
"1833. 1844. ? Corystes Corystes Stokesii, sp., Mantell, p. 169, fig. 3.",1,10,0.38,0.16,0.0,0.0,0,40
"Mantell, p. 532, fig. 2.",0,10,0.2,0.41,0.0,0.0,1,40
"1849. Notopocorystes Mantelli,",1,10,0.47,0.16,0.0,0.0,1,40
"Me Coy, p. 170.",0,10,0.2,0.49,0.0,0.0,1,40
"1854. Notopocorystes Stokesii,",1,10,0.47,0.16,0.0,0.0,1,40
"Morris, p. 111.",0,10,0.2,0.48,0.0,0.0,1,40
"1854. Notopocorystes Mantelli,",1,10,0.47,0.16,0.0,0.0,1,40
"Me Coy, p. 125, fig.",0,10,0.2,0.49,0.0,0.0,1,40
".1862. Palaeocorystes Stokesii,",1,10,0.47,0.16,0.0,0.0,1,40
"Bell, p. 15, pl. 3, fig. 1-9.",0,10,0.2,0.48,0.0,0.0,1,40
1898. Notopocorystes Stokesii,1,10,0.47,0.17,0.0,0.0,1,40
", Carter, p. 24, pl. 1, fig. 8.",0,10,0.2,0.48,0.0,0.0,1,40
"1923. Notopocorystes Stokesi,",1,10,0.47,0.17,0.0,0.0,1,40
"Van Straelen, p. 117 et p. 119,",0,10,0.2,0.48,0.0,0.0,1,40
fig. 3.,0,10,0.2,0.25,0.0,0.0,1,40
"1928. Notopocorystes stokesi,",1,10,0.47,0.17,0.0,0.0,1,40
"Withers, p. 457.",0,10,0.2,0.47,0.0,0.0,1,40
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.0,1,41
41,1,6,0.2,0.74,0.0,0.02,0,41
"1929. Notopocorystes stokesi,",1,10,0.47,0.09,0.02,0.0,1,41
"Glaessner, p. 277.",0,10,0.2,0.39,0.0,0.0,1,41
"1929. Notopocorystes stokesi,",1,10,0.47,0.09,0.0,0.0,1,41
"Glaessner, p. 153.",0,10,0.2,0.4,0.0,0.01,1,41
Jusqu'à présent cette espèce n'était connue que du Mésoeréta-,0,10,0.29,0.09,0.01,0.0,1,41
cique du Sud de l'Angleterre. Les spécimens signalés ici provien-,0,10,0.29,0.06,0.0,0.0,1,41
nent de l'Albien du Boulonnais.,0,10,0.29,0.06,0.0,0.01,1,41
— Albien: Petit Blanc-Nez (Pas-de-,0,10,0.2,0.35,0.01,0.0,1,41
GISEMENT ET LOCALITÉS.,0,6,0.2,0.09,0.0,0.0,1,41
"Calais) . — Musée royal d'Histoire naturelle de Belgique, (don",0,10,0.29,0.06,0.0,0.0,1,41
Ch. Bommer).,0,10,0.29,0.06,0.0,0.0,1,41
"Moëslains (Haute-Marne), Pargny (Marne) et Valcourt. —",0,10,0.29,0.09,0.0,0.0,1,41
"Collection de M. J. Houdard, à Auxerre.",0,10,0.29,0.06,0.0,0.0,1,41
Sainte-Croix (Vaud). — Musées d'Histoire naturelle de Bâle,0,10,0.29,0.09,0.0,0.0,1,41
et de Neuchâtel.,0,10,0.29,0.06,0.0,0.0,1,41
"Baliset-sur-Rochefort, près Neuchâtel. — Collections géolo-",0,10,0.29,0.09,0.0,0.0,1,41
giques de l'Université de Neuchâtel.,0,10,0.29,0.07,0.0,0.0,1,41
Morteau (Doubs). — Musées d'Histoire naturelle de Genève,0,10,0.29,0.09,0.0,0.0,1,41
et de Neuchâtel.,0,10,0.29,0.07,0.0,0.0,1,41
"Dieuville, près Brienne (Aube). — Musée d'Histoire naturelle",0,10,0.29,0.09,0.0,0.0,1,41
de Genève.,0,10,0.29,0.07,0.0,0.02,1,41
Genre RANINELLA,1,10,0.47,0.19,0.02,0.0,1,41
A.,0,10,0.11,0.42,0.0,0.0,0,41
M I L N E - E D W A R D S .,0,6,0.11,0.44,0.0,0.02,1,41
Raninella trigeri,1,10,0.47,0.2,0.02,0.0,1,41
A . M i l n e - E d w a r d s .,1,6,0.29,0.39,0.0,0.02,1,41
"18G2. Raninella Trigeri,",1,10,0.47,0.09,0.02,0.0,1,41
"Milne-Edwards, p. 493.",0,10,0.2,0.34,0.0,0.0,1,41
"1862. Raninella elongata,",1,10,0.47,0.09,0.0,0.0,1,41
"Milne-Edwards, p. 493.",0,10,0.2,0.36,0.0,0.0,1,41
"1877. Raninella Trigeri,",1,10,0.47,0.09,0.0,0.0,1,41
"Brocchi, p. 2, pl. 29, fig. 13.",0,10,0.2,0.34,0.0,0.0,1,41
"1877. Raninella elongata,",1,10,0.47,0.09,0.0,0.0,1,41
"Brocchi, p. 4, pl. 29, fig. 4 et 5.",0,10,0.2,0.36,0.0,0.0,1,41
"1886. Palaeocorystes trigeri,",1,10,0.47,0.09,0.0,0.0,1,41
"Guillier, p. 238.",0,10,0.2,0.39,0.0,0.0,1,41
"1886. Raninella Trigeri,",1,10,0.47,0.09,0.0,0.0,1,41
"Guillier, pp. 244 et 237.",0,10,0.2,0.34,0.0,0.0,1,41
"1886. Raninella elongata,",1,10,0.47,0.09,0.0,0.0,1,41
"Guillier, pp. 244 et 237.",0,10,0.2,0.36,0.0,0.0,1,41
"1929. Ranimlla elongata,",1,10,0.47,0.09,0.0,0.0,1,41
"Glaessner, p. 369.",0,10,0.2,0.36,0.0,0.0,1,41
"1929. Raninella trigeri,",1,10,0.47,0.09,0.0,0.0,1,41
"Glaessner, p. 370.",0,10,0.2,0.33,0.0,0.01,1,41
Il convient de placer,0,10,0.29,0.09,0.01,0.0,1,41
R. elongata en synonymie avec,1,10,0.38,0.31,0.0,0.0,1,41
R. trigeri.,1,10,0.38,0.64,0.0,0.0,1,41
La première espèce n'est pas autre chose qu'une forme juvénile,0,10,0.29,0.07,0.0,0.0,1,41
de la seconde.,0,10,0.29,0.07,0.0,0.0,1,41
Jusqu'à présent R. trigeri,1,10,0.47,0.09,0.0,0.0,1,41
n'était connue que dans le Cénoma-,0,10,0.2,0.36,0.0,0.0,1,41
nien néritique du Maine. Elle se trouve également représentée,0,10,0.29,0.06,0.0,0.0,1,41
dans le Cénomanien gréseux de la Basse-Provence.,0,10,0.29,0.07,0.0,0.01,1,41
"G I S E M E N T . — Cénomanien, grès à",0,10,0.29,0.09,0.01,0.0,1,41
lchthyosarcolites.,1,10,0.38,0.48,0.0,0.01,1,41
— Cassis (Bouches-du-Rliône). — Collections géo-,0,10,0.29,0.19,0.01,0.0,1,41
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,41
"logiques de la Sorbonne, à Paris.",0,10,0.29,0.07,0.0,0.0,1,41
42,1,6,0.29,0.13,0.0,0.0,0,42
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.34,0.0,0.0,1,42
Y.,1,7,0.23,0.32,0.0,0.02,0,42
Sons le nom de Prosopon oviformis,1,10,0.47,0.16,0.02,0.0,1,42
"(Bell), de Tribolet (*) a",0,10,0.2,0.53,0.0,0.0,1,42
décrit entre autres des articles de pattes de crustacés,0,10,0.29,0.13,0.0,0.0,1,42
; il les,0,10,0.2,0.73,0.0,0.0,1,42
"attribue, sans preuves, à cette forme qui appartient à la famille des Homolodromiidae.",1,10,0.38,0.13,0.0,0.0,0,42
Ces fragments proviennent du Hauteri-,0,10,0.2,0.39,0.0,0.0,1,42
vien (Calcaire à Spatangues) de la bordure orientale du Bassin,0,10,0.29,0.13,0.0,0.0,1,42
de Paris. Des fragments rigoureusement identiques se trouvent,0,10,0.29,0.13,0.0,0.0,1,42
"dans la collection de M. J. Houdard, à Auxerre; ils furent re-",0,10,0.29,0.14,0.0,0.0,1,42
cueillis à Bettancourt,0,10,0.29,0.13,0.0,0.0,1,42
(Haute-Marne) et à Ville-sur-Saulx,0,10,0.2,0.41,0.0,0.0,1,42
(Meuse). Ce sont en réalité des pattes de,0,10,0.29,0.14,0.0,0.0,1,42
Raninidae.,1,10,0.38,0.57,0.0,0.03,1,42
Tribu des BRACHYGNATHA.,0,10,0.2,0.31,0.03,0.02,1,42
Famille des XANTHIDAE.,1,10,0.38,0.33,0.02,0.02,1,42
Genre ETYUS,1,10,0.38,0.35,0.02,0.0,1,42
M A N T E L L .,0,6,0.11,0.51,0.0,0.03,1,42
Etyus martini Mantell.,1,10,0.38,0.35,0.03,0.02,1,42
"Pour la synonymie de cette espèce depuis 1822 à 1929, voyez",0,10,0.29,0.16,0.02,0.0,1,42
"Glaessner, 1929, p. 169.",0,10,0.29,0.14,0.0,0.01,1,42
L'existence de Etyus martini,1,10,0.47,0.16,0.01,0.0,1,42
n'avait été reconnue jusqu'à pré-,0,10,0.2,0.46,0.0,0.0,1,42
sent que dans l'Albien et le Cénomanien du Sud de l'Angleterre.,0,10,0.29,0.14,0.0,0.0,1,42
Elle a été découverte en abondance en certaines localités de l'Al-,0,10,0.29,0.14,0.0,0.0,1,42
bien du Jura et du Sud-Est du bassin de Paris.,0,10,0.29,0.14,0.0,0.01,1,42
— Albien.,0,10,0.2,0.26,0.01,0.0,1,42
G I S E M E N T .,0,6,0.2,0.16,0.0,0.01,1,42
"— Moëslains et Valcourt (Haute-Marne), Pargny",0,10,0.2,0.27,0.01,0.0,1,42
LOCALITÉS.,0,6,0.2,0.16,0.0,0.0,1,42
(Marne). — Collection de M. J. Houdard. à Auxerre.,0,10,0.29,0.14,0.0,0.0,1,42
Sainte-Croix (Vaud).— Musées d'Histoire naturelle de Genève,0,10,0.29,0.16,0.0,0.0,1,42
et de Neuchâtel.,0,10,0.29,0.13,0.0,0.02,1,42
Genre CALOXANTHUS,1,10,0.38,0.24,0.02,0.0,1,42
A.,0,10,0.11,0.51,0.0,0.0,0,42
M I L N E - E D W A K D S .,0,6,0.11,0.53,0.0,0.02,1,42
Caloxanthus forinosus,1,10,0.38,0.24,0.02,0.0,1,42
A. Milne-Edwards.,0,10,0.2,0.49,0.0,0.02,1,42
"1863-61. Caloxanthus formosus,",1,10,0.47,0.16,0.02,0.0,1,42
"Milne-Edwards, p. 41, pl. 9,",0,10,0.2,0.49,0.0,0.0,1,42
fig. 1.,0,10,0.29,0.18,0.0,0.0,1,42
1886. Caloxanthus formosus,1,10,0.47,0.16,0.0,0.0,1,42
"Guillier, p. 244.",0,10,0.2,0.46,0.0,0.0,1,42
},1,6,0.2,0.45,0.0,0.0,0,42
"1929. Caloxanthus formosus,",1,10,0.47,0.16,0.0,0.0,1,42
"Glaessner, p. 100.",0,10,0.2,0.46,0.0,0.02,1,42
"( * ) TRIBOLET, M . de, 1875, p . 457, p l . 15, f i g . 10, a - d .",0,6,0.2,0.15,0.02,0.0,1,42
43,0,6,0.02,0.72,0.0,0.0,0,43
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.02,1,43
Jusqu'à présent cette espèce était particulière au Cénomanien,0,10,0.29,0.08,0.02,0.0,1,43
"du Maine, où elle est rare. Un seul spécimen, réduit au céphalo-",0,10,0.29,0.06,0.0,0.0,1,43
"thorax, a été découvert dans le Cénomanien de la Basse-Pro-",0,10,0.29,0.06,0.0,0.0,1,43
vence. Il est identique au type de l'espèce.,0,10,0.29,0.06,0.0,0.0,1,43
A. Milne-Edwards a rapproché de cette forme des pinces plus,0,10,0.29,0.09,0.0,0.0,1,43
"ou moins complètes, recueillies dans les mêmes gisements du",0,10,0.29,0.06,0.0,0.0,1,43
Maine que les céphalothorax. Les pièces n'ont jamais été trouvées,0,10,0.29,0.06,0.0,0.0,1,43
en connexion. Un propodite identique à ceux du Maine a été,0,10,0.29,0.06,0.0,0.0,1,43
"rencontré en Basse-Provence, dans les mêmes couches que le",0,10,0.29,0.06,0.0,0.0,1,43
céphalothorax.,0,10,0.29,0.06,0.0,0.0,1,43
Il n'est pas possible d'affirmer que ces fragments se rappor-,0,10,0.29,0.09,0.0,0.0,1,43
tent à la même espèce.,0,10,0.29,0.07,0.0,0.01,1,43
— Cénomanien.,0,10,0.29,0.19,0.01,0.0,1,43
G I S E M E N T .,0,6,0.2,0.09,0.0,0.01,1,43
— Cassis (Bouclies-du-Rhône). — Collections géo-,0,10,0.29,0.19,0.01,0.0,1,43
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,43
"logiques de la Sorbonne, à Paris.",0,10,0.29,0.06,0.0,0.02,1,43
Genre XANTHOPSIS,1,10,0.38,0.24,0.02,0.0,1,43
ME COY.,0,10,0.2,0.49,0.0,0.02,1,43
Xanthopsis sp.,1,10,0.38,0.32,0.02,0.02,1,43
L'existence de ce genre dans le Crétacique n'a pas encore été,0,10,0.29,0.09,0.02,0.0,1,43
reconnue en Europe. Un moule interne de céphalothorax doit,0,10,0.29,0.07,0.0,0.0,1,43
sans hésitation être rapporté à ce genre. Les caractères distinc-,0,10,0.29,0.07,0.0,0.0,1,43
tifs sont trop peu apparents pour permettre d'établir une,0,10,0.29,0.07,0.0,0.0,1,43
"diagnose. Celle-ci, sans doute, ferait ressortir que l'on se trouve",0,10,0.29,0.07,0.0,0.0,1,43
en présence d'une espèce nouvelle.,0,10,0.29,0.06,0.0,0.01,1,43
"G I S E M E N T . — Turonien, « Craie à silex pâles ».",0,10,0.29,0.09,0.01,0.01,1,43
— Localité non déterminée de la Puisaye (France).,0,10,0.29,0.19,0.01,0.0,1,43
LOCALITÉ.,0,6,0.2,0.09,0.0,0.0,1,43
"— Musée royal d'Histoire naturelle de Belgique, n° I. G. 11.026.",0,10,0.29,0.07,0.0,0.02,1,43
Famille des LITHOPHYLAC1DAE,1,10,0.47,0.16,0.02,0.0,1,43
nov. fam.,0,10,0.2,0.55,0.0,0.02,1,43
Genre L1THOPEYLAX,1,10,0.47,0.1,0.02,0.0,1,43
A. M I L N E - E D W A R D S &,0,10,0.2,0.37,0.0,0.0,1,43
BROCCHI.,0,6,0.11,0.62,0.0,0.02,1,43
Lithopbylax trigeri,1,10,0.47,0.12,0.02,0.0,1,43
A. Milne-Edwards & Brocchi.,0,10,0.2,0.34,0.0,0.0,1,43
"(Pl. IV, fig. 9.)",0,10,0.2,0.32,0.0,0.02,1,43
"1879. Lithophylax Trigeri,",1,10,0.47,0.09,0.02,0.0,1,43
"Milne-Edwards & Brocchi, p. 117.",0,10,0.2,0.36,0.0,0.0,1,43
1886. Petrocarcinus Trigeri,1,10,0.47,0.09,0.0,0.0,1,43
"} Guillier, pp. 238 et 244.",1,10,0.38,0.37,0.0,0.0,1,43
1886. Palaeoplax Trigeri,1,10,0.47,0.09,0.0,0.0,1,43
"Guillier, p. 238.",0,10,0.2,0.35,0.0,0.0,1,43
},1,6,0.2,0.34,0.0,0.0,0,43
"1886. Lithophylax Trigeri,",1,10,0.47,0.09,0.0,0.0,1,43
"Guillier, pp. 238 et 244.",0,10,0.2,0.36,0.0,0.0,1,43
"1929. Lithophylax trigeri,",1,10,0.47,0.09,0.0,0.0,1,43
"Glaessner, p. 236.",0,10,0.2,0.36,0.0,0.0,1,43
44 Y.,1,7,0.41,0.15,0.0,0.0,1,44
VAN STRAELEN. — CRUSTACÉS,1,7,0.32,0.35,0.0,0.02,1,44
"Cette forme, très caractéristique et assez commune clans cer-",0,10,0.29,0.17,0.02,0.0,1,44
"tains niveaux du Cénomanien du Maine, a été définie avec grande",0,10,0.29,0.15,0.0,0.0,1,44
"précision par A. Milne-Edwards et P. Brocchi, mais n'a jamais",0,10,0.29,0.15,0.0,0.0,1,44
été figurée. A. Milne-Edwards a employé pour ce crustacé deux,0,10,0.29,0.15,0.0,0.0,1,44
"autres dénominations génériques,",0,10,0.29,0.15,0.0,0.0,1,44
Petrocarcinus et Palaeoplax.,1,10,0.38,0.5,0.0,0.0,1,44
Elles se lisent sur des étiquettes manuscrites et furent citées par,0,10,0.29,0.15,0.0,0.0,1,44
A. Guillier. Petrocarcinus,1,10,0.47,0.15,0.0,0.0,1,44
est rigoureusement synonyme de,0,10,0.2,0.46,0.0,0.0,1,44
Lithophylax. Quant à,1,10,0.47,0.15,0.0,0.0,1,44
"Palaeoplax, ce nom a été constitué pour",1,10,0.38,0.38,0.0,0.0,1,44
désigner une espèce subfossile de,0,10,0.29,0.15,0.0,0.0,1,44
"Goneplacidae, appelée",1,10,0.38,0.49,0.0,0.0,1,44
Goneplax,1,10,0.38,0.73,0.0,0.0,1,44
"incisa Desmarest, provenant sans doute des terrasses marines en",1,10,0.47,0.15,0.0,0.0,1,44
bordure de l'Océan Indien.,0,10,0.29,0.15,0.0,0.0,1,44
"Lithophylax trigeri n'a jamais été représentée, c'est sans doute",1,10,0.47,0.17,0.0,0.0,1,44
le motif pour lequel on a mis en doute son attribution à la tribu,0,10,0.29,0.15,0.0,0.0,1,44
"des Goneplacidea, telle que la comprenait H. Milne-Edwards.",1,10,0.47,0.15,0.0,0.0,1,44
"Certes, il peut paraître étrange de trouver déjà au Cénomanien",0,10,0.29,0.15,0.0,0.0,1,44
une forme se rattachant aux phylums les plus élevés parmi les,0,10,0.29,0.15,0.0,0.0,1,44
Brachyrhyncha. Les caractères du bord frontal ne laissent aucun,0,10,0.29,0.15,0.0,0.0,1,44
doute sur la parenté avec la famille des,0,10,0.29,0.15,0.0,0.0,1,44
Goneplacidae. Litho-,1,10,0.38,0.59,0.0,0.0,1,44
phylax a cependant une série de caractères qui lui sont propres,1,10,0.47,0.15,0.0,0.0,1,44
et nous amènent à le considérer comme le type d'une famille,0,10,0.29,0.15,0.0,0.0,1,44
"nouvelle: les Lithophylacidae,",1,10,0.47,0.15,0.0,0.0,1,44
caractérisés par le contour sub-,0,10,0.2,0.48,0.0,0.0,1,44
"hexagonal du céphalothorax, le bord frontal rectiligne et les sil-",0,10,0.29,0.15,0.0,0.0,1,44
lons des régions branchiales.,0,10,0.29,0.15,0.0,0.0,1,44
Lithophylax n'a jusqu'à présent été rencontré que dans le,1,10,0.47,0.17,0.0,0.0,1,44
Maine.,0,10,0.29,0.15,0.0,0.01,1,44
"— Cénomanien, Sables à",0,10,0.2,0.3,0.01,0.0,1,44
Rhynchonella com-,1,10,0.38,0.6,0.0,0.0,1,44
GISEMENT.,0,7,0.23,0.17,0.0,0.0,1,44
pressa (*).,1,10,0.47,0.15,0.0,0.01,1,44
"— Le Mans, carrière de la Butte. — Musée d'His-",0,10,0.2,0.27,0.01,0.0,1,44
LOCALITÉ.,0,7,0.23,0.17,0.0,0.0,1,44
toire naturelle de Genève et Musée municipal du Mans.,0,10,0.29,0.15,0.0,0.02,1,44
(*) A. Guillier cite Lithophylax,1,8,0.43,0.17,0.02,0.0,1,44
trigeri dans la Craie à,1,8,0.34,0.5,0.0,0.0,1,44
Ghlamys,1,8,0.34,0.76,0.0,0.0,1,44
asper et Turrilites,1,8,0.43,0.15,0.0,0.0,1,44
tuberculatus.,1,8,0.34,0.36,0.0,0.0,1,44
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.0,1,45
45,1,6,0.2,0.74,0.0,0.04,0,45
BIBLIOGRAPHIE,0,8,0.16,0.31,0.04,0.01,1,45
"BELL, Th. — Notes on the C'rustacea of the chalk formation",1,8,0.43,0.06,0.01,0.0,1,45
in FR. Di-,0,8,0.16,0.65,0.0,0.0,1,45
"xon, The Geology and Fossils of the Tertiary",1,8,0.43,0.12,0.0,0.0,1,45
and Gretaceous,1,8,0.34,0.6,0.0,0.0,1,45
Formations of Sussex.,1,8,0.43,0.12,0.0,0.0,1,45
"London, 1850.",0,8,0.16,0.33,0.0,0.0,1,45
— A monograph of the fossil Malacostracous,1,8,0.43,0.08,0.0,0.0,1,45
Grustacea of Great,1,8,0.34,0.56,0.0,0.0,1,45
Britain. II. Grustacea of the Gault and Greensand.,1,8,0.43,0.12,0.0,0.0,1,45
— Palaeon-,0,8,0.16,0.62,0.0,0.0,1,45
"togr. Soc. (1862), 1863.",0,8,0.25,0.12,0.0,0.0,1,45
"BORISSIAK, A . — Sur les restes de Crustacés dans les dépôts du Cré-",1,8,0.43,0.06,0.0,0.0,1,45
tacé inférieur de la Crimée..,1,8,0.43,0.12,0.0,0.0,1,45
— Bull. Com. Géol. St. Péters-,0,8,0.16,0.4,0.0,0.0,1,45
"bourg, v. 23, 1904, pp. 403-423, pl. 13.",0,8,0.25,0.12,0.0,0.0,1,45
M. &,0,8,0.25,0.12,0.0,0.0,1,45
"Les Fossiles. Paris,",1,8,0.34,0.35,0.0,0.0,1,45
"BOULE, PIVETEAU, J . —",0,6,0.2,0.06,0.0,0.0,1,45
1935.,0,6,0.11,0.55,0.0,0.0,1,45
Description de quelques Crustacés fossiles,1,8,0.34,0.21,0.0,0.0,1,45
apparte-,1,8,0.34,0.68,0.0,0.0,1,45
"BROCCHI, P . —",0,6,0.2,0.06,0.0,0.0,1,45
nant à la Tribu des Raniniens.,1,8,0.43,0.12,0.0,0.0,1,45
"— Ann. Sci. Géol., t. 8, 1877,",0,8,0.16,0.45,0.0,0.0,1,45
"8 pp., 1 pl.",0,8,0.25,0.12,0.0,0.0,1,45
"CARTER, J. — A contributiori",1,8,0.43,0.06,0.0,0.0,1,45
to the Palaeontology,1,8,0.34,0.37,0.0,0.0,1,45
of the Decapod,1,8,0.34,0.59,0.0,0.0,1,45
Grustacea of England.,1,8,0.43,0.12,0.0,0.0,1,45
"— Quart. Journ. Geol. Soc., v. 54, 1898,",0,8,0.16,0.35,0.0,0.0,1,45
"pp.- 15-44, pl. 1 & 2.",0,8,0.25,0.12,0.0,0.0,1,45
Remarks on the Geology of the South,1,8,0.34,0.29,0.0,0.0,1,45
Coast,1,8,0.34,0.7,0.0,0.0,1,45
",DE LA BECHE, H . T . —",0,6,0.2,0.07,0.0,0.0,1,45
"of England, from Bridport",1,8,0.43,0.12,0.0,0.0,1,45
"Harbour, Dorset, to",1,8,0.34,0.41,0.0,0.0,1,45
Babbacombe,1,8,0.34,0.64,0.0,0.0,1,45
"Bay, Devon. — Transact. Geol. Soc. London, ser. 2, vol. 1,",1,8,0.43,0.12,0.0,0.0,1,45
"1819, pp. 40-47, pl. 3.",0,8,0.25,0.11,0.0,0.0,1,45
Mémoire pour servir à,1,8,0.34,0.39,0.0,0.0,1,45
l'Histoire,1,8,0.34,0.67,0.0,0.0,1,45
"EUDES-DESLONGCHAMPS,",0,6,0.2,0.06,0.0,0.0,1,45
J . A . —,0,6,0.11,0.3,0.0,0.0,1,45
naturelle des Crustacés fossiles.,1,8,0.43,0.11,0.0,0.0,1,45
— Mém. Soc. Lin. de Norman-,0,8,0.16,0.42,0.0,0.0,1,45
"die, t. 5 (1829-1833), 1835, pp. 37-46, pl. 1.",0,8,0.25,0.12,0.0,0.0,1,45
Studien im Gebiete der bôhmischen,1,8,0.43,0.2,0.0,0.0,1,45
Kreideformation.,1,8,0.34,0.6,0.0,0.0,1,45
"FRITSCH, A . —",0,6,0.2,0.06,0.0,0.0,1,45
V. Priesener Schichten.,1,8,0.43,0.11,0.0,0.0,1,45
— Archiv Naturw. Landesdurchf. v.,0,8,0.16,0.37,0.0,0.0,1,45
"Bohmen, v. 9, n° 1, 1893.",0,8,0.25,0.11,0.0,0.0,1,45
"FRITSCH, A. & KAFKA, Jos.—",0,8,0.25,0.05,0.0,0.0,1,45
Die Crustaceen der Bôhmischen,1,8,0.34,0.34,0.0,0.0,1,45
Kreide-,1,8,0.34,0.68,0.0,0.0,1,45
"formatiori. Prag, 1887.",1,8,0.43,0.11,0.0,0.0,1,45
Das Quadersandsteingebirge,1,8,0.34,0.24,0.0,0.0,1,45
oder Kreidegebirge,1,8,0.34,0.55,0.0,0.0,1,45
"GEINITZ, H . B . —",0,6,0.2,0.05,0.0,0.0,1,45
"in Deutschland. Freiberg, 1849.",1,8,0.43,0.11,0.0,0.0,1,45
— Charakteristik der Schichten,1,8,0.43,0.07,0.0,0.0,1,45
und Petrefakten des,1,8,0.34,0.43,0.0,0.0,1,45
Sâchsich-,1,8,0.34,0.67,0.0,0.0,1,45
bôhmischen Ereidegebirges.,1,8,0.43,0.11,0.0,0.0,1,45
"Dresden, 1839-43.",0,8,0.16,0.4,0.0,0.0,1,45
"— Neues Jahrbuch fur Mineralogie, 1863, pp. 756-758, pl. 8.",0,8,0.25,0.07,0.0,0.0,1,45
— Das EIbthalgebirge.,1,8,0.43,0.07,0.0,0.0,1,45
"— Palaeontogr., Bd. 20, 1871-1875.",1,8,0.34,0.32,0.0,0.0,1,45
F. — Grustacea decapoda.,1,8,0.43,0.2,0.0,0.0,1,45
— Fossilium Catalogus.,0,8,0.16,0.46,0.0,0.0,1,45
"GLAESSNER, M .",0,6,0.2,0.05,0.0,0.0,1,45
I .,0,6,0.02,0.72,0.0,0.0,0,45
"Animalia, Pars 41, Berlin, 1929.",0,8,0.25,0.11,0.0,0.0,1,45
— Dekûpodenstudien.,1,8,0.43,0.07,0.0,0.0,1,45
—• Neues Jahrb. fur,0,8,0.16,0.31,0.0,0.0,1,45
"Mineralogie, Bei-",0,8,0.16,0.57,0.0,0.0,1,45
"lagebd. 63, Abt. B, 1929, pp. 137-176, pl. 6-10.",0,8,0.25,0.11,0.0,0.0,1,45
Géologie du Département,1,8,0.34,0.24,0.0,0.0,1,45
de la Sarthe. Paris et,1,8,0.34,0.51,0.0,0.0,1,45
"GUILLIER, A . —",0,6,0.2,0.05,0.0,0.0,1,45
"Le Mans, 1886.",0,8,0.25,0.11,0.0,0.0,1,45
Geognostische Beschreibung,1,8,0.34,0.27,0.0,0.0,1,45
des Kônigreichs,1,8,0.34,0.58,0.0,0.0,1,45
"GUMBEL, C. W . —",0,6,0.2,0.05,0.0,0.0,1,45
Bayern. 2 Abt. Geognostische Beschreibung,1,8,0.43,0.11,0.0,0.0,1,45
des Ost-Bayerischen,1,8,0.34,0.55,0.0,0.0,1,45
"Grenzg ebirg es. Gotha, 1868.",1,8,0.43,0.11,0.0,0.0,1,45
Note sur les pattes thoraciques d'un Crustacé,1,8,0.43,0.19,0.0,0.0,1,45
(Hoplo-,1,8,0.34,0.68,0.0,0.0,1,45
"HALLEZ, P . —",0,6,0.2,0.05,0.0,0.0,1,45
paria ?) trouvées dans les carrières de craie de Lezennes.,1,8,0.43,0.11,0.0,0.0,1,45
—,1,8,0.25,0.73,0.0,0.0,0,45
"Mém. Soc. Sci. Agric. Arts, Lille, sér. 3, v. 7,(1869) 1870, pp.",0,8,0.25,0.11,0.0,0.0,1,45
"297-300, f. 1-4.",0,8,0.25,0.11,0.0,0.0,1,45
46 Y.,1,6,0.39,0.15,0.0,0.0,1,46
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.36,0.0,0.02,1,46
The Cretaceous Rocks of Britain.,1,8,0.34,0.39,0.02,0.0,1,46
I. The,1,8,0.34,0.77,0.0,0.0,1,46
"JUKES-BROWNE, A - J .",0,6,0.2,0.15,0.0,0.0,1,46
—,0,6,0.02,0.38,0.0,0.0,0,46
Gault and Upper Greensand of En gland.,1,8,0.34,0.21,0.0,0.0,1,46
— Mera. Geol. Survey,0,8,0.16,0.6,0.0,0.0,1,46
"Un. Kingdom, 1900.",0,8,0.25,0.2,0.0,0.0,1,46
Contribution à Vétude des faunes palêo crétacé es du,1,8,0.34,0.29,0.0,0.0,1,46
"KILIAN, W . —",0,6,0.2,0.15,0.0,0.0,1,46
Sud-Est de la France. 1. La Faune de l'Aptien,1,8,0.34,0.21,0.0,0.0,1,46
inférieur des,1,8,0.34,0.7,0.0,0.0,1,46
environs de Montélimar,1,8,0.34,0.21,0.0,0.0,1,46
"(Drôme). — Mém. Carte Géol. France,",1,8,0.34,0.45,0.0,0.0,1,46
1915.,0,8,0.16,0.21,0.0,0.0,1,46
Die Fauna der Kreideformation,1,8,0.34,0.31,0.0,0.0,1,46
in Oberschlesien.,1,8,0.34,0.66,0.0,0.0,1,46
"LEONHARD, R . —",0,6,0.2,0.15,0.0,0.0,1,46
"— Palaeontogr., Bd. 44, 1897, pp. 11-70, pl. 3-6.",0,8,0.25,0.2,0.0,0.0,1,46
Die fossilen Dehapoden,1,8,0.34,0.49,0.0,0.0,1,46
der Làn-,1,8,0.34,0.75,0.0,0.0,1,46
"LOERENTHEY, E . & BEURLEN, K . —",0,6,0.2,0.15,0.0,0.0,1,46
den der Ungarischen,1,8,0.34,0.21,0.0,0.0,1,46
"Iirone. — Geologica Hungarica, Sériés",1,8,0.34,0.43,0.0,0.0,1,46
"palaeont., fasc. 3, 1929, pp. 1-480, 16 pl., 49 textfig.",0,8,0.16,0.21,0.0,0.0,1,46
"Me COY, Fr. — On the classification",1,8,0.43,0.15,0.0,0.0,1,46
of some British fossil,1,8,0.34,0.53,0.0,0.0,1,46
Crusta-,1,8,0.34,0.77,0.0,0.0,1,46
cea with notices on new Forms in the University,1,8,0.43,0.2,0.0,0.0,1,46
collection at,1,8,0.34,0.71,0.0,0.0,1,46
"Cambridge. — Ann. Mag. Nat. Hist., ser. 2, v. 4, 1849, pp. 161-",1,8,0.34,0.21,0.0,0.0,1,46
179 & pp. 330-335.,0,8,0.16,0.21,0.0,0.0,1,46
— On some new Cretaceous Crustacea.,1,8,0.43,0.16,0.0,0.0,1,46
"— Ann. Mag. Nat. Hist.,",0,8,0.16,0.57,0.0,0.0,1,46
"ser. 2, v. 14, 1854, pp. 116-122, pl. 4.",0,8,0.16,0.21,0.0,0.0,1,46
"MANTELL, G. A. — The Fossils of the South Downs, or",1,8,0.43,0.15,0.0,0.0,1,46
Illustrations,1,8,0.34,0.73,0.0,0.0,1,46
of the geology of Sussex.,1,8,0.34,0.21,0.0,0.0,1,46
"London, 1822.",0,8,0.16,0.44,0.0,0.0,1,46
— The Geology of the South East of England.,1,8,0.43,0.17,0.0,0.0,1,46
"London, 1833.",0,8,0.16,0.66,0.0,0.0,1,46
— The Medals of Création,1,8,0.43,0.17,0.0,0.0,1,46
", v. 2, London, 1844.",0,8,0.16,0.43,0.0,0.0,1,46
A. — Monographie,1,8,0.34,0.31,0.0,0.0,1,46
des Décapodes Macroures,1,8,0.34,0.53,0.0,0.0,1,46
fos-,1,8,0.34,0.8,0.0,0.0,1,46
"MILNE-EDWARDS,",0,6,0.2,0.15,0.0,0.0,1,46
siles de la famille des Thalassiniens.,1,8,0.34,0.21,0.0,0.0,1,46
"— Ann. Sci. Nat. Zool.,",0,8,0.16,0.58,0.0,0.0,1,46
"sér. 4, v. 14, 1860, pp. 294-357, pl. 11-16.",0,8,0.16,0.21,0.0,0.0,1,46
— Sur Vexistence de Crustaicés de la famille,1,8,0.43,0.16,0.0,0.0,1,46
des Raniniens pen-,1,8,0.34,0.64,0.0,0.0,1,46
dant la période Crétacée.,1,8,0.34,0.21,0.0,0.0,1,46
"— Comptes rendus Acad. Sci. Paris,",0,8,0.16,0.45,0.0,0.0,1,46
"v. 55, 1862, pp. 492-94.",0,8,0.25,0.2,0.0,0.0,1,46
— Monographie des Crustacés,1,8,0.43,0.17,0.0,0.0,1,46
fossiles de la famille,1,8,0.34,0.5,0.0,0.0,1,46
des Cancé-,1,8,0.34,0.72,0.0,0.0,1,46
"riens. — Ann. Sci. Nat. Zool., ser. 5, v. 1, 1864, sér. 4, v. 20,",1,8,0.43,0.2,0.0,0.0,1,46
1863.,0,8,0.25,0.2,0.0,0.0,1,46
— Note sur deux nouveaux,1,8,0.43,0.16,0.0,0.0,1,46
Crustacés fossiles du terrain,1,8,0.34,0.47,0.0,0.0,1,46
néoco-,1,8,0.34,0.77,0.0,0.0,1,46
mien du Département,1,8,0.43,0.2,0.0,0.0,1,46
de l'Yonne. —- Bull. Soc. Sci. Hist. et,1,8,0.34,0.44,0.0,0.0,1,46
"Nat. de l'Yonne, v. 19, 1865, pp. 341-347, pl. 5.",0,8,0.25,0.2,0.0,0.0,1,46
A. & P. —,0,8,0.16,0.31,0.0,0.0,1,46
Note sur quelques,1,8,0.34,0.53,0.0,0.0,1,46
Crustacés,1,8,0.34,0.75,0.0,0.0,1,46
"MILNE-EDWARDS,",0,6,0.2,0.15,0.0,0.0,1,46
"BROCCHI,",0,6,0.11,0.37,0.0,0.0,1,46
"fossiles appartenant,",1,8,0.43,0.2,0.0,0.0,1,46
au groupe des Macro phthalmiens.,1,8,0.34,0.41,0.0,0.0,1,46
— Bull.,0,8,0.16,0.75,0.0,0.0,1,46
"Soc. Philomath. Paris, sér. 7, v. 3, 1879, pp. 113-117.",0,8,0.16,0.21,0.0,0.0,1,46
"MORRIS, J. — A Catalogue of British",1,8,0.43,0.15,0.0,0.0,1,46
"Fossils , 2d éd., London, 1854.",1,8,0.34,0.52,0.0,0.0,1,46
Notice sur un Crustacé des sables verts de Grand-,1,8,0.34,0.31,0.0,0.0,1,46
"PELSENEER, P . —",0,6,0.2,0.15,0.0,0.0,1,46
"pré. — Bull. Mus. roy. Hist. Nat. Belg., v. 4, 1886, pp. 47-59.",1,8,0.43,0.2,0.0,0.0,1,46
"PICTET, F. J . & RENEVIER, Eug. —",0,7,0.23,0.15,0.0,0.0,1,46
Description des fossiles,1,7,0.32,0.5,0.0,0.0,1,46
du ter-,1,7,0.32,0.76,0.0,0.0,1,46
rain Aptien de la Perte du Rhône et de Ste-Groîx.,1,8,0.43,0.2,0.0,0.0,1,46
— Maté-,0,8,0.16,0.74,0.0,0.0,1,46
"riaux pour la Paléontologie Suisse, sér. 1, v. 1, Genève, 1854-",0,8,0.25,0.2,0.0,0.0,1,46
1858.,0,8,0.25,0.2,0.0,0.0,1,46
"QUENSTEDT, W . — Die Geschichte der Ghitonen und ihre",1,8,0.43,0.15,0.0,0.0,1,46
allgemeine,1,8,0.34,0.74,0.0,0.0,1,46
"Bedeutung. — Palaeont. Zeitschr., Bd. 14, 1932, f. 91.",1,8,0.43,0.2,0.0,0.0,1,46
Die Versteinerungen,1,8,0.34,0.31,0.0,0.0,1,46
der Bohmischen Kreideforma-,1,8,0.34,0.53,0.0,0.0,1,46
"REUSS, A . E . -—",0,6,0.2,0.14,0.0,0.0,1,46
"tion. Stuttgart, 1845-46.",1,8,0.43,0.2,0.0,0.0,1,46
"— Ueber Klytia Leachi,",1,8,0.43,0.16,0.0,0.0,1,46
einen langschwànzigen,1,8,0.34,0.43,0.0,0.0,1,46
Dehapoden der,1,8,0.34,0.68,0.0,0.0,1,46
Kreideformation. — Denkschr. Math.-Naturw. Classe K. Akad.,1,8,0.43,0.2,0.0,0.0,1,46
"d. Wissensch. Wien, Bd. 6, 1853, pp. 1-10, pl. 1-5.",0,8,0.16,0.21,0.0,0.0,1,46
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.0,1,47
47,1,6,0.2,0.74,0.0,0.02,0,47
A. Zur Kermtnis,1,8,0.43,0.12,0.02,0.0,1,47
"fossiler Krabben, — Denkschr. Math.-",1,8,0.34,0.37,0.0,0.0,1,47
"REUSS, E . —",0,6,0.2,0.06,0.0,0.0,1,47
"Naturw. Classe K. Akad. d. Wissensch. Wien, Bd. 17, 1859,",0,8,0.25,0.12,0.0,0.0,1,47
"pp. 1-90, pl. 1-24-",0,8,0.25,0.12,0.0,0.0,1,47
Mémoire sur les Crustacés du,1,8,0.34,0.35,0.0,0.0,1,47
terrain,1,8,0.34,0.7,0.0,0.0,1,47
"HOBINEAU-DESVOIDY, J . B . —",0,6,0.2,0.06,0.0,0.0,1,47
néocomien de Saint-Sauveur-en-Puisaye,1,8,0.43,0.12,0.0,0.0,1,47
(Tonne). — Ann. Soc.,1,8,0.34,0.53,0.0,0.0,1,47
"Entorn. France, sér. 2, v. 7, 1849, pp. 95-141, pl. 4 et 5.",0,8,0.25,0.12,0.0,0.0,1,47
Fr. Die Versteinerungen,1,8,0.43,0.14,0.0,0.0,1,47
des Norddeutschen,1,8,0.34,0.48,0.0,0.0,1,47
Kreide-,1,8,0.34,0.69,0.0,0.0,1,47
"ROEMER, A . —",0,6,0.2,0.06,0.0,0.0,1,47
"gebirges. Hannover, 1841.",1,8,0.43,0.12,0.0,0.0,1,47
Cl. — Die Macruren Deccipoden der Senon- und,1,8,0.43,0.16,0.0,0.0,1,47
Cenoman-,1,8,0.34,0.67,0.0,0.0,1,47
"SCHLÙTER,",0,6,0.2,0.06,0.0,0.0,1,47
Bildungen Westphalens.,1,8,0.43,0.12,0.0,0.0,1,47
"— Zeitschr. deutschen Geol. Ges., Bd.",0,8,0.16,0.37,0.0,0.0,1,47
"14, 1862, pp. 702-749, pl. 11-14.",0,8,0.25,0.12,0.0,0.0,1,47
— Neue und weniger gekannte,1,8,0.43,0.08,0.0,0.0,1,47
Kreide- und Tertiâr,1,8,0.34,0.42,0.0,0.0,1,47
Krebse des,1,8,0.34,0.64,0.0,0.0,1,47
nôrdlichen Deutschlands.,1,8,0.43,0.12,0.0,0.0,1,47
"— Zeitschr. deutschen Geol. Ges.,",0,8,0.16,0.39,0.0,0.0,1,47
"Bd. 31, 1879, pp. 586-615, 6 pl.",0,8,0.25,0.12,0.0,0.0,1,47
Cl.,0,8,0.16,0.16,0.0,0.0,0,47
K. — Neue Fische und Krebse ans,1,8,0.34,0.39,0.0,0.0,1,47
"SCHLÙTER, & VON DER MARCK,",0,6,0.2,0.06,0.0,0.0,1,47
der Kreide von Westphalen.,1,8,0.43,0.12,0.0,0.0,1,47
"— Palaeontogr., v. 15, 1868,",0,8,0.16,0.44,0.0,0.0,1,47
"pp. 269-305, pl. 51-54.",0,8,0.25,0.12,0.0,0.0,1,47
E. — Ueber einige Krebsreste aus schiveizerischem,1,8,0.43,0.14,0.0,0.0,1,47
und nord-,1,8,0.34,0.65,0.0,0.0,1,47
"STOLLEY,",0,6,0.2,0.06,0.0,0.0,1,47
deutschem Neokom.,1,8,0.43,0.12,0.0,0.0,1,47
"— Eclogae Geolog. Helvet., v. 18, 1924,",0,8,0.16,0.33,0.0,0.0,1,47
"pp. 411-429, pl. 13.",0,8,0.25,0.12,0.0,0.0,1,47
Description de Crustacés Décapodes,1,8,0.34,0.27,0.0,0.0,1,47
macroures,1,8,0.34,0.66,0.0,0.0,1,47
"STRAELEN, Y . VAN. —",0,6,0.2,0.06,0.0,0.0,1,47
nouveaux des terrains,1,8,0.43,0.12,0.0,0.0,1,47
secondaires. —• Ann. Soc. Roy. Zool.,1,8,0.34,0.35,0.0,0.0,1,47
"Belgique, v. 53, (1922) 1923, pp. 84-93, 10 fig.",0,8,0.25,0.12,0.0,0.0,1,47
— Note sur la position,1,8,0.43,0.08,0.0,0.0,1,47
systématique de quelques Crustacés,1,8,0.34,0.33,0.0,0.0,1,47
Déca-,1,8,0.34,0.7,0.0,0.0,1,47
podes de Vépoque Crétacée.,1,8,0.43,0.12,0.0,0.0,1,47
"— Acad. roy. Belgique, Bull. Classe",0,8,0.16,0.38,0.0,0.0,1,47
"Sci., 1923, pp. 116-125, 6 fig.",0,8,0.25,0.12,0.0,0.0,1,47
— L'ancienneté et la régression du genre Homarus.,1,8,0.43,0.07,0.0,0.0,1,47
— Mém. Mus.,0,8,0.16,0.61,0.0,0.0,1,47
"roy. Hist. Nat. Belg., sér. 2, fasc. 3, 1936, pp. 469-479.",0,8,0.25,0.12,0.0,0.0,1,47
Description des Crustacés du terrain,1,8,0.34,0.25,0.0,0.0,1,47
néocomien,1,8,0.34,0.66,0.0,0.0,1,47
"TRIBOLET, M . DE. —",0,6,0.2,0.06,0.0,0.0,1,47
du Jura neuchâtelois,1,8,0.43,0.12,0.0,0.0,1,47
"et vaudois — Bull. Soc. Géol. France,",1,8,0.34,0.34,0.0,0.0,1,47
"sér. 3, v. 2, 1874 (1), pp. 350-365, 1 pl.",0,8,0.25,0.12,0.0,0.0,1,47
— Supplément à la description,1,8,0.43,0.07,0.0,0.0,1,47
des Crustacés du terrain,1,8,0.34,0.42,0.0,0.0,1,47
néoco-,1,8,0.34,0.69,0.0,0.0,1,47
mien et urgonien,1,8,0.43,0.11,0.0,0.0,1,47
de la Haute-Marne.,1,8,0.34,0.32,0.0,0.0,1,47
— Bull. Soc. Géol.,0,8,0.16,0.55,0.0,0.0,1,47
"France, sér. 3, v. 3, 1874 (2), pp. 72-81, 1 pl.",0,8,0.25,0.12,0.0,0.0,1,47
— Description des Crustacés,1,8,0.43,0.07,0.0,0.0,1,47
décapodes des étages néocomien,1,8,0.34,0.39,0.0,0.0,1,47
et,1,8,0.25,0.73,0.0,0.0,0,47
"urgonien de la liante-Marne,",1,8,0.43,0.11,0.0,0.0,1,47
"— Bull. Soc. Géol. France, sér. 3,",0,8,0.16,0.41,0.0,0.0,1,47
"v. 3, 1875, pp. 451-459, 1 pl.",0,8,0.25,0.11,0.0,0.0,1,47
— Description de quelques espèces de Crustacés décapodes du Va-,1,8,0.43,0.07,0.0,0.0,1,47
"langinien, Néocomien et Urgonien de la Haute-Marne,",1,8,0.43,0.11,0.0,0.0,1,47
du Jura,1,8,0.34,0.67,0.0,0.0,1,47
"et des Alpes. — Bull. Soc. Sci. Nat. Neuchâtel, v. 10, (1874)",1,8,0.43,0.12,0.0,0.0,1,47
"1876, pp. 294-303, 1 pl.",0,8,0.25,0.11,0.0,0.0,1,47
"WANDERER, K. — Ein Vorkommen",1,8,0.43,0.06,0.0,0.0,1,47
von Enoploclytia Leachi,1,8,0.34,0.41,0.0,0.0,1,47
Mantell,1,8,0.34,0.68,0.0,0.0,1,47
sp. im Cenoman von Sachsen.,1,8,0.43,0.11,0.0,0.0,1,47
— Sitzungsber. Abh. Naturw.,0,8,0.16,0.44,0.0,0.0,1,47
"Ges. Isis, 1908, pp. 23-24, 2 fig.",0,8,0.25,0.11,0.0,0.0,1,47
"WITHERS, Th. H. — New Cretaceous Crabs from England",1,8,0.43,0.05,0.0,0.0,1,47
and Syria.,1,8,0.34,0.64,0.0,0.0,1,47
"— Ann. Mag. Nat. Hist., ser. 10, v. 2, 1928, pp, 457-461, pl, 13.",0,8,0.25,0.11,0.0,0.0,1,47
A monograph of the Fossil Macrurous,1,8,0.43,0.19,0.0,0.0,1,47
Crustacea of,1,8,0.34,0.62,0.0,0.0,1,47
"WOODS, H . —",0,6,0.2,0.06,0.0,0.0,1,47
"England. — Palaeontogr. Soc., Part. 1, pp. 1-16, pl, 1-4, 1924;",1,8,0.43,0.11,0.0,0.0,1,47
"Part 2, pp. 17-40, pl. 5-8, 1925 ; Part 3, pp. 41-48, pl. 9-12, 1926 ;",0,8,0.25,0.11,0.0,0.0,1,47
"Part 4, pp. 49-64, pl. 13-16, 1927; Part 5, pp. 65-72, pl. 17-20,",0,8,0.25,0.11,0.0,0.0,1,47
Y.,1,7,0.23,0.33,0.0,0.0,0,48
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.35,0.0,0.0,1,48
48,1,6,0.29,0.14,0.0,0.02,0,48
"1928; Part 6, pp. 73-88, pl. 21-24, 1930; Part 7, pp. 89-122, pl. 25-",0,8,0.25,0.2,0.02,0.0,1,48
"27, 1931.",0,8,0.25,0.2,0.0,0.0,1,48
"WOODWARD, H. — Contributions",1,8,0.43,0.14,0.0,0.0,1,48
to British fossil Crustacea.,1,8,0.34,0.48,0.0,0.0,1,48
— Geol.,0,8,0.16,0.74,0.0,0.0,1,48
"Magaz., v. 5, 1868, pp. 258-261, pl. 14; pp. 353-356, pl. 17.",0,8,0.25,0.2,0.0,0.0,1,48
"— in DIXON, F., The Geology and Fossils of the Tertiary",1,8,0.43,0.16,0.0,0.0,1,48
and Cre-,1,8,0.34,0.75,0.0,0.0,1,48
taceous Formations,1,8,0.43,0.2,0.0,0.0,1,48
"of Sussex. 2d. éd., London, 1878.",1,8,0.34,0.41,0.0,0.0,1,48
— Contributions to the St/udy of Fossil Crustacea.,1,8,0.43,0.16,0.0,0.0,1,48
— Geol. Ma-,0,8,0.16,0.71,0.0,0.0,1,48
"gaz., Dec. 2, v. 8, 1881, pp. 529-534, pl. 14.",0,8,0.25,0.2,0.0,0.06,1,48
EXPLICATION DES PLANCHES,0,8,0.16,0.31,0.06,0.01,1,48
PLANCHE I .,0,6,0.11,0.43,0.01,0.01,1,48
"Fig. 1. — Eryon sp.,",1,8,0.43,0.15,0.01,0.0,1,48
vu par la face tergale. Grandeur naturelle. --,0,8,0.16,0.35,0.0,0.0,1,48
"Gisement: Néocomien. — Localité: Feradzo, près Châtel-Saint-",0,8,0.25,0.18,0.0,0.0,1,48
Denis (Suisse). — Musée d'Histoire naturelle de Genève.,0,8,0.25,0.19,0.0,0.0,1,48
Fig. 2. — Linuparus,1,8,0.43,0.15,0.0,0.0,1,48
"dentatus (A. Milne-Edwards MS.), vu par la",1,8,0.34,0.37,0.0,0.0,1,48
face tergale. Grandeur naturelle. — Gisement: Cénomanien. —,0,8,0.25,0.18,0.0,0.0,1,48
"Localité: Le Mans (Sarthe, France). — Musée municipal du",0,8,0.25,0.18,0.0,0.0,1,48
Mans.,0,8,0.25,0.19,0.0,0.0,1,48
Fig. 3. — Mecochirus,1,8,0.43,0.15,0.0,0.0,1,48
"houdardi Van Straelen, vu du côté gauche.",1,8,0.34,0.38,0.0,0.0,1,48
Grandeur naturelle. Type. — Gisement: Albien. —- Localité: Par-,0,8,0.25,0.19,0.0,0.0,1,48
"gny (Marne, France). — Collection de M. J. Houdard, à Au-",0,8,0.25,0.19,0.0,0.0,1,48
xerre.,0,8,0.25,0.19,0.0,0.0,1,48
Fig. 4. — Le même. Agrandi quatre fois.,0,8,0.25,0.15,0.0,0.0,1,48
Fig. 5. — Meyeria,1,8,0.43,0.15,0.0,0.0,1,48
"sp., vu du côté gauche. Grandeur naturelle. —-",0,8,0.16,0.35,0.0,0.0,1,48
Gisement: Berriasien. — Localité: Montbazin (Hérault). — Col-,0,8,0.25,0.19,0.0,0.0,1,48
"lection de M. H. Blondet, à Chambéry.",0,8,0.25,0.19,0.0,0.0,1,48
Fig. 6. — Eryma loryi,1,8,0.43,0.15,0.0,0.0,1,48
"Van Straelen, vu du côté droit.",0,8,0.16,0.37,0.0,0.0,1,48
Grandeur,0,8,0.16,0.75,0.0,0.0,1,48
naturelle. Type. — Gisement: Valanginien. — Localité: Mallevai,0,8,0.25,0.19,0.0,0.0,1,48
(Isère). — Collections géologiques de l'Université de Grenoble.,0,8,0.25,0.19,0.0,0.02,1,48
PLANCHE I I .,0,6,0.11,0.43,0.02,0.01,1,48
Fig. 1. — Eryma tithonia,1,8,0.43,0.15,0.01,0.0,1,48
"Van Straelen, vu du côté droit et en par-",0,8,0.16,0.42,0.0,0.0,1,48
:,0,9,0.09,0.79,0.0,0.0,0,48
tie du côté gauche. Grandeur naturelle. Type. — Gisement,0,8,0.25,0.19,0.0,0.0,1,48
Va-,0,8,0.07,0.8,0.0,0.0,0,48
langinien. — Localité: La Cisterne (Hérault). — Collections géo-,0,8,0.25,0.19,0.0,0.0,1,48
"logiques de la Sorbonne, à Paris.",0,8,0.25,0.19,0.0,0.0,1,48
Fig. 2. — Le même. Agrandi trois fois.,0,8,0.25,0.15,0.0,0.0,1,48
Fig. 3. — Eryma tuberculata,1,8,0.43,0.15,0.0,0.0,1,48
"Van Straelen, vu du côté gauche.",0,8,0.16,0.47,0.0,0.0,1,48
Grandeur naturelle. Type. — Gisement: Berriasien supérieur. —,0,8,0.25,0.19,0.0,0.0,1,48
"Localité: Leysse, près Chambéry (Savoie). — Collection de M. H.",0,8,0.25,0.19,0.0,0.0,1,48
"Blondet, à Chambéry.",0,8,0.25,0.19,0.0,0.02,1,48
PLANCHE I I I .,0,6,0.11,0.43,0.02,0.01,1,48
Fig. 1. — Enoploclytia,1,8,0.43,0.15,0.01,0.0,1,48
"glaessneri Van Straelen, vu du côté gauche",1,8,0.34,0.4,0.0,0.0,1,48
Grandeur naturelle. Type. — Gisement: Néocomien inférieur. —,0,8,0.25,0.19,0.0,0.0,1,48
Localité : Escragnolles (Basse-Provence). — Musée d'Histoire,0,8,0.25,0.19,0.0,0.0,1,48
naturelle de Genève.,0,8,0.25,0.19,0.0,0.0,1,48
49,1,6,0.2,0.72,0.0,0.0,0,49
DÉCAPODES CRÉTACIQUES,1,6,0.29,0.29,0.0,0.02,1,49
Fig. 2. — Homarus,1,8,0.43,0.06,0.02,0.0,1,49
"pelseneeri Van Straelen, vu",1,8,0.34,0.27,0.0,0.0,1,49
du côté gauche.,0,8,0.16,0.57,0.0,0.0,1,49
Grandeur naturelle. Type. — Gisement : Albien. — Localité:,0,8,0.25,0.1,0.0,0.0,1,49
"Escordal (Ardennes). — Collections géologiques de la Sorbonne,",0,8,0.25,0.1,0.0,0.0,1,49
à Paris.,0,8,0.25,0.1,0.0,0.0,1,49
Fig. 3. — Homarus,1,8,0.43,0.06,0.0,0.0,1,49
"pelseneeri Yan Straelen, vue tergale. Grandeur",1,8,0.34,0.27,0.0,0.0,1,49
naturelle. Paratype. — Gisement: Albien. — Localité: Escordal,0,8,0.25,0.1,0.0,0.0,1,49
"(Ardennes). — Collections géologiques de la Sorbonne, à Paris.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 4. — Homarus,1,8,0.43,0.06,0.0,0.0,1,49
"trigeri (A. Milne-Edwards) MS), vu du côté",1,8,0.34,0.27,0.0,0.0,1,49
gauche. Grandeur naturelle. Topotype. — Gisement: Cénoma-,0,8,0.25,0.1,0.0,0.0,1,49
"nien. — Localité: Le Mans (Sarthe, France). — Musée muni-",0,8,0.25,0.1,0.0,0.0,1,49
cipal du Mans.,0,8,0.25,0.1,0.0,0.0,1,49
Fig. 5. — Galatheites,1,8,0.43,0.06,0.0,0.0,1,49
"neocomiensis Van Straelen, vue tergale. Gran-",1,8,0.34,0.28,0.0,0.0,1,49
deur naturelle. Type. — Gisement : Hauterivien. — Localité:,0,8,0.25,0.1,0.0,0.0,1,49
"Auxerre (Yonne, France). — Musée municipal d'Auxerre.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 6. — Le même. Agrandi six fois.,0,8,0.25,0.06,0.0,0.0,1,49
Fig. 7. — Prosopon icaunensis,1,8,0.43,0.06,0.0,0.0,1,49
"Van Straelen, vue tergale. Grandeur",0,8,0.16,0.38,0.0,0.0,1,49
naturelle. Type. — Gisement: Néocomien. — Localité: Auxerre,0,8,0.25,0.1,0.0,0.0,1,49
"(Yonne, France). — Musée municipal d'Auxerre.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 8. — Le même. Agrandi trois fois.,0,8,0.25,0.06,0.0,0.02,1,49
PLANCHE I V .,0,6,0.11,0.34,0.02,0.01,1,49
Fig. 1. — Pithonoton,1,8,0.43,0.06,0.01,0.0,1,49
"planum Van Straelen, vue tergale. Grandeur",1,8,0.34,0.29,0.0,0.0,1,49
naturelle. Type. — Gisement: Néocomien. •— Localité: Auxerre,0,8,0.25,0.1,0.0,0.0,1,49
"(Yonne, France). — Musée municipal d'Auxerre.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 2. — Le même. Agrandi quatre fois.,0,8,0.25,0.06,0.0,0.0,1,49
Fig. 3. •— Cyclothyreus,1,8,0.43,0.06,0.0,0.0,1,49
"autissiodorensis Van Straelen, vue tergale.",1,8,0.34,0.31,0.0,0.0,1,49
Grandeur naturelle. Type. — Gisement: Néocomien. — Localité:,0,8,0.25,0.1,0.0,0.0,1,49
"Auxerre (Yonne, France). — Musée municipal d'Auxerre.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 4. — Homolopsis,1,8,0.43,0.06,0.0,0.0,1,49
"tuberculata Van Straelen, vue tergale. Gran-",1,8,0.34,0.29,0.0,0.0,1,49
deur naturelle. Type. — Gisement: Néocomien. — Localité: Au-,0,8,0.25,0.1,0.0,0.0,1,49
"xerre (Yonne, France). — Musée municipal d'Auxerre.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 5. — Homolopsis,1,8,0.43,0.06,0.0,0.0,1,49
"spinosa Van Straelen, vue tergale. Grandeur",1,8,0.34,0.29,0.0,0.0,1,49
naturelle. Type. — Gisement : Albien. — Localité : Valcourt,0,8,0.25,0.1,0.0,0.0,1,49
"(Haute-Marne, France). — Collection de M. J. Houdard, à Au-",0,8,0.25,0.1,0.0,0.0,1,49
xerre.,0,8,0.25,0.1,0.0,0.0,1,49
Fig. 6. — Paranecrocarcinus,1,8,0.43,0.06,0.0,0.0,1,49
"hexagonalis Van Straelen, vue tergale.",1,8,0.34,0.36,0.0,0.0,1,49
Grandeur naturelle. Type. — Gisement: Néocomien. — Localité:,0,8,0.25,0.1,0.0,0.0,1,49
"Migraine, près Auxerre. — Musée d'Histoire naturelle de Ge-",0,8,0.25,0.1,0.0,0.0,1,49
nève.,0,8,0.25,0.1,0.0,0.0,1,49
Fig. 7. — Le même. Agrandi trois fois.,0,8,0.25,0.06,0.0,0.0,1,49
Fig. 8. — Genomanocarcimis,1,8,0.43,0.06,0.0,0.0,1,49
"inflatus (A. Milne-Edwards MS), vue",1,8,0.34,0.36,0.0,0.0,1,49
tergale. Grandeur naturelle. Topotype. — Gisement: Cénoma-,0,8,0.25,0.1,0.0,0.0,1,49
"nien. — Localité: Le Mans (Sarthe, France). — Collections géo-",0,8,0.25,0.1,0.0,0.0,1,49
"logiques de la Sorbonne, à Paris.",0,8,0.25,0.1,0.0,0.0,1,49
Fig. 9. — Lithophylax,1,8,0.43,0.06,0.0,0.0,1,49
"trigeri A. Milne-Edwards et Brocchi, vue",1,8,0.34,0.31,0.0,0.0,1,49
tergale. Grandeur naturelle. Topotype. — Gisement : Cénoma-,0,8,0.25,0.1,0.0,0.0,1,49
"nien. — Localité: Le Mans (Sarthe, France). — Musée muni-",0,8,0.25,0.1,0.0,0.0,1,49
cipal du Mans.,0,8,0.25,0.1,0.0,0.0,1,49
Y.,1,7,0.23,0.34,0.0,0.0,0,50
VAN STRAELEN. — CRUSTACÉS,1,6,0.29,0.35,0.0,0.0,1,50
50,0,6,0.11,0.14,0.0,0.03,0,50
INDEX,0,8,0.16,0.45,0.03,0.02,1,50
Eryon sp,1,8,0.43,0.2,0.02,0.0,1,50
1,0,8,0.07,0.77,0.0,0.0,0,50
Linuparus dentatus,1,8,0.43,0.2,0.0,0.0,1,50
2,1,8,0.25,0.77,0.0,0.0,0,50
Glyphea carteri,1,8,0.43,0.2,0.0,0.0,1,50
5,1,8,0.25,0.77,0.0,0.0,0,50
Mecochirus houdardi,1,8,0.43,0.2,0.0,0.0,1,50
5,1,8,0.25,0.77,0.0,0.0,0,50
Meyeria ornât a ...,1,8,0.43,0.2,0.0,0.0,1,50
6,1,8,0.25,0.77,0.0,0.0,0,50
Meyeria sp,1,8,0.43,0.2,0.0,0.0,1,50
6,1,8,0.25,0.77,0.0,0.0,0,50
Meyeria sp,1,8,0.43,0.2,0.0,0.0,1,50
7,1,8,0.25,0.77,0.0,0.0,0,50
Eryma loryi,1,8,0.43,0.2,0.0,0.0,1,50
7,1,8,0.25,0.77,0.0,0.0,0,50
Eryma tithonia,1,8,0.43,0.2,0.0,0.0,1,50
8,1,8,0.25,0.77,0.0,0.0,0,50
Eryma tuberculata,1,8,0.43,0.2,0.0,0.0,1,50
9,1,8,0.25,0.77,0.0,0.0,0,50
10,1,8,0.25,0.75,0.0,0.0,0,50
Enoploclytia glaessneri,1,8,0.43,0.2,0.0,0.0,1,50
Enoploclytia sussexiensis,1,8,0.43,0.2,0.0,0.0,1,50
12,1,8,0.25,0.76,0.0,0.0,0,50
Enoploclytia leachi,1,8,0.43,0.2,0.0,0.0,1,50
12,1,8,0.25,0.76,0.0,0.0,0,50
Homarus dentatus,1,8,0.43,0.2,0.0,0.0,1,50
14,1,8,0.25,0.76,0.0,0.0,0,50
Homarxis edwardsi,1,8,0.43,0.2,0.0,0.0,1,50
14,1,8,0.25,0.76,0.0,0.0,0,50
Homarus cf. benedem,1,8,0.43,0.2,0.0,0.0,1,50
17,1,8,0.25,0.76,0.0,0.0,0,50
Homarus longimanus,1,8,0.43,0.2,0.0,0.0,1,50
17,1,8,0.25,0.76,0.0,0.0,0,50
Homarus pelseneeri,1,8,0.43,0.2,0.0,0.0,1,50
18,1,8,0.25,0.76,0.0,0.0,0,50
Homarus trigeri,1,8,0.43,0.2,0.0,0.0,1,50
20,1,8,0.25,0.76,0.0,0.0,0,50
Gallianassa cenomanensis,1,8,0.34,0.21,0.0,0.0,1,50
23,1,8,0.25,0.76,0.0,0.0,0,50
Orhomalus ? tombecki,1,8,0.34,0.21,0.0,0.0,1,50
••• 24,1,8,0.34,0.7,0.0,0.0,1,50
Galatheites neocomiensis,1,8,0.34,0.21,0.0,0.0,1,50
24,1,8,0.25,0.76,0.0,0.0,0,50
Plagiophthalmus oviformis,1,8,0.43,0.2,0.0,0.0,1,50
25,1,8,0.25,0.76,0.0,0.0,0,50
Prosopon icaunensis,1,8,0.34,0.21,0.0,0.0,1,50
25,1,8,0.25,0.76,0.0,0.0,0,50
Pithonoton planum,1,8,0.34,0.21,0.0,0.0,1,50
27,1,8,0.25,0.76,0.0,0.0,0,50
Cyphonotus incertus,1,8,0.34,0.21,0.0,0.0,1,50
28,1,8,0.25,0.76,0.0,0.0,0,50
Palaeodromites octodentatus,1,8,0.34,0.21,0.0,0.0,1,50
28,1,8,0.25,0.76,0.0,0.0,0,50
• • •,1,9,0.36,0.7,0.0,0.0,1,50
Gyclothyreus autissiodorensis,1,8,0.34,0.21,0.0,0.0,1,50
29,1,8,0.25,0.77,0.0,0.0,0,50
Homolopsis tuberculata,1,8,0.34,0.21,0.0,0.0,1,50
31,1,8,0.25,0.76,0.0,0.0,0,50
Homolopsis edwardsi,1,8,0.34,0.21,0.0,0.0,1,50
33,1,8,0.25,0.76,0.0,0.0,0,50
Homolopsis spinosa,1,8,0.34,0.21,0.0,0.0,1,50
Necrocarcinus labeschei,1,8,0.34,0.21,0.0,0.0,1,50
35,1,8,0.25,0.76,0.0,0.0,0,50
Necrocarcinus woodwardi,1,8,0.34,0.21,0.0,0.0,1,50
36,1,8,0.25,0.76,0.0,0.0,0,50
36,1,5,0.18,0.77,0.0,0.0,0,50
Paranecrocarcinus hexagonaiis,1,8,0.34,0.21,0.0,0.0,1,50
CenomanocarcvnUs,1,10,0.38,0.21,0.0,0.0,1,50
inflatus,1,10,0.38,0.41,0.0,0.0,1,50
37,1,10,0.29,0.77,0.0,0.0,0,50
Notopocorystes broderipi,1,8,0.34,0.21,0.0,0.0,1,50
39,1,8,0.25,0.76,0.0,0.0,0,50
Notopocorystes carteri,1,8,0.34,0.21,0.0,0.0,1,50
40,1,8,0.25,0.76,0.0,0.0,0,50
40,1,5,0.18,0.77,0.0,0.0,0,50
Notopocorystes stokesi,1,8,0.34,0.21,0.0,0.0,1,50
Raninella trigeri,1,8,0.34,0.21,0.0,0.0,1,50
41,1,8,0.25,0.76,0.0,0.0,0,50
42,1,5,0.18,0.77,0.0,0.0,0,50
Etyus martini,1,8,0.34,0.21,0.0,0.0,1,50
42,1,5,0.18,0.77,0.0,0.0,0,50
Caloxanthus formosus,1,8,0.34,0.21,0.0,0.0,1,50
43,1,5,0.18,0.77,0.0,0.0,0,50
Xanthopsis sp,1,8,0.34,0.21,0.0,0.0,1,50
; •••,1,8,0.34,0.69,0.0,0.0,1,50
43,1,5,0.18,0.77,0.0,0.0,0,50
Lithophylax trigeri,1,8,0.34,0.21,0.0,0.0,1,50
45,0,6,0.02,0.76,0.0,0.0,0,50
Bibliographie,0,10,0.2,0.21,0.0,0.0,1,50
4 8,1,8,0.25,0.76,0.0,0.0,0,50
Explication des planches,1,8,0.34,0.21,0.0,0.0,1,50
Bull. Mus. Roy. Hist. Nat. Belg. -,0,8,0.25,0.0,0.0,0.0,1,51
"T. XII, no 45, 1936.",0,8,0.16,0.32,0.0,0.0,1,51
Pl. J.,0,8,0.16,0.83,0.0,0.0,1,51
"Mededeel K. Natuurh. Mus. Belg. — D. XII,",0,8,0.25,0.0,0.0,0.0,1,51
"IF 45, 1936.",1,8,0.48,0.39,0.0,0.2,1,51
Fig. 4. - Mecochirus houdardi,0,8,0.29,0.43,0.2,0.0,1,51
Van Straelen.,1,6,0.29,0.73,0.0,0.0,1,51
im*,1,46,1.0,0.44,0.0,0.0,0,51
"Type, x 4.",1,6,0.29,0.61,0.0,0.0,1,51
Fig. 1. — Eryon sp.,0,8,0.25,0.05,0.0,0.0,1,51
",",0,29,0.53,0.43,0.0,0.0,0,51
Gr. nat.,1,6,0.39,0.11,0.0,0.02,1,51
Fig. 3 — Mecochirus houdardi,0,8,0.16,0.42,0.02,0.0,1,51
Van Straelen.,1,6,0.29,0.73,0.0,0.0,1,51
Type. Gr. nat.,1,6,0.43,0.59,0.0,0.27,1,51
Fig. 2. — Linuparus dentatus,0,8,0.38,0.07,0.27,0.0,1,51
(A. Milne-Edwards MS.),1,6,0.39,0.13,0.0,0.0,1,51
Gr. nat.,1,6,0.52,0.19,0.0,0.15,1,51
Fig. 5. — Meyeria sp.,0,8,0.29,0.59,0.15,0.0,1,51
Gr. nat.,1,6,0.29,0.66,0.0,0.0,1,51
Fig. 6. - Eryma loryi,0,8,0.25,0.07,0.0,0.0,1,51
Van Straelen.,1,6,0.29,0.28,0.0,0.0,1,51
Type. Gr. nat.,1,6,0.39,0.19,0.0,0.0,1,51
"Bull. Mus. Roy. Hist. Nat. Belg. - T. XII, no 45, 1936.",0,8,0.25,0.0,0.0,0.0,1,52
Pl. II.,0,10,0.2,0.8,0.0,0.0,1,52
"Mededeel K, Natuurh. Mus. Belg. - D. XII, nr 45, 1936.",0,8,0.25,0.0,0.0,0.0,1,52
"Bull. Mus. Roy. Hist. Nat. Belg. - T. XII, no 45, 1936.",0,8,0.25,0.0,0.0,0.0,1,53
Pl. IH.,0,8,0.16,0.77,0.0,0.0,1,53
Mededeel K. Natuurh. Mus. Belg. -,0,8,0.25,0.0,0.0,0.0,1,53
"D. XII, m 45, 1936.",0,8,0.29,0.3,0.0,0.22,1,53
Fig. 1. — Enoploclytia,0,8,0.29,0.59,0.22,0.0,1,53
glaessneri,0,8,0.16,0.6,0.0,0.0,1,53
Van Straelen.,1,6,0.29,0.69,0.0,0.0,1,53
Type. Gr. nat.,1,6,0.29,0.64,0.0,0.08,1,53
Fig. 2. — Homarus pelseneeri,0,8,0.25,0.0,0.08,0.0,1,53
Van Straelen.,1,6,0.29,0.28,0.0,0.0,1,53
Type. Gr. nat.,1,6,0.39,0.15,0.0,0.01,1,53
Fig. 3. — Homarus,0,8,0.16,0.64,0.01,0.0,1,53
pelseneeri,0,8,0.16,0.61,0.0,0.0,1,53
Van Straelen.,1,6,0.29,0.7,0.0,0.0,1,53
Paratype. Gr. nat.,1,6,0.29,0.66,0.0,0.06,1,53
Fig. 5.,0,8,0.16,0.71,0.06,0.0,1,53
Galatheites,0,8,0.16,0.69,0.0,0.0,1,53
neocomiensis,0,8,0.16,0.56,0.0,0.0,1,53
Van Straelen.,1,6,0.29,0.68,0.0,0.0,1,53
Fig. 4. — Homarus trigeri,0,8,0.25,0.09,0.0,0.0,1,53
Type. Gr. nat.,1,6,0.29,0.63,0.0,0.0,1,53
(A. Milne-Edwards MS.),1,6,0.39,0.06,0.0,0.0,1,53
Topotype. Gr. nat.,1,6,0.43,0.26,0.0,0.11,1,53
Fig. 7.,0,8,0.29,0.36,0.11,0.0,1,53
Prosopon,0,8,0.16,0.34,0.0,0.0,1,53
icaunensis,0,8,0.16,0.34,0.0,0.0,1,53
Van Straelen.,1,6,0.29,0.33,0.0,0.0,1,53
Type. Gr. nat.,1,6,0.29,0.33,0.0,0.06,1,53
Fig. 8. — Prosopon icaunensis,0,8,0.25,0.06,0.06,0.0,1,53
Fig. 6. — Galatheites,0,8,0.16,0.55,0.0,0.0,1,53
Van Straelen.,1,6,0.39,0.16,0.0,0.0,1,53
neocomiensis,0,8,0.16,0.54,0.0,0.0,1,53
Van Straelen.,1,6,0.29,0.66,0.0,0.0,1,53
"Type, x 3.",1,6,0.39,0.17,0.0,0.0,1,53
Bull. Mus. Roy. Hist. Nat. Belg.,0,8,0.25,0.0,0.0,0.0,1,54
"T. XII, no 45, 1936.",0,8,0.16,0.3,0.0,0.0,1,54
Pl. IV.,0,8,0.16,0.78,0.0,0.0,1,54
Mededeel K. Natuurh. Mus. Belg.,0,8,0.25,0.0,0.0,0.0,1,54
"D. XII, nr 45, 1936.",0,8,0.29,0.3,0.0,0.12,1,54
Fig. 6. — Paranecrocarcinus-,0,8,0.29,0.55,0.12,0.0,1,54
hexagonalis,0,8,0.16,0.58,0.0,0.0,1,54
Van Straelen.,1,6,0.29,0.69,0.0,0.0,1,54
Fig. 1. — Pithonoton,0,8,0.25,0.05,0.0,0.0,1,54
Type. Gr. nat.,1,6,0.29,0.64,0.0,0.0,1,54
planum,0,8,0.25,0.07,0.0,0.0,1,54
Van Straelen.,1,6,0.39,0.14,0.0,0.0,1,54
Fig. 3. — Cyclothyreus,0,8,0.16,0.29,0.0,0.0,1,54
Type. Gr. nat.,1,6,0.39,0.11,0.0,0.0,1,54
autissiodorensis,0,8,0.16,0.33,0.0,0.0,1,54
Van Straelen.,1,6,0.29,0.36,0.0,0.0,1,54
Type. Gr. nat.,1,6,0.29,0.35,0.0,0.07,1,54
Fig. 7. — Paraneerocarcinus,0,8,0.16,0.55,0.07,0.0,1,54
Fig. 4. — Homo-,0,8,0.16,0.34,0.0,0.0,1,54
hexagonalis,0,8,0.16,0.58,0.0,0.0,1,54
lopsis tuberculata,0,8,0.16,0.33,0.0,0.0,1,54
Van Straelen.,1,6,0.29,0.69,0.0,0.0,1,54
Van Straelen.,1,6,0.29,0.37,0.0,0.0,1,54
"Type, x 3.",1,6,0.29,0.66,0.0,0.0,1,54
Type. Gr. nat.,1,6,0.29,0.37,0.0,0.08,1,54
Fig. 5. — Homo-,0,8,0.16,0.32,0.08,0.0,1,54
Fig. 2. — Pithonoton,0,8,0.25,0.05,0.0,0.0,1,54
Fig. 9. — Lithophylax trigeri,0,8,0.16,0.54,0.0,0.0,1,54
lopsis spinosa,0,8,0.16,0.34,0.0,0.0,1,54
planum,0,8,0.25,0.06,0.0,0.0,1,54
A. Milne-Edwards et Brocchi.,1,6,0.29,0.57,0.0,0.0,1,54
Van Straelen.,1,6,0.39,0.13,0.0,0.0,1,54
Van Straelen.,1,6,0.29,0.35,0.0,0.0,1,54
Topotype. Gr. nat.,1,6,0.29,0.62,0.0,0.0,1,54
"Type, x 4.",1,6,0.39,0.12,0.0,0.0,1,54
Type. Gr. nat.,1,6,0.43,0.35,0.0,0.31,1,54
Fig. 8. — Cenomanocarcinus inflatus,0,8,0.29,0.23,0.31,0.0,1,54
(A. Milne-Edwards MS.),1,6,0.29,0.32,0.0,0.0,1,54
Topotype. Gr. nat.,1,6,0.29,0.34,0.0,0.0,1,54
"Imprimeur du Roi, Bruxelles.",0,8,0.16,0.54,0.0,0.0,1,55
"GOEMAERE,",0,6,0.11,0.44,0.0,0.0,1,55
